
<!doctype html>
<!-- The following comment is called a MOTW comment and is necessary for the TiddlyIE Internet Explorer extension -->
<!-- saved from url=(0021)https://tiddlywiki.com -->
<html lang="en-GB">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<!--~~ Raw markup for the top of the head section ~~-->

<meta http-equiv="X-UA-Compatible" content="IE=Edge"/>
<meta name="application-name" content="TiddlyWiki" />
<meta name="generator" content="TiddlyWiki" />
<meta name="tiddlywiki-version" content="5.2.2" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
<meta name="mobile-web-app-capable" content="yes"/>
<meta name="format-detection" content="telephone=no" />
<meta name="copyright" content="TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)

Copyright (c) 2004-2007, Jeremy Ruston
Copyright (c) 2007-2022, UnaMesa Association
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." />
<link id="faviconLink" rel="shortcut icon" href="favicon.ico">
<title>ASLSJ Dictionary

— Lookup Words
</title>
<!--~~ This is a Tiddlywiki file. The points of interest in the file are marked with this pattern ~~-->

<!--~~ Raw markup ~~-->



</head>
<body class="tc-body">
<!--~~ Raw markup for the top of the body section ~~-->

<!--~~ Static styles ~~-->
<div id="styleArea">
<style data-tiddler-title="$:/boot/boot.css" data-tiddler-type="text/css" type="text/css">/*
Basic styles used before we boot up the parsing engine
*/

/*
Error message and password prompt
*/

.tc-error-form {
	font-family: sans-serif;
	color: #fff;
	z-index: 20000;
	position: fixed;
	background-color: rgb(255, 75, 75);
	border: 8px solid rgb(255, 0, 0);
	border-radius: 8px;
	width: 50%;
	margin-left: 25%;
	margin-top: 4em;
	padding: 0 2em 1em 2em;
}

.tc-error-form h1 {
	text-align: center;
}

.tc-error-prompt {
	text-align: center;
	color: #000;
}

.tc-error-message {
	overflow: auto;
	max-height: 40em;
	padding-right: 1em;
	margin: 1em 0;
	white-space: pre-line;
}

.tc-password-wrapper {
    font-family: sans-serif;
	z-index: 20000;
	position: fixed;
	text-align: center;
	width: 200px;
	top: 4em;
	left: 50%;
	margin-left: -144px; /* - width/2 - paddingHorz/2 - border */
	padding: 16px 16px 16px 16px;
	border-radius: 8px;
}

.tc-password-wrapper {
	color: #000;
	text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
	background-color: rgb(197, 235, 183);
	border: 8px solid rgb(164, 197, 152);
}

.tc-password-wrapper form {
	text-align: left;
}

.tc-password-wrapper h1 {
	font-size: 16px;
	line-height: 20px;
	padding-bottom: 16px;
}

.tc-password-wrapper input {
	width: 100%;
}
</style>
</div>
<!--~~ Static content for Google and browsers without JavaScript ~~-->
<noscript>
<div id="splashArea">


<p>This <a class="tc-tiddlylink-external" href="https://tiddlywiki.com" rel="noopener noreferrer" target="_blank">TiddlyWiki</a> contains the following tiddlers:</p><p><ul>

<li>$:/build</li>

<li>$:/config/AutoSave</li>

<li>$:/config/MissingLinks</li>

<li>$:/config/Navigation/openLinkFromOutsideRiver</li>

<li>$:/config/NewJournal/Tags</li>

<li>$:/config/NewJournal/Title</li>

<li>$:/config/SaverFilter</li>

<li>$:/config/ShortcutInfo/card-titles</li>

<li>$:/config/ShortcutInfo/font-large</li>

<li>$:/config/ShortcutInfo/font-normal</li>

<li>$:/config/ShortcutInfo/home-view</li>

<li>$:/config/ShortcutInfo/palette-dim</li>

<li>$:/config/ShortcutInfo/preview-card</li>

<li>$:/config/ShortcutInfo/save-all-changes</li>

<li>$:/config/shortcuts/card-titles</li>

<li>$:/config/shortcuts/font-large</li>

<li>$:/config/shortcuts/font-normal</li>

<li>$:/config/shortcuts/home-view</li>

<li>$:/config/shortcuts/palette-dim</li>

<li>$:/config/shortcuts/preview-card</li>

<li>$:/config/shortcuts/save-all-changes</li>

<li>$:/config/TextEditor/EnableToolbar</li>

<li>$:/config/Tiddlers/TitleLinks</li>

<li>$:/config/ViewToolbarButtons/Visibility/$:/positivesigner/gcmpr/btn gcmpr card</li>

<li>$:/config/WikiParserRules/Inline/wikilink</li>

<li>$:/core</li>

<li>$:/core/save/all</li>

<li>$:/db/img/A-A baseball ad ae MR.png</li>

<li>$:/db/img/A-A baseball ad ae ST.png</li>

<li>$:/db/index/img</li>

<li>$:/db/index/setting</li>

<li>$:/db/index/tables</li>

<li>$:/db/index/word</li>

<li>$:/db/index/word-part</li>

<li>$:/db/setting/mirror_image</li>

<li>$:/db/word-part/A brn bkrqr MR.png</li>

<li>$:/db/word-part/A brn bkrqr ST.png</li>

<li>$:/db/word-part/A brn bvkr MR.png</li>

<li>$:/db/word-part/A brn bvkr ST.png</li>

<li>$:/db/word-part/A prn pkqr MR.png</li>

<li>$:/db/word-part/A prn pkqr ST.png</li>

<li>$:/db/word-part/A prn pvrkr MR.png</li>

<li>$:/db/word-part/A prn pvrkr ST.png</li>

<li>$:/db/word-part/A-A brn prn bkrqr pkqr tq Advr FqFk bv pvr MR.png</li>

<li>$:/db/word-part/A-A brn prn bkrqr pkqr tq Advr FqFk bv pvr ST.png</li>

<li>$:/db/word-part/A-A brn prn bkrqr pkqr tq ADvr FqFk bv pvr SV.png</li>

<li>$:/db/word-part/HS-A brnkrqr MR.png</li>

<li>$:/db/word-part/HS-A brnkrqr ST.png</li>

<li>$:/db/word-part/HS-A brnqkr MR.png</li>

<li>$:/db/word-part/HS-A brnqkr ST.png</li>

<li>$:/db/word-part/HS-A prnkqr MR.png</li>

<li>$:/db/word-part/HS-A prnkqr ST.png</li>

<li>$:/db/word-part/HS-A prnqk MR.png</li>

<li>$:/db/word-part/HS-A prnqk ST.png</li>

<li>$:/db/word-part/HS-A-A brn prn bkrqr pkqr tq ADvr MR.png</li>

<li>$:/db/word-part/HS-A-A brn prn bkrqr pkqr tq ADvr ST.png</li>

<li>$:/db/word-part/HS-A-A brn prn bv pvr tk AEvr MR.png</li>

<li>$:/db/word-part/HS-A-A brn prn bv pvr tk AEvr ST.png</li>

<li>$:/db/word-part/MV-q-q z MR.png</li>

<li>$:/db/word-part/MV-q-q z ST.png</li>

<li>$:/db/word/baseball</li>

<li>$:/DefaultTiddlers</li>

<li>$:/Import</li>

<li>$:/isEncrypted</li>

<li>$:/language/DefaultNewTiddlerTitle</li>

<li>$:/palette</li>

<li>$:/palettes/Vanilla-dim</li>

<li>$:/positivesigner/audit/tags</li>

<li>$:/positivesigner/design/features</li>

<li>$:/positivesigner/design/startup</li>

<li>$:/positivesigner/design/tags</li>

<li>$:/positivesigner/design/text</li>

<li>$:/positivesigner/div-pop/DivPop btn</li>

<li>$:/positivesigner/div-pop/DivPop glbl</li>

<li>$:/positivesigner/div-pop/DivPop.svg</li>

<li>$:/positivesigner/gcmpr/btn gcmpr card</li>

<li>$:/positivesigner/gcmpr/mcr gcmpr_compare_card</li>

<li>$:/positivesigner/gcmpr/temp</li>

<li>$:/positivesigner/gcmpr/temp$</li>

<li>$:/positivesigner/gcmpr/textarea</li>

<li>$:/positivesigner/gcmpr/textarea-stylesheet</li>

<li>$:/positivesigner/startup/filter browser</li>

<li>$:/positivesigner/startup/filter file</li>

<li>$:/positivesigner/startup/filter path</li>

<li>$:/positivesigner/startup/filter psgr</li>

<li>$:/positivesigner/startup/filter wikimove</li>

<li>$:/positivesigner/startup/keyboard card-titles</li>

<li>$:/positivesigner/startup/keyboard font-large</li>

<li>$:/positivesigner/startup/keyboard font-normal</li>

<li>$:/positivesigner/startup/keyboard home-view</li>

<li>$:/positivesigner/startup/keyboard palette-dim</li>

<li>$:/positivesigner/startup/keyboard preview-card</li>

<li>$:/positivesigner/startup/keyboard save-all-changes</li>

<li>$:/positivesigner/startup/mcr design</li>

<li>$:/positivesigner/startup/mcr disp</li>

<li>$:/positivesigner/startup/mcr link</li>

<li>$:/positivesigner/startup/mcr save</li>

<li>$:/positivesigner/startup/ptest</li>

<li>$:/positivesigner/startup/stylesheet MediaPrint</li>

<li>$:/positivesigner/startup/template card-footer</li>

<li>$:/positivesigner/tag/audit</li>

<li>$:/positivesigner/tag/design</li>

<li>$:/positivesigner/tag/div-pop</li>

<li>$:/positivesigner/tag/gcmpr</li>

<li>$:/positivesigner/tag/startup</li>

<li>$:/positivesigner/tag/tag</li>

<li>$:/positivesigner/tag/text</li>

<li>$:/positivesigner/text/mcr search</li>

<li>$:/SiteSubtitle</li>

<li>$:/SiteTitle</li>

<li>$:/state/showeditpreview</li>

<li>$:/state/sidebar</li>

<li>$:/state/tab/sidebar--595412856</li>

<li>$:/status/RequireReloadDueToPluginChange</li>

<li>$:/StoryList</li>

<li>$:/themes/tiddlywiki/snowwhite</li>

<li>$:/themes/tiddlywiki/vanilla</li>

<li>$:/themes/tiddlywiki/vanilla/options/sidebarlayout</li>

<li>$:/themes/tiddlywiki/vanilla/options/stickytitles</li>

<li>ASLSJ Dictionary</li>

<li>INDEX</li>

<li>Word Gloss</li>

</ul>
</p>



<style>
.tc-remove-when-wiki-loaded {display: none;}
</style>

</div>
</noscript>
<!--~~ Ordinary tiddlers ~~-->
<script class="tiddlywiki-tiddler-store" type="application/json">[
{"title":"$:/build","commit":"926b7808b3870ab80603da919815d7d6dff33d17","text":"Built from branch 'tiddlywiki-com' at commit 926b7808b3870ab80603da919815d7d6dff33d17 of https://github.com/Jermolene/TiddlyWiki5 at 2022-06-28 17:01:11 UTC\n"},
{"created":"20210523110324335","text":"no","title":"$:/config/AutoSave","modified":"20220531050339905","tags":"$:/positivesigner/tag/startup"},
{"created":"20220531044958338","text":"no","title":"$:/config/MissingLinks","modified":"20220531045013793","tags":"$:/positivesigner/tag/startup"},
{"created":"20201114120824003","text":"bottom","title":"$:/config/Navigation/openLinkFromOutsideRiver","modified":"20220531050219166","tags":"$:/positivesigner/tag/startup"},
{"created":"20220530231741177","title":"$:/config/NewJournal/Tags","text":"","modified":"20220530231741177"},
{"created":"20220530231715546","title":"$:/config/NewJournal/Title","text":"YYYY-MM-DD hh:mm:ss","modified":"20220530231737355"},
{"created":"20220531064927431","text":"[all[]] -[prefix[$:/HistoryList]] -[prefix[$:/StoryList]] -[status[pending]plugin-type[import]] -[[$:/isEncrypted]] -[[$:/UploadName]] -[prefix[$:/state/]] -[prefix[$:/temp/]] -[prefix[$:/positivesignertemp/]]\n","title":"$:/config/SaverFilter","modified":"20220531065940961","tags":"$:/positivesigner/tag/startup $:/positivesigner/tag/gcmpr"},
{"created":"20210904202552921","text":"","title":"$:/config/ShortcutInfo/card-titles","modified":"20220531052332389","tags":"$:/positivesigner/tag/startup"},
{"created":"20200411063056939","text":"","title":"$:/config/ShortcutInfo/font-large","modified":"20220531062225006","tags":"$:/positivesigner/tag/startup"},
{"created":"20200411063158865","text":"","title":"$:/config/ShortcutInfo/font-normal","modified":"20220531062209401","tags":"$:/positivesigner/tag/startup"},
{"created":"20200314145912234","text":"","title":"$:/config/ShortcutInfo/home-view","modified":"20220531050910954","tags":"$:/positivesigner/tag/startup"},
{"created":"20211003015356797","text":"","title":"$:/config/ShortcutInfo/palette-dim","modified":"20220531052451618","tags":"$:/positivesigner/tag/startup"},
{"created":"20210411090434671","text":"","title":"$:/config/ShortcutInfo/preview-card","modified":"20220531052108611","tags":"$:/positivesigner/tag/startup"},
{"created":"20201114071247619","text":"","title":"$:/config/ShortcutInfo/save-all-changes","modified":"20220531040122434","tags":"$:/positivesigner/tag/startup"},
{"created":"20210904202702752","text":"alt-T","title":"$:/config/shortcuts/card-titles","modified":"20220531052345853","tags":"$:/positivesigner/tag/startup"},
{"created":"20200411063126026","text":"ctrl-shift-Quote","title":"$:/config/shortcuts/font-large","modified":"20220531062146529","tags":"$:/positivesigner/tag/startup"},
{"created":"20200411063207876","text":"ctrl-shift-Comma","title":"$:/config/shortcuts/font-normal","modified":"20220531062126438","tags":"$:/positivesigner/tag/startup"},
{"created":"20200314150022726","text":"alt-H","title":"$:/config/shortcuts/home-view","modified":"20220531205512787","tags":"$:/positivesigner/tag/startup"},
{"created":"20211003015425563","text":"alt-C","title":"$:/config/shortcuts/palette-dim","modified":"20220531052430893","tags":"$:/positivesigner/tag/startup"},
{"created":"20210411090507118","text":"alt-V","title":"$:/config/shortcuts/preview-card","modified":"20220531052050213","tags":"$:/positivesigner/tag/startup"},
{"created":"20201114071306644","text":"alt-S","title":"$:/config/shortcuts/save-all-changes","modified":"20220531040200207","tags":"$:/positivesigner/tag/startup"},
{"created":"20201114120819491","text":"no","title":"$:/config/TextEditor/EnableToolbar","modified":"20220531051212123","tags":"$:/positivesigner/tag/startup"},
{"created":"20220703022907537","title":"$:/config/Tiddlers/TitleLinks","text":"no","modified":"20220703173221611"},
{"created":"20210215152122080","text":"hide","title":"$:/config/ViewToolbarButtons/Visibility/$:/positivesigner/gcmpr/btn gcmpr card","modified":"20220531065602302","tags":"$:/positivesigner/tag/gcmpr"},
{"created":"20201114120816634","text":"disable","title":"$:/config/WikiParserRules/Inline/wikilink","modified":"20220531044935597","tags":"$:/positivesigner/tag/startup"},
{"title":"$:/core","name":"Core","description":"TiddlyWiki5 core","author":"JeremyRuston","core-version":">=5.0.0","plugin-priority":"0","list":"readme","version":"5.2.2","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/Acknowledgements\":{\"title\":\"$:/Acknowledgements\",\"text\":\"TiddlyWiki incorporates code from these fine OpenSource projects:\\n\\n* [[The Stanford Javascript Crypto Library|http://bitwiseshiftleft.github.io/sjcl/]]\\n* [[The Jasmine JavaScript Test Framework|http://pivotal.github.io/jasmine/]]\\n* [[Normalize.css by Nicolas Gallagher|http://necolas.github.io/normalize.css/]]\\n\\nAnd media from these projects:\\n\\n* World flag icons from [[Wikipedia|http://commons.wikimedia.org/wiki/Category:SVG_flags_by_country]]\\n\"},\"$:/core/copyright.txt\":{\"title\":\"$:/core/copyright.txt\",\"type\":\"text/plain\",\"text\":\"TiddlyWiki created by Jeremy Ruston, (jeremy [at] jermolene [dot] com)\\n\\nCopyright (c) 2004-2007, Jeremy Ruston\\nCopyright (c) 2007-2022, UnaMesa Association\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n* Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n* Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"},\"$:/core/icon\":{\"title\":\"$:/core/icon\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M64 0l54.56 32v64L64 128 9.44 96V32L64 0zm21.127 95.408c-3.578-.103-5.15-.094-6.974-3.152l-1.42.042c-1.653-.075-.964-.04-2.067-.097-1.844-.07-1.548-1.86-1.873-2.8-.52-3.202.687-6.43.65-9.632-.014-1.14-1.593-5.17-2.157-6.61-1.768.34-3.546.406-5.34.497-4.134-.01-8.24-.527-12.317-1.183-.8 3.35-3.16 8.036-1.21 11.44 2.37 3.52 4.03 4.495 6.61 4.707 2.572.212 3.16 3.18 2.53 4.242-.55.73-1.52.864-2.346 1.04l-1.65.08c-1.296-.046-2.455-.404-3.61-.955-1.93-1.097-3.925-3.383-5.406-5.024.345.658.55 1.938.24 2.53-.878 1.27-4.665 1.26-6.4.47-1.97-.89-6.73-7.162-7.468-11.86 1.96-3.78 4.812-7.07 6.255-11.186-3.146-2.05-4.83-5.384-4.61-9.16l.08-.44c-3.097.59-1.49.37-4.82.628-10.608-.032-19.935-7.37-14.68-18.774.34-.673.664-1.287 1.243-.994.466.237.4 1.18.166 2.227-3.005 13.627 11.67 13.732 20.69 11.21.89-.25 2.67-1.936 3.905-2.495 2.016-.91 4.205-1.282 6.376-1.55 5.4-.63 11.893 2.276 15.19 2.37 3.3.096 7.99-.805 10.87-.615 2.09.098 4.143.483 6.16 1.03 1.306-6.49 1.4-11.27 4.492-12.38 1.814.293 3.213 2.818 4.25 4.167 2.112-.086 4.12.46 6.115 1.066 3.61-.522 6.642-2.593 9.833-4.203-3.234 2.69-3.673 7.075-3.303 11.127.138 2.103-.444 4.386-1.164 6.54-1.348 3.507-3.95 7.204-6.97 7.014-1.14-.036-1.805-.695-2.653-1.4-.164 1.427-.81 2.7-1.434 3.96-1.44 2.797-5.203 4.03-8.687 7.016-3.484 2.985 1.114 13.65 2.23 15.594 1.114 1.94 4.226 2.652 3.02 4.406-.37.58-.936.785-1.54 1.01l-.82.11zm-40.097-8.85l.553.14c.694-.27 2.09.15 2.83.353-1.363-1.31-3.417-3.24-4.897-4.46-.485-1.47-.278-2.96-.174-4.46l.02-.123c-.582 1.205-1.322 2.376-1.72 3.645-.465 1.71 2.07 3.557 3.052 4.615l.336.3z\\\" fill-rule=\\\"evenodd\\\"/>\u003C/svg>\"},\"$:/core/images/add-comment\":{\"title\":\"$:/core/images/add-comment\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-add-comment tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M56 56H36a8 8 0 100 16h20v20a8 8 0 1016 0V72h20a8 8 0 100-16H72V36a8 8 0 10-16 0v20zm-12.595 58.362c-6.683 7.659-20.297 12.903-36.006 12.903-2.196 0-4.35-.102-6.451-.3 9.652-3.836 17.356-12.24 21.01-22.874C8.516 94.28 0 79.734 0 63.5 0 33.953 28.206 10 63 10s63 23.953 63 53.5S97.794 117 63 117c-6.841 0-13.428-.926-19.595-2.638z\\\"/>\u003C/svg>\"},\"$:/core/images/advanced-search-button\":{\"title\":\"$:/core/images/advanced-search-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-advanced-search-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M74.565 87.985A47.776 47.776 0 0148 96C21.49 96 0 74.51 0 48S21.49 0 48 0s48 21.49 48 48c0 9.854-2.97 19.015-8.062 26.636l34.347 34.347a9.443 9.443 0 010 13.36 9.446 9.446 0 01-13.36 0l-34.36-34.358zM48 80c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32z\\\"/>\u003Ccircle cx=\\\"48\\\" cy=\\\"48\\\" r=\\\"8\\\"/>\u003Ccircle cx=\\\"28\\\" cy=\\\"48\\\" r=\\\"8\\\"/>\u003Ccircle cx=\\\"68\\\" cy=\\\"48\\\" r=\\\"8\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/auto-height\":{\"title\":\"$:/core/images/auto-height\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-auto-height tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M67.987 114.356l-.029-14.477a4 4 0 00-2.067-3.494l-15.966-8.813-1.933 7.502H79.9c4.222 0 5.564-5.693 1.786-7.58L49.797 71.572 48.01 79.15h31.982c4.217 0 5.564-5.682 1.795-7.575L49.805 55.517l-1.795 7.575h31.982c4.212 0 5.563-5.67 1.805-7.57l-16.034-8.105 2.195 3.57V35.614l9.214 9.213a4 4 0 105.656-5.656l-16-16a4 4 0 00-5.656 0l-16 16a4 4 0 105.656 5.656l9.13-9.13v15.288a4 4 0 002.195 3.57l16.035 8.106 1.804-7.57H48.01c-4.217 0-5.564 5.682-1.795 7.574l31.982 16.059 1.795-7.575H48.01c-4.222 0-5.564 5.693-1.787 7.579l31.89 15.923 1.787-7.578H47.992c-4.133 0-5.552 5.504-1.933 7.501l15.966 8.813-2.067-3.494.029 14.436-9.159-9.158a4 4 0 00-5.656 5.656l16 16a4 4 0 005.656 0l16-16a4 4 0 10-5.656-5.656l-9.185 9.184zM16 20h96a4 4 0 100-8H16a4 4 0 100 8z\\\"/>\u003C/svg>\"},\"$:/core/images/blank\":{\"title\":\"$:/core/images/blank\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-blank tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"/>\"},\"$:/core/images/bold\":{\"title\":\"$:/core/images/bold\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-bold tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M41.146 51.81V21.87h26.353c2.51 0 4.93.21 7.26.628 2.33.418 4.392 1.165 6.185 2.24 1.793 1.076 3.227 2.57 4.302 4.482 1.076 1.913 1.614 4.363 1.614 7.35 0 5.379-1.613 9.263-4.84 11.653-3.227 2.39-7.35 3.586-12.37 3.586H41.146zM13 0v128h62.028a65.45 65.45 0 0016.762-2.151c5.438-1.434 10.278-3.645 14.52-6.633 4.244-2.988 7.62-6.842 10.13-11.563 2.51-4.721 3.764-10.308 3.764-16.762 0-8.008-1.942-14.85-5.826-20.527-3.884-5.677-9.77-9.65-17.658-11.921 5.737-2.75 10.069-6.275 12.997-10.577 2.928-4.303 4.392-9.681 4.392-16.135 0-5.976-.986-10.995-2.958-15.059-1.972-4.063-4.75-7.32-8.336-9.77-3.585-2.45-7.888-4.213-12.907-5.289C84.888.538 79.33 0 73.235 0H13zm28.146 106.129V70.992H71.8c6.095 0 10.995 1.404 14.7 4.212 3.705 2.81 5.558 7.5 5.558 14.073 0 3.347-.568 6.096-1.703 8.247-1.136 2.151-2.66 3.854-4.572 5.11-1.912 1.254-4.123 2.15-6.633 2.688-2.51.538-5.139.807-7.888.807H41.146z\\\"/>\u003C/svg>\"},\"$:/core/images/cancel-button\":{\"title\":\"$:/core/images/cancel-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-cancel-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M64 76.314l-16.97 16.97a7.999 7.999 0 01-11.314 0c-3.118-3.118-3.124-8.19 0-11.313L52.686 65l-16.97-16.97a7.999 7.999 0 010-11.314c3.118-3.118 8.19-3.124 11.313 0L64 53.686l16.97-16.97a7.999 7.999 0 0111.314 0c3.118 3.118 3.124 8.19 0 11.313L75.314 65l16.97 16.97a7.999 7.999 0 010 11.314c-3.118 3.118-8.19 3.124-11.313 0L64 76.314zM64 129c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 1 0 29.654 0 65c0 35.346 28.654 64 64 64zm0-16c26.51 0 48-21.49 48-48S90.51 17 64 17 16 38.49 16 65s21.49 48 48 48z\\\"/>\u003C/svg>\"},\"$:/core/images/chevron-down\":{\"title\":\"$:/core/images/chevron-down\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-chevron-down tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M64.053 85.456a7.889 7.889 0 01-5.6-2.316L2.473 27.16a7.92 7.92 0 010-11.196c3.086-3.085 8.105-3.092 11.196 0L64.05 66.344l50.382-50.382a7.92 7.92 0 0111.195 0c3.085 3.086 3.092 8.105 0 11.196l-55.98 55.98a7.892 7.892 0 01-5.595 2.317z\\\"/>\u003Cpath d=\\\"M64.053 124.069a7.889 7.889 0 01-5.6-2.316l-55.98-55.98a7.92 7.92 0 010-11.196c3.086-3.085 8.105-3.092 11.196 0l50.382 50.382 50.382-50.382a7.92 7.92 0 0111.195 0c3.085 3.086 3.092 8.104 0 11.196l-55.98 55.98a7.892 7.892 0 01-5.595 2.316z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/chevron-left\":{\"title\":\"$:/core/images/chevron-left\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-chevron-left tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M47.544 64.053c0-2.027.77-4.054 2.316-5.6l55.98-55.98a7.92 7.92 0 0111.196 0c3.085 3.086 3.092 8.105 0 11.196L66.656 64.05l50.382 50.382a7.92 7.92 0 010 11.195c-3.086 3.085-8.105 3.092-11.196 0l-55.98-55.98a7.892 7.892 0 01-2.317-5.595z\\\"/>\u003Cpath d=\\\"M8.931 64.053c0-2.027.77-4.054 2.316-5.6l55.98-55.98a7.92 7.92 0 0111.196 0c3.085 3.086 3.092 8.105 0 11.196L28.041 64.05l50.382 50.382a7.92 7.92 0 010 11.195c-3.086 3.085-8.104 3.092-11.196 0l-55.98-55.98a7.892 7.892 0 01-2.316-5.595z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/chevron-right\":{\"title\":\"$:/core/images/chevron-right\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-chevron-right tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M83.456 63.947c0 2.027-.77 4.054-2.316 5.6l-55.98 55.98a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196L64.344 63.95 13.963 13.567a7.92 7.92 0 010-11.195c3.086-3.085 8.105-3.092 11.196 0l55.98 55.98a7.892 7.892 0 012.317 5.595z\\\"/>\u003Cpath d=\\\"M122.069 63.947c0 2.027-.77 4.054-2.316 5.6l-55.98 55.98a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196l50.382-50.382-50.382-50.382a7.92 7.92 0 010-11.195c3.086-3.085 8.104-3.092 11.196 0l55.98 55.98a7.892 7.892 0 012.316 5.595z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/chevron-up\":{\"title\":\"$:/core/images/chevron-up\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-chevron-up tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M63.947 44.544c2.027 0 4.054.77 5.6 2.316l55.98 55.98a7.92 7.92 0 010 11.196c-3.086 3.085-8.105 3.092-11.196 0L63.95 63.656l-50.382 50.382a7.92 7.92 0 01-11.195 0c-3.085-3.086-3.092-8.105 0-11.196l55.98-55.98a7.892 7.892 0 015.595-2.317z\\\"/>\u003Cpath d=\\\"M63.947 5.931c2.027 0 4.054.77 5.6 2.316l55.98 55.98a7.92 7.92 0 010 11.196c-3.086 3.085-8.105 3.092-11.196 0L63.95 25.041 13.567 75.423a7.92 7.92 0 01-11.195 0c-3.085-3.086-3.092-8.104 0-11.196l55.98-55.98a7.892 7.892 0 015.595-2.316z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/clone-button\":{\"title\":\"$:/core/images/clone-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-clone-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M32.265 96v24.002A7.996 7.996 0 0040.263 128h79.74a7.996 7.996 0 007.997-7.998v-79.74a7.996 7.996 0 00-7.998-7.997H96V48h12.859a2.99 2.99 0 012.994 2.994v57.865a2.99 2.99 0 01-2.994 2.994H50.994A2.99 2.99 0 0148 108.859V96H32.265z\\\"/>\u003Cpath d=\\\"M40 56h-7.993C27.588 56 24 52.418 24 48c0-4.41 3.585-8 8.007-8H40v-7.993C40 27.588 43.582 24 48 24c4.41 0 8 3.585 8 8.007V40h7.993C68.412 40 72 43.582 72 48c0 4.41-3.585 8-8.007 8H56v7.993C56 68.412 52.418 72 48 72c-4.41 0-8-3.585-8-8.007V56zM8 0C3.58 0 0 3.588 0 8v80c0 4.419 3.588 8 8 8h80c4.419 0 8-3.588 8-8V8c0-4.419-3.588-8-8-8H8zM19 16A2.997 2.997 0 0016 19.001v57.998A2.997 2.997 0 0019.001 80h57.998A2.997 2.997 0 0080 76.999V19.001A2.997 2.997 0 0076.999 16H19.001z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/close-all-button\":{\"title\":\"$:/core/images/close-all-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-close-all-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M28 111.314l-14.144 14.143a8 8 0 01-11.313-11.313L16.686 100 2.543 85.856a8 8 0 0111.313-11.313L28 88.686l14.144-14.143a8 8 0 0111.313 11.313L39.314 100l14.143 14.144a8 8 0 01-11.313 11.313L28 111.314zM28 39.314L13.856 53.457A8 8 0 012.543 42.144L16.686 28 2.543 13.856A8 8 0 0113.856 2.543L28 16.686 42.144 2.543a8 8 0 0111.313 11.313L39.314 28l14.143 14.144a8 8 0 01-11.313 11.313L28 39.314zM100 39.314L85.856 53.457a8 8 0 01-11.313-11.313L88.686 28 74.543 13.856A8 8 0 0185.856 2.543L100 16.686l14.144-14.143a8 8 0 0111.313 11.313L111.314 28l14.143 14.144a8 8 0 01-11.313 11.313L100 39.314zM100 111.314l-14.144 14.143a8 8 0 01-11.313-11.313L88.686 100 74.543 85.856a8 8 0 0111.313-11.313L100 88.686l14.144-14.143a8 8 0 0111.313 11.313L111.314 100l14.143 14.144a8 8 0 01-11.313 11.313L100 111.314z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/close-button\":{\"title\":\"$:/core/images/close-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-close-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M65.086 75.41l-50.113 50.113c-3.121 3.121-8.192 3.126-11.316.002-3.118-3.118-3.123-8.19.002-11.316l50.114-50.114L3.659 13.982C.538 10.86.533 5.79 3.657 2.666c3.118-3.118 8.19-3.123 11.316.002l50.113 50.114L115.2 2.668c3.121-3.121 8.192-3.126 11.316-.002 3.118 3.118 3.123 8.19-.002 11.316L76.4 64.095l50.114 50.114c3.121 3.121 3.126 8.192.002 11.316-3.118 3.118-8.19 3.123-11.316-.002L65.086 75.409z\\\"/>\u003C/svg>\"},\"$:/core/images/close-others-button\":{\"title\":\"$:/core/images/close-others-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-close-others-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M64 128c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 0 0 28.654 0 64c0 35.346 28.654 64 64 64zm0-16c26.51 0 48-21.49 48-48S90.51 16 64 16 16 37.49 16 64s21.49 48 48 48zm0-16c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32zm0-16c8.837 0 16-7.163 16-16s-7.163-16-16-16-16 7.163-16 16 7.163 16 16 16z\\\"/>\u003C/svg>\"},\"$:/core/images/copy-clipboard\":{\"title\":\"$:/core/images/copy-clipboard\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-copy-clipboard tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"33\\\" height=\\\"8\\\" x=\\\"40\\\" y=\\\"40\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"17\\\" height=\\\"8\\\" x=\\\"40\\\" y=\\\"82\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"17\\\" height=\\\"8\\\" x=\\\"40\\\" y=\\\"54\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"33\\\" height=\\\"8\\\" x=\\\"40\\\" y=\\\"96\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"12\\\" height=\\\"8\\\" x=\\\"40\\\" y=\\\"68\\\" rx=\\\"4\\\"/>\u003Cpath d=\\\"M40 16H24c-4.419 0-8 3.59-8 8a8.031 8.031 0 000 .01v95.98a8.03 8.03 0 000 .01c0 4.41 3.581 8 8 8h80a7.975 7.975 0 005.652-2.34 7.958 7.958 0 002.348-5.652v-16.016c0-4.414-3.582-7.992-8-7.992-4.41 0-8 3.578-8 7.992V112H32V32h64v8.008C96 44.422 99.582 48 104 48c4.41 0 8-3.578 8-7.992V23.992a7.963 7.963 0 00-2.343-5.651A7.995 7.995 0 00104.001 16H88c0-4.41-3.585-8-8.007-8H48.007C43.588 8 40 11.582 40 16zm4-1.004A4.001 4.001 0 0148 11h32c2.21 0 4 1.797 4 3.996v4.008A4.001 4.001 0 0180 23H48c-2.21 0-4-1.797-4-3.996v-4.008z\\\"/>\u003Crect width=\\\"66\\\" height=\\\"16\\\" x=\\\"62\\\" y=\\\"64\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M84.657 82.343l-16-16v11.314l16-16a8 8 0 10-11.314-11.314l-16 16a8 8 0 000 11.314l16 16a8 8 0 1011.314-11.314z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/delete-button\":{\"title\":\"$:/core/images/delete-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-delete-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\" transform=\\\"translate(12)\\\">\u003Crect width=\\\"105\\\" height=\\\"16\\\" y=\\\"11\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"48\\\" height=\\\"16\\\" x=\\\"28\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"16\\\" height=\\\"112\\\" x=\\\"8\\\" y=\\\"16\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"88\\\" height=\\\"16\\\" x=\\\"8\\\" y=\\\"112\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"16\\\" height=\\\"112\\\" x=\\\"80\\\" y=\\\"16\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"16\\\" height=\\\"112\\\" x=\\\"56\\\" y=\\\"16\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"16\\\" height=\\\"112\\\" x=\\\"32\\\" y=\\\"16\\\" rx=\\\"8\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/done-button\":{\"title\":\"$:/core/images/done-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-done-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M42.26 111.032c-2.051.001-4.103-.78-5.668-2.345L2.662 74.758a8 8 0 01-.005-11.32c3.118-3.117 8.192-3.12 11.32.007l28.278 28.278 72.124-72.124a8.002 8.002 0 0111.314-.001c3.118 3.118 3.124 8.19 0 11.315l-77.78 77.78a7.978 7.978 0 01-5.658 2.343z\\\"/>\u003C/svg>\"},\"$:/core/images/down-arrow\":{\"title\":\"$:/core/images/down-arrow\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-down-arrow tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M64.177 100.069a7.889 7.889 0 01-5.6-2.316l-55.98-55.98a7.92 7.92 0 010-11.196c3.086-3.085 8.105-3.092 11.196 0l50.382 50.382 50.382-50.382a7.92 7.92 0 0111.195 0c3.086 3.086 3.092 8.104 0 11.196l-55.98 55.98a7.892 7.892 0 01-5.595 2.316z\\\"/>\u003C/svg>\"},\"$:/core/images/download-button\":{\"title\":\"$:/core/images/download-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-download-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M64 128c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 0 0 28.654 0 64c0 35.346 28.654 64 64 64zm0-16c26.51 0 48-21.49 48-48S90.51 16 64 16 16 37.49 16 64s21.49 48 48 48z\\\" class=\\\"tc-image-download-button-ring\\\"/>\u003Cpath d=\\\"M34.35 66.43l26.892 27.205a4.57 4.57 0 006.516 0L94.65 66.43a4.7 4.7 0 000-6.593 4.581 4.581 0 00-3.258-1.365h-8.46c-2.545 0-4.608-2.087-4.608-4.661v-15.15c0-2.575-2.063-4.662-4.608-4.662H55.284c-2.545 0-4.608 2.087-4.608 4.662v15.15c0 2.574-2.063 4.661-4.608 4.661h-8.46c-2.545 0-4.608 2.087-4.608 4.662a4.69 4.69 0 001.35 3.296z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/edit-button\":{\"title\":\"$:/core/images/edit-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-edit-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M95.627 10.059l-5.656 5.657 11.313 11.313 5.657-5.656-11.314-11.314zm5.657-5.657l1.966-1.966c3.123-3.122 8.194-3.129 11.319-.005 3.117 3.118 3.122 8.192-.005 11.32l-1.966 1.965-11.314-11.314zm-16.97 16.97l-60.25 60.25a8.12 8.12 0 00-.322.342c-.1.087-.198.179-.295.275-5.735 5.735-10.702 22.016-10.702 22.016s16.405-5.09 22.016-10.702c.095-.096.186-.193.272-.292a8.12 8.12 0 00.345-.325l60.25-60.25-11.314-11.313zM35.171 124.19c6.788-.577 13.898-2.272 23.689-5.348 1.825-.573 3.57-1.136 6.336-2.04 16-5.226 21.877-6.807 28.745-7.146 8.358-.413 13.854 2.13 17.58 8.699a4 4 0 006.959-3.946c-5.334-9.406-13.745-13.296-24.933-12.744-7.875.39-14.057 2.052-30.835 7.533-2.739.894-4.46 1.45-6.25 2.012-19.46 6.112-30.77 7.072-39.597 1.747a4 4 0 10-4.132 6.85c6.333 3.82 13.754 5.12 22.438 4.383z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/erase\":{\"title\":\"$:/core/images/erase\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-erase tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M60.087 127.996l63.015-63.015c6.535-6.535 6.528-17.115-.003-23.646L99.466 17.702c-6.539-6.538-17.117-6.532-23.646-.003L4.898 88.62c-6.535 6.534-6.528 17.115.003 23.646l15.73 15.73h39.456zm-34.95-7.313l-14.324-14.325c-3.267-3.268-3.268-8.564-.008-11.824L46.269 59.07l35.462 35.462-26.15 26.15H25.137z\\\"/>\u003C/svg>\"},\"$:/core/images/excise\":{\"title\":\"$:/core/images/excise\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-excise tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M56 107.314l-2.343 2.343a8 8 0 11-11.314-11.314l16-16a8 8 0 0111.314 0l16 16a8 8 0 11-11.314 11.314L72 107.314v14.284c0 3.536-3.582 6.402-8 6.402s-8-2.866-8-6.402v-14.284zM0 40.007C0 35.585 3.59 32 8 32c4.418 0 8 3.588 8 8.007v31.986C16 76.415 12.41 80 8 80c-4.418 0-8-3.588-8-8.007V40.007zm32 0C32 35.585 35.59 32 40 32c4.418 0 8 3.588 8 8.007v31.986C48 76.415 44.41 80 40 80c-4.418 0-8-3.588-8-8.007V40.007zm48 0C80 35.585 83.59 32 88 32c4.418 0 8 3.588 8 8.007v31.986C96 76.415 92.41 80 88 80c-4.418 0-8-3.588-8-8.007V40.007zm-24-32C56 3.585 59.59 0 64 0c4.418 0 8 3.588 8 8.007v31.986C72 44.415 68.41 48 64 48c-4.418 0-8-3.588-8-8.007V8.007zm56 32c0-4.422 3.59-8.007 8-8.007 4.418 0 8 3.588 8 8.007v31.986c0 4.422-3.59 8.007-8 8.007-4.418 0-8-3.588-8-8.007V40.007z\\\"/>\u003C/svg>\"},\"$:/core/images/export-button\":{\"title\":\"$:/core/images/export-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-export-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M8.003 128H119.993a7.984 7.984 0 005.664-2.349v.007A7.975 7.975 0 00128 120V56c0-4.418-3.59-8-8-8-4.418 0-8 3.58-8 8v56H16V56c0-4.418-3.59-8-8-8-4.418 0-8 3.58-8 8v64c0 4.418 3.59 8 8 8h.003zm48.62-100.689l-8.965 8.966c-3.125 3.125-8.195 3.13-11.319.005-3.118-3.118-3.122-8.192.005-11.319L58.962 2.346A7.986 7.986 0 0164.625 0l-.006.002c2.05-.001 4.102.78 5.666 2.344l22.618 22.617c3.124 3.125 3.129 8.195.005 11.319-3.118 3.118-8.192 3.122-11.319-.005l-8.965-8.966v61.256c0 4.411-3.582 8-8 8-4.41 0-8-3.582-8-8V27.311z\\\"/>\u003C/svg>\"},\"$:/core/images/file\":{\"title\":\"$:/core/images/file\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-file tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M111.968 30.5H112V120a8 8 0 01-8 8H24a8 8 0 01-8-8V8a8 8 0 018-8h57v.02a7.978 7.978 0 015.998 2.337l22.627 22.627a7.975 7.975 0 012.343 5.516zM81 8H24v112h80V30.5H89c-4.418 0-8-3.578-8-8V8z\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"36\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"52\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"68\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"84\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"100\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"40\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"20\\\" rx=\\\"4\\\"/>\u003C/svg>\"},\"$:/core/images/fixed-height\":{\"title\":\"$:/core/images/fixed-height\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-fixed-height tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M60 35.657l-9.172 9.171a4 4 0 11-5.656-5.656l16-16a4 4 0 015.656 0l16 16a4 4 0 01-5.656 5.656L68 35.657v57.686l9.172-9.171a4 4 0 115.656 5.656l-16 16a4 4 0 01-5.656 0l-16-16a4 4 0 115.656-5.656L60 93.343V35.657zM16 116h96a4 4 0 100-8H16a4 4 0 100 8zm0-96h96a4 4 0 100-8H16a4 4 0 100 8z\\\"/>\u003C/svg>\"},\"$:/core/images/fold-all-button\":{\"title\":\"$:/core/images/fold-all-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-fold-all tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"128\\\" height=\\\"16\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"128\\\" height=\\\"16\\\" y=\\\"64\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M64.03 20.004c-2.05 0-4.102.78-5.667 2.344L35.746 44.966c-3.125 3.124-3.13 8.194-.005 11.318 3.118 3.118 8.192 3.122 11.319-.005l16.965-16.965 16.966 16.965c3.124 3.125 8.194 3.13 11.318.005 3.118-3.118 3.122-8.191-.005-11.318L69.687 22.348a7.986 7.986 0 00-5.663-2.346zM64.03 85.002c-2.05-.001-4.102.78-5.667 2.344l-22.617 22.617c-3.125 3.125-3.13 8.195-.005 11.319 3.118 3.118 8.192 3.122 11.319-.005l16.965-16.966 16.966 16.966c3.124 3.125 8.194 3.13 11.318.005 3.118-3.118 3.122-8.192-.005-11.319L69.687 87.346A7.986 7.986 0 0064.024 85z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/fold-button\":{\"title\":\"$:/core/images/fold-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-fold tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"128\\\" height=\\\"16\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M64.03 25.004c-2.05 0-4.102.78-5.667 2.344L35.746 49.966c-3.125 3.124-3.13 8.194-.005 11.318 3.118 3.118 8.192 3.122 11.319-.005l16.965-16.965 16.966 16.965c3.124 3.125 8.194 3.13 11.318.005 3.118-3.118 3.122-8.191-.005-11.318L69.687 27.348a7.986 7.986 0 00-5.663-2.346zM64.005 67.379c-2.05 0-4.102.78-5.666 2.344L35.722 92.34c-3.125 3.125-3.13 8.195-.006 11.32 3.118 3.117 8.192 3.121 11.32-.006L64 86.69l16.965 16.965c3.125 3.125 8.195 3.13 11.319.005 3.118-3.118 3.122-8.192-.005-11.319L69.663 69.723A7.986 7.986 0 0064 67.377z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/fold-others-button\":{\"title\":\"$:/core/images/fold-others-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-fold-others tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"128\\\" height=\\\"16\\\" y=\\\"56.031\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M86.632 79.976c-2.05 0-4.102.78-5.666 2.345L64 99.286 47.034 82.321a7.986 7.986 0 00-5.662-2.346l.005.001c-2.05 0-4.102.78-5.666 2.345l-22.618 22.617c-3.124 3.125-3.129 8.195-.005 11.319 3.118 3.118 8.192 3.122 11.319-.005l16.966-16.966 16.965 16.966a7.986 7.986 0 005.663 2.346l-.005-.002c2.05 0 4.102-.78 5.666-2.344l16.965-16.966 16.966 16.966c3.125 3.124 8.194 3.129 11.319.005 3.118-3.118 3.122-8.192-.005-11.319L92.289 82.321a7.986 7.986 0 00-5.663-2.346zM86.7 48.024c-2.05 0-4.102-.78-5.666-2.345L64.07 28.714 47.103 45.679a7.986 7.986 0 01-5.663 2.346l.005-.001c-2.05 0-4.101-.78-5.666-2.345L13.162 23.062c-3.125-3.125-3.13-8.195-.005-11.319 3.118-3.118 8.192-3.122 11.319.005L41.44 28.714l16.966-16.966a7.986 7.986 0 015.662-2.346l-.005.002c2.05 0 4.102.78 5.666 2.344l16.966 16.966 16.966-16.966c3.124-3.124 8.194-3.129 11.318-.005 3.118 3.118 3.122 8.192-.005 11.319L92.358 45.679a7.986 7.986 0 01-5.663 2.346z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/folder\":{\"title\":\"$:/core/images/folder\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-folder tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M55.694 128H8C3.58 128 0 124.414 0 119.996V48.004C0 43.584 3.584 40 7.999 40H16v-8c0-4.418 3.578-8 8-8h32a8 8 0 018 8v8h40.001c4.418 0 7.999 3.586 7.999 8.004V59.83l-8-.082v-7.749A4 4 0 0099.997 48H56V36c0-2.21-1.793-4-4.004-4H28.004A4 4 0 0024 36v12H12.003A4 4 0 008 52v64a4 4 0 004.003 4h46.76l-3.069 8z\\\"/>\u003Cpath d=\\\"M23.873 55.5h96.003c4.417 0 7.004 4.053 5.774 9.063l-13.344 54.374c-1.228 5.005-5.808 9.063-10.223 9.063H6.08c-4.417 0-7.003-4.053-5.774-9.063L13.65 64.563c1.228-5.005 5.808-9.063 10.223-9.063zm1.78 8.5h87.994c2.211 0 3.504 2.093 2.891 4.666l-11.12 46.668c-.614 2.577-2.902 4.666-5.115 4.666H12.31c-2.211 0-3.504-2.093-2.891-4.666l11.12-46.668C21.152 66.09 23.44 64 25.653 64z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/full-screen-button\":{\"title\":\"$:/core/images/full-screen-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-full-screen-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M0 8a8 8 0 018-8h32a8 8 0 110 16H16v24a8 8 0 11-16 0V8zM128 120a8 8 0 01-8 8H88a8 8 0 110-16h24V88a8 8 0 1116 0v32zM8 128a8 8 0 01-8-8V88a8 8 0 1116 0v24h24a8 8 0 110 16H8zM120 0a8 8 0 018 8v32a8 8 0 11-16 0V16H88a8 8 0 110-16h32z\\\"/>\u003C/svg>\"},\"$:/core/images/github\":{\"title\":\"$:/core/images/github\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-github tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M63.938 1.607c-35.336 0-63.994 28.69-63.994 64.084 0 28.312 18.336 52.329 43.768 60.802 3.202.59 4.37-1.388 4.37-3.088 0-1.518-.056-5.55-.087-10.897-17.802 3.871-21.558-8.591-21.558-8.591-2.911-7.404-7.108-9.375-7.108-9.375-5.81-3.973.44-3.895.44-3.895 6.424.453 9.803 6.606 9.803 6.606 5.709 9.791 14.981 6.963 18.627 5.322.582-4.138 2.236-6.963 4.063-8.564-14.211-1.617-29.153-7.117-29.153-31.672 0-6.995 2.495-12.718 6.589-17.195-.66-1.621-2.856-8.14.629-16.96 0 0 5.37-1.722 17.597 6.57 5.104-1.424 10.58-2.132 16.022-2.16 5.438.028 10.91.736 16.022 2.16 12.22-8.292 17.582-6.57 17.582-6.57 3.493 8.82 1.297 15.339.64 16.96 4.102 4.477 6.578 10.2 6.578 17.195 0 24.618-14.966 30.035-29.22 31.62 2.295 1.98 4.342 5.89 4.342 11.87 0 8.564-.079 15.476-.079 17.576 0 1.715 1.155 3.71 4.4 3.084 25.413-8.493 43.733-32.494 43.733-60.798 0-35.394-28.657-64.084-64.006-64.084\\\"/>\u003C/svg>\"},\"$:/core/images/gitter\":{\"title\":\"$:/core/images/gitter\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-gitter tc-image-button\\\" viewBox=\\\"0 0 18 25\\\">\u003Cpath d=\\\"M15 5h2v10h-2zM10 5h2v20h-2zM5 5h2v20H5zM0 0h2v15H0z\\\"/>\u003C/svg>\"},\"$:/core/images/globe\":{\"title\":\"$:/core/images/globe\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-globe tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M72.811 37.128v2.554c0 2.196.978 6.881 0 8.832-1.466 2.928-4.65 3.54-6.394 5.867-1.182 1.577-4.618 10.601-3.69 12.92 3.969 9.922 11.534 3.187 17.962 9.293.864.821 2.887 2.273 3.296 3.296 3.29 8.223-7.576 15.009 3.757 26.3 1.245 1.24 3.813-3.817 4.079-4.614.852-2.563 6.725-5.45 9.088-7.053 2.02-1.37 4.873-2.667 6.328-4.745 2.27-3.244 1.48-7.514 3.098-10.745 2.139-4.274 3.828-9.635 5.998-13.966 3.898-7.781 4.721 2.093 5.067 2.439.358.357 1.011 0 1.517 0 .094 0 1.447.099 1.516 0 .65-.935-1.043-17.92-1.318-19.297-1.404-7.01-6.944-15.781-11.865-20.5-6.274-6.015-7.09-16.197-18.259-14.954-.204.022-5.084 10.148-7.777 13.512-3.728 4.657-2.47-4.153-6.526-4.153-.081 0-1.183-.103-1.253 0-.586.88-1.44 3.896-2.306 4.417-.265.16-1.722-.239-1.846 0-2.243 4.3 8.256 2.212 5.792 7.952-2.352 5.481-6.328-1.997-6.328 8.56M44.467 7.01c9.685 6.13.682 12.198 2.694 16.215 1.655 3.303 4.241 5.395 1.714 9.814-2.063 3.608-6.87 3.966-9.623 6.723-3.04 3.044-5.464 8.94-6.79 12.911-1.617 4.843 14.547 6.866 12.063 11.008-1.386 2.311-6.746 1.466-8.437.198-1.165-.873-3.593-.546-4.417-1.78-2.613-3.915-2.26-8.023-3.625-12.128-.938-2.822-6.313-2.12-7.844-.593-.523.522-.33 1.792-.33 2.505 0 5.285 7.12 3.316 7.12 6.46 0 14.636 3.927 6.534 11.14 11.336 10.036 6.683 7.844 7.303 14.946 14.404 3.673 3.673 7.741 3.686 9.425 9.294 1.602 5.331-9.327 5.339-11.716 7.448-1.123.991-2.813 4.146-4.219 4.615-1.792.598-3.234.496-4.944 1.78-2.427 1.82-3.9 4.932-4.02 4.81-2.148-2.147-3.52-15.479-3.89-18.257-.588-4.42-5.59-5.54-6.986-9.03-1.57-3.927 1.524-9.52-1.129-13.761-6.52-10.424-11.821-14.5-15.35-26.292-.942-3.148 3.342-6.529 4.877-8.833 1.877-2.816 2.662-5.854 4.746-8.635C22.147 24.19 40.855 9.461 43.857 8.635l.61-1.625z\\\"/>\u003Cpath d=\\\"M64 126c34.242 0 62-27.758 62-62 0-34.242-27.758-62-62-62C29.758 2 2 29.758 2 64c0 34.242 27.758 62 62 62zm0-6c30.928 0 56-25.072 56-56S94.928 8 64 8 8 33.072 8 64s25.072 56 56 56z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/heading-1\":{\"title\":\"$:/core/images/heading-1\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-heading-1 tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M14 30h13.25v30.104H61.7V30h13.25v75.684H61.7V71.552H27.25v34.132H14V30zm70.335 13.78c2.544 0 5.017-.212 7.42-.636 2.403-.424 4.576-1.13 6.52-2.12 1.942-.99 3.603-2.261 4.981-3.816 1.378-1.555 2.28-3.463 2.703-5.724h9.858v74.2h-13.25V53.32H84.335v-9.54z\\\"/>\u003C/svg>\"},\"$:/core/images/heading-2\":{\"title\":\"$:/core/images/heading-2\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-heading-2 tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M6 30h13.25v30.104H53.7V30h13.25v75.684H53.7V71.552H19.25v34.132H6V30zm119.52 75.684H74.85c.07-6.148 1.555-11.519 4.452-16.112 2.897-4.593 6.855-8.586 11.872-11.978a133.725 133.725 0 017.526-5.141 59.6 59.6 0 007.208-5.353c2.19-1.908 3.993-3.975 5.406-6.201 1.413-2.226 2.155-4.788 2.226-7.685 0-1.343-.159-2.774-.477-4.293a11.357 11.357 0 00-1.855-4.24c-.919-1.307-2.19-2.403-3.816-3.286-1.625-.883-3.745-1.325-6.36-1.325-2.403 0-4.399.477-5.989 1.431-1.59.954-2.862 2.261-3.816 3.922-.954 1.66-1.66 3.622-2.12 5.883-.46 2.261-.724 4.7-.795 7.314H76.23c0-4.099.548-7.897 1.643-11.395 1.095-3.498 2.738-6.519 4.93-9.063 2.19-2.544 4.857-4.54 8.002-5.989C93.95 30.724 97.606 30 101.775 30c4.523 0 8.303.742 11.342 2.226 3.039 1.484 5.494 3.357 7.367 5.618 1.873 2.261 3.198 4.717 3.975 7.367.777 2.65 1.166 5.176 1.166 7.579 0 2.968-.46 5.653-1.378 8.056a25.942 25.942 0 01-3.71 6.625 37.5 37.5 0 01-5.3 5.565 79.468 79.468 0 01-6.148 4.77 165.627 165.627 0 01-6.36 4.24 94.28 94.28 0 00-5.883 4.028c-1.802 1.343-3.374 2.738-4.717 4.187-1.343 1.449-2.261 2.986-2.756 4.611h36.146v10.812z\\\"/>\u003C/svg>\"},\"$:/core/images/heading-3\":{\"title\":\"$:/core/images/heading-3\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-heading-3 tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M6 30h13.25v30.104H53.7V30h13.25v75.684H53.7V71.552H19.25v34.132H6V30zm88.885 32.224c1.979.07 3.957-.07 5.936-.424 1.979-.353 3.745-.972 5.3-1.855a10.365 10.365 0 003.763-3.657c.954-1.555 1.431-3.463 1.431-5.724 0-3.18-1.078-5.724-3.233-7.632-2.155-1.908-4.929-2.862-8.32-2.862-2.12 0-3.958.424-5.513 1.272a11.318 11.318 0 00-3.869 3.445c-1.025 1.449-1.784 3.074-2.279 4.876a18.335 18.335 0 00-.636 5.565H75.381c.141-3.604.813-6.943 2.014-10.017 1.201-3.074 2.844-5.742 4.93-8.003 2.084-2.261 4.61-4.028 7.578-5.3C92.871 30.636 96.228 30 99.973 30a29.2 29.2 0 018.533 1.272c2.791.848 5.3 2.085 7.526 3.71s4.01 3.692 5.353 6.201c1.343 2.509 2.014 5.388 2.014 8.639 0 3.745-.848 7.014-2.544 9.805-1.696 2.791-4.346 4.823-7.95 6.095v.212c4.24.848 7.544 2.95 9.911 6.307s3.551 7.438 3.551 12.243c0 3.533-.707 6.696-2.12 9.487a21.538 21.538 0 01-5.724 7.102c-2.403 1.943-5.194 3.445-8.374 4.505-3.18 1.06-6.537 1.59-10.07 1.59-4.31 0-8.074-.618-11.289-1.855s-5.9-2.986-8.056-5.247c-2.155-2.261-3.798-4.982-4.929-8.162-1.13-3.18-1.731-6.713-1.802-10.6h12.084c-.141 4.523.972 8.286 3.34 11.289 2.366 3.003 5.917 4.505 10.652 4.505 4.028 0 7.402-1.148 10.123-3.445 2.72-2.297 4.081-5.565 4.081-9.805 0-2.897-.565-5.194-1.696-6.89a10.97 10.97 0 00-4.452-3.869c-1.837-.883-3.904-1.431-6.2-1.643a58.067 58.067 0 00-7.05-.212v-9.01z\\\"/>\u003C/svg>\"},\"$:/core/images/heading-4\":{\"title\":\"$:/core/images/heading-4\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-heading-4 tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M8 30h13.25v30.104H55.7V30h13.25v75.684H55.7V71.552H21.25v34.132H8V30zm76.59 48.548h22.471V45.9h-.212L84.59 78.548zm43.46 9.54h-9.54v17.596H107.06V88.088h-31.8V76.11l31.8-44.626h11.448v47.064h9.54v9.54z\\\"/>\u003C/svg>\"},\"$:/core/images/heading-5\":{\"title\":\"$:/core/images/heading-5\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-heading-5 tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M6 30h13.25v30.104H53.7V30h13.25v75.684H53.7V71.552H19.25v34.132H6V30zm77.755 1.484h38.372v10.812H92.765L88.95 61.164l.212.212c1.625-1.837 3.692-3.233 6.201-4.187 2.509-.954 5-1.431 7.473-1.431 3.675 0 6.96.618 9.858 1.855 2.897 1.237 5.335 2.968 7.314 5.194s3.48 4.858 4.505 7.897c1.025 3.039 1.537 6.325 1.537 9.858 0 2.968-.477 6.024-1.43 9.169a25.161 25.161 0 01-4.559 8.586c-2.085 2.58-4.752 4.7-8.003 6.36-3.25 1.66-7.137 2.491-11.66 2.491-3.604 0-6.943-.477-10.017-1.431-3.074-.954-5.777-2.385-8.109-4.293-2.332-1.908-4.187-4.258-5.565-7.049-1.378-2.791-2.138-6.06-2.279-9.805h12.084c.353 4.028 1.731 7.12 4.134 9.275 2.403 2.155 5.583 3.233 9.54 3.233 2.544 0 4.7-.424 6.466-1.272 1.767-.848 3.198-2.014 4.293-3.498 1.095-1.484 1.873-3.215 2.332-5.194.46-1.979.69-4.099.69-6.36 0-2.05-.284-4.01-.849-5.883-.565-1.873-1.413-3.516-2.544-4.929-1.13-1.413-2.597-2.544-4.399-3.392-1.802-.848-3.904-1.272-6.307-1.272-2.544 0-4.929.477-7.155 1.431-2.226.954-3.834 2.738-4.823 5.353H75.805l7.95-40.598z\\\"/>\u003C/svg>\"},\"$:/core/images/heading-6\":{\"title\":\"$:/core/images/heading-6\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-heading-6 tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M6 30h13.25v30.104H53.7V30h13.25v75.684H53.7V71.552H19.25v34.132H6V30zm106.587 20.246c-.283-3.039-1.36-5.494-3.233-7.367-1.873-1.873-4.399-2.809-7.579-2.809-2.19 0-4.08.406-5.67 1.219a12.435 12.435 0 00-4.029 3.233c-1.095 1.343-1.979 2.88-2.65 4.611a37.696 37.696 0 00-1.643 5.459 46.08 46.08 0 00-.9 5.671 722.213 722.213 0 00-.478 5.247l.212.212c1.625-2.968 3.87-5.176 6.731-6.625 2.862-1.449 5.954-2.173 9.275-2.173 3.675 0 6.96.636 9.858 1.908 2.897 1.272 5.353 3.021 7.367 5.247 2.014 2.226 3.551 4.858 4.611 7.897 1.06 3.039 1.59 6.325 1.59 9.858 0 3.604-.583 6.943-1.749 10.017-1.166 3.074-2.844 5.76-5.035 8.056-2.19 2.297-4.805 4.081-7.844 5.353-3.039 1.272-6.395 1.908-10.07 1.908-5.441 0-9.91-1.007-13.409-3.021-3.498-2.014-6.254-4.77-8.268-8.268-2.014-3.498-3.41-7.597-4.187-12.296-.777-4.7-1.166-9.77-1.166-15.211 0-4.452.477-8.94 1.431-13.462.954-4.523 2.526-8.639 4.717-12.349 2.19-3.71 5.07-6.731 8.64-9.063C92.676 31.166 97.075 30 102.304 30c2.968 0 5.76.495 8.374 1.484 2.615.99 4.93 2.367 6.943 4.134 2.014 1.767 3.657 3.887 4.93 6.36 1.271 2.473 1.978 5.23 2.12 8.268h-12.085zm-11.66 46.852c2.19 0 4.099-.442 5.724-1.325a12.869 12.869 0 004.081-3.445c1.095-1.413 1.908-3.056 2.438-4.929.53-1.873.795-3.798.795-5.777s-.265-3.887-.795-5.724c-.53-1.837-1.343-3.445-2.438-4.823-1.095-1.378-2.456-2.491-4.08-3.339-1.626-.848-3.534-1.272-5.725-1.272-2.19 0-4.116.406-5.777 1.219-1.66.813-3.056 1.908-4.187 3.286-1.13 1.378-1.979 2.986-2.544 4.823-.565 1.837-.848 3.78-.848 5.83 0 2.05.283 3.993.848 5.83.565 1.837 1.413 3.48 2.544 4.929a12.39 12.39 0 004.187 3.445c1.66.848 3.586 1.272 5.777 1.272z\\\"/>\u003C/svg>\"},\"$:/core/images/help\":{\"title\":\"$:/core/images/help\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-help tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M36.055 111.441c-5.24 4.396-15.168 7.362-26.555 7.362-1.635 0-3.24-.06-4.806-.179 7.919-2.64 14.062-8.6 16.367-16.014C8.747 92.845 1.05 78.936 1.05 63.5c0-29.547 28.206-53.5 63-53.5s63 23.953 63 53.5-28.206 53.5-63 53.5c-10.055 0-19.56-2-27.994-5.559zm35.35-33.843a536.471 536.471 0 00.018-4.682 199.02 199.02 0 00-.023-3.042c.008-1.357.595-2.087 3.727-4.235.112-.077 1.085-.74 1.386-.948 3.093-2.133 5.022-3.786 6.762-6.187 2.34-3.228 3.558-7.077 3.558-11.649 0-13.292-9.86-21.952-21.455-21.952-11.103 0-22.499 9.609-24.066 22.295a6.023 6.023 0 1011.956 1.477c.806-6.527 6.972-11.726 12.11-11.726 5.265 0 9.408 3.64 9.408 9.906 0 3.634-1.1 5.153-5.111 7.919l-1.362.93c-2.682 1.84-4.227 3.1-5.7 4.931-2.109 2.62-3.242 5.717-3.258 9.314.013.892.02 1.86.022 2.981a470.766 470.766 0 01-.022 4.943 6.023 6.023 0 1012.046.12l.003-.395zm-6.027 24.499a7.529 7.529 0 100-15.058 7.529 7.529 0 000 15.058z\\\"/>\u003C/svg>\"},\"$:/core/images/home-button\":{\"title\":\"$:/core/images/home-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-home-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M112.985 119.502c.01-.165.015-.331.015-.499V67.568c3.137 2.948 8.076 2.884 11.134-.174a7.999 7.999 0 00-.002-11.316L70.396 2.343A7.978 7.978 0 0064.734 0a7.957 7.957 0 00-5.656 2.343L33 28.42V8.007C33 3.585 29.41 0 25 0c-4.418 0-8 3.59-8 8.007V44.42L5.342 56.078c-3.125 3.125-3.12 8.198-.002 11.316a7.999 7.999 0 0011.316-.003l.344-.343v52.945a8.11 8.11 0 000 .007c0 4.418 3.588 8 8 8h80c4.419 0 8-3.59 8-8a8.11 8.11 0 00-.015-.498zM97 112V51.574L64.737 19.31 33 51.048V112h64z\\\"/>\u003C/svg>\"},\"$:/core/images/import-button\":{\"title\":\"$:/core/images/import-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-import-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M114.832 60.436s3.235-3.27 6.921.417c3.686 3.686.231 7.14.231 7.14l-42.153 42.92s-30.765 32.367-58.798 4.333C-7 87.213 24.59 55.623 24.59 55.623L67.363 12.85s22.725-24.6 43.587-3.738c20.862 20.862-3.96 43.09-3.96 43.09l-35.04 35.04S49.903 112.546 36.426 99.07c-13.476-13.477 11.83-35.523 11.83-35.523l35.04-35.04s3.902-3.902 7.78-.023c3.879 3.878.118 7.921.118 7.921l-35.04 35.04s-13.212 13.212-8.872 17.551c4.34 4.34 16.77-9.653 16.77-9.653l35.04-35.04s16.668-14.598 3.966-27.3c-13.893-13.892-27.565 3.702-27.565 3.702l-42.91 42.91s-23.698 23.698-3.658 43.738 43.012-4.385 43.012-4.385l42.895-42.533z\\\"/>\u003C/svg>\"},\"$:/core/images/info-button\":{\"title\":\"$:/core/images/info-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-info-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\" transform=\\\"translate(.05)\\\">\u003Cpath d=\\\"M64 128c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 0 0 28.654 0 64c0 35.346 28.654 64 64 64zm0-16c26.51 0 48-21.49 48-48S90.51 16 64 16 16 37.49 16 64s21.49 48 48 48z\\\"/>\u003Ccircle cx=\\\"64\\\" cy=\\\"32\\\" r=\\\"8\\\"/>\u003Crect width=\\\"16\\\" height=\\\"56\\\" x=\\\"56\\\" y=\\\"48\\\" rx=\\\"8\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/italic\":{\"title\":\"$:/core/images/italic\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-italic tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M66.711 0h22.41L62.408 128H40z\\\"/>\u003C/svg>\"},\"$:/core/images/left-arrow\":{\"title\":\"$:/core/images/left-arrow\",\"created\":\"20150315234410875\",\"modified\":\"20150315235324760\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-left-arrow tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M0 64.177c0-2.026.771-4.054 2.317-5.6l55.98-55.98a7.92 7.92 0 0111.195.001c3.086 3.085 3.092 8.104.001 11.195L19.111 64.175l50.382 50.382a7.92 7.92 0 010 11.195c-3.086 3.086-8.105 3.092-11.196.001l-55.98-55.98A7.892 7.892 0 010 64.177z\\\"/>\u003C/svg>\"},\"$:/core/images/line-width\":{\"title\":\"$:/core/images/line-width\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-line-width tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M16 18h96a2 2 0 000-4H16a2 2 0 100 4zm0 17h96a4 4 0 100-8H16a4 4 0 100 8zm0 21h96a6 6 0 000-12H16a6 6 0 100 12zm0 29h96c5.523 0 10-4.477 10-10s-4.477-10-10-10H16c-5.523 0-10 4.477-10 10s4.477 10 10 10zm0 43h96c8.837 0 16-7.163 16-16s-7.163-16-16-16H16c-8.837 0-16 7.163-16 16s7.163 16 16 16z\\\"/>\u003C/svg>\"},\"$:/core/images/link\":{\"title\":\"$:/core/images/link\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-link tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M42.263 69.38a31.919 31.919 0 006.841 10.13c12.5 12.5 32.758 12.496 45.255 0l22.627-22.628c12.502-12.501 12.497-32.758 0-45.255-12.5-12.5-32.758-12.496-45.254 0L49.104 34.255a32.333 32.333 0 00-2.666 3.019 36.156 36.156 0 0121.94.334l14.663-14.663c6.25-6.25 16.382-6.254 22.632-.004 6.248 6.249 6.254 16.373-.004 22.631l-22.62 22.62c-6.25 6.25-16.381 6.254-22.631.004a15.93 15.93 0 01-4.428-8.433 11.948 11.948 0 00-7.59 3.48l-6.137 6.137z\\\"/>\u003Cpath d=\\\"M86.35 59.234a31.919 31.919 0 00-6.84-10.13c-12.5-12.5-32.758-12.497-45.255 0L11.627 71.732c-12.501 12.5-12.496 32.758 0 45.254 12.5 12.5 32.758 12.497 45.255 0L79.51 94.36a32.333 32.333 0 002.665-3.02 36.156 36.156 0 01-21.94-.333l-14.663 14.663c-6.25 6.25-16.381 6.253-22.63.004-6.25-6.249-6.255-16.374.003-22.632l22.62-22.62c6.25-6.25 16.381-6.253 22.631-.003a15.93 15.93 0 014.428 8.432 11.948 11.948 0 007.59-3.48l6.137-6.136z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/linkify\":{\"title\":\"$:/core/images/linkify\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-linkify-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M17.031 31.919H9.048V96.85h7.983v6.92H0V25h17.031v6.919zm24.66 0h-7.983V96.85h7.983v6.92H24.66V25h17.03v6.919zM67.77 56.422l11.975-3.903 2.306 7.096-12.063 3.903 7.628 10.379-6.12 4.435-7.63-10.467-7.45 10.2-5.943-4.523L58.1 63.518 45.95 59.35l2.306-7.096 12.064 4.17V43.825h7.45v12.596zM86.31 96.85h7.982V31.92H86.31V25h17.031v78.77H86.31v-6.92zm24.659 0h7.983V31.92h-7.983V25H128v78.77h-17.031v-6.92z\\\"/>\u003C/svg>\"},\"$:/core/images/list-bullet\":{\"title\":\"$:/core/images/list-bullet\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M11.636 40.273c6.427 0 11.637-5.21 11.637-11.637C23.273 22.21 18.063 17 11.636 17 5.21 17 0 22.21 0 28.636c0 6.427 5.21 11.637 11.636 11.637zm0 34.909c6.427 0 11.637-5.21 11.637-11.637 0-6.426-5.21-11.636-11.637-11.636C5.21 51.91 0 57.12 0 63.545c0 6.427 5.21 11.637 11.636 11.637zm0 34.909c6.427 0 11.637-5.21 11.637-11.636 0-6.427-5.21-11.637-11.637-11.637C5.21 86.818 0 92.028 0 98.455c0 6.426 5.21 11.636 11.636 11.636zM34.91 22.818H128v11.637H34.91V22.818zm0 34.91H128v11.636H34.91V57.727zm0 34.908H128v11.637H34.91V92.636z\\\"/>\u003C/svg>\"},\"$:/core/images/list-number\":{\"title\":\"$:/core/images/list-number\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-number tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M33.84 22.356H128v11.77H33.84v-11.77zm0 35.31H128v11.77H33.84v-11.77zm0 35.311H128v11.77H33.84v-11.77zM.38 42.631v-2.223h.998c.826 0 1.445-.14 1.858-.42.413-.28.619-.948.619-2.002V22.769c0-1.442-.193-2.336-.58-2.683-.385-.347-1.477-.52-3.275-.52v-2.143c3.502-.147 6.252-.955 8.25-2.423h2.117v22.865c0 .921.15 1.575.449 1.963.3.387.949.58 1.948.58h.998v2.223H.38zm-.3 35.356v-1.902c7.19-6.554 10.786-12.58 10.786-18.08 0-1.562-.326-2.81-.979-3.744-.652-.934-1.524-1.402-2.616-1.402-.893 0-1.655.317-2.287.952-.633.634-.95 1.364-.95 2.192 0 .974.247 1.829.74 2.563.106.16.16.28.16.36 0 .147-.16.28-.48.4-.213.08-.752.308-1.618.681-.839.374-1.358.561-1.558.561-.24 0-.512-.37-.819-1.111A6.2 6.2 0 010 57.064c0-1.949.849-3.544 2.547-4.785 1.698-1.242 3.798-1.862 6.302-1.862 2.463 0 4.53.67 6.202 2.012 1.67 1.341 2.506 3.093 2.506 5.256a8.644 8.644 0 01-.849 3.724c-.566 1.201-1.92 3.053-4.064 5.556a165.471 165.471 0 01-6.272 6.938h11.445l-1.019 5.726h-2.117c.08-.28.12-.534.12-.76 0-.388-.1-.631-.3-.731-.2-.1-.599-.15-1.198-.15H.08zm12.124 19.207c1.745.04 3.236.637 4.474 1.792 1.239 1.154 1.858 2.773 1.858 4.855 0 2.99-1.132 5.393-3.396 7.208-2.263 1.815-5 2.723-8.209 2.723-2.01 0-3.669-.384-4.974-1.151C.652 111.853 0 110.849 0 109.607c0-.774.27-1.398.809-1.872.54-.474 1.128-.71 1.768-.71.639 0 1.162.2 1.568.6.406.4.782 1.055 1.128 1.962.466 1.268 1.239 1.902 2.317 1.902 1.265 0 2.287-.477 3.066-1.431.78-.955 1.169-2.686 1.169-5.196 0-1.709-.12-3.023-.36-3.944-.24-.921-.792-1.382-1.658-1.382-.586 0-1.185.307-1.797.921-.493.494-.932.741-1.319.741-.333 0-.602-.147-.809-.44-.206-.294-.31-.574-.31-.841 0-.32.104-.594.31-.821.207-.227.69-.594 1.449-1.102 2.876-1.922 4.314-4.017 4.314-6.287 0-1.188-.306-2.092-.919-2.713a3.001 3.001 0 00-2.217-.93c-.799 0-1.525.263-2.177.79-.653.528-.979 1.158-.979 1.892 0 .641.253 1.235.76 1.782.172.2.259.367.259.5 0 .121-.57.428-1.708.922-1.139.494-1.854.74-2.147.74-.413 0-.75-.333-1.009-1-.26-.668-.39-1.282-.39-1.842 0-1.749.93-3.224 2.787-4.425 1.858-1.202 3.965-1.802 6.322-1.802 2.064 0 3.851.447 5.363 1.341 1.511.895 2.267 2.116 2.267 3.664 0 1.362-.57 2.623-1.708 3.784a13.387 13.387 0 01-3.945 2.784z\\\"/>\u003C/svg>\"},\"$:/core/images/list\":{\"title\":\"$:/core/images/list\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M87.748 128H23.999c-4.418 0-7.999-3.59-7.999-8.007V8.007C16 3.585 19.588 0 24 0h80c4.419 0 8 3.59 8 8.007V104H91.25c-.965 0-1.84.392-2.473 1.025a3.476 3.476 0 00-1.029 2.476V128zm8-.12l15.88-15.88h-15.88v15.88zM40 15.508A3.502 3.502 0 0143.5 12h55c1.933 0 3.5 1.561 3.5 3.509v.982A3.502 3.502 0 0198.5 20h-55a3.498 3.498 0 01-3.5-3.509v-.982zM32 22a6 6 0 100-12 6 6 0 000 12zm8 9.509A3.502 3.502 0 0143.5 28h55c1.933 0 3.5 1.561 3.5 3.509v.982A3.502 3.502 0 0198.5 36h-55a3.498 3.498 0 01-3.5-3.509v-.982zm0 16A3.502 3.502 0 0143.5 44h55c1.933 0 3.5 1.561 3.5 3.509v.982A3.502 3.502 0 0198.5 52h-55a3.498 3.498 0 01-3.5-3.509v-.982zm0 16A3.502 3.502 0 0143.5 60h55c1.933 0 3.5 1.561 3.5 3.509v.982A3.502 3.502 0 0198.5 68h-55a3.498 3.498 0 01-3.5-3.509v-.982zm0 16A3.502 3.502 0 0143.5 76h55c1.933 0 3.5 1.561 3.5 3.509v.982A3.502 3.502 0 0198.5 84h-55a3.498 3.498 0 01-3.5-3.509v-.982zm0 16A3.502 3.502 0 0143.5 92h55c1.933 0 3.5 1.561 3.5 3.509v.982A3.502 3.502 0 0198.5 100h-55a3.498 3.498 0 01-3.5-3.509v-.982zm0 16A3.505 3.505 0 0143.497 108h33.006A3.497 3.497 0 0180 111.509v.982A3.505 3.505 0 0176.503 116H43.497A3.497 3.497 0 0140 112.491v-.982zM32 38a6 6 0 100-12 6 6 0 000 12zm0 16a6 6 0 100-12 6 6 0 000 12zm0 16a6 6 0 100-12 6 6 0 000 12zm0 16a6 6 0 100-12 6 6 0 000 12zm0 16a6 6 0 100-12 6 6 0 000 12zm0 16a6 6 0 100-12 6 6 0 000 12z\\\"/>\u003C/svg>\"},\"$:/core/images/locked-padlock\":{\"title\":\"$:/core/images/locked-padlock\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-locked-padlock tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M96.472 64H105v32.01C105 113.674 90.674 128 73.001 128H56C38.318 128 24 113.677 24 96.01V64h8c.003-15.723.303-47.731 32.16-47.731 31.794 0 32.305 32.057 32.312 47.731zm-15.897 0H48.44c.002-16.287.142-32 15.719-32 15.684 0 16.977 16.136 16.415 32zM67.732 92.364A8.503 8.503 0 0064.5 76a8.5 8.5 0 00-3.498 16.25l-5.095 22.77H72.8l-5.07-22.656z\\\"/>\u003C/svg>\"},\"$:/core/images/mail\":{\"title\":\"$:/core/images/mail\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-mail tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M122.827 104.894a7.986 7.986 0 01-2.834.516H8.007c-.812 0-1.597-.12-2.335-.345l34.163-34.163 20.842 20.842a3.998 3.998 0 003.418 1.134 4.003 4.003 0 003.395-1.134L88.594 70.64c.075.09.155.176.24.26l33.993 33.994zm5.076-6.237c.064-.406.097-.823.097-1.247v-64c0-.669-.082-1.318-.237-1.94L94.23 65.006c.09.075.177.154.261.239l33.413 33.413zm-127.698.56A8.023 8.023 0 010 97.41v-64c0-.716.094-1.41.271-2.071l33.907 33.906L.205 99.218zM5.93 25.684a8.012 8.012 0 012.078-.273h111.986c.766 0 1.507.108 2.209.308L64.083 83.837 5.93 25.683z\\\"/>\u003C/svg>\"},\"$:/core/images/menu-button\":{\"title\":\"$:/core/images/menu-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-menu-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Crect width=\\\"128\\\" height=\\\"16\\\" y=\\\"16\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"128\\\" height=\\\"16\\\" y=\\\"56\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"128\\\" height=\\\"16\\\" y=\\\"96\\\" rx=\\\"8\\\"/>\u003C/svg>\"},\"$:/core/images/minus-button\":{\"title\":\"$:/core/images/minus-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-minus-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M64 0c35.346 0 64 28.654 64 64 0 35.346-28.654 64-64 64-35.346 0-64-28.654-64-64C0 28.654 28.654 0 64 0zm.332 16c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z\\\"/>\u003Crect width=\\\"80\\\" height=\\\"16\\\" x=\\\"24\\\" y=\\\"56\\\" rx=\\\"8\\\"/>\u003C/svg>\"},\"$:/core/images/mono-block\":{\"title\":\"$:/core/images/mono-block\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-mono-block tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M23.965 32.967h.357c.755 0 1.328.192 1.72.577.39.384.586.947.586 1.688 0 .824-.206 1.418-.618 1.782-.413.363-1.094.545-2.045.545h-6.31c-.965 0-1.65-.178-2.056-.535-.405-.356-.608-.954-.608-1.792 0-.811.203-1.391.608-1.74.406-.35 1.09-.525 2.055-.525h.734l-.86-2.453H8.471l-.902 2.453h.734c.95 0 1.632.178 2.044.535.413.356.619.933.619 1.73 0 .824-.206 1.418-.619 1.782-.412.363-1.094.545-2.044.545h-5.41c-.964 0-1.649-.182-2.054-.545-.406-.364-.608-.958-.608-1.782 0-.741.195-1.304.587-1.688.391-.385.964-.577 1.719-.577h.356l5.62-15.641H6.835c-.95 0-1.632-.182-2.044-.546-.412-.363-.619-.95-.619-1.76 0-.825.207-1.42.619-1.783.412-.363 1.094-.545 2.044-.545h7.863c1.244 0 2.118.67 2.62 2.013v.063l6.647 18.2zM12.98 17.326l-3.04 8.848h6.08l-3.04-8.848zm22.402 9.372v6.395h3.145c2.223 0 3.788-.245 4.697-.734.908-.49 1.362-1.307 1.362-2.453 0-1.16-.433-1.985-1.3-2.474-.866-.49-2.383-.734-4.55-.734h-3.354zm10.693-2.327c1.524.559 2.642 1.324 3.355 2.295.713.972 1.07 2.212 1.07 3.722 0 1.272-.308 2.432-.923 3.48-.615 1.049-1.496 1.909-2.642 2.58a7.499 7.499 0 01-2.254.849c-.832.174-2.01.262-3.533.262H30.202c-.922 0-1.583-.182-1.981-.545-.399-.364-.598-.958-.598-1.782 0-.741.189-1.304.566-1.688.378-.385.93-.577 1.657-.577h.356V17.326h-.356c-.727 0-1.28-.196-1.657-.587-.377-.392-.566-.965-.566-1.72 0-.81.203-1.401.608-1.771.406-.37 1.062-.556 1.971-.556h9.645c2.95 0 5.19.573 6.72 1.72 1.53 1.145 2.296 2.823 2.296 5.031 0 1.09-.234 2.052-.703 2.883-.468.832-1.163 1.513-2.086 2.045zM35.381 17.2v5.284h2.83c1.72 0 2.932-.203 3.638-.609.706-.405 1.06-1.09 1.06-2.054 0-.909-.319-1.573-.955-1.992-.636-.42-1.667-.63-3.093-.63h-3.48zm35.863-3.816c.28-.503.566-.86.86-1.07.293-.21.664-.314 1.111-.314.685 0 1.17.182 1.457.545.287.364.43.986.43 1.866l.042 5.452c0 .964-.157 1.614-.472 1.95-.314.335-.884.503-1.709.503-.587 0-1.037-.14-1.352-.42-.314-.28-.584-.796-.807-1.551-.364-1.328-.944-2.282-1.74-2.862-.797-.58-1.901-.87-3.313-.87-2.153 0-3.802.727-4.948 2.18-1.147 1.454-1.72 3.558-1.72 6.311 0 2.74.58 4.844 1.74 6.311 1.16 1.468 2.817 2.202 4.97 2.202 1.467 0 3.085-.49 4.854-1.468 1.768-.978 2.883-1.467 3.344-1.467.545 0 1.003.23 1.373.692.37.46.556 1.034.556 1.719 0 1.23-1.084 2.39-3.25 3.48-2.167 1.09-4.606 1.636-7.318 1.636-3.662 0-6.625-1.21-8.89-3.627-2.264-2.419-3.396-5.578-3.396-9.478 0-3.76 1.146-6.884 3.438-9.372 2.293-2.488 5.2-3.732 8.723-3.732.992 0 1.97.112 2.935.335.964.224 1.992.574 3.082 1.049zm10.22 19.583V17.326h-.356c-.755 0-1.328-.196-1.72-.587-.39-.392-.586-.965-.586-1.72 0-.81.21-1.401.629-1.771.42-.37 1.097-.556 2.034-.556h5.178c2.922 0 5.06.126 6.416.377 1.356.252 2.51.671 3.46 1.258 1.691 1.007 2.988 2.443 3.89 4.31.9 1.865 1.352 4.021 1.352 6.467 0 2.586-.514 4.847-1.541 6.783-1.028 1.936-2.485 3.4-4.372 4.393-.853.447-1.852.772-2.998.975-1.147.203-2.852.304-5.116.304h-6.269c-.965 0-1.65-.178-2.055-.535-.406-.356-.608-.954-.608-1.792 0-.741.195-1.304.587-1.688.391-.385.964-.577 1.72-.577h.356zm5.41-15.725v15.725h1.195c2.642 0 4.592-.646 5.85-1.94 1.258-1.292 1.887-3.28 1.887-5.965 0-2.641-.64-4.612-1.918-5.912-1.28-1.3-3.205-1.95-5.777-1.95-.335 0-.59.003-.765.01a7.992 7.992 0 00-.472.032zm35.067-.126h-9.75v5.368h3.69v-.252c0-.797.175-1.39.524-1.782.35-.392.88-.587 1.594-.587.629 0 1.142.178 1.54.534.4.357.598.808.598 1.353 0 .028.007.118.021.272.014.154.021.308.021.462v4.34c0 .936-.167 1.607-.503 2.013-.335.405-.88.608-1.635.608-.713 0-1.251-.19-1.615-.567-.363-.377-.545-.936-.545-1.677v-.377h-3.69v6.269h9.75v-2.495c0-.937.178-1.608.534-2.013.357-.405.94-.608 1.75-.608.798 0 1.367.2 1.71.597.342.399.513 1.073.513 2.024v5.074c0 .755-.146 1.258-.44 1.51-.293.251-.873.377-1.74.377h-17.172c-.923 0-1.583-.182-1.982-.545-.398-.364-.597-.958-.597-1.782 0-.741.189-1.304.566-1.688.377-.385.93-.577 1.656-.577h.357V17.326h-.357c-.712 0-1.261-.2-1.646-.598-.384-.398-.576-.968-.576-1.709 0-.81.203-1.401.608-1.771.405-.37 1.062-.556 1.97-.556h17.173c.853 0 1.43.13 1.73.388.3.258.45.772.45 1.54v4.698c0 .95-.174 1.631-.524 2.044-.35.412-.915.618-1.698.618-.81 0-1.394-.21-1.75-.629-.357-.419-.535-1.097-.535-2.033v-2.202zM19.77 47.641c.267-.504.55-.86.85-1.07.3-.21.675-.314 1.122-.314.685 0 1.17.181 1.457.545.287.363.43.985.43 1.866l.042 5.451c0 .965-.157 1.615-.472 1.95-.314.336-.891.504-1.73.504-.587 0-1.045-.144-1.373-.43-.329-.287-.598-.8-.807-1.541-.378-1.342-.958-2.3-1.74-2.873-.783-.573-1.88-.86-3.292-.86-2.153 0-3.799.727-4.938 2.181-1.14 1.454-1.709 3.557-1.709 6.311s.598 4.882 1.793 6.385C10.599 67.248 12.294 68 14.488 68c.503 0 1.077-.06 1.72-.179a23.809 23.809 0 002.264-.555v-3.313h-2.37c-.95 0-1.624-.175-2.023-.524-.398-.35-.597-.93-.597-1.74 0-.84.199-1.437.597-1.793.399-.357 1.073-.535 2.024-.535h7.569c.978 0 1.667.175 2.065.524.398.35.598.937.598 1.762 0 .74-.2 1.31-.598 1.708-.398.399-.975.598-1.73.598h-.335v5.242c0 .447-.05.758-.147.933-.098.174-.293.353-.587.534-.797.476-2.062.895-3.795 1.258a25.576 25.576 0 01-5.263.546c-3.662 0-6.625-1.21-8.89-3.628-2.264-2.418-3.397-5.577-3.397-9.477 0-3.76 1.147-6.884 3.44-9.372 2.292-2.488 5.199-3.732 8.721-3.732.979 0 1.954.112 2.925.335.972.224 2.003.573 3.093 1.049zm15.84 3.941v4.823h6.857v-4.823h-.336c-.754 0-1.331-.195-1.73-.587-.398-.391-.597-.964-.597-1.719 0-.825.206-1.419.619-1.782.412-.364 1.093-.545 2.044-.545h5.41c.95 0 1.624.181 2.023.545.398.363.597.957.597 1.782 0 .755-.192 1.328-.576 1.72-.385.39-.947.586-1.688.586h-.357v15.642h.357c.755 0 1.328.192 1.719.576.391.385.587.947.587 1.688 0 .825-.203 1.419-.608 1.782-.405.364-1.09.546-2.055.546h-5.41c-.964 0-1.649-.179-2.054-.535-.405-.357-.608-.954-.608-1.793 0-.74.2-1.303.598-1.688.398-.384.975-.576 1.73-.576h.335v-6.186h-6.856v6.186h.335c.755 0 1.331.192 1.73.576.398.385.597.947.597 1.688 0 .825-.206 1.419-.618 1.782-.412.364-1.094.546-2.044.546h-5.41c-.964 0-1.65-.179-2.055-.535-.405-.357-.608-.954-.608-1.793 0-.74.196-1.303.587-1.688.392-.384.965-.576 1.72-.576h.356V51.582h-.356c-.741 0-1.304-.195-1.688-.587-.385-.391-.577-.964-.577-1.719 0-.825.2-1.419.598-1.782.398-.364 1.073-.545 2.023-.545h5.41c.936 0 1.614.181 2.033.545.42.363.63.957.63 1.782 0 .755-.2 1.328-.598 1.72-.399.39-.975.586-1.73.586h-.335zm31.754 0v15.642h3.523c.95 0 1.632.178 2.044.534.412.357.618.933.618 1.73 0 .811-.21 1.402-.629 1.772-.419.37-1.097.556-2.033.556H58.433c-.95 0-1.632-.182-2.044-.546-.412-.363-.619-.957-.619-1.782 0-.81.203-1.39.608-1.74.406-.35 1.09-.524 2.055-.524h3.523V51.582h-3.523c-.95 0-1.632-.181-2.044-.545-.412-.363-.619-.95-.619-1.761 0-.825.203-1.412.608-1.761.406-.35 1.09-.524 2.055-.524h12.455c.992 0 1.684.174 2.075.524.392.35.587.936.587 1.761 0 .81-.202 1.398-.608 1.761-.405.364-1.09.545-2.054.545h-3.523zm30.496 0v11.994c0 1.873-.122 3.228-.367 4.067a5.876 5.876 0 01-1.227 2.244c-.74.852-1.768 1.495-3.082 1.929-1.314.433-2.893.65-4.738.65-1.3 0-2.555-.126-3.764-.378a16.843 16.843 0 01-3.491-1.132c-.615-.28-1.017-.643-1.206-1.09-.188-.448-.283-1.175-.283-2.18v-4.32c0-1.202.175-2.04.525-2.516.349-.475.957-.713 1.824-.713 1.244 0 1.929.915 2.054 2.747.014.321.035.566.063.733.168 1.622.545 2.73 1.133 3.324.587.594 1.523.89 2.81.89 1.593 0 2.714-.422 3.364-1.268.65-.845.975-2.386.975-4.623V51.582H88.93c-.95 0-1.632-.181-2.044-.545-.413-.363-.619-.95-.619-1.761 0-.825.2-1.412.598-1.761.398-.35 1.086-.524 2.065-.524h10.693c.979 0 1.667.174 2.065.524.399.35.598.936.598 1.761 0 .81-.206 1.398-.619 1.761-.412.364-1.093.545-2.044.545h-1.761zm14.644 0v6.353l6.48-6.478c-.728-.084-1.238-.29-1.531-.619-.294-.328-.44-.85-.44-1.562 0-.825.198-1.419.597-1.782.398-.364 1.073-.545 2.023-.545h5.137c.95 0 1.625.181 2.023.545.399.363.598.957.598 1.782 0 .769-.2 1.345-.598 1.73-.398.384-.982.576-1.75.576h-.483l-6.101 6.06c1.132.839 2.167 1.94 3.103 3.302.937 1.363 2.034 3.456 3.292 6.28h.692c.825 0 1.44.188 1.845.566.405.377.608.943.608 1.698 0 .825-.206 1.419-.619 1.782-.412.364-1.093.546-2.044.546h-2.579c-1.132 0-2.048-.762-2.746-2.286-.126-.28-.224-.503-.294-.67-.923-1.958-1.768-3.467-2.537-4.53a16.616 16.616 0 00-2.705-2.914l-1.97 1.887v3.92h.335c.755 0 1.331.193 1.73.577.398.385.597.947.597 1.688 0 .825-.206 1.419-.618 1.782-.413.364-1.094.546-2.045.546h-5.41c-.964 0-1.649-.179-2.054-.535-.405-.357-.608-.954-.608-1.793 0-.74.196-1.303.587-1.688.391-.384.965-.576 1.72-.576h.356V51.582h-.357c-.74 0-1.303-.195-1.687-.587-.385-.391-.577-.964-.577-1.719 0-.825.2-1.419.598-1.782.398-.364 1.072-.545 2.023-.545h5.41c.936 0 1.614.181 2.033.545.42.363.63.957.63 1.782 0 .755-.2 1.328-.598 1.72-.399.39-.975.586-1.73.586h-.336zM13.44 96.326l4.005-11.889c.251-.782.6-1.352 1.048-1.709.447-.356 1.041-.534 1.782-.534h3.271c.95 0 1.632.182 2.044.545.413.363.619.957.619 1.782 0 .755-.2 1.328-.598 1.72-.398.39-.975.587-1.73.587h-.335l.587 15.641h.357c.754 0 1.32.192 1.698.577.377.384.566.947.566 1.687 0 .825-.2 1.42-.598 1.783-.398.363-1.072.545-2.023.545h-4.718c-.95 0-1.624-.178-2.023-.535-.398-.356-.597-.954-.597-1.793 0-.74.192-1.303.576-1.687.385-.385.954-.577 1.709-.577h.335l-.293-12.79-3.061 9.52c-.224.712-.542 1.226-.954 1.54-.413.315-.982.472-1.709.472-.727 0-1.303-.157-1.73-.472-.426-.314-.751-.828-.975-1.54l-3.04-9.52-.294 12.79h.336c.755 0 1.324.192 1.709.577.384.384.576.947.576 1.687 0 .825-.202 1.42-.608 1.783-.405.363-1.076.545-2.013.545H2.621c-.937 0-1.608-.182-2.013-.545-.405-.364-.608-.958-.608-1.783 0-.74.192-1.303.577-1.687.384-.385.954-.577 1.708-.577h.336l.608-15.641h-.336c-.754 0-1.331-.196-1.73-.588-.398-.39-.597-.964-.597-1.719 0-.825.206-1.419.619-1.782.412-.363 1.093-.545 2.044-.545h3.27c.728 0 1.311.175 1.752.524.44.35.8.923 1.08 1.72l4.109 11.888zm30.454 2.054V86.828H42.74c-.922 0-1.583-.182-1.981-.546-.398-.363-.598-.95-.598-1.76 0-.812.2-1.402.598-1.773.398-.37 1.059-.555 1.981-.555h5.955c.909 0 1.566.185 1.97.555.406.37.609.961.609 1.772 0 .741-.192 1.31-.577 1.709-.384.398-.933.598-1.646.598h-.356v19.038c0 .657-.07 1.069-.21 1.237-.14.167-.454.251-.943.251h-2.097c-.67 0-1.143-.07-1.415-.21-.273-.14-.507-.384-.703-.733l-8.722-15.327v11.385h1.216c.909 0 1.559.175 1.95.524.392.35.587.93.587 1.74 0 .825-.199 1.42-.597 1.783-.399.363-1.045.545-1.94.545h-6.017c-.909 0-1.566-.182-1.971-.545-.406-.364-.608-.958-.608-1.783 0-.74.188-1.303.566-1.687.377-.385.936-.577 1.677-.577h.336V86.828h-.336c-.713 0-1.265-.2-1.656-.598-.392-.398-.587-.968-.587-1.709 0-.81.206-1.401.618-1.772.413-.37 1.066-.555 1.96-.555h3.44c.824 0 1.383.108 1.677.325.293.216.622.653.985 1.31l7.989 14.551zM64.66 86.366c-1.803 0-3.218.727-4.245 2.18-1.028 1.455-1.541 3.474-1.541 6.06 0 2.586.517 4.613 1.551 6.08 1.034 1.468 2.446 2.202 4.235 2.202 1.804 0 3.222-.73 4.257-2.19 1.034-1.461 1.551-3.492 1.551-6.092 0-2.586-.513-4.605-1.54-6.06-1.028-1.453-2.45-2.18-4.268-2.18zm0-4.864c3.44 0 6.27 1.23 8.492 3.69 2.223 2.46 3.334 5.598 3.334 9.414 0 3.844-1.104 6.99-3.313 9.436-2.208 2.446-5.046 3.669-8.513 3.669-3.424 0-6.255-1.234-8.491-3.701-2.237-2.467-3.355-5.602-3.355-9.404 0-3.83 1.108-6.971 3.323-9.424 2.216-2.454 5.057-3.68 8.523-3.68zM87.461 98.17v4.298h2.16c.908 0 1.555.175 1.94.524.384.35.576.93.576 1.74 0 .825-.196 1.42-.587 1.783-.392.363-1.035.545-1.93.545h-7.254c-.922 0-1.583-.182-1.981-.545-.399-.364-.598-.958-.598-1.783 0-.74.189-1.303.566-1.687.378-.385.93-.577 1.657-.577h.356V86.828h-.356c-.713 0-1.262-.2-1.646-.598-.385-.398-.577-.968-.577-1.709 0-.81.203-1.401.608-1.772.406-.37 1.063-.555 1.971-.555h8.66c3.424 0 6.014.657 7.768 1.97 1.754 1.315 2.631 3.25 2.631 5.809 0 2.697-.873 4.738-2.62 6.122-1.748 1.384-4.34 2.076-7.78 2.076h-3.564zm0-11.343v6.625h2.977c1.65 0 2.89-.28 3.722-.839.832-.559 1.248-1.397 1.248-2.516 0-1.048-.43-1.855-1.29-2.421-.86-.566-2.086-.85-3.68-.85h-2.977zm27.267 20.568l-1.636 1.636a12.37 12.37 0 011.772-.44c.58-.098 1.15-.147 1.709-.147 1.104 0 2.268.164 3.491.492 1.223.329 1.967.493 2.233.493.447 0 1.03-.15 1.75-.45.72-.301 1.206-.452 1.458-.452.517 0 .947.2 1.29.598.342.398.513.898.513 1.5 0 .796-.472 1.474-1.415 2.033-.944.56-2.1.839-3.47.839-.937 0-2.139-.22-3.607-.66-1.467-.441-2.53-.661-3.187-.661-.992 0-2.11.272-3.354.817-1.244.546-2.013.818-2.307.818a2.14 2.14 0 01-1.53-.597c-.42-.399-.63-.878-.63-1.437 0-.391.134-.807.4-1.247.265-.44.733-1.01 1.404-1.709l2.118-2.139c-2.335-.852-4.194-2.386-5.578-4.602-1.384-2.215-2.075-4.763-2.075-7.642 0-3.802 1.104-6.909 3.312-9.32 2.209-2.411 5.053-3.617 8.534-3.617 3.467 0 6.304 1.209 8.513 3.627 2.208 2.418 3.312 5.522 3.312 9.31 0 3.774-1.097 6.884-3.291 9.33-2.195 2.446-4.977 3.67-8.345 3.67a22.5 22.5 0 01-1.384-.043zm1.195-21.03c-1.803 0-3.218.727-4.246 2.18-1.027 1.455-1.54 3.474-1.54 6.06 0 2.586.516 4.613 1.55 6.08 1.035 1.468 2.447 2.202 4.236 2.202 1.803 0 3.222-.73 4.256-2.19 1.035-1.461 1.552-3.492 1.552-6.092 0-2.586-.514-4.605-1.541-6.06-1.028-1.453-2.45-2.18-4.267-2.18z\\\"/>\u003C/svg>\"},\"$:/core/images/mono-line\":{\"title\":\"$:/core/images/mono-line\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-mono-line tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M60.437 84.523h.908c1.922 0 3.381.489 4.378 1.468.997.979 1.495 2.411 1.495 4.298 0 2.1-.525 3.612-1.575 4.538-1.05.925-2.785 1.388-5.206 1.388h-16.07c-2.456 0-4.2-.454-5.232-1.361-1.032-.908-1.548-2.43-1.548-4.565 0-2.065.516-3.542 1.548-4.432 1.032-.89 2.776-1.334 5.232-1.334h1.869l-2.19-6.247H20.983l-2.296 6.247h1.87c2.42 0 4.155.453 5.205 1.361 1.05.908 1.575 2.376 1.575 4.405 0 2.1-.525 3.612-1.575 4.538-1.05.925-2.785 1.388-5.206 1.388H6.781c-2.456 0-4.2-.463-5.233-1.388C.516 93.9 0 92.389 0 90.289c0-1.887.498-3.32 1.495-4.298.997-.979 2.456-1.468 4.378-1.468h.908l14.308-39.83h-4.271c-2.42 0-4.156-.462-5.206-1.387-1.05-.926-1.575-2.42-1.575-4.485 0-2.1.525-3.613 1.575-4.538 1.05-.926 2.785-1.388 5.206-1.388h20.021c3.168 0 5.392 1.708 6.674 5.125v.16l16.924 46.343zm-27.976-39.83L24.72 67.225h15.483l-7.742-22.53zM89.506 68.56v16.284h8.008c5.66 0 9.646-.623 11.96-1.869 2.313-1.245 3.47-3.328 3.47-6.246 0-2.955-1.103-5.055-3.31-6.3-2.207-1.246-6.069-1.869-11.586-1.869h-8.542zm27.229-5.926c3.88 1.423 6.727 3.372 8.542 5.846 1.815 2.474 2.723 5.633 2.723 9.477 0 3.239-.783 6.193-2.35 8.862-1.565 2.67-3.808 4.859-6.726 6.567-1.709.997-3.622 1.718-5.74 2.163-2.118.445-5.116.667-8.996.667h-27.87c-2.349 0-4.03-.463-5.045-1.388-1.014-.926-1.521-2.438-1.521-4.538 0-1.887.48-3.32 1.441-4.298.961-.979 2.367-1.468 4.218-1.468h.907v-39.83h-.907c-1.851 0-3.257-.498-4.218-1.494-.961-.997-1.441-2.456-1.441-4.378 0-2.065.516-3.568 1.548-4.512 1.032-.943 2.705-1.414 5.018-1.414h24.56c7.51 0 13.214 1.459 17.111 4.377 3.898 2.92 5.847 7.19 5.847 12.814 0 2.776-.597 5.223-1.789 7.341-1.192 2.118-2.963 3.853-5.312 5.206zm-27.23-18.26v13.455h7.208c4.378 0 7.466-.516 9.264-1.549 1.797-1.032 2.696-2.776 2.696-5.232 0-2.313-.81-4.004-2.43-5.072-1.619-1.068-4.244-1.602-7.874-1.602h-8.863z\\\"/>\u003C/svg>\"},\"$:/core/images/new-button\":{\"title\":\"$:/core/images/new-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-new-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M56 72H8.007C3.591 72 0 68.418 0 64c0-4.41 3.585-8 8.007-8H56V8.007C56 3.591 59.582 0 64 0c4.41 0 8 3.585 8 8.007V56h47.993c4.416 0 8.007 3.582 8.007 8 0 4.41-3.585 8-8.007 8H72v47.993c0 4.416-3.582 8.007-8 8.007-4.41 0-8-3.585-8-8.007V72z\\\"/>\u003C/svg>\"},\"$:/core/images/new-here-button\":{\"title\":\"$:/core/images/new-here-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-new-here-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M55.838 20.935l-3.572.938c-3.688.968-8.23 4.43-10.136 7.731L3.37 96.738c-1.905 3.3-.771 7.524 2.534 9.432l33.717 19.466c3.297 1.904 7.53.78 9.435-2.521l38.76-67.134c1.905-3.3 2.632-8.963 1.623-12.646L83.285 20.88c-1.009-3.68-4.821-5.884-8.513-4.915l-7.603 1.995.043.287c.524 3.394 2.053 7.498 4.18 11.55.418.163.829.36 1.23.59a8.864 8.864 0 014.438 8.169c.104.132.21.264.316.395l-.386.318a8.663 8.663 0 01-1.082 3.137c-2.42 4.192-7.816 5.608-12.051 3.163-4.12-2.379-5.624-7.534-3.476-11.671-2.177-4.394-3.788-8.874-4.543-12.964z\\\"/>\u003Cpath d=\\\"M69.554 44.76c-5.944-7.476-10.74-17.196-11.955-25.059-1.68-10.875 3.503-18.216 15.082-18.04 10.407.158 19.975 5.851 24.728 13.785 5.208 8.695 2.95 17.868-6.855 20.496l-2.037-7.601c4.232-1.134 4.999-4.248 2.24-8.853-3.37-5.626-10.465-9.848-18.146-9.965-6.392-.097-8.31 2.62-7.323 9.01.999 6.465 5.318 15.138 10.582 21.65l-.072.06c.559 1.553-4.17 6.44-5.938 4.888l-.005.004-.028-.034a1.323 1.323 0 01-.124-.135 2.618 2.618 0 01-.149-.205z\\\"/>\u003Crect width=\\\"16\\\" height=\\\"48\\\" x=\\\"96\\\" y=\\\"80\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"48\\\" height=\\\"16\\\" x=\\\"80\\\" y=\\\"96\\\" rx=\\\"8\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/new-image-button\":{\"title\":\"$:/core/images/new-image-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-new-image-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M81.362 73.627l15.826-27.41a2.626 2.626 0 00-.962-3.59l-50.01-28.872a2.626 2.626 0 00-3.588.961L30.058 36.49l10.04-5.261c3.042-1.595 6.771.114 7.55 3.46l3.607 17.702 9.88.85a5.25 5.25 0 014.571 3.77c.034.115.1.344.199.671.165.553.353 1.172.562 1.843.595 1.914 1.23 3.85 1.872 5.678.207.588.412 1.156.614 1.701.625 1.685 1.209 3.114 1.725 4.207.255.54.485.977.726 1.427.214.212.547.425 1.011.622 1.141.482 2.784.74 4.657.758.864.008 1.71-.034 2.492-.11.448-.043.753-.085.871-.104.315-.053.625-.077.927-.076zM37.47 2.649A5.257 5.257 0 0144.649.725l63.645 36.746a5.257 5.257 0 011.923 7.178L73.47 108.294a5.257 5.257 0 01-7.177 1.923L2.649 73.47a5.257 5.257 0 01-1.924-7.177L37.471 2.649zm42.837 50.49a5.25 5.25 0 105.25-9.092 5.25 5.25 0 00-5.25 9.093zM96 112h-7.993c-4.419 0-8.007-3.582-8.007-8 0-4.41 3.585-8 8.007-8H96v-7.993C96 83.588 99.582 80 104 80c4.41 0 8 3.585 8 8.007V96h7.993c4.419 0 8.007 3.582 8.007 8 0 4.41-3.585 8-8.007 8H112v7.993c0 4.419-3.582 8.007-8 8.007-4.41 0-8-3.585-8-8.007V112zM33.347 51.791c7.428 7.948 9.01 10.69 7.449 13.394-1.56 2.703-13.838-2.328-16.094 1.58-2.256 3.908-.907 3.258-2.437 5.908l19.73 11.39s-5.605-8.255-4.235-10.628c2.515-4.356 8.77-1.256 10.365-4.019 2.414-4.181-5.103-9.639-14.778-17.625z\\\"/>\u003C/svg>\"},\"$:/core/images/new-journal-button\":{\"title\":\"$:/core/images/new-journal-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-new-journal-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M102.545 112.818v11.818c0 1.306 1.086 2.364 2.425 2.364h6.06c1.34 0 2.425-1.058 2.425-2.364v-11.818h12.12c1.34 0 2.425-1.058 2.425-2.363v-5.91c0-1.305-1.085-2.363-2.424-2.363h-12.121V90.364c0-1.306-1.086-2.364-2.425-2.364h-6.06c-1.34 0-2.425 1.058-2.425 2.364v11.818h-12.12c-1.34 0-2.425 1.058-2.425 2.363v5.91c0 1.305 1.085 2.363 2.424 2.363h12.121zM60.016 4.965c-4.781-2.76-10.897-1.118-13.656 3.66L5.553 79.305A9.993 9.993 0 009.21 92.963l51.04 29.468c4.78 2.76 10.897 1.118 13.655-3.66l40.808-70.681a9.993 9.993 0 00-3.658-13.656L60.016 4.965zm-3.567 27.963a6 6 0 106-10.393 6 6 0 00-6 10.393zm31.697 17.928a6 6 0 106-10.392 6 6 0 00-6 10.392z\\\"/>\u003Ctext class=\\\"tc-fill-background\\\" font-family=\\\"Helvetica\\\" font-size=\\\"47.172\\\" font-weight=\\\"bold\\\" transform=\\\"rotate(30 25.742 95.82)\\\">\u003Ctspan x=\\\"42\\\" y=\\\"77.485\\\" text-anchor=\\\"middle\\\">\u003C\u003Cnow \\\"DD\\\">>\u003C/tspan>\u003C/text>\u003C/g>\u003C/svg>\"},\"$:/core/images/opacity\":{\"title\":\"$:/core/images/opacity\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-opacity tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M102.362 65a51.595 51.595 0 01-1.942 6H82.584a35.867 35.867 0 002.997-6h16.78zm.472-2c.423-1.961.734-3.963.929-6H87.656a35.78 35.78 0 01-1.368 6h16.546zm-3.249 10a51.847 51.847 0 01-3.135 6H75.812a36.205 36.205 0 005.432-6h18.341zm-4.416 8c-1.424 2.116-3 4.12-4.71 6H60.46a35.843 35.843 0 0012.874-6h21.834zm-7.513-34h16.107C101.247 20.627 79.033 0 52 0 23.281 0 0 23.281 0 52c0 25.228 17.965 46.26 41.8 51h20.4a51.66 51.66 0 0015.875-6H39v-2h42.25a52.257 52.257 0 007.288-6H39v-2h4.539C27.739 83.194 16 68.968 16 52c0-19.882 16.118-36 36-36 18.186 0 33.222 13.484 35.656 31zm.22 2h16.039a52.823 52.823 0 010 6H87.877a36.483 36.483 0 000-6z\\\"/>\u003Cpath d=\\\"M76 128c28.719 0 52-23.281 52-52s-23.281-52-52-52-52 23.281-52 52 23.281 52 52 52zm0-16c19.882 0 36-16.118 36-36S95.882 40 76 40 40 56.118 40 76s16.118 36 36 36z\\\"/>\u003Cpath d=\\\"M37 58h53v4H37v-4zm3-8h53v4H40v-4zm0-8h53v4H40v-4zm-8 24h53v4H32v-4zm-2 8h53v4H30v-4zm-3 8h53v4H27v-4z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/open-window\":{\"title\":\"$:/core/images/open-window\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-open-window tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M16 112h88.994c3.87 0 7.006 3.59 7.006 8 0 4.418-3.142 8-7.006 8H7.006C3.136 128 0 124.41 0 120a9.321 9.321 0 010-.01V24.01C0 19.586 3.59 16 8 16c4.418 0 8 3.584 8 8.01V112z\\\"/>\u003Cpath d=\\\"M96 43.196V56a8 8 0 1016 0V24c0-4.41-3.585-8-8.007-8H72.007C67.588 16 64 19.582 64 24c0 4.41 3.585 8 8.007 8H84.57l-36.3 36.299a8 8 0 00-.001 11.316c3.117 3.117 8.19 3.123 11.316-.003L96 43.196zM32 7.999C32 3.581 35.588 0 40 0h80c4.419 0 8 3.588 8 8v80c0 4.419-3.588 8-8 8H40c-4.419 0-8-3.588-8-8V8z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/options-button\":{\"title\":\"$:/core/images/options-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-options-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M110.488 76a47.712 47.712 0 01-5.134 12.384l6.724 6.724c3.123 3.123 3.132 8.192.011 11.313l-5.668 5.668c-3.12 3.12-8.186 3.117-11.313-.01l-6.724-6.725c-3.82 2.258-7.98 4-12.384 5.134v9.505c0 4.417-3.578 8.007-7.992 8.007h-8.016C55.58 128 52 124.415 52 119.993v-9.505a47.712 47.712 0 01-12.384-5.134l-6.724 6.725c-3.123 3.122-8.192 3.131-11.313.01l-5.668-5.668c-3.12-3.12-3.116-8.186.01-11.313l6.725-6.724c-2.257-3.82-4-7.98-5.134-12.384H8.007C3.591 76 0 72.422 0 68.01v-8.017C0 55.58 3.585 52 8.007 52h9.505a47.712 47.712 0 015.134-12.383l-6.724-6.725c-3.123-3.122-3.132-8.191-.011-11.312l5.668-5.669c3.12-3.12 8.186-3.116 11.313.01l6.724 6.725c3.82-2.257 7.98-4 12.384-5.134V8.007C52 3.591 55.578 0 59.992 0h8.016C72.42 0 76 3.585 76 8.007v9.505a47.712 47.712 0 0112.384 5.134l6.724-6.724c3.123-3.123 8.192-3.132 11.313-.01l5.668 5.668c3.12 3.12 3.116 8.186-.01 11.312l-6.725 6.725c2.257 3.82 4 7.979 5.134 12.383h9.505c4.416 0 8.007 3.578 8.007 7.992v8.017c0 4.411-3.585 7.991-8.007 7.991h-9.505zM64 96c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32z\\\"/>\u003C/svg>\"},\"$:/core/images/paint\":{\"title\":\"$:/core/images/paint\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-paint tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M83.527 76.19C90.43 69.287 91.892 59 87.91 50.665l37.903-37.902c2.919-2.92 2.913-7.659 0-10.572a7.474 7.474 0 00-10.572 0L77.338 40.093c-8.335-3.982-18.622-2.521-25.526 4.383l31.715 31.715zm-2.643 2.644L49.169 47.119S8.506 81.243 0 80.282c0 0 3.782 5.592 6.827 8.039 14.024-5.69 37.326-24.6 37.326-24.6l.661.66S19.45 90.222 9.18 92.047c1.222 1.44 4.354 4.053 6.247 5.776 5.417-1.488 34.733-28.57 34.733-28.57l.661.66-32.407 31.022 5.285 5.286L56.106 75.2l.662.66s-27.864 30.536-28.684 32.432c0 0 6.032 6.853 7.569 7.824.702-2.836 27.884-33.485 27.884-33.485l.661.66s-20.597 23.755-24.964 36.732c3.21 3.549 7.5 5.137 10.926 6.298-2.19-11.817 30.724-47.487 30.724-47.487z\\\"/>\u003C/svg>\"},\"$:/core/images/palette\":{\"title\":\"$:/core/images/palette\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-palette tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M80.247 39.182a93.52 93.52 0 00-16.228-1.4C28.662 37.781 0 57.131 0 81.002c0 9.642 4.676 18.546 12.58 25.735C23.504 91.19 26.34 72.395 36.89 63.562c15.183-12.713 26.538-7.828 26.538-7.828l16.82-16.552zm26.535 9.655c13.049 7.913 21.257 19.392 21.257 32.166 0 9.35.519 17.411-11.874 25.08-10.797 6.681-3.824-6.536-11.844-10.898s-19.946 1.308-18.213 7.906c3.2 12.181 19.422 11.455 6.314 16.658-13.107 5.202-18.202 4.476-28.403 4.476-7.821 0-15.315-.947-22.243-2.68 9.844-4.197 27.88-12.539 33.354-19.456C82.788 92.409 87.37 80 83.324 72.484c-.194-.359 11.215-11.668 23.458-23.647zM1.134 123.867l-.66.002c33.479-14.94 22.161-64.226 58.818-64.226.317 1.418.644 2.944 1.062 4.494-25.907-4.166-23.567 48.031-59.22 59.73zm.713-.007c38.872-.506 78.152-22.347 78.152-44.813-9.27 0-14.073-3.48-16.816-7.942-16.597-7.003-30.365 45.715-61.336 52.755zm65.351-64.008c-4.45 4.115 4.886 16.433 11.318 11.318l45.27-45.27c11.317-11.318 0-22.635-11.318-11.318-11.317 11.318-33.518 34.405-45.27 45.27z\\\"/>\u003C/svg>\"},\"$:/core/images/permalink-button\":{\"title\":\"$:/core/images/permalink-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-permalink-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M80.483 48l-7.387 32h-25.58l7.388-32h25.58zm3.694-16l5.624-24.358c.993-4.303 5.29-6.996 9.596-6.002 4.296.992 6.988 5.293 5.994 9.602L100.598 32h3.403c4.41 0 7.999 3.582 7.999 8 0 4.41-3.581 8-8 8h-7.096l-7.387 32H104c4.41 0 7.999 3.582 7.999 8 0 4.41-3.581 8-8 8H85.824l-5.624 24.358c-.993 4.303-5.29 6.996-9.596 6.002-4.296-.992-6.988-5.293-5.994-9.602L69.402 96h-25.58L38.2 120.358c-.993 4.303-5.29 6.996-9.596 6.002-4.296-.992-6.988-5.293-5.994-9.602L27.402 96h-3.403C19.59 96 16 92.418 16 88c0-4.41 3.581-8 8-8h7.096l7.387-32H24C19.59 48 16 44.418 16 40c0-4.41 3.581-8 8-8h18.177l5.624-24.358c.993-4.303 5.29-6.996 9.596-6.002 4.296.992 6.988 5.293 5.994 9.602L58.598 32h25.58z\\\"/>\u003C/svg>\"},\"$:/core/images/permaview-button\":{\"title\":\"$:/core/images/permaview-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-permaview-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M81.483 48l-1.846 8h-5.58l1.847-8h5.58zm3.694-16l5.624-24.358c.993-4.303 5.29-6.996 9.596-6.002 4.296.992 6.988 5.293 5.994 9.602L101.598 32h2.403c4.41 0 7.999 3.582 7.999 8 0 4.41-3.581 8-8 8h-6.096l-1.847 8h7.944c4.41 0 7.999 3.582 7.999 8 0 4.41-3.581 8-8 8H92.364l-1.846 8H104c4.41 0 7.999 3.582 7.999 8 0 4.41-3.581 8-8 8H86.824l-5.624 24.358c-.993 4.303-5.29 6.996-9.596 6.002-4.296-.992-6.988-5.293-5.994-9.602L70.402 96h-5.58L59.2 120.358c-.993 4.303-5.29 6.996-9.596 6.002-4.296-.992-6.988-5.293-5.994-9.602L48.402 96h-5.58L37.2 120.358c-.993 4.303-5.29 6.996-9.596 6.002-4.296-.992-6.988-5.293-5.994-9.602L26.402 96h-2.403C19.59 96 16 92.418 16 88c0-4.41 3.581-8 8-8h6.096l1.847-8h-7.944C19.59 72 16 68.418 16 64c0-4.41 3.581-8 8-8h11.637l1.846-8H24C19.59 48 16 44.418 16 40c0-4.41 3.581-8 8-8h17.177l5.624-24.358c.993-4.303 5.29-6.996 9.596-6.002 4.296.992 6.988 5.293 5.994 9.602L57.598 32h5.58L68.8 7.642c.993-4.303 5.29-6.996 9.596-6.002 4.296.992 6.988 5.293 5.994 9.602L79.598 32h5.58zM53.904 48l-1.847 8h5.58l1.846-8h-5.579zm22.039 24l-1.847 8h-5.58l1.847-8h5.58zm-27.58 0l-1.846 8h5.579l1.847-8h-5.58z\\\"/>\u003C/svg>\"},\"$:/core/images/picture\":{\"title\":\"$:/core/images/picture\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-picture tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M112 68.233v-48.23A4.001 4.001 0 00107.997 16H20.003A4.001 4.001 0 0016 20.003v38.31l9.241-14.593c2.8-4.422 9.023-5.008 12.6-1.186l18.247 20.613 13.687-6.407a8 8 0 018.903 1.492 264.97 264.97 0 002.92 2.739 249.44 249.44 0 006.798 6.066 166.5 166.5 0 002.106 1.778c2.108 1.747 3.967 3.188 5.482 4.237.748.518 1.383.92 2.044 1.33.444.117 1.046.144 1.809.05 1.873-.233 4.238-1.144 6.723-2.547a36.016 36.016 0 003.205-2.044c.558-.4.93-.686 1.07-.802.376-.31.765-.577 1.165-.806zM0 8.007A8.01 8.01 0 018.007 0h111.986A8.01 8.01 0 01128 8.007v111.986a8.01 8.01 0 01-8.007 8.007H8.007A8.01 8.01 0 010 119.993V8.007zM95 42a8 8 0 100-16 8 8 0 000 16zM32 76c15.859 4.83 20.035 7.244 20.035 12S32 95.471 32 102.347c0 6.876 1.285 4.99 1.285 9.653H68s-13.685-6.625-13.685-10.8c0-7.665 10.615-8.34 10.615-13.2 0-7.357-14.078-8.833-32.93-12z\\\"/>\u003C/svg>\"},\"$:/core/images/plugin-generic-language\":{\"title\":\"$:/core/images/plugin-generic-language\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\" class=\\\"tc-image-plugin-generic-language tc-image-button\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M61.207 68.137c-4.324 2.795-6.999 6.656-6.999 10.921 0 7.906 9.19 14.424 21.042 15.336 2.162 3.902 8.598 6.785 16.318 7.01-5.126-1.125-9.117-3.742-10.62-7.01C92.805 93.487 102 86.967 102 79.059c0-8.53-10.699-15.445-23.896-15.445-6.599 0-12.572 1.729-16.897 4.524zm12.794-14.158c-4.324 2.795-10.298 4.524-16.897 4.524-2.619 0-5.14-.272-7.497-.775-3.312 2.25-8.383 3.69-14.067 3.69l-.255-.002c4.119-.892 7.511-2.747 9.478-5.13-6.925-2.704-11.555-7.617-11.555-13.228 0-8.53 10.699-15.445 23.896-15.445C70.301 27.613 81 34.528 81 43.058c0 4.265-2.675 8.126-6.999 10.921zM64 0l54.56 32v64L64 128 9.44 96V32L64 0z\\\"/>\u003C/svg>\"},\"$:/core/images/plugin-generic-plugin\":{\"title\":\"$:/core/images/plugin-generic-plugin\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\" class=\\\"tc-image-plugin-generic-plugin tc-image-button\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M40.397 76.446V95.34h14.12l-.001-.005a6.912 6.912 0 005.364-11.593l.046-.023a6.912 6.912 0 119.979.526l.086.055a6.914 6.914 0 004.408 10.948l-.023.092h21.32V75.568l-.15.038a6.912 6.912 0 00-11.593-5.364l-.022-.046a6.912 6.912 0 11.526-9.979l.055-.086a6.914 6.914 0 0010.948-4.408c.079.018.158.038.236.059v-15.74h-21.32l.023-.094a6.914 6.914 0 01-4.408-10.947 10.23 10.23 0 00-.086-.055 6.912 6.912 0 10-9.979-.526l-.046.023a6.912 6.912 0 01-5.364 11.593l.001.005h-14.12v12.847A6.912 6.912 0 0129.5 59.843l-.054.086a6.912 6.912 0 10-.526 9.979l.023.046a6.912 6.912 0 0111.455 6.492zM64 0l54.56 32v64L64 128 9.44 96V32L64 0z\\\"/>\u003C/svg>\"},\"$:/core/images/plugin-generic-theme\":{\"title\":\"$:/core/images/plugin-generic-theme\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" viewBox=\\\"0 0 128 128\\\" class=\\\"tc-image-plugin-generic-theme tc-image-button\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M29.408 91.472L51.469 69.41l-.004-.005a2.22 2.22 0 01.004-3.146c.87-.87 2.281-.872 3.147-.005l9.465 9.464a2.22 2.22 0 01-.005 3.147c-.87.87-2.28.871-3.147.005l-.005-.005-22.061 22.062a6.686 6.686 0 11-9.455-9.455zM60.802 66.38c-2.436-2.704-4.465-5.091-5.817-6.869-6.855-9.014-10.313-4.268-14.226 0-3.913 4.268 1.03 7.726-2.683 10.741-3.713 3.015-3.484 4.06-9.752-1.455-6.267-5.516-6.7-7.034-3.823-10.181 2.877-3.147 5.281 1.808 11.159-3.785 5.877-5.593.94-10.55.94-10.55s12.237-25.014 28.588-23.167c16.351 1.848-6.186-2.392-11.792 17.226-2.4 8.4.447 6.42 4.998 9.968 1.394 1.086 6.03 4.401 11.794 8.685l20.677-20.676 1.615-4.766 7.84-4.689 3.151 3.152-4.688 7.84-4.766 1.615-20.224 20.223c12.663 9.547 28.312 22.146 28.312 26.709 0 7.217-3.071 11.526-9.535 9.164-4.693-1.715-18.768-15.192-28.753-25.897l-2.893 2.893-3.151-3.152 3.029-3.029zM63.953 0l54.56 32v64l-54.56 32-54.56-32V32l54.56-32z\\\"/>\u003C/svg>\"},\"$:/core/images/plus-button\":{\"title\":\"$:/core/images/plus-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-plus-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M64-.333c35.346 0 64 28.654 64 64 0 35.346-28.654 64-64 64-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64zM64 16c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z\\\"/>\u003Crect width=\\\"80\\\" height=\\\"16\\\" x=\\\"24\\\" y=\\\"56\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"16\\\" height=\\\"80\\\" x=\\\"56\\\" y=\\\"24\\\" rx=\\\"8\\\"/>\u003C/svg>\"},\"$:/core/images/preview-closed\":{\"title\":\"$:/core/images/preview-closed\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-preview-closed tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M.088 64a7.144 7.144 0 001.378 5.458C16.246 88.818 39.17 100.414 64 100.414c24.83 0 47.753-11.596 62.534-30.956A7.144 7.144 0 00127.912 64C110.582 78.416 88.304 87.086 64 87.086 39.696 87.086 17.418 78.416.088 64z\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"62\\\" y=\\\"96\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"78\\\" y=\\\"93\\\" rx=\\\"4\\\" transform=\\\"rotate(-5 80 101)\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"46\\\" y=\\\"93\\\" rx=\\\"4\\\" transform=\\\"rotate(5 48 101)\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"30\\\" y=\\\"88\\\" rx=\\\"4\\\" transform=\\\"rotate(10 32 96)\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"94\\\" y=\\\"88\\\" rx=\\\"4\\\" transform=\\\"rotate(-10 96 96)\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"110\\\" y=\\\"80\\\" rx=\\\"4\\\" transform=\\\"rotate(-20 112 88)\\\"/>\u003Crect width=\\\"4\\\" height=\\\"16\\\" x=\\\"14\\\" y=\\\"80\\\" rx=\\\"4\\\" transform=\\\"rotate(20 16 88)\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/preview-open\":{\"title\":\"$:/core/images/preview-open\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-preview-open tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M64.11 99.588c-24.83 0-47.754-11.596-62.534-30.957a7.148 7.148 0 010-8.675C16.356 40.596 39.28 29 64.11 29c24.83 0 47.753 11.596 62.534 30.956a7.148 7.148 0 010 8.675c-14.78 19.36-37.703 30.957-62.534 30.957zm46.104-32.007c1.44-1.524 1.44-3.638 0-5.162C99.326 50.9 82.439 44 64.147 44S28.968 50.9 18.08 62.42c-1.44 1.523-1.44 3.637 0 5.16C28.968 79.1 45.855 86 64.147 86s35.179-6.9 46.067-18.42z\\\"/>\u003Cpath d=\\\"M63.5 88C76.479 88 87 77.479 87 64.5S76.479 41 63.5 41 40 51.521 40 64.5 50.521 88 63.5 88z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/print-button\":{\"title\":\"$:/core/images/print-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-print-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M112 71V30.5h-.032c-.035-2-.816-3.99-2.343-5.516L86.998 2.357A7.978 7.978 0 0081 .02V0H24a8 8 0 00-8 8v63h8V8h57v14.5c0 4.422 3.582 8 8 8h15V71h8z\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"36\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"64\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"52\\\" rx=\\\"4\\\"/>\u003Crect width=\\\"40\\\" height=\\\"8\\\" x=\\\"32\\\" y=\\\"20\\\" rx=\\\"4\\\"/>\u003Cpath d=\\\"M0 80.005C0 71.165 7.156 64 16 64h96c8.836 0 16 7.155 16 16.005v31.99c0 8.84-7.156 16.005-16 16.005H16c-8.836 0-16-7.155-16-16.005v-31.99zM104 96a8 8 0 100-16 8 8 0 000 16z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/quote\":{\"title\":\"$:/core/images/quote\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-quote tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M51.219 117.713V62.199H27.427c0-8.891 1.683-16.401 5.047-22.53 3.365-6.127 9.613-10.754 18.745-13.878V2c-7.45.961-14.36 3.184-20.728 6.669-6.368 3.484-11.835 7.87-16.401 13.157C9.524 27.113 5.98 33.241 3.456 40.21.933 47.18-.21 54.63.03 62.56v55.153H51.22zm76.781 0V62.199h-23.791c0-8.891 1.682-16.401 5.046-22.53 3.365-6.127 9.613-10.754 18.745-13.878V2c-7.45.961-14.359 3.184-20.727 6.669-6.369 3.484-11.836 7.87-16.402 13.157-4.566 5.287-8.11 11.415-10.634 18.384-2.523 6.97-3.665 14.42-3.424 22.35v55.153H128z\\\"/>\u003C/svg>\"},\"$:/core/images/refresh-button\":{\"title\":\"$:/core/images/refresh-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-refresh-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M106.369 39.433c10.16 20.879 6.57 46.764-10.771 64.106-21.87 21.87-57.327 21.87-79.196 0-21.87-21.87-21.87-57.326 0-79.196a8 8 0 1111.314 11.314c-15.621 15.62-15.621 40.947 0 56.568 15.62 15.621 40.947 15.621 56.568 0C97.72 78.79 99.6 58.175 89.924 42.73l-6.44 12.264a8 8 0 11-14.166-7.437L84.435 18.76a8 8 0 0110.838-3.345l28.873 15.345a8 8 0 11-7.51 14.129l-10.267-5.457zm-8.222-12.368c-.167-.19-.336-.38-.506-.57l.96-.296-.454.866z\\\"/>\u003C/svg>\"},\"$:/core/images/right-arrow\":{\"title\":\"$:/core/images/right-arrow\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-right-arrow tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M99.069 64.173c0 2.027-.77 4.054-2.316 5.6l-55.98 55.98a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196l50.382-50.382-50.382-50.382a7.92 7.92 0 010-11.195c3.086-3.085 8.104-3.092 11.196 0l55.98 55.98a7.892 7.892 0 012.316 5.595z\\\"/>\u003C/svg>\"},\"$:/core/images/rotate-left\":{\"title\":\"$:/core/images/rotate-left\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-rotate-left tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"32\\\" height=\\\"80\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"80\\\" height=\\\"32\\\" x=\\\"48\\\" y=\\\"96\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M61.32 36.65c19.743 2.45 35.023 19.287 35.023 39.693a4 4 0 01-8 0c0-15.663-11.254-28.698-26.117-31.46l3.916 3.916a4 4 0 11-5.657 5.657L49.172 43.142a4 4 0 010-5.657l11.313-11.313a4 4 0 115.657 5.656l-4.821 4.822z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/save-button\":{\"title\":\"$:/core/images/save-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-save-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M120.783 34.33c4.641 8.862 7.266 18.948 7.266 29.646 0 35.347-28.653 64-64 64-35.346 0-64-28.653-64-64 0-35.346 28.654-64 64-64 18.808 0 35.72 8.113 47.43 21.03l2.68-2.68c3.13-3.13 8.197-3.132 11.321-.008 3.118 3.118 3.121 8.193-.007 11.32l-4.69 4.691zm-12.058 12.058a47.876 47.876 0 013.324 17.588c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48c14.39 0 27.3 6.332 36.098 16.362L58.941 73.544 41.976 56.578c-3.127-3.127-8.201-3.123-11.32-.005-3.123 3.124-3.119 8.194.006 11.319l22.617 22.617a7.992 7.992 0 005.659 2.347c2.05 0 4.101-.783 5.667-2.349l44.12-44.12z\\\"/>\u003C/svg>\"},\"$:/core/images/size\":{\"title\":\"$:/core/images/size\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-size tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M92.343 26l-9.171 9.172a4 4 0 105.656 5.656l16-16a4 4 0 000-5.656l-16-16a4 4 0 10-5.656 5.656L92.343 18H22a4 4 0 00-4 4v70.343l-9.172-9.171a4 4 0 10-5.656 5.656l16 16a4 4 0 005.656 0l16-16a4 4 0 10-5.656-5.656L26 92.343V22l-4 4h70.343zM112 52v64l4-4H52a4 4 0 100 8h64a4 4 0 004-4V52a4 4 0 10-8 0z\\\"/>\u003C/svg>\"},\"$:/core/images/spiral\":{\"title\":\"$:/core/images/spiral\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-spiral tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M64.534 68.348c3.39 0 6.097-2.62 6.476-5.968l-4.755-.538 4.75.583c.377-3.07-1.194-6.054-3.89-7.78-2.757-1.773-6.34-2.01-9.566-.7-3.46 1.403-6.14 4.392-7.35 8.148l-.01.026c-1.3 4.08-.72 8.64 1.58 12.52 2.5 4.2 6.77 7.2 11.76 8.27 5.37 1.15 11.11-.05 15.83-3.31 5.04-3.51 8.46-9.02 9.45-15.3 1.05-6.7-.72-13.63-4.92-19.19l.02.02c-4.42-5.93-11.2-9.82-18.78-10.78-7.96-1.01-16.13 1.31-22.59 6.43-6.81 5.39-11.18 13.41-12.11 22.26-.98 9.27 1.87 18.65 7.93 26.02 6.32 7.69 15.6 12.56 25.74 13.48 10.54.96 21.15-2.42 29.45-9.4l.01-.01c8.58-7.25 13.94-17.78 14.86-29.21.94-11.84-2.96-23.69-10.86-32.9-8.19-9.5-19.95-15.36-32.69-16.27-13.16-.94-26.24 3.49-36.34 12.34l.01-.01c-10.41 9.08-16.78 22.1-17.68 36.15-.93 14.44 4.03 28.77 13.79 39.78 10.03 11.32 24.28 18.2 39.6 19.09 15.73.92 31.31-4.56 43.24-15.234 12.23-10.954 19.61-26.44 20.5-43.074a4.785 4.785 0 00-4.52-5.03 4.778 4.778 0 00-5.03 4.52c-.75 14.1-7 27.2-17.33 36.45-10.03 8.98-23.11 13.58-36.3 12.81-12.79-.75-24.67-6.48-33-15.89-8.07-9.11-12.17-20.94-11.41-32.827.74-11.52 5.942-22.15 14.43-29.54l.01-.01c8.18-7.17 18.74-10.75 29.35-9.998 10.21.726 19.6 5.41 26.11 12.96 6.24 7.273 9.32 16.61 8.573 25.894-.718 8.9-4.88 17.064-11.504 22.66l.01-.007c-6.36 5.342-14.44 7.92-22.425 7.19-7.604-.68-14.52-4.314-19.21-10.027-4.44-5.4-6.517-12.23-5.806-18.94.67-6.3 3.76-11.977 8.54-15.766 4.46-3.54 10.05-5.128 15.44-4.44 5.03.63 9.46 3.18 12.32 7.01l.02.024c2.65 3.5 3.75 7.814 3.1 11.92-.59 3.71-2.58 6.925-5.45 8.924-2.56 1.767-5.61 2.403-8.38 1.81-2.42-.516-4.42-1.92-5.53-3.79-.93-1.56-1.15-3.3-.69-4.75l-4.56-1.446L59.325 65c.36-1.12 1.068-1.905 1.84-2.22.25-.103.48-.14.668-.13.06.006.11.015.14.025.01 0 .01 0-.01-.01a1.047 1.047 0 01-.264-.332c-.15-.29-.23-.678-.18-1.11l-.005.04c.15-1.332 1.38-2.523 3.035-2.523-2.65 0-4.79 2.144-4.79 4.787s2.14 4.785 4.78 4.785z\\\"/>\u003C/svg>\"},\"$:/core/images/stamp\":{\"title\":\"$:/core/images/stamp\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-stamp tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M49.733 64H16.01C11.584 64 8 67.583 8 72.003V97h112V72.003A8 8 0 00111.99 64H78.267A22.813 22.813 0 0175.5 53.077c0-6.475 2.687-12.324 7.009-16.497A22.818 22.818 0 0087 22.952C87 10.276 76.703 0 64 0S41 10.276 41 22.952c0 5.103 1.669 9.817 4.491 13.628 4.322 4.173 7.009 10.022 7.009 16.497 0 3.954-1.002 7.675-2.767 10.923zM8 104h112v8H8v-8z\\\"/>\u003C/svg>\"},\"$:/core/images/star-filled\":{\"title\":\"$:/core/images/star-filled\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-star-filled tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M61.836 96.823l37.327 27.287c2.72 1.99 6.379-.69 5.343-3.912L90.29 75.988l-1.26 3.91 37.285-27.345c2.718-1.993 1.32-6.327-2.041-6.33l-46.113-.036 3.3 2.416L67.176 4.416c-1.04-3.221-5.563-3.221-6.604 0L46.29 48.603l3.3-2.416-46.113.036c-3.362.003-4.759 4.337-2.04 6.33L38.72 79.898l-1.26-3.91-14.216 44.21c-1.036 3.223 2.622 5.901 5.343 3.912l37.326-27.287h-4.078z\\\"/>\u003C/svg>\"},\"$:/core/images/storyview-classic\":{\"title\":\"$:/core/images/storyview-classic\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-storyview-classic tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M8.007 0A8.01 8.01 0 000 8.007v111.986A8.01 8.01 0 008.007 128h111.986a8.01 8.01 0 008.007-8.007V8.007A8.01 8.01 0 00119.993 0H8.007zm15.992 16C19.581 16 16 19.578 16 23.992v16.016C16 44.422 19.588 48 24 48h80c4.419 0 8-3.578 8-7.992V23.992c0-4.414-3.588-7.992-8-7.992H24zm0 48C19.581 64 16 67.59 16 72c0 4.418 3.588 8 8 8h80c4.419 0 8-3.59 8-8 0-4.418-3.588-8-8-8H24zm0 32C19.581 96 16 99.59 16 104c0 4.418 3.588 8 8 8h80c4.419 0 8-3.59 8-8 0-4.418-3.588-8-8-8H24z\\\"/>\u003C/svg>\"},\"$:/core/images/storyview-pop\":{\"title\":\"$:/core/images/storyview-pop\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-storyview-pop tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M8.007 0A8.01 8.01 0 000 8.007v111.986A8.01 8.01 0 008.007 128h111.986a8.01 8.01 0 008.007-8.007V8.007A8.01 8.01 0 00119.993 0H8.007zm15.992 16C19.581 16 16 19.578 16 23.992v16.016C16 44.422 19.588 48 24 48h80c4.419 0 8-3.578 8-7.992V23.992c0-4.414-3.588-7.992-8-7.992H24zm-7.99 40C11.587 56 8 59.578 8 63.992v16.016C8 84.422 11.584 88 16.01 88h95.98c4.424 0 8.01-3.578 8.01-7.992V63.992c0-4.414-3.584-7.992-8.01-7.992H16.01zM24 96C19.581 96 16 99.59 16 104c0 4.418 3.588 8 8 8h80c4.419 0 8-3.59 8-8 0-4.418-3.588-8-8-8H24zm0-32C19.581 64 16 67.59 16 72c0 4.418 3.588 8 8 8h80c4.419 0 8-3.59 8-8 0-4.418-3.588-8-8-8H24z\\\"/>\u003C/svg>\"},\"$:/core/images/storyview-zoomin\":{\"title\":\"$:/core/images/storyview-zoomin\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-storyview-zoomin tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M8.007 0A8.01 8.01 0 000 8.007v111.986A8.01 8.01 0 008.007 128h111.986a8.01 8.01 0 008.007-8.007V8.007A8.01 8.01 0 00119.993 0H8.007zm15.992 16A8 8 0 0016 24.009V71.99C16 76.414 19.588 80 24 80h80a8 8 0 008-8.009V24.01c0-4.423-3.588-8.009-8-8.009H24z\\\"/>\u003C/svg>\"},\"$:/core/images/strikethrough\":{\"title\":\"$:/core/images/strikethrough\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-strikethrough tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M92.794 38.726h15.422c-.229-6.74-1.514-12.538-3.856-17.393-2.342-4.855-5.54-8.881-9.596-12.08-4.055-3.199-8.767-5.54-14.136-7.025C75.258.743 69.433 0 63.15 0a62.76 62.76 0 00-16.364 2.142C41.474 3.57 36.733 5.74 32.564 8.653c-4.17 2.913-7.511 6.626-10.025 11.138-2.513 4.512-3.77 9.853-3.77 16.022 0 5.597 1.115 10.252 3.342 13.965 2.228 3.712 5.198 6.74 8.91 9.081 3.713 2.342 7.911 4.227 12.595 5.655a194.641 194.641 0 0014.308 3.77c4.855 1.085 9.624 2.142 14.308 3.17 4.683 1.028 8.881 2.37 12.594 4.027 3.713 1.656 6.683 3.798 8.91 6.425 2.228 2.628 3.342 6.055 3.342 10.281 0 4.456-.914 8.111-2.742 10.967a19.953 19.953 0 01-7.197 6.768c-2.97 1.657-6.311 2.828-10.024 3.513a60.771 60.771 0 01-11.052 1.028c-4.57 0-9.025-.571-13.366-1.713-4.34-1.143-8.139-2.913-11.394-5.312-3.256-2.4-5.884-5.455-7.883-9.168-1.999-3.712-2.998-8.139-2.998-13.28H15c0 7.426 1.342 13.852 4.027 19.278 2.684 5.426 6.34 9.881 10.966 13.365 4.627 3.484 9.996 6.083 16.107 7.797 6.112 1.713 12.595 2.57 19.449 2.57 5.597 0 11.223-.657 16.878-1.97 5.655-1.314 10.767-3.428 15.336-6.34 4.57-2.914 8.31-6.683 11.224-11.31 2.913-4.626 4.37-10.195 4.37-16.707 0-6.054-1.115-11.08-3.342-15.079-2.228-3.998-5.198-7.31-8.91-9.938-3.713-2.627-7.911-4.712-12.595-6.254a170.83 170.83 0 00-14.308-4.027 549.669 549.669 0 00-14.308-3.17c-4.683-.971-8.881-2.2-12.594-3.684-3.713-1.485-6.683-3.399-8.91-5.74-2.228-2.342-3.342-5.398-3.342-9.168 0-3.998.771-7.34 2.313-10.024 1.543-2.685 3.599-4.826 6.17-6.426 2.57-1.599 5.51-2.741 8.824-3.427a49.767 49.767 0 0110.11-1.028c8.453 0 15.393 1.97 20.819 5.912 5.426 3.94 8.596 10.31 9.51 19.106z\\\"/>\u003Cpath d=\\\"M5 54h118v16H5z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/subscript\":{\"title\":\"$:/core/images/subscript\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-subscript tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M2.272 16h19.91l21.649 33.675L66.414 16h18.708L53.585 61.969l33.809 49.443H67.082L43.296 74.93l-24.187 36.48H0L33.808 61.97 2.272 16zM127.91 128.412H85.328c.059-5.168 1.306-9.681 3.741-13.542 2.435-3.86 5.761-7.216 9.978-10.066a112.388 112.388 0 016.325-4.321 50.09 50.09 0 006.058-4.499c1.841-1.603 3.356-3.34 4.543-5.211 1.188-1.871 1.812-4.024 1.871-6.46 0-1.128-.133-2.33-.4-3.607a9.545 9.545 0 00-1.56-3.564c-.772-1.098-1.84-2.019-3.207-2.761-1.366-.743-3.148-1.114-5.345-1.114-2.02 0-3.697.4-5.033 1.203-1.337.801-2.406 1.9-3.208 3.296-.801 1.396-1.395 3.044-1.781 4.944-.386 1.9-.609 3.95-.668 6.147H86.486c0-3.445.46-6.637 1.38-9.577.921-2.94 2.302-5.478 4.143-7.617 1.841-2.138 4.083-3.815 6.726-5.033 2.643-1.217 5.716-1.826 9.22-1.826 3.802 0 6.979.623 9.533 1.87 2.554 1.248 4.617 2.822 6.191 4.722 1.574 1.9 2.688 3.965 3.341 6.192.653 2.227.98 4.35.98 6.37 0 2.494-.386 4.75-1.158 6.77a21.803 21.803 0 01-3.118 5.568 31.516 31.516 0 01-4.454 4.677 66.788 66.788 0 01-5.167 4.009 139.198 139.198 0 01-5.346 3.563 79.237 79.237 0 00-4.944 3.386c-1.514 1.128-2.836 2.3-3.964 3.518-1.129 1.218-1.9 2.51-2.317 3.876h30.379v9.087z\\\"/>\u003C/svg>\"},\"$:/core/images/superscript\":{\"title\":\"$:/core/images/superscript\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-superscript tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M2.272 16h19.91l21.649 33.675L66.414 16h18.708L53.585 61.969l33.809 49.443H67.082L43.296 74.93l-24.187 36.48H0L33.808 61.97 2.272 16zM127.91 63.412H85.328c.059-5.168 1.306-9.681 3.741-13.542 2.435-3.86 5.761-7.216 9.978-10.066a112.388 112.388 0 016.325-4.321 50.09 50.09 0 006.058-4.499c1.841-1.603 3.356-3.34 4.543-5.211 1.188-1.871 1.812-4.024 1.871-6.46 0-1.128-.133-2.33-.4-3.607a9.545 9.545 0 00-1.56-3.564c-.772-1.098-1.84-2.019-3.207-2.761-1.366-.743-3.148-1.114-5.345-1.114-2.02 0-3.697.4-5.033 1.203-1.337.801-2.406 1.9-3.208 3.296-.801 1.396-1.395 3.044-1.781 4.944-.386 1.9-.609 3.95-.668 6.147H86.486c0-3.445.46-6.637 1.38-9.577.921-2.94 2.302-5.478 4.143-7.617 1.841-2.138 4.083-3.815 6.726-5.033 2.643-1.217 5.716-1.826 9.22-1.826 3.802 0 6.979.623 9.533 1.87 2.554 1.248 4.617 2.822 6.191 4.722 1.574 1.9 2.688 3.965 3.341 6.192.653 2.227.98 4.35.98 6.37 0 2.494-.386 4.75-1.158 6.77a21.803 21.803 0 01-3.118 5.568 31.516 31.516 0 01-4.454 4.677 66.788 66.788 0 01-5.167 4.009 139.198 139.198 0 01-5.346 3.563 79.237 79.237 0 00-4.944 3.386c-1.514 1.128-2.836 2.3-3.964 3.518-1.129 1.218-1.9 2.51-2.317 3.876h30.379v9.087z\\\"/>\u003C/svg>\"},\"$:/core/images/tag-button\":{\"title\":\"$:/core/images/tag-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-tag-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M18.164 47.66l.004 4.105c.003 3.823 2.19 9.097 4.885 11.792l61.85 61.85c2.697 2.697 7.068 2.69 9.769-.01L125.767 94.3a6.903 6.903 0 00.01-9.77L63.928 22.683c-2.697-2.697-7.976-4.88-11.796-4.881l-27.076-.007a6.902 6.902 0 00-6.91 6.91l.008 9.96.287.033c3.73.411 8.489-.044 13.365-1.153a9.702 9.702 0 0111.14-3.662l.291-.13.128.285a9.7 9.7 0 013.3 2.17c3.796 3.796 3.801 9.945.012 13.734-3.618 3.618-9.386 3.777-13.204.482-5.365 1.122-10.674 1.596-15.309 1.237z\\\"/>\u003Cpath d=\\\"M47.633 39.532l.023.051c-9.689 4.356-21.584 6.799-30.396 5.828C5.273 44.089-1.028 36.43 2.443 24.078 5.562 12.976 14.3 4.361 24.047 1.548c10.68-3.083 19.749 1.968 19.749 13.225h-8.623c0-4.859-3.078-6.573-8.735-4.94-6.91 1.995-13.392 8.383-15.694 16.577-1.915 6.818.417 9.653 7.46 10.43 7.126.785 17.531-1.352 25.917-5.121l.027.06.036-.017c1.76-.758 6.266 6.549 3.524 7.74a2.8 2.8 0 01-.075.03z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/theme-button\":{\"title\":\"$:/core/images/theme-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-theme-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M55.854 66.945a122.626 122.626 0 01-3.9-4.819c-11.064-14.548-16.645-6.888-22.96 0-6.315 6.888 1.664 12.47-4.33 17.335-5.993 4.866-5.623 6.552-15.737-2.35-10.115-8.9-10.815-11.351-6.172-16.43 4.644-5.08 8.524 2.918 18.01-6.108 9.485-9.026 1.517-17.026 1.517-17.026S42.03-2.824 68.42.157c26.39 2.982-9.984-3.86-19.031 27.801-3.874 13.556.72 10.362 8.066 16.087 1.707 1.33 6.428 4.732 12.671 9.318-6.129 5.879-11.157 10.669-14.273 13.582zm11.641 12.947c16.013 17.036 37.742 37.726 45.117 40.42 10.432 3.813 15.388-3.141 15.388-14.79 0-7.151-23.83-26.542-43.924-41.769-7.408 7.156-13.376 12.953-16.58 16.139z\\\"/>\u003Cpath d=\\\"M11.069 109.828L46.31 74.587a3.56 3.56 0 115.037-5.032l15.098 15.098a3.56 3.56 0 11-5.032 5.037l-35.24 35.241c-4.171 4.17-10.933 4.17-15.104 0-4.17-4.17-4.17-10.933 0-15.103zM124.344 6.622l5.034 5.034-7.49 12.524-7.613 2.58L61.413 79.62l-5.034-5.034 52.861-52.862 2.58-7.614 12.524-7.49z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/timestamp-off\":{\"title\":\"$:/core/images/timestamp-off\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-timestamp-off tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M58.25 11C26.08 11 0 37.082 0 69.25s26.08 58.25 58.25 58.25c32.175 0 58.25-26.082 58.25-58.25S90.425 11 58.25 11zm0 100.5C34.914 111.5 16 92.586 16 69.25 16 45.92 34.914 27 58.25 27s42.25 18.92 42.25 42.25c0 23.336-18.914 42.25-42.25 42.25zM49.704 10a5 5 0 010-10H66.69a5 5 0 015 5c.006 2.757-2.238 5-5 5H49.705z\\\"/>\u003Cpath d=\\\"M58.25 35.88c-18.777 0-33.998 15.224-33.998 33.998 0 18.773 15.22 34.002 33.998 34.002 18.784 0 34.002-15.23 34.002-34.002 0-18.774-15.218-33.998-34.002-33.998zm-3.03 50.123H44.196v-34H55.22v34zm16.976 0H61.17v-34h11.025v34z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/timestamp-on\":{\"title\":\"$:/core/images/timestamp-on\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-timestamp-on tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Cpath d=\\\"M58.25 11C26.08 11 0 37.082 0 69.25s26.08 58.25 58.25 58.25c32.175 0 58.25-26.082 58.25-58.25S90.425 11 58.25 11zm0 100.5C34.914 111.5 16 92.586 16 69.25 16 45.92 34.914 27 58.25 27s42.25 18.92 42.25 42.25c0 23.336-18.914 42.25-42.25 42.25zM49.704 10a5 5 0 010-10H66.69a5 5 0 015 5c.006 2.757-2.238 5-5 5H49.705z\\\"/>\u003Cpath d=\\\"M13.41 27.178a5.005 5.005 0 01-7.045-.613 5.008 5.008 0 01.616-7.047l9.95-8.348a5 5 0 016.429 7.661l-9.95 8.348zm89.573 0a5.005 5.005 0 007.045-.613 5.008 5.008 0 00-.616-7.047l-9.95-8.348a5 5 0 00-6.428 7.661l9.95 8.348zM65.097 71.072c0 3.826-3.09 6.928-6.897 6.928-3.804.006-6.9-3.102-6.903-6.928 0 0 4.76-39.072 6.903-39.072s6.897 39.072 6.897 39.072z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/tip\":{\"title\":\"$:/core/images/tip\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-tip tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M64 128.242c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64-35.346 0-64 28.654-64 64 0 35.346 28.654 64 64 64zm11.936-36.789c-.624 4.129-5.73 7.349-11.936 7.349-6.206 0-11.312-3.22-11.936-7.349C54.33 94.05 58.824 95.82 64 95.82c5.175 0 9.67-1.769 11.936-4.366zm0 4.492c-.624 4.13-5.73 7.349-11.936 7.349-6.206 0-11.312-3.22-11.936-7.349 2.266 2.597 6.76 4.366 11.936 4.366 5.175 0 9.67-1.769 11.936-4.366zm0 4.456c-.624 4.129-5.73 7.349-11.936 7.349-6.206 0-11.312-3.22-11.936-7.349 2.266 2.597 6.76 4.366 11.936 4.366 5.175 0 9.67-1.769 11.936-4.366zm0 4.492c-.624 4.13-5.73 7.349-11.936 7.349-6.206 0-11.312-3.22-11.936-7.349 2.266 2.597 6.76 4.366 11.936 4.366 5.175 0 9.67-1.769 11.936-4.366zM64.3 24.242c11.618 0 23.699 7.82 23.699 24.2S75.92 71.754 75.92 83.576c0 5.873-5.868 9.26-11.92 9.26s-12.027-3.006-12.027-9.26C51.973 71.147 40 65.47 40 48.442s12.683-24.2 24.301-24.2z\\\"/>\u003C/svg>\"},\"$:/core/images/transcludify\":{\"title\":\"$:/core/images/transcludify\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-transcludify-button tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M0 59.482c.591 0 1.36-.089 2.306-.266a10.417 10.417 0 002.75-.932 6.762 6.762 0 002.306-1.907c.651-.828.976-1.863.976-3.104V35.709c0-2.01.414-3.74 1.242-5.19.828-1.448 1.833-2.66 3.016-3.636s2.425-1.7 3.726-2.173c1.3-.473 2.424-.71 3.37-.71h8.073v7.451h-4.88c-1.241 0-2.232.207-2.97.621-.74.414-1.302.932-1.686 1.552a4.909 4.909 0 00-.71 1.996c-.089.71-.133 1.39-.133 2.04v16.677c0 1.715-.325 3.134-.976 4.258-.65 1.123-1.434 2.025-2.35 2.705-.917.68-1.863 1.168-2.839 1.464-.976.296-1.818.473-2.528.532v.178c.71.059 1.552.207 2.528.443.976.237 1.922.68 2.839 1.33.916.651 1.7 1.583 2.35 2.795.65 1.212.976 2.853.976 4.923v16.144c0 .65.044 1.33.133 2.04.089.71.325 1.375.71 1.996.384.621.946 1.139 1.685 1.553.74.414 1.73.62 2.972.62h4.879v7.452h-8.073c-.946 0-2.07-.237-3.37-.71-1.301-.473-2.543-1.197-3.726-2.173-1.183-.976-2.188-2.188-3.016-3.637-.828-1.449-1.242-3.179-1.242-5.19V74.119c0-1.42-.325-2.572-.976-3.46-.65-.886-1.419-1.581-2.306-2.084a8.868 8.868 0 00-2.75-1.02C1.36 67.377.591 67.288 0 67.288v-7.806zm24.66 0c.591 0 1.36-.089 2.306-.266a10.417 10.417 0 002.75-.932 6.762 6.762 0 002.306-1.907c.65-.828.976-1.863.976-3.104V35.709c0-2.01.414-3.74 1.242-5.19.828-1.448 1.833-2.66 3.016-3.636s2.425-1.7 3.726-2.173c1.3-.473 2.424-.71 3.37-.71h8.073v7.451h-4.88c-1.241 0-2.232.207-2.97.621-.74.414-1.302.932-1.686 1.552a4.909 4.909 0 00-.71 1.996c-.089.71-.133 1.39-.133 2.04v16.677c0 1.715-.325 3.134-.976 4.258-.65 1.123-1.434 2.025-2.35 2.705-.917.68-1.863 1.168-2.839 1.464-.976.296-1.818.473-2.528.532v.178c.71.059 1.552.207 2.528.443.976.237 1.922.68 2.839 1.33.916.651 1.7 1.583 2.35 2.795.65 1.212.976 2.853.976 4.923v16.144c0 .65.044 1.33.133 2.04.089.71.325 1.375.71 1.996.384.621.946 1.139 1.685 1.553.74.414 1.73.62 2.972.62h4.879v7.452h-8.073c-.946 0-2.07-.237-3.37-.71-1.301-.473-2.543-1.197-3.726-2.173-1.183-.976-2.188-2.188-3.016-3.637-.828-1.449-1.242-3.179-1.242-5.19V74.119c0-1.42-.325-2.572-.976-3.46-.65-.886-1.419-1.581-2.306-2.084a8.868 8.868 0 00-2.75-1.02c-.946-.177-1.715-.266-2.306-.266v-7.806zm43.965-3.538L80.6 52.041l2.306 7.097-12.063 3.903 7.628 10.378-6.12 4.435-7.63-10.467-7.45 10.201-5.943-4.524 7.628-10.023-12.152-4.17 2.306-7.096 12.064 4.17V43.347h7.451v12.596zm34.425 11.344c-.65 0-1.449.089-2.395.266-.946.177-1.863.488-2.75.931a6.356 6.356 0 00-2.262 1.908c-.62.828-.931 1.862-.931 3.104v17.564c0 2.01-.414 3.74-1.242 5.189-.828 1.449-1.833 2.661-3.016 3.637s-2.425 1.7-3.726 2.173c-1.3.473-2.424.71-3.37.71h-8.073v-7.451h4.88c1.241 0 2.232-.207 2.97-.621.74-.414 1.302-.932 1.686-1.553a4.9 4.9 0 00.71-1.995c.089-.71.133-1.39.133-2.04V72.432c0-1.715.325-3.134.976-4.258.65-1.124 1.434-2.01 2.35-2.661.917-.65 1.863-1.124 2.839-1.42.976-.295 1.818-.502 2.528-.62v-.178c-.71-.059-1.552-.207-2.528-.443-.976-.237-1.922-.68-2.839-1.33-.916-.651-1.7-1.583-2.35-2.795-.65-1.212-.976-2.853-.976-4.923V37.66c0-.651-.044-1.331-.133-2.04a4.909 4.909 0 00-.71-1.997c-.384-.62-.946-1.138-1.685-1.552-.74-.414-1.73-.62-2.972-.62h-4.879V24h8.073c.946 0 2.07.237 3.37.71 1.301.473 2.543 1.197 3.726 2.173 1.183.976 2.188 2.188 3.016 3.637.828 1.449 1.242 3.178 1.242 5.189v16.943c0 1.419.31 2.572.931 3.46a6.897 6.897 0 002.262 2.084 8.868 8.868 0 002.75 1.02c.946.177 1.745.266 2.395.266v7.806zm24.66 0c-.65 0-1.449.089-2.395.266-.946.177-1.863.488-2.75.931a6.356 6.356 0 00-2.262 1.908c-.62.828-.931 1.862-.931 3.104v17.564c0 2.01-.414 3.74-1.242 5.189-.828 1.449-1.833 2.661-3.016 3.637s-2.425 1.7-3.726 2.173c-1.3.473-2.424.71-3.37.71h-8.073v-7.451h4.88c1.241 0 2.232-.207 2.97-.621.74-.414 1.302-.932 1.686-1.553a4.9 4.9 0 00.71-1.995c.089-.71.133-1.39.133-2.04V72.432c0-1.715.325-3.134.976-4.258.65-1.124 1.434-2.01 2.35-2.661.917-.65 1.863-1.124 2.839-1.42.976-.295 1.818-.502 2.528-.62v-.178c-.71-.059-1.552-.207-2.528-.443-.976-.237-1.922-.68-2.839-1.33-.916-.651-1.7-1.583-2.35-2.795-.65-1.212-.976-2.853-.976-4.923V37.66c0-.651-.044-1.331-.133-2.04a4.909 4.909 0 00-.71-1.997c-.384-.62-.946-1.138-1.685-1.552-.74-.414-1.73-.62-2.972-.62h-4.879V24h8.073c.946 0 2.07.237 3.37.71 1.301.473 2.543 1.197 3.726 2.173 1.183.976 2.188 2.188 3.016 3.637.828 1.449 1.242 3.178 1.242 5.189v16.943c0 1.419.31 2.572.931 3.46a6.897 6.897 0 002.262 2.084 8.868 8.868 0 002.75 1.02c.946.177 1.745.266 2.395.266v7.806z\\\"/>\u003C/svg>\"},\"$:/core/images/twitter\":{\"title\":\"$:/core/images/twitter\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-twitter tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M41.626 115.803A73.376 73.376 0 012 104.235c2.022.238 4.08.36 6.166.36 12.111 0 23.258-4.117 32.105-11.023-11.312-.208-20.859-7.653-24.148-17.883a25.98 25.98 0 0011.674-.441C15.971 72.881 7.061 62.474 7.061 49.997c0-.108 0-.216.002-.323a25.824 25.824 0 0011.709 3.22c-6.936-4.617-11.5-12.5-11.5-21.433 0-4.719 1.274-9.142 3.5-12.945 12.75 15.579 31.797 25.83 53.281 26.904-.44-1.884-.67-3.85-.67-5.868 0-14.22 11.575-25.75 25.852-25.75a25.865 25.865 0 0118.869 8.132 51.892 51.892 0 0016.415-6.248c-1.93 6.012-6.029 11.059-11.366 14.246A51.844 51.844 0 00128 25.878a52.428 52.428 0 01-12.9 13.33c.05 1.104.075 2.214.075 3.33 0 34.028-26 73.265-73.549 73.265\\\"/>\u003C/svg>\"},\"$:/core/images/underline\":{\"title\":\"$:/core/images/underline\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-underline tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M7 117.421h114.248V128H7v-10.579zm97.871-18.525V0h-16.26v55.856c0 4.463-.605 8.576-1.816 12.338-1.212 3.762-3.03 7.046-5.452 9.851-2.423 2.806-5.452 4.974-9.086 6.504-3.635 1.53-7.939 2.296-12.912 2.296-6.25 0-11.159-1.786-14.73-5.356-3.57-3.571-5.356-8.417-5.356-14.538V0H23v65.038c0 5.356.542 10.234 1.626 14.633 1.084 4.4 2.965 8.194 5.643 11.382 2.678 3.188 6.185 5.643 10.52 7.365 4.337 1.721 9.756 2.582 16.26 2.582 7.27 0 13.582-1.435 18.938-4.304 5.356-2.87 9.755-7.365 13.199-13.486h.382v15.686h15.303z\\\"/>\u003C/svg>\"},\"$:/core/images/unfold-all-button\":{\"title\":\"$:/core/images/unfold-all-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-unfold-all tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"128\\\" height=\\\"16\\\" rx=\\\"8\\\"/>\u003Crect width=\\\"128\\\" height=\\\"16\\\" y=\\\"64\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M63.945 60.624c-2.05 0-4.101-.78-5.666-2.345L35.662 35.662c-3.125-3.125-3.13-8.195-.005-11.319 3.118-3.118 8.192-3.122 11.319.005L63.94 41.314l16.966-16.966c3.124-3.124 8.194-3.129 11.318-.005 3.118 3.118 3.122 8.192-.005 11.319L69.603 58.279a7.986 7.986 0 01-5.663 2.346zM64.004 124.565c-2.05 0-4.102-.78-5.666-2.345L35.721 99.603c-3.125-3.125-3.13-8.195-.005-11.319 3.118-3.118 8.191-3.122 11.318.005L64 105.255l16.966-16.966c3.124-3.124 8.194-3.129 11.318-.005 3.118 3.118 3.122 8.192-.005 11.319L69.662 122.22a7.986 7.986 0 01-5.663 2.346z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/unfold-button\":{\"title\":\"$:/core/images/unfold-button\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-unfold tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cg fill-rule=\\\"evenodd\\\">\u003Crect width=\\\"128\\\" height=\\\"16\\\" rx=\\\"8\\\"/>\u003Cpath d=\\\"M63.945 63.624c-2.05 0-4.101-.78-5.666-2.345L35.662 38.662c-3.125-3.125-3.13-8.195-.005-11.319 3.118-3.118 8.192-3.122 11.319.005L63.94 44.314l16.966-16.966c3.124-3.124 8.194-3.129 11.318-.005 3.118 3.118 3.122 8.192-.005 11.319L69.603 61.279a7.986 7.986 0 01-5.663 2.346zM64.004 105.682c-2.05.001-4.102-.78-5.666-2.344L35.721 80.721c-3.125-3.125-3.13-8.195-.005-11.319 3.118-3.118 8.191-3.122 11.318.005L64 86.373l16.966-16.966c3.124-3.125 8.194-3.13 11.318-.005 3.118 3.118 3.122 8.192-.005 11.319l-22.617 22.617a7.986 7.986 0 01-5.663 2.346z\\\"/>\u003C/g>\u003C/svg>\"},\"$:/core/images/unlocked-padlock\":{\"title\":\"$:/core/images/unlocked-padlock\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-unlocked-padlock tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M48.627 64H105v32.01C105 113.674 90.674 128 73.001 128H56C38.318 128 24 113.677 24 96.01V64h6.136c-10.455-12.651-27.364-35.788-4.3-55.142 24.636-20.672 45.835 4.353 55.777 16.201 9.943 11.85-2.676 22.437-12.457 9.892-9.78-12.545-21.167-24.146-33.207-14.043-12.041 10.104-1.757 22.36 8.813 34.958 2.467 2.94 3.641 5.732 3.865 8.134zm19.105 28.364A8.503 8.503 0 0064.5 76a8.5 8.5 0 00-3.498 16.25l-5.095 22.77H72.8l-5.07-22.656z\\\"/>\u003C/svg>\"},\"$:/core/images/up-arrow\":{\"title\":\"$:/core/images/up-arrow\",\"created\":\"20150316000544368\",\"modified\":\"20150316000831867\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-up-arrow tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath d=\\\"M63.892.281c2.027 0 4.054.77 5.6 2.316l55.98 55.98a7.92 7.92 0 010 11.196c-3.086 3.085-8.104 3.092-11.196 0L63.894 19.393 13.513 69.774a7.92 7.92 0 01-11.196 0c-3.085-3.086-3.092-8.105 0-11.196l55.98-55.98A7.892 7.892 0 0163.893.28z\\\"/>\u003C/svg>\"},\"$:/core/images/video\":{\"title\":\"$:/core/images/video\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-video tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M64 12c-34.91 0-55.273 2.917-58.182 5.833C2.91 20.75 0 41.167 0 64.5c0 23.333 2.91 43.75 5.818 46.667C8.728 114.083 29.091 117 64 117c34.91 0 55.273-2.917 58.182-5.833C125.09 108.25 128 87.833 128 64.5c0-23.333-2.91-43.75-5.818-46.667C119.272 14.917 98.909 12 64 12zm-9.084 32.618c-3.813-2.542-6.905-.879-6.905 3.698v31.368c0 4.585 3.099 6.235 6.905 3.698l22.168-14.779c3.813-2.542 3.806-6.669 0-9.206L54.916 44.618z\\\"/>\u003C/svg>\"},\"$:/core/images/warning\":{\"title\":\"$:/core/images/warning\",\"tags\":\"$:/tags/Image\",\"text\":\"\u003Csvg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-warning tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\u003Cpath fill-rule=\\\"evenodd\\\" d=\\\"M57.072 11c3.079-5.333 10.777-5.333 13.856 0l55.426 96c3.079 5.333-.77 12-6.928 12H8.574c-6.158 0-10.007-6.667-6.928-12l55.426-96zM64 37c-4.418 0-8 3.582-8 7.994v28.012C56 77.421 59.59 81 64 81c4.418 0 8-3.582 8-7.994V44.994C72 40.579 68.41 37 64 37zm0 67a8 8 0 100-16 8 8 0 000 16z\\\"/>\u003C/svg>\"},\"$:/language/Buttons/AdvancedSearch/Caption\":{\"title\":\"$:/language/Buttons/AdvancedSearch/Caption\",\"text\":\"advanced search\"},\"$:/language/Buttons/AdvancedSearch/Hint\":{\"title\":\"$:/language/Buttons/AdvancedSearch/Hint\",\"text\":\"Advanced search\"},\"$:/language/Buttons/Cancel/Caption\":{\"title\":\"$:/language/Buttons/Cancel/Caption\",\"text\":\"cancel\"},\"$:/language/Buttons/Cancel/Hint\":{\"title\":\"$:/language/Buttons/Cancel/Hint\",\"text\":\"Discard changes to this tiddler\"},\"$:/language/Buttons/Clone/Caption\":{\"title\":\"$:/language/Buttons/Clone/Caption\",\"text\":\"clone\"},\"$:/language/Buttons/Clone/Hint\":{\"title\":\"$:/language/Buttons/Clone/Hint\",\"text\":\"Clone this tiddler\"},\"$:/language/Buttons/Close/Caption\":{\"title\":\"$:/language/Buttons/Close/Caption\",\"text\":\"close\"},\"$:/language/Buttons/Close/Hint\":{\"title\":\"$:/language/Buttons/Close/Hint\",\"text\":\"Close this tiddler\"},\"$:/language/Buttons/CloseAll/Caption\":{\"title\":\"$:/language/Buttons/CloseAll/Caption\",\"text\":\"close all\"},\"$:/language/Buttons/CloseAll/Hint\":{\"title\":\"$:/language/Buttons/CloseAll/Hint\",\"text\":\"Close all tiddlers\"},\"$:/language/Buttons/CloseOthers/Caption\":{\"title\":\"$:/language/Buttons/CloseOthers/Caption\",\"text\":\"close others\"},\"$:/language/Buttons/CloseOthers/Hint\":{\"title\":\"$:/language/Buttons/CloseOthers/Hint\",\"text\":\"Close other tiddlers\"},\"$:/language/Buttons/ControlPanel/Caption\":{\"title\":\"$:/language/Buttons/ControlPanel/Caption\",\"text\":\"control panel\"},\"$:/language/Buttons/ControlPanel/Hint\":{\"title\":\"$:/language/Buttons/ControlPanel/Hint\",\"text\":\"Open control panel\"},\"$:/language/Buttons/CopyToClipboard/Caption\":{\"title\":\"$:/language/Buttons/CopyToClipboard/Caption\",\"text\":\"copy to clipboard\"},\"$:/language/Buttons/CopyToClipboard/Hint\":{\"title\":\"$:/language/Buttons/CopyToClipboard/Hint\",\"text\":\"Copy this text to the clipboard\"},\"$:/language/Buttons/Delete/Caption\":{\"title\":\"$:/language/Buttons/Delete/Caption\",\"text\":\"delete\"},\"$:/language/Buttons/Delete/Hint\":{\"title\":\"$:/language/Buttons/Delete/Hint\",\"text\":\"Delete this tiddler\"},\"$:/language/Buttons/Edit/Caption\":{\"title\":\"$:/language/Buttons/Edit/Caption\",\"text\":\"edit\"},\"$:/language/Buttons/Edit/Hint\":{\"title\":\"$:/language/Buttons/Edit/Hint\",\"text\":\"Edit this tiddler\"},\"$:/language/Buttons/Encryption/Caption\":{\"title\":\"$:/language/Buttons/Encryption/Caption\",\"text\":\"encryption\"},\"$:/language/Buttons/Encryption/Hint\":{\"title\":\"$:/language/Buttons/Encryption/Hint\",\"text\":\"Set or clear a password for saving this wiki\"},\"$:/language/Buttons/Encryption/ClearPassword/Caption\":{\"title\":\"$:/language/Buttons/Encryption/ClearPassword/Caption\",\"text\":\"clear password\"},\"$:/language/Buttons/Encryption/ClearPassword/Hint\":{\"title\":\"$:/language/Buttons/Encryption/ClearPassword/Hint\",\"text\":\"Clear the password and save this wiki without encryption\"},\"$:/language/Buttons/Encryption/SetPassword/Caption\":{\"title\":\"$:/language/Buttons/Encryption/SetPassword/Caption\",\"text\":\"set password\"},\"$:/language/Buttons/Encryption/SetPassword/Hint\":{\"title\":\"$:/language/Buttons/Encryption/SetPassword/Hint\",\"text\":\"Set a password for saving this wiki with encryption\"},\"$:/language/Buttons/ExportPage/Caption\":{\"title\":\"$:/language/Buttons/ExportPage/Caption\",\"text\":\"export all\"},\"$:/language/Buttons/ExportPage/Hint\":{\"title\":\"$:/language/Buttons/ExportPage/Hint\",\"text\":\"Export all tiddlers\"},\"$:/language/Buttons/ExportTiddler/Caption\":{\"title\":\"$:/language/Buttons/ExportTiddler/Caption\",\"text\":\"export tiddler\"},\"$:/language/Buttons/ExportTiddler/Hint\":{\"title\":\"$:/language/Buttons/ExportTiddler/Hint\",\"text\":\"Export tiddler\"},\"$:/language/Buttons/ExportTiddlers/Caption\":{\"title\":\"$:/language/Buttons/ExportTiddlers/Caption\",\"text\":\"export tiddlers\"},\"$:/language/Buttons/ExportTiddlers/Hint\":{\"title\":\"$:/language/Buttons/ExportTiddlers/Hint\",\"text\":\"Export tiddlers\"},\"$:/language/Buttons/SidebarSearch/Hint\":{\"title\":\"$:/language/Buttons/SidebarSearch/Hint\",\"text\":\"Select the sidebar search field\"},\"$:/language/Buttons/Fold/Caption\":{\"title\":\"$:/language/Buttons/Fold/Caption\",\"text\":\"fold tiddler\"},\"$:/language/Buttons/Fold/Hint\":{\"title\":\"$:/language/Buttons/Fold/Hint\",\"text\":\"Fold the body of this tiddler\"},\"$:/language/Buttons/Fold/FoldBar/Caption\":{\"title\":\"$:/language/Buttons/Fold/FoldBar/Caption\",\"text\":\"fold-bar\"},\"$:/language/Buttons/Fold/FoldBar/Hint\":{\"title\":\"$:/language/Buttons/Fold/FoldBar/Hint\",\"text\":\"Optional bars to fold and unfold tiddlers\"},\"$:/language/Buttons/Unfold/Caption\":{\"title\":\"$:/language/Buttons/Unfold/Caption\",\"text\":\"unfold tiddler\"},\"$:/language/Buttons/Unfold/Hint\":{\"title\":\"$:/language/Buttons/Unfold/Hint\",\"text\":\"Unfold the body of this tiddler\"},\"$:/language/Buttons/FoldOthers/Caption\":{\"title\":\"$:/language/Buttons/FoldOthers/Caption\",\"text\":\"fold other tiddlers\"},\"$:/language/Buttons/FoldOthers/Hint\":{\"title\":\"$:/language/Buttons/FoldOthers/Hint\",\"text\":\"Fold the bodies of other opened tiddlers\"},\"$:/language/Buttons/FoldAll/Caption\":{\"title\":\"$:/language/Buttons/FoldAll/Caption\",\"text\":\"fold all tiddlers\"},\"$:/language/Buttons/FoldAll/Hint\":{\"title\":\"$:/language/Buttons/FoldAll/Hint\",\"text\":\"Fold the bodies of all opened tiddlers\"},\"$:/language/Buttons/UnfoldAll/Caption\":{\"title\":\"$:/language/Buttons/UnfoldAll/Caption\",\"text\":\"unfold all tiddlers\"},\"$:/language/Buttons/UnfoldAll/Hint\":{\"title\":\"$:/language/Buttons/UnfoldAll/Hint\",\"text\":\"Unfold the bodies of all opened tiddlers\"},\"$:/language/Buttons/FullScreen/Caption\":{\"title\":\"$:/language/Buttons/FullScreen/Caption\",\"text\":\"full-screen\"},\"$:/language/Buttons/FullScreen/Hint\":{\"title\":\"$:/language/Buttons/FullScreen/Hint\",\"text\":\"Enter or leave full-screen mode\"},\"$:/language/Buttons/Help/Caption\":{\"title\":\"$:/language/Buttons/Help/Caption\",\"text\":\"help\"},\"$:/language/Buttons/Help/Hint\":{\"title\":\"$:/language/Buttons/Help/Hint\",\"text\":\"Show help panel\"},\"$:/language/Buttons/Import/Caption\":{\"title\":\"$:/language/Buttons/Import/Caption\",\"text\":\"import\"},\"$:/language/Buttons/Import/Hint\":{\"title\":\"$:/language/Buttons/Import/Hint\",\"text\":\"Import many types of file including text, image, TiddlyWiki or JSON\"},\"$:/language/Buttons/Info/Caption\":{\"title\":\"$:/language/Buttons/Info/Caption\",\"text\":\"info\"},\"$:/language/Buttons/Info/Hint\":{\"title\":\"$:/language/Buttons/Info/Hint\",\"text\":\"Show information for this tiddler\"},\"$:/language/Buttons/Home/Caption\":{\"title\":\"$:/language/Buttons/Home/Caption\",\"text\":\"home\"},\"$:/language/Buttons/Home/Hint\":{\"title\":\"$:/language/Buttons/Home/Hint\",\"text\":\"Open the default tiddlers\"},\"$:/language/Buttons/Language/Caption\":{\"title\":\"$:/language/Buttons/Language/Caption\",\"text\":\"language\"},\"$:/language/Buttons/Language/Hint\":{\"title\":\"$:/language/Buttons/Language/Hint\",\"text\":\"Choose the user interface language\"},\"$:/language/Buttons/Manager/Caption\":{\"title\":\"$:/language/Buttons/Manager/Caption\",\"text\":\"tiddler manager\"},\"$:/language/Buttons/Manager/Hint\":{\"title\":\"$:/language/Buttons/Manager/Hint\",\"text\":\"Open tiddler manager\"},\"$:/language/Buttons/More/Caption\":{\"title\":\"$:/language/Buttons/More/Caption\",\"text\":\"more\"},\"$:/language/Buttons/More/Hint\":{\"title\":\"$:/language/Buttons/More/Hint\",\"text\":\"More actions\"},\"$:/language/Buttons/NewHere/Caption\":{\"title\":\"$:/language/Buttons/NewHere/Caption\",\"text\":\"new here\"},\"$:/language/Buttons/NewHere/Hint\":{\"title\":\"$:/language/Buttons/NewHere/Hint\",\"text\":\"Create a new tiddler tagged with this one\"},\"$:/language/Buttons/NewJournal/Caption\":{\"title\":\"$:/language/Buttons/NewJournal/Caption\",\"text\":\"new journal\"},\"$:/language/Buttons/NewJournal/Hint\":{\"title\":\"$:/language/Buttons/NewJournal/Hint\",\"text\":\"Create a new journal tiddler\"},\"$:/language/Buttons/NewJournalHere/Caption\":{\"title\":\"$:/language/Buttons/NewJournalHere/Caption\",\"text\":\"new journal here\"},\"$:/language/Buttons/NewJournalHere/Hint\":{\"title\":\"$:/language/Buttons/NewJournalHere/Hint\",\"text\":\"Create a new journal tiddler tagged with this one\"},\"$:/language/Buttons/NewImage/Caption\":{\"title\":\"$:/language/Buttons/NewImage/Caption\",\"text\":\"new image\"},\"$:/language/Buttons/NewImage/Hint\":{\"title\":\"$:/language/Buttons/NewImage/Hint\",\"text\":\"Create a new image tiddler\"},\"$:/language/Buttons/NewMarkdown/Caption\":{\"title\":\"$:/language/Buttons/NewMarkdown/Caption\",\"text\":\"new Markdown tiddler\"},\"$:/language/Buttons/NewMarkdown/Hint\":{\"title\":\"$:/language/Buttons/NewMarkdown/Hint\",\"text\":\"Create a new Markdown tiddler\"},\"$:/language/Buttons/NewTiddler/Caption\":{\"title\":\"$:/language/Buttons/NewTiddler/Caption\",\"text\":\"new tiddler\"},\"$:/language/Buttons/NewTiddler/Hint\":{\"title\":\"$:/language/Buttons/NewTiddler/Hint\",\"text\":\"Create a new tiddler\"},\"$:/language/Buttons/OpenWindow/Caption\":{\"title\":\"$:/language/Buttons/OpenWindow/Caption\",\"text\":\"open in new window\"},\"$:/language/Buttons/OpenWindow/Hint\":{\"title\":\"$:/language/Buttons/OpenWindow/Hint\",\"text\":\"Open tiddler in new window\"},\"$:/language/Buttons/Palette/Caption\":{\"title\":\"$:/language/Buttons/Palette/Caption\",\"text\":\"palette\"},\"$:/language/Buttons/Palette/Hint\":{\"title\":\"$:/language/Buttons/Palette/Hint\",\"text\":\"Choose the colour palette\"},\"$:/language/Buttons/Permalink/Caption\":{\"title\":\"$:/language/Buttons/Permalink/Caption\",\"text\":\"permalink\"},\"$:/language/Buttons/Permalink/Hint\":{\"title\":\"$:/language/Buttons/Permalink/Hint\",\"text\":\"Set browser address bar to a direct link to this tiddler\"},\"$:/language/Buttons/Permaview/Caption\":{\"title\":\"$:/language/Buttons/Permaview/Caption\",\"text\":\"permaview\"},\"$:/language/Buttons/Permaview/Hint\":{\"title\":\"$:/language/Buttons/Permaview/Hint\",\"text\":\"Set browser address bar to a direct link to all the tiddlers in this story\"},\"$:/language/Buttons/Print/Caption\":{\"title\":\"$:/language/Buttons/Print/Caption\",\"text\":\"print page\"},\"$:/language/Buttons/Print/Hint\":{\"title\":\"$:/language/Buttons/Print/Hint\",\"text\":\"Print the current page\"},\"$:/language/Buttons/Refresh/Caption\":{\"title\":\"$:/language/Buttons/Refresh/Caption\",\"text\":\"refresh\"},\"$:/language/Buttons/Refresh/Hint\":{\"title\":\"$:/language/Buttons/Refresh/Hint\",\"text\":\"Perform a full refresh of the wiki\"},\"$:/language/Buttons/Save/Caption\":{\"title\":\"$:/language/Buttons/Save/Caption\",\"text\":\"ok\"},\"$:/language/Buttons/Save/Hint\":{\"title\":\"$:/language/Buttons/Save/Hint\",\"text\":\"Confirm changes to this tiddler\"},\"$:/language/Buttons/SaveWiki/Caption\":{\"title\":\"$:/language/Buttons/SaveWiki/Caption\",\"text\":\"save changes\"},\"$:/language/Buttons/SaveWiki/Hint\":{\"title\":\"$:/language/Buttons/SaveWiki/Hint\",\"text\":\"Save changes\"},\"$:/language/Buttons/StoryView/Caption\":{\"title\":\"$:/language/Buttons/StoryView/Caption\",\"text\":\"storyview\"},\"$:/language/Buttons/StoryView/Hint\":{\"title\":\"$:/language/Buttons/StoryView/Hint\",\"text\":\"Choose the story visualisation\"},\"$:/language/Buttons/HideSideBar/Caption\":{\"title\":\"$:/language/Buttons/HideSideBar/Caption\",\"text\":\"hide sidebar\"},\"$:/language/Buttons/HideSideBar/Hint\":{\"title\":\"$:/language/Buttons/HideSideBar/Hint\",\"text\":\"Hide sidebar\"},\"$:/language/Buttons/ShowSideBar/Caption\":{\"title\":\"$:/language/Buttons/ShowSideBar/Caption\",\"text\":\"show sidebar\"},\"$:/language/Buttons/ShowSideBar/Hint\":{\"title\":\"$:/language/Buttons/ShowSideBar/Hint\",\"text\":\"Show sidebar\"},\"$:/language/Buttons/TagManager/Caption\":{\"title\":\"$:/language/Buttons/TagManager/Caption\",\"text\":\"tag manager\"},\"$:/language/Buttons/TagManager/Hint\":{\"title\":\"$:/language/Buttons/TagManager/Hint\",\"text\":\"Open tag manager\"},\"$:/language/Buttons/Timestamp/Caption\":{\"title\":\"$:/language/Buttons/Timestamp/Caption\",\"text\":\"timestamps\"},\"$:/language/Buttons/Timestamp/Hint\":{\"title\":\"$:/language/Buttons/Timestamp/Hint\",\"text\":\"Choose whether modifications update timestamps\"},\"$:/language/Buttons/Timestamp/On/Caption\":{\"title\":\"$:/language/Buttons/Timestamp/On/Caption\",\"text\":\"timestamps are on\"},\"$:/language/Buttons/Timestamp/On/Hint\":{\"title\":\"$:/language/Buttons/Timestamp/On/Hint\",\"text\":\"Update timestamps when tiddlers are modified\"},\"$:/language/Buttons/Timestamp/Off/Caption\":{\"title\":\"$:/language/Buttons/Timestamp/Off/Caption\",\"text\":\"timestamps are off\"},\"$:/language/Buttons/Timestamp/Off/Hint\":{\"title\":\"$:/language/Buttons/Timestamp/Off/Hint\",\"text\":\"Don't update timestamps when tiddlers are modified\"},\"$:/language/Buttons/Theme/Caption\":{\"title\":\"$:/language/Buttons/Theme/Caption\",\"text\":\"theme\"},\"$:/language/Buttons/Theme/Hint\":{\"title\":\"$:/language/Buttons/Theme/Hint\",\"text\":\"Choose the display theme\"},\"$:/language/Buttons/Bold/Caption\":{\"title\":\"$:/language/Buttons/Bold/Caption\",\"text\":\"bold\"},\"$:/language/Buttons/Bold/Hint\":{\"title\":\"$:/language/Buttons/Bold/Hint\",\"text\":\"Apply bold formatting to selection\"},\"$:/language/Buttons/Clear/Caption\":{\"title\":\"$:/language/Buttons/Clear/Caption\",\"text\":\"clear\"},\"$:/language/Buttons/Clear/Hint\":{\"title\":\"$:/language/Buttons/Clear/Hint\",\"text\":\"Clear image to solid colour\"},\"$:/language/Buttons/EditorHeight/Caption\":{\"title\":\"$:/language/Buttons/EditorHeight/Caption\",\"text\":\"editor height\"},\"$:/language/Buttons/EditorHeight/Caption/Auto\":{\"title\":\"$:/language/Buttons/EditorHeight/Caption/Auto\",\"text\":\"Automatically adjust height to fit content\"},\"$:/language/Buttons/EditorHeight/Caption/Fixed\":{\"title\":\"$:/language/Buttons/EditorHeight/Caption/Fixed\",\"text\":\"Fixed height:\"},\"$:/language/Buttons/EditorHeight/Hint\":{\"title\":\"$:/language/Buttons/EditorHeight/Hint\",\"text\":\"Choose the height of the text editor\"},\"$:/language/Buttons/Excise/Caption\":{\"title\":\"$:/language/Buttons/Excise/Caption\",\"text\":\"excise\"},\"$:/language/Buttons/Excise/Caption/Excise\":{\"title\":\"$:/language/Buttons/Excise/Caption/Excise\",\"text\":\"Perform excision\"},\"$:/language/Buttons/Excise/Caption/MacroName\":{\"title\":\"$:/language/Buttons/Excise/Caption/MacroName\",\"text\":\"Macro name:\"},\"$:/language/Buttons/Excise/Caption/NewTitle\":{\"title\":\"$:/language/Buttons/Excise/Caption/NewTitle\",\"text\":\"Title of new tiddler:\"},\"$:/language/Buttons/Excise/Caption/Replace\":{\"title\":\"$:/language/Buttons/Excise/Caption/Replace\",\"text\":\"Replace excised text with:\"},\"$:/language/Buttons/Excise/Caption/Replace/Macro\":{\"title\":\"$:/language/Buttons/Excise/Caption/Replace/Macro\",\"text\":\"macro\"},\"$:/language/Buttons/Excise/Caption/Replace/Link\":{\"title\":\"$:/language/Buttons/Excise/Caption/Replace/Link\",\"text\":\"link\"},\"$:/language/Buttons/Excise/Caption/Replace/Transclusion\":{\"title\":\"$:/language/Buttons/Excise/Caption/Replace/Transclusion\",\"text\":\"transclusion\"},\"$:/language/Buttons/Excise/Caption/Tag\":{\"title\":\"$:/language/Buttons/Excise/Caption/Tag\",\"text\":\"Tag new tiddler with the title of this tiddler\"},\"$:/language/Buttons/Excise/Caption/TiddlerExists\":{\"title\":\"$:/language/Buttons/Excise/Caption/TiddlerExists\",\"text\":\"Warning: tiddler already exists\"},\"$:/language/Buttons/Excise/Hint\":{\"title\":\"$:/language/Buttons/Excise/Hint\",\"text\":\"Excise the selected text into a new tiddler\"},\"$:/language/Buttons/Heading1/Caption\":{\"title\":\"$:/language/Buttons/Heading1/Caption\",\"text\":\"heading 1\"},\"$:/language/Buttons/Heading1/Hint\":{\"title\":\"$:/language/Buttons/Heading1/Hint\",\"text\":\"Apply heading level 1 formatting to lines containing selection\"},\"$:/language/Buttons/Heading2/Caption\":{\"title\":\"$:/language/Buttons/Heading2/Caption\",\"text\":\"heading 2\"},\"$:/language/Buttons/Heading2/Hint\":{\"title\":\"$:/language/Buttons/Heading2/Hint\",\"text\":\"Apply heading level 2 formatting to lines containing selection\"},\"$:/language/Buttons/Heading3/Caption\":{\"title\":\"$:/language/Buttons/Heading3/Caption\",\"text\":\"heading 3\"},\"$:/language/Buttons/Heading3/Hint\":{\"title\":\"$:/language/Buttons/Heading3/Hint\",\"text\":\"Apply heading level 3 formatting to lines containing selection\"},\"$:/language/Buttons/Heading4/Caption\":{\"title\":\"$:/language/Buttons/Heading4/Caption\",\"text\":\"heading 4\"},\"$:/language/Buttons/Heading4/Hint\":{\"title\":\"$:/language/Buttons/Heading4/Hint\",\"text\":\"Apply heading level 4 formatting to lines containing selection\"},\"$:/language/Buttons/Heading5/Caption\":{\"title\":\"$:/language/Buttons/Heading5/Caption\",\"text\":\"heading 5\"},\"$:/language/Buttons/Heading5/Hint\":{\"title\":\"$:/language/Buttons/Heading5/Hint\",\"text\":\"Apply heading level 5 formatting to lines containing selection\"},\"$:/language/Buttons/Heading6/Caption\":{\"title\":\"$:/language/Buttons/Heading6/Caption\",\"text\":\"heading 6\"},\"$:/language/Buttons/Heading6/Hint\":{\"title\":\"$:/language/Buttons/Heading6/Hint\",\"text\":\"Apply heading level 6 formatting to lines containing selection\"},\"$:/language/Buttons/Italic/Caption\":{\"title\":\"$:/language/Buttons/Italic/Caption\",\"text\":\"italic\"},\"$:/language/Buttons/Italic/Hint\":{\"title\":\"$:/language/Buttons/Italic/Hint\",\"text\":\"Apply italic formatting to selection\"},\"$:/language/Buttons/LineWidth/Caption\":{\"title\":\"$:/language/Buttons/LineWidth/Caption\",\"text\":\"line width\"},\"$:/language/Buttons/LineWidth/Hint\":{\"title\":\"$:/language/Buttons/LineWidth/Hint\",\"text\":\"Set line width for painting\"},\"$:/language/Buttons/Link/Caption\":{\"title\":\"$:/language/Buttons/Link/Caption\",\"text\":\"link\"},\"$:/language/Buttons/Link/Hint\":{\"title\":\"$:/language/Buttons/Link/Hint\",\"text\":\"Create wikitext link\"},\"$:/language/Buttons/Linkify/Caption\":{\"title\":\"$:/language/Buttons/Linkify/Caption\",\"text\":\"wikilink\"},\"$:/language/Buttons/Linkify/Hint\":{\"title\":\"$:/language/Buttons/Linkify/Hint\",\"text\":\"Wrap selection in square brackets\"},\"$:/language/Buttons/ListBullet/Caption\":{\"title\":\"$:/language/Buttons/ListBullet/Caption\",\"text\":\"bulleted list\"},\"$:/language/Buttons/ListBullet/Hint\":{\"title\":\"$:/language/Buttons/ListBullet/Hint\",\"text\":\"Apply bulleted list formatting to lines containing selection\"},\"$:/language/Buttons/ListNumber/Caption\":{\"title\":\"$:/language/Buttons/ListNumber/Caption\",\"text\":\"numbered list\"},\"$:/language/Buttons/ListNumber/Hint\":{\"title\":\"$:/language/Buttons/ListNumber/Hint\",\"text\":\"Apply numbered list formatting to lines containing selection\"},\"$:/language/Buttons/MonoBlock/Caption\":{\"title\":\"$:/language/Buttons/MonoBlock/Caption\",\"text\":\"monospaced block\"},\"$:/language/Buttons/MonoBlock/Hint\":{\"title\":\"$:/language/Buttons/MonoBlock/Hint\",\"text\":\"Apply monospaced block formatting to lines containing selection\"},\"$:/language/Buttons/MonoLine/Caption\":{\"title\":\"$:/language/Buttons/MonoLine/Caption\",\"text\":\"monospaced\"},\"$:/language/Buttons/MonoLine/Hint\":{\"title\":\"$:/language/Buttons/MonoLine/Hint\",\"text\":\"Apply monospaced character formatting to selection\"},\"$:/language/Buttons/Opacity/Caption\":{\"title\":\"$:/language/Buttons/Opacity/Caption\",\"text\":\"opacity\"},\"$:/language/Buttons/Opacity/Hint\":{\"title\":\"$:/language/Buttons/Opacity/Hint\",\"text\":\"Set painting opacity\"},\"$:/language/Buttons/Paint/Caption\":{\"title\":\"$:/language/Buttons/Paint/Caption\",\"text\":\"paint colour\"},\"$:/language/Buttons/Paint/Hint\":{\"title\":\"$:/language/Buttons/Paint/Hint\",\"text\":\"Set painting colour\"},\"$:/language/Buttons/Picture/Caption\":{\"title\":\"$:/language/Buttons/Picture/Caption\",\"text\":\"picture\"},\"$:/language/Buttons/Picture/Hint\":{\"title\":\"$:/language/Buttons/Picture/Hint\",\"text\":\"Insert picture\"},\"$:/language/Buttons/Preview/Caption\":{\"title\":\"$:/language/Buttons/Preview/Caption\",\"text\":\"preview\"},\"$:/language/Buttons/Preview/Hint\":{\"title\":\"$:/language/Buttons/Preview/Hint\",\"text\":\"Show preview pane\"},\"$:/language/Buttons/PreviewType/Caption\":{\"title\":\"$:/language/Buttons/PreviewType/Caption\",\"text\":\"preview type\"},\"$:/language/Buttons/PreviewType/Hint\":{\"title\":\"$:/language/Buttons/PreviewType/Hint\",\"text\":\"Choose preview type\"},\"$:/language/Buttons/Quote/Caption\":{\"title\":\"$:/language/Buttons/Quote/Caption\",\"text\":\"quote\"},\"$:/language/Buttons/Quote/Hint\":{\"title\":\"$:/language/Buttons/Quote/Hint\",\"text\":\"Apply quoted text formatting to lines containing selection\"},\"$:/language/Buttons/RotateLeft/Caption\":{\"title\":\"$:/language/Buttons/RotateLeft/Caption\",\"text\":\"rotate left\"},\"$:/language/Buttons/RotateLeft/Hint\":{\"title\":\"$:/language/Buttons/RotateLeft/Hint\",\"text\":\"Rotate image left by 90 degrees\"},\"$:/language/Buttons/Size/Caption\":{\"title\":\"$:/language/Buttons/Size/Caption\",\"text\":\"image size\"},\"$:/language/Buttons/Size/Caption/Height\":{\"title\":\"$:/language/Buttons/Size/Caption/Height\",\"text\":\"Height:\"},\"$:/language/Buttons/Size/Caption/Resize\":{\"title\":\"$:/language/Buttons/Size/Caption/Resize\",\"text\":\"Resize image\"},\"$:/language/Buttons/Size/Caption/Width\":{\"title\":\"$:/language/Buttons/Size/Caption/Width\",\"text\":\"Width:\"},\"$:/language/Buttons/Size/Hint\":{\"title\":\"$:/language/Buttons/Size/Hint\",\"text\":\"Set image size\"},\"$:/language/Buttons/Stamp/Caption\":{\"title\":\"$:/language/Buttons/Stamp/Caption\",\"text\":\"stamp\"},\"$:/language/Buttons/Stamp/Caption/New\":{\"title\":\"$:/language/Buttons/Stamp/Caption/New\",\"text\":\"Add your own\"},\"$:/language/Buttons/Stamp/Hint\":{\"title\":\"$:/language/Buttons/Stamp/Hint\",\"text\":\"Insert a preconfigured snippet of text\"},\"$:/language/Buttons/Stamp/New/Title\":{\"title\":\"$:/language/Buttons/Stamp/New/Title\",\"text\":\"Name as shown in menu\"},\"$:/language/Buttons/Stamp/New/Text\":{\"title\":\"$:/language/Buttons/Stamp/New/Text\",\"text\":\"Text of snippet. (Remember to add a descriptive title in the caption field).\"},\"$:/language/Buttons/Strikethrough/Caption\":{\"title\":\"$:/language/Buttons/Strikethrough/Caption\",\"text\":\"strikethrough\"},\"$:/language/Buttons/Strikethrough/Hint\":{\"title\":\"$:/language/Buttons/Strikethrough/Hint\",\"text\":\"Apply strikethrough formatting to selection\"},\"$:/language/Buttons/Subscript/Caption\":{\"title\":\"$:/language/Buttons/Subscript/Caption\",\"text\":\"subscript\"},\"$:/language/Buttons/Subscript/Hint\":{\"title\":\"$:/language/Buttons/Subscript/Hint\",\"text\":\"Apply subscript formatting to selection\"},\"$:/language/Buttons/Superscript/Caption\":{\"title\":\"$:/language/Buttons/Superscript/Caption\",\"text\":\"superscript\"},\"$:/language/Buttons/Superscript/Hint\":{\"title\":\"$:/language/Buttons/Superscript/Hint\",\"text\":\"Apply superscript formatting to selection\"},\"$:/language/Buttons/ToggleSidebar/Hint\":{\"title\":\"$:/language/Buttons/ToggleSidebar/Hint\",\"text\":\"Toggle the sidebar visibility\"},\"$:/language/Buttons/Transcludify/Caption\":{\"title\":\"$:/language/Buttons/Transcludify/Caption\",\"text\":\"transclusion\"},\"$:/language/Buttons/Transcludify/Hint\":{\"title\":\"$:/language/Buttons/Transcludify/Hint\",\"text\":\"Wrap selection in curly brackets\"},\"$:/language/Buttons/Underline/Caption\":{\"title\":\"$:/language/Buttons/Underline/Caption\",\"text\":\"underline\"},\"$:/language/Buttons/Underline/Hint\":{\"title\":\"$:/language/Buttons/Underline/Hint\",\"text\":\"Apply underline formatting to selection\"},\"$:/language/ControlPanel/Advanced/Caption\":{\"title\":\"$:/language/ControlPanel/Advanced/Caption\",\"text\":\"Advanced\"},\"$:/language/ControlPanel/Advanced/Hint\":{\"title\":\"$:/language/ControlPanel/Advanced/Hint\",\"text\":\"Internal information about this TiddlyWiki\"},\"$:/language/ControlPanel/Appearance/Caption\":{\"title\":\"$:/language/ControlPanel/Appearance/Caption\",\"text\":\"Appearance\"},\"$:/language/ControlPanel/Appearance/Hint\":{\"title\":\"$:/language/ControlPanel/Appearance/Hint\",\"text\":\"Ways to customise the appearance of your TiddlyWiki.\"},\"$:/language/ControlPanel/Basics/AnimDuration/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/AnimDuration/Prompt\",\"text\":\"Animation duration\"},\"$:/language/ControlPanel/Basics/AutoFocus/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/AutoFocus/Prompt\",\"text\":\"Default focus field for new tiddlers\"},\"$:/language/ControlPanel/Basics/Caption\":{\"title\":\"$:/language/ControlPanel/Basics/Caption\",\"text\":\"Basics\"},\"$:/language/ControlPanel/Basics/DefaultTiddlers/BottomHint\":{\"title\":\"$:/language/ControlPanel/Basics/DefaultTiddlers/BottomHint\",\"text\":\"Use &#91;&#91;double square brackets&#93;&#93; for titles with spaces. Or you can choose to \u003C$button set=\\\"$:/DefaultTiddlers\\\" setTo=\\\"[list[$:/StoryList]]\\\">retain story ordering\u003C/$button>\"},\"$:/language/ControlPanel/Basics/DefaultTiddlers/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/DefaultTiddlers/Prompt\",\"text\":\"Default tiddlers\"},\"$:/language/ControlPanel/Basics/DefaultTiddlers/TopHint\":{\"title\":\"$:/language/ControlPanel/Basics/DefaultTiddlers/TopHint\",\"text\":\"Choose which tiddlers are displayed at startup\"},\"$:/language/ControlPanel/Basics/Language/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Language/Prompt\",\"text\":\"Hello! Current language:\"},\"$:/language/ControlPanel/Basics/NewJournal/Title/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/NewJournal/Title/Prompt\",\"text\":\"Title of new journal tiddlers\"},\"$:/language/ControlPanel/Basics/NewJournal/Text/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/NewJournal/Text/Prompt\",\"text\":\"Text for new journal tiddlers\"},\"$:/language/ControlPanel/Basics/NewJournal/Tags/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/NewJournal/Tags/Prompt\",\"text\":\"Tags for new journal tiddlers\"},\"$:/language/ControlPanel/Basics/NewTiddler/Title/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/NewTiddler/Title/Prompt\",\"text\":\"Title of new tiddlers\"},\"$:/language/ControlPanel/Basics/NewTiddler/Tags/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/NewTiddler/Tags/Prompt\",\"text\":\"Tags for new tiddlers\"},\"$:/language/ControlPanel/Basics/OverriddenShadowTiddlers/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/OverriddenShadowTiddlers/Prompt\",\"text\":\"Number of overridden shadow tiddlers\"},\"$:/language/ControlPanel/Basics/RemoveTags\":{\"title\":\"$:/language/ControlPanel/Basics/RemoveTags\",\"text\":\"Update to current format\"},\"$:/language/ControlPanel/Basics/RemoveTags/Hint\":{\"title\":\"$:/language/ControlPanel/Basics/RemoveTags/Hint\",\"text\":\"Update the tags configuration to the latest format\"},\"$:/language/ControlPanel/Basics/ShadowTiddlers/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/ShadowTiddlers/Prompt\",\"text\":\"Number of shadow tiddlers\"},\"$:/language/ControlPanel/Basics/Subtitle/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Subtitle/Prompt\",\"text\":\"Subtitle\"},\"$:/language/ControlPanel/Basics/SystemTiddlers/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/SystemTiddlers/Prompt\",\"text\":\"Number of system tiddlers\"},\"$:/language/ControlPanel/Basics/Tags/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Tags/Prompt\",\"text\":\"Number of tags\"},\"$:/language/ControlPanel/Basics/Tiddlers/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Tiddlers/Prompt\",\"text\":\"Number of tiddlers\"},\"$:/language/ControlPanel/Basics/Title/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Title/Prompt\",\"text\":\"Title of this ~TiddlyWiki\"},\"$:/language/ControlPanel/Basics/Username/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Username/Prompt\",\"text\":\"Username for signing edits\"},\"$:/language/ControlPanel/Basics/Version/Prompt\":{\"title\":\"$:/language/ControlPanel/Basics/Version/Prompt\",\"text\":\"~TiddlyWiki version\"},\"$:/language/ControlPanel/Cascades/Caption\":{\"title\":\"$:/language/ControlPanel/Cascades/Caption\",\"text\":\"Cascades\"},\"$:/language/ControlPanel/Cascades/Hint\":{\"title\":\"$:/language/ControlPanel/Cascades/Hint\",\"text\":\"These global rules are used to dynamically choose certain templates. The result of the cascade is the result of the first filter in the sequence that returns a result\"},\"$:/language/ControlPanel/Cascades/TagPrompt\":{\"title\":\"$:/language/ControlPanel/Cascades/TagPrompt\",\"text\":\"Filters tagged \u003C$macrocall $name=\\\"tag\\\" tag=\u003C\u003CcurrentTiddler>>/>\"},\"$:/language/ControlPanel/EditorTypes/Caption\":{\"title\":\"$:/language/ControlPanel/EditorTypes/Caption\",\"text\":\"Editor Types\"},\"$:/language/ControlPanel/EditorTypes/Editor/Caption\":{\"title\":\"$:/language/ControlPanel/EditorTypes/Editor/Caption\",\"text\":\"Editor\"},\"$:/language/ControlPanel/EditorTypes/Hint\":{\"title\":\"$:/language/ControlPanel/EditorTypes/Hint\",\"text\":\"These tiddlers determine which editor is used to edit specific tiddler types.\"},\"$:/language/ControlPanel/EditorTypes/Type/Caption\":{\"title\":\"$:/language/ControlPanel/EditorTypes/Type/Caption\",\"text\":\"Type\"},\"$:/language/ControlPanel/EditTemplateBody/Caption\":{\"title\":\"$:/language/ControlPanel/EditTemplateBody/Caption\",\"text\":\"Edit Template Body\"},\"$:/language/ControlPanel/EditTemplateBody/Hint\":{\"title\":\"$:/language/ControlPanel/EditTemplateBody/Hint\",\"text\":\"This rule cascade is used by the default edit template to dynamically choose the template for editing the body of a tiddler.\"},\"$:/language/ControlPanel/FieldEditor/Caption\":{\"title\":\"$:/language/ControlPanel/FieldEditor/Caption\",\"text\":\"Field Editor\"},\"$:/language/ControlPanel/FieldEditor/Hint\":{\"title\":\"$:/language/ControlPanel/FieldEditor/Hint\",\"text\":\"This rules cascade is used to dynamically choose the template for rendering a tiddler field based on its name. It is used within the Edit Template.\"},\"$:/language/ControlPanel/Info/Caption\":{\"title\":\"$:/language/ControlPanel/Info/Caption\",\"text\":\"Info\"},\"$:/language/ControlPanel/Info/Hint\":{\"title\":\"$:/language/ControlPanel/Info/Hint\",\"text\":\"Information about this TiddlyWiki\"},\"$:/language/ControlPanel/KeyboardShortcuts/Add/Prompt\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Add/Prompt\",\"text\":\"Type shortcut here\"},\"$:/language/ControlPanel/KeyboardShortcuts/Add/Caption\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Add/Caption\",\"text\":\"add shortcut\"},\"$:/language/ControlPanel/KeyboardShortcuts/Caption\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Caption\",\"text\":\"Keyboard Shortcuts\"},\"$:/language/ControlPanel/KeyboardShortcuts/Hint\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Hint\",\"text\":\"Manage keyboard shortcut assignments\"},\"$:/language/ControlPanel/KeyboardShortcuts/NoShortcuts/Caption\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/NoShortcuts/Caption\",\"text\":\"No keyboard shortcuts assigned\"},\"$:/language/ControlPanel/KeyboardShortcuts/Remove/Hint\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Remove/Hint\",\"text\":\"remove keyboard shortcut\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/All\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/All\",\"text\":\"All platforms\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/Mac\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/Mac\",\"text\":\"Macintosh platform only\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/NonMac\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/NonMac\",\"text\":\"Non-Macintosh platforms only\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/Linux\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/Linux\",\"text\":\"Linux platform only\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/NonLinux\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/NonLinux\",\"text\":\"Non-Linux platforms only\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/Windows\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/Windows\",\"text\":\"Windows platform only\"},\"$:/language/ControlPanel/KeyboardShortcuts/Platform/NonWindows\":{\"title\":\"$:/language/ControlPanel/KeyboardShortcuts/Platform/NonWindows\",\"text\":\"Non-Windows platforms only\"},\"$:/language/ControlPanel/LayoutSwitcher/Caption\":{\"title\":\"$:/language/ControlPanel/LayoutSwitcher/Caption\",\"text\":\"Layout\"},\"$:/language/ControlPanel/LoadedModules/Caption\":{\"title\":\"$:/language/ControlPanel/LoadedModules/Caption\",\"text\":\"Loaded Modules\"},\"$:/language/ControlPanel/LoadedModules/Hint\":{\"title\":\"$:/language/ControlPanel/LoadedModules/Hint\",\"text\":\"These are the currently loaded tiddler modules linked to their source tiddlers. Any italicised modules lack a source tiddler, typically because they were setup during the boot process.\"},\"$:/language/ControlPanel/Palette/Caption\":{\"title\":\"$:/language/ControlPanel/Palette/Caption\",\"text\":\"Palette\"},\"$:/language/ControlPanel/Palette/Editor/Clone/Caption\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Clone/Caption\",\"text\":\"clone\"},\"$:/language/ControlPanel/Palette/Editor/Clone/Prompt\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Clone/Prompt\",\"text\":\"It is recommended that you clone this shadow palette before editing it\"},\"$:/language/ControlPanel/Palette/Editor/Delete/Hint\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Delete/Hint\",\"text\":\"delete this entry from the current palette\"},\"$:/language/ControlPanel/Palette/Editor/Names/External/Show\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Names/External/Show\",\"text\":\"Show color names that are not part of the current palette\"},\"$:/language/ControlPanel/Palette/Editor/Prompt/Modified\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Prompt/Modified\",\"text\":\"This shadow palette has been modified\"},\"$:/language/ControlPanel/Palette/Editor/Prompt\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Prompt\",\"text\":\"Editing\"},\"$:/language/ControlPanel/Palette/Editor/Reset/Caption\":{\"title\":\"$:/language/ControlPanel/Palette/Editor/Reset/Caption\",\"text\":\"reset\"},\"$:/language/ControlPanel/Palette/HideEditor/Caption\":{\"title\":\"$:/language/ControlPanel/Palette/HideEditor/Caption\",\"text\":\"hide editor\"},\"$:/language/ControlPanel/Palette/Prompt\":{\"title\":\"$:/language/ControlPanel/Palette/Prompt\",\"text\":\"Current palette:\"},\"$:/language/ControlPanel/Palette/ShowEditor/Caption\":{\"title\":\"$:/language/ControlPanel/Palette/ShowEditor/Caption\",\"text\":\"show editor\"},\"$:/language/ControlPanel/Parsing/Caption\":{\"title\":\"$:/language/ControlPanel/Parsing/Caption\",\"text\":\"Parsing\"},\"$:/language/ControlPanel/Parsing/Hint\":{\"title\":\"$:/language/ControlPanel/Parsing/Hint\",\"text\":\"Here you can globally disable/enable wiki parser rules. For changes to take effect, save and reload your wiki. Disabling certain parser rules can prevent \u003C$text text=\\\"TiddlyWiki\\\"/> from functioning correctly. Use [[safe mode|https://tiddlywiki.com/#SafeMode]] to restore normal operation.\"},\"$:/language/ControlPanel/Parsing/Block/Caption\":{\"title\":\"$:/language/ControlPanel/Parsing/Block/Caption\",\"text\":\"Block Parse Rules\"},\"$:/language/ControlPanel/Parsing/Inline/Caption\":{\"title\":\"$:/language/ControlPanel/Parsing/Inline/Caption\",\"text\":\"Inline Parse Rules\"},\"$:/language/ControlPanel/Parsing/Pragma/Caption\":{\"title\":\"$:/language/ControlPanel/Parsing/Pragma/Caption\",\"text\":\"Pragma Parse Rules\"},\"$:/language/ControlPanel/Plugins/Add/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Add/Caption\",\"text\":\"Get more plugins\"},\"$:/language/ControlPanel/Plugins/Add/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Add/Hint\",\"text\":\"Install plugins from the official library\"},\"$:/language/ControlPanel/Plugins/AlreadyInstalled/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/AlreadyInstalled/Hint\",\"text\":\"This plugin is already installed at version \u003C$text text=\u003C\u003CinstalledVersion>>/>\"},\"$:/language/ControlPanel/Plugins/AlsoRequires\":{\"title\":\"$:/language/ControlPanel/Plugins/AlsoRequires\",\"text\":\"Also requires:\"},\"$:/language/ControlPanel/Plugins/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Caption\",\"text\":\"Plugins\"},\"$:/language/ControlPanel/Plugins/Disable/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Disable/Caption\",\"text\":\"disable\"},\"$:/language/ControlPanel/Plugins/Disable/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Disable/Hint\",\"text\":\"Disable this plugin when reloading page\"},\"$:/language/ControlPanel/Plugins/Disabled/Status\":{\"title\":\"$:/language/ControlPanel/Plugins/Disabled/Status\",\"text\":\"(disabled)\"},\"$:/language/ControlPanel/Plugins/Downgrade/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Downgrade/Caption\",\"text\":\"downgrade\"},\"$:/language/ControlPanel/Plugins/Empty/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Empty/Hint\",\"text\":\"None\"},\"$:/language/ControlPanel/Plugins/Enable/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Enable/Caption\",\"text\":\"enable\"},\"$:/language/ControlPanel/Plugins/Enable/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Enable/Hint\",\"text\":\"Enable this plugin when reloading page\"},\"$:/language/ControlPanel/Plugins/Install/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Install/Caption\",\"text\":\"install\"},\"$:/language/ControlPanel/Plugins/Installed/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Installed/Hint\",\"text\":\"Currently installed plugins:\"},\"$:/language/ControlPanel/Plugins/Languages/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Languages/Caption\",\"text\":\"Languages\"},\"$:/language/ControlPanel/Plugins/Languages/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Languages/Hint\",\"text\":\"Language pack plugins\"},\"$:/language/ControlPanel/Plugins/NoInfoFound/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/NoInfoFound/Hint\",\"text\":\"No ''\\\"\u003C$text text=\u003C\u003CcurrentTab>>/>\\\"'' found\"},\"$:/language/ControlPanel/Plugins/NotInstalled/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/NotInstalled/Hint\",\"text\":\"This plugin is not currently installed\"},\"$:/language/ControlPanel/Plugins/OpenPluginLibrary\":{\"title\":\"$:/language/ControlPanel/Plugins/OpenPluginLibrary\",\"text\":\"open plugin library\"},\"$:/language/ControlPanel/Plugins/ClosePluginLibrary\":{\"title\":\"$:/language/ControlPanel/Plugins/ClosePluginLibrary\",\"text\":\"close plugin library\"},\"$:/language/ControlPanel/Plugins/PluginWillRequireReload\":{\"title\":\"$:/language/ControlPanel/Plugins/PluginWillRequireReload\",\"text\":\"(requires reload)\"},\"$:/language/ControlPanel/Plugins/Plugins/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Plugins/Caption\",\"text\":\"Plugins\"},\"$:/language/ControlPanel/Plugins/Plugins/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Plugins/Hint\",\"text\":\"Plugins\"},\"$:/language/ControlPanel/Plugins/Reinstall/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Reinstall/Caption\",\"text\":\"reinstall\"},\"$:/language/ControlPanel/Plugins/Themes/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Themes/Caption\",\"text\":\"Themes\"},\"$:/language/ControlPanel/Plugins/Themes/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Themes/Hint\",\"text\":\"Theme plugins\"},\"$:/language/ControlPanel/Plugins/Update/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Update/Caption\",\"text\":\"update\"},\"$:/language/ControlPanel/Plugins/Updates/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Updates/Caption\",\"text\":\"Updates\"},\"$:/language/ControlPanel/Plugins/Updates/Hint\":{\"title\":\"$:/language/ControlPanel/Plugins/Updates/Hint\",\"text\":\"Available updates to installed plugins\"},\"$:/language/ControlPanel/Plugins/Updates/UpdateAll/Caption\":{\"title\":\"$:/language/ControlPanel/Plugins/Updates/UpdateAll/Caption\",\"text\":\"Update \u003C\u003Cupdate-count>> plugins\"},\"$:/language/ControlPanel/Plugins/SubPluginPrompt\":{\"title\":\"$:/language/ControlPanel/Plugins/SubPluginPrompt\",\"text\":\"With \u003C\u003Ccount>> sub-plugins available\"},\"$:/language/ControlPanel/Saving/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/Caption\",\"text\":\"Saving\"},\"$:/language/ControlPanel/Saving/DownloadSaver/AutoSave/Description\":{\"title\":\"$:/language/ControlPanel/Saving/DownloadSaver/AutoSave/Description\",\"text\":\"Permit automatic saving for the download saver\"},\"$:/language/ControlPanel/Saving/DownloadSaver/AutoSave/Hint\":{\"title\":\"$:/language/ControlPanel/Saving/DownloadSaver/AutoSave/Hint\",\"text\":\"Enable Autosave for Download Saver\"},\"$:/language/ControlPanel/Saving/DownloadSaver/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/DownloadSaver/Caption\",\"text\":\"Download Saver\"},\"$:/language/ControlPanel/Saving/DownloadSaver/Hint\":{\"title\":\"$:/language/ControlPanel/Saving/DownloadSaver/Hint\",\"text\":\"These settings apply to the HTML5-compatible download saver\"},\"$:/language/ControlPanel/Saving/General/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/General/Caption\",\"text\":\"General\"},\"$:/language/ControlPanel/Saving/General/Hint\":{\"title\":\"$:/language/ControlPanel/Saving/General/Hint\",\"text\":\"These settings apply to all the loaded savers\"},\"$:/language/ControlPanel/Saving/Hint\":{\"title\":\"$:/language/ControlPanel/Saving/Hint\",\"text\":\"Settings used for saving the entire TiddlyWiki as a single file via a saver module\"},\"$:/language/ControlPanel/Saving/GitService/Branch\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Branch\",\"text\":\"Target branch for saving\"},\"$:/language/ControlPanel/Saving/GitService/CommitMessage\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/CommitMessage\",\"text\":\"Saved by TiddlyWiki\"},\"$:/language/ControlPanel/Saving/GitService/Description\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Description\",\"text\":\"These settings are only used when saving to \u003C\u003Cservice-name>>\"},\"$:/language/ControlPanel/Saving/GitService/Filename\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Filename\",\"text\":\"Filename of target file (e.g. `index.html`)\"},\"$:/language/ControlPanel/Saving/GitService/Path\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Path\",\"text\":\"Path to target file (e.g. `/wiki/`)\"},\"$:/language/ControlPanel/Saving/GitService/Repo\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Repo\",\"text\":\"Target repository (e.g. `Jermolene/TiddlyWiki5`)\"},\"$:/language/ControlPanel/Saving/GitService/ServerURL\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/ServerURL\",\"text\":\"Server API URL\"},\"$:/language/ControlPanel/Saving/GitService/UserName\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/UserName\",\"text\":\"Username\"},\"$:/language/ControlPanel/Saving/GitService/GitHub/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/GitHub/Caption\",\"text\":\"~GitHub Saver\"},\"$:/language/ControlPanel/Saving/GitService/GitHub/Password\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/GitHub/Password\",\"text\":\"Password, OAUTH token, or personal access token (see [[GitHub help page|https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line]] for details)\"},\"$:/language/ControlPanel/Saving/GitService/GitLab/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/GitLab/Caption\",\"text\":\"~GitLab Saver\"},\"$:/language/ControlPanel/Saving/GitService/GitLab/Password\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/GitLab/Password\",\"text\":\"Personal access token for API (see [[GitLab help page|https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html]] for details)\"},\"$:/language/ControlPanel/Saving/GitService/Gitea/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Gitea/Caption\",\"text\":\"Gitea Saver\"},\"$:/language/ControlPanel/Saving/GitService/Gitea/Password\":{\"title\":\"$:/language/ControlPanel/Saving/GitService/Gitea/Password\",\"text\":\"Personal access token for API (via Gitea’s web interface: `Settings | Applications | Generate New Token`)\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Advanced/Heading\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Advanced/Heading\",\"text\":\"Advanced Settings\"},\"$:/language/ControlPanel/Saving/TiddlySpot/BackupDir\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/BackupDir\",\"text\":\"Backup Directory\"},\"$:/language/ControlPanel/Saving/TiddlySpot/ControlPanel\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/ControlPanel\",\"text\":\"~TiddlySpot Control Panel\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Backups\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Backups\",\"text\":\"Backups\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Caption\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Caption\",\"text\":\"~TiddlySpot Saver\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Description\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Description\",\"text\":\"These settings are only used when saving to [[TiddlySpot|http://tiddlyspot.com]], [[TiddlyHost|https://tiddlyhost.com]], or a compatible remote server. See [[here|https://github.com/simonbaird/tiddlyhost/wiki/TiddlySpot-Saver-configuration-for-Tiddlyhost-and-Tiddlyspot]] for information on ~TiddlySpot and ~TiddlyHost saving configuration.\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Filename\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Filename\",\"text\":\"Upload Filename\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Heading\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Heading\",\"text\":\"~TiddlySpot\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Hint\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Hint\",\"text\":\"//The server URL defaults to `http://\u003Cwikiname>.tiddlyspot.com/store.cgi` and can be changed to use a custom server address, e.g. `http://example.com/store.php`.//\"},\"$:/language/ControlPanel/Saving/TiddlySpot/Password\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/Password\",\"text\":\"Password\"},\"$:/language/ControlPanel/Saving/TiddlySpot/ReadOnly\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/ReadOnly\",\"text\":\"Note that [[TiddlySpot|http://tiddlyspot.com]] no longer allows the creation of new sites. For new sites, you can use [[TiddlyHost|https://tiddlyhost.com]], a new hosting service that replaces ~TiddlySpot.\"},\"$:/language/ControlPanel/Saving/TiddlySpot/ServerURL\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/ServerURL\",\"text\":\"Server URL\"},\"$:/language/ControlPanel/Saving/TiddlySpot/UploadDir\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/UploadDir\",\"text\":\"Upload Directory\"},\"$:/language/ControlPanel/Saving/TiddlySpot/UserName\":{\"title\":\"$:/language/ControlPanel/Saving/TiddlySpot/UserName\",\"text\":\"Wiki Name\"},\"$:/language/ControlPanel/Settings/AutoSave/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/AutoSave/Caption\",\"text\":\"Autosave\"},\"$:/language/ControlPanel/Settings/AutoSave/Disabled/Description\":{\"title\":\"$:/language/ControlPanel/Settings/AutoSave/Disabled/Description\",\"text\":\"Do not save changes automatically\"},\"$:/language/ControlPanel/Settings/AutoSave/Enabled/Description\":{\"title\":\"$:/language/ControlPanel/Settings/AutoSave/Enabled/Description\",\"text\":\"Save changes automatically\"},\"$:/language/ControlPanel/Settings/AutoSave/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/AutoSave/Hint\",\"text\":\"Attempt to automatically save changes during editing when using a supporting saver\"},\"$:/language/ControlPanel/Settings/CamelCase/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/CamelCase/Caption\",\"text\":\"Camel Case Wiki Links\"},\"$:/language/ControlPanel/Settings/CamelCase/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/CamelCase/Hint\",\"text\":\"You can globally disable automatic linking of ~CamelCase phrases. Requires reload to take effect\"},\"$:/language/ControlPanel/Settings/CamelCase/Description\":{\"title\":\"$:/language/ControlPanel/Settings/CamelCase/Description\",\"text\":\"Enable automatic ~CamelCase linking\"},\"$:/language/ControlPanel/Settings/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/Caption\",\"text\":\"Settings\"},\"$:/language/ControlPanel/Settings/EditorToolbar/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/EditorToolbar/Caption\",\"text\":\"Editor Toolbar\"},\"$:/language/ControlPanel/Settings/EditorToolbar/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/EditorToolbar/Hint\",\"text\":\"Enable or disable the editor toolbar:\"},\"$:/language/ControlPanel/Settings/EditorToolbar/Description\":{\"title\":\"$:/language/ControlPanel/Settings/EditorToolbar/Description\",\"text\":\"Show editor toolbar\"},\"$:/language/ControlPanel/Settings/InfoPanelMode/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/InfoPanelMode/Caption\",\"text\":\"Tiddler Info Panel Mode\"},\"$:/language/ControlPanel/Settings/InfoPanelMode/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/InfoPanelMode/Hint\",\"text\":\"Control when the tiddler info panel closes:\"},\"$:/language/ControlPanel/Settings/InfoPanelMode/Popup/Description\":{\"title\":\"$:/language/ControlPanel/Settings/InfoPanelMode/Popup/Description\",\"text\":\"Tiddler info panel closes automatically\"},\"$:/language/ControlPanel/Settings/InfoPanelMode/Sticky/Description\":{\"title\":\"$:/language/ControlPanel/Settings/InfoPanelMode/Sticky/Description\",\"text\":\"Tiddler info panel stays open until explicitly closed\"},\"$:/language/ControlPanel/Settings/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/Hint\",\"text\":\"These settings let you customise the behaviour of TiddlyWiki.\"},\"$:/language/ControlPanel/Settings/NavigationAddressBar/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationAddressBar/Caption\",\"text\":\"Navigation Address Bar\"},\"$:/language/ControlPanel/Settings/NavigationAddressBar/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationAddressBar/Hint\",\"text\":\"Behaviour of the browser address bar when navigating to a tiddler:\"},\"$:/language/ControlPanel/Settings/NavigationAddressBar/No/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationAddressBar/No/Description\",\"text\":\"Do not update the address bar\"},\"$:/language/ControlPanel/Settings/NavigationAddressBar/Permalink/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationAddressBar/Permalink/Description\",\"text\":\"Include the target tiddler\"},\"$:/language/ControlPanel/Settings/NavigationAddressBar/Permaview/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationAddressBar/Permaview/Description\",\"text\":\"Include the target tiddler and the current story sequence\"},\"$:/language/ControlPanel/Settings/NavigationHistory/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationHistory/Caption\",\"text\":\"Navigation History\"},\"$:/language/ControlPanel/Settings/NavigationHistory/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationHistory/Hint\",\"text\":\"Update browser history when navigating to a tiddler:\"},\"$:/language/ControlPanel/Settings/NavigationHistory/No/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationHistory/No/Description\",\"text\":\"Do not update history\"},\"$:/language/ControlPanel/Settings/NavigationHistory/Yes/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationHistory/Yes/Description\",\"text\":\"Update history\"},\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/Caption\",\"text\":\"Permalink/permaview Mode\"},\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/Hint\",\"text\":\"Choose how permalink/permaview is handled:\"},\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/CopyToClipboard/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/CopyToClipboard/Description\",\"text\":\"Copy permalink/permaview URL to clipboard\"},\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/UpdateAddressBar/Description\":{\"title\":\"$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/UpdateAddressBar/Description\",\"text\":\"Update address bar with permalink/permaview URL\"},\"$:/language/ControlPanel/Settings/PerformanceInstrumentation/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/PerformanceInstrumentation/Caption\",\"text\":\"Performance Instrumentation\"},\"$:/language/ControlPanel/Settings/PerformanceInstrumentation/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/PerformanceInstrumentation/Hint\",\"text\":\"Displays performance statistics in the browser developer console. Requires reload to take effect\"},\"$:/language/ControlPanel/Settings/PerformanceInstrumentation/Description\":{\"title\":\"$:/language/ControlPanel/Settings/PerformanceInstrumentation/Description\",\"text\":\"Enable performance instrumentation\"},\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Caption\",\"text\":\"Toolbar Button Style\"},\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Hint\",\"text\":\"Choose the style for toolbar buttons:\"},\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Borderless\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Borderless\",\"text\":\"Borderless\"},\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Boxed\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Boxed\",\"text\":\"Boxed\"},\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Rounded\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Rounded\",\"text\":\"Rounded\"},\"$:/language/ControlPanel/Settings/ToolbarButtons/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtons/Caption\",\"text\":\"Toolbar Buttons\"},\"$:/language/ControlPanel/Settings/ToolbarButtons/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtons/Hint\",\"text\":\"Default toolbar button appearance:\"},\"$:/language/ControlPanel/Settings/ToolbarButtons/Icons/Description\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtons/Icons/Description\",\"text\":\"Include icon\"},\"$:/language/ControlPanel/Settings/ToolbarButtons/Text/Description\":{\"title\":\"$:/language/ControlPanel/Settings/ToolbarButtons/Text/Description\",\"text\":\"Include text\"},\"$:/language/ControlPanel/Settings/DefaultSidebarTab/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/DefaultSidebarTab/Caption\",\"text\":\"Default Sidebar Tab\"},\"$:/language/ControlPanel/Settings/DefaultSidebarTab/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/DefaultSidebarTab/Hint\",\"text\":\"Specify which sidebar tab is displayed by default\"},\"$:/language/ControlPanel/Settings/DefaultMoreSidebarTab/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/DefaultMoreSidebarTab/Caption\",\"text\":\"Default More Sidebar Tab\"},\"$:/language/ControlPanel/Settings/DefaultMoreSidebarTab/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/DefaultMoreSidebarTab/Hint\",\"text\":\"Specify which More sidebar tab is displayed by default\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/Caption\",\"text\":\"Tiddler Opening Behaviour\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/InsideRiver/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/InsideRiver/Hint\",\"text\":\"Navigation from //within// the story river\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/OutsideRiver/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/OutsideRiver/Hint\",\"text\":\"Navigation from //outside// the story river\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenAbove\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenAbove\",\"text\":\"Open above the current tiddler\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenBelow\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenBelow\",\"text\":\"Open below the current tiddler\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenAtTop\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenAtTop\",\"text\":\"Open at the top of the story river\"},\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenAtBottom\":{\"title\":\"$:/language/ControlPanel/Settings/LinkToBehaviour/OpenAtBottom\",\"text\":\"Open at the bottom of the story river\"},\"$:/language/ControlPanel/Settings/TitleLinks/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/TitleLinks/Caption\",\"text\":\"Tiddler Titles\"},\"$:/language/ControlPanel/Settings/TitleLinks/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/TitleLinks/Hint\",\"text\":\"Optionally display tiddler titles as links\"},\"$:/language/ControlPanel/Settings/TitleLinks/No/Description\":{\"title\":\"$:/language/ControlPanel/Settings/TitleLinks/No/Description\",\"text\":\"Do not display tiddler titles as links\"},\"$:/language/ControlPanel/Settings/TitleLinks/Yes/Description\":{\"title\":\"$:/language/ControlPanel/Settings/TitleLinks/Yes/Description\",\"text\":\"Display tiddler titles as links\"},\"$:/language/ControlPanel/Settings/MissingLinks/Caption\":{\"title\":\"$:/language/ControlPanel/Settings/MissingLinks/Caption\",\"text\":\"Wiki Links\"},\"$:/language/ControlPanel/Settings/MissingLinks/Hint\":{\"title\":\"$:/language/ControlPanel/Settings/MissingLinks/Hint\",\"text\":\"Choose whether to link to tiddlers that do not exist yet\"},\"$:/language/ControlPanel/Settings/MissingLinks/Description\":{\"title\":\"$:/language/ControlPanel/Settings/MissingLinks/Description\",\"text\":\"Enable links to missing tiddlers\"},\"$:/language/ControlPanel/StoryTiddler/Caption\":{\"title\":\"$:/language/ControlPanel/StoryTiddler/Caption\",\"text\":\"Story Tiddler\"},\"$:/language/ControlPanel/StoryTiddler/Hint\":{\"title\":\"$:/language/ControlPanel/StoryTiddler/Hint\",\"text\":\"This rule cascade is used to dynamically choose the template for displaying a tiddler in the story river.\"},\"$:/language/ControlPanel/StoryView/Caption\":{\"title\":\"$:/language/ControlPanel/StoryView/Caption\",\"text\":\"Story View\"},\"$:/language/ControlPanel/StoryView/Prompt\":{\"title\":\"$:/language/ControlPanel/StoryView/Prompt\",\"text\":\"Current view:\"},\"$:/language/ControlPanel/Stylesheets/Caption\":{\"title\":\"$:/language/ControlPanel/Stylesheets/Caption\",\"text\":\"Stylesheets\"},\"$:/language/ControlPanel/Stylesheets/Expand/Caption\":{\"title\":\"$:/language/ControlPanel/Stylesheets/Expand/Caption\",\"text\":\"Expand All\"},\"$:/language/ControlPanel/Stylesheets/Hint\":{\"title\":\"$:/language/ControlPanel/Stylesheets/Hint\",\"text\":\"This is the rendered CSS of the current stylesheet tiddlers tagged with \u003C\u003Ctag \\\"$:/tags/Stylesheet\\\">>\"},\"$:/language/ControlPanel/Stylesheets/Restore/Caption\":{\"title\":\"$:/language/ControlPanel/Stylesheets/Restore/Caption\",\"text\":\"Restore\"},\"$:/language/ControlPanel/Theme/Caption\":{\"title\":\"$:/language/ControlPanel/Theme/Caption\",\"text\":\"Theme\"},\"$:/language/ControlPanel/Theme/Prompt\":{\"title\":\"$:/language/ControlPanel/Theme/Prompt\",\"text\":\"Current theme:\"},\"$:/language/ControlPanel/TiddlerFields/Caption\":{\"title\":\"$:/language/ControlPanel/TiddlerFields/Caption\",\"text\":\"Tiddler Fields\"},\"$:/language/ControlPanel/TiddlerFields/Hint\":{\"title\":\"$:/language/ControlPanel/TiddlerFields/Hint\",\"text\":\"This is the full set of TiddlerFields in use in this wiki (including system tiddlers but excluding shadow tiddlers).\"},\"$:/language/ControlPanel/TiddlerColour/Caption\":{\"title\":\"$:/language/ControlPanel/TiddlerColour/Caption\",\"text\":\"Tiddler Colour\"},\"$:/language/ControlPanel/TiddlerColour/Hint\":{\"title\":\"$:/language/ControlPanel/TiddlerColour/Hint\",\"text\":\"This rules cascade is used to dynamically choose the colour for a tiddler (used for the icon and the associated tag pill).\"},\"$:/language/ControlPanel/TiddlerIcon/Caption\":{\"title\":\"$:/language/ControlPanel/TiddlerIcon/Caption\",\"text\":\"Tiddler Icon\"},\"$:/language/ControlPanel/TiddlerIcon/Hint\":{\"title\":\"$:/language/ControlPanel/TiddlerIcon/Hint\",\"text\":\"This rules cascade is used to dynamically choose the icon for a tiddler.\"},\"$:/language/ControlPanel/Toolbars/Caption\":{\"title\":\"$:/language/ControlPanel/Toolbars/Caption\",\"text\":\"Toolbars\"},\"$:/language/ControlPanel/Toolbars/EditToolbar/Caption\":{\"title\":\"$:/language/ControlPanel/Toolbars/EditToolbar/Caption\",\"text\":\"Edit Toolbar\"},\"$:/language/ControlPanel/Toolbars/EditToolbar/Hint\":{\"title\":\"$:/language/ControlPanel/Toolbars/EditToolbar/Hint\",\"text\":\"Choose which buttons are displayed for tiddlers in edit mode. Drag and drop to change the ordering\"},\"$:/language/ControlPanel/Toolbars/Hint\":{\"title\":\"$:/language/ControlPanel/Toolbars/Hint\",\"text\":\"Select which toolbar buttons are displayed\"},\"$:/language/ControlPanel/Toolbars/PageControls/Caption\":{\"title\":\"$:/language/ControlPanel/Toolbars/PageControls/Caption\",\"text\":\"Page Toolbar\"},\"$:/language/ControlPanel/Toolbars/PageControls/Hint\":{\"title\":\"$:/language/ControlPanel/Toolbars/PageControls/Hint\",\"text\":\"Choose which buttons are displayed on the main page toolbar. Drag and drop to change the ordering\"},\"$:/language/ControlPanel/Toolbars/EditorToolbar/Caption\":{\"title\":\"$:/language/ControlPanel/Toolbars/EditorToolbar/Caption\",\"text\":\"Editor Toolbar\"},\"$:/language/ControlPanel/Toolbars/EditorToolbar/Hint\":{\"title\":\"$:/language/ControlPanel/Toolbars/EditorToolbar/Hint\",\"text\":\"Choose which buttons are displayed in the editor toolbar. Note that some buttons will only appear when editing tiddlers of a certain type. Drag and drop to change the ordering\"},\"$:/language/ControlPanel/Toolbars/ViewToolbar/Caption\":{\"title\":\"$:/language/ControlPanel/Toolbars/ViewToolbar/Caption\",\"text\":\"View Toolbar\"},\"$:/language/ControlPanel/Toolbars/ViewToolbar/Hint\":{\"title\":\"$:/language/ControlPanel/Toolbars/ViewToolbar/Hint\",\"text\":\"Choose which buttons are displayed for tiddlers in view mode. Drag and drop to change the ordering\"},\"$:/language/ControlPanel/Tools/Download/Full/Caption\":{\"title\":\"$:/language/ControlPanel/Tools/Download/Full/Caption\",\"text\":\"Download full wiki\"},\"$:/language/ControlPanel/ViewTemplateBody/Caption\":{\"title\":\"$:/language/ControlPanel/ViewTemplateBody/Caption\",\"text\":\"View Template Body\"},\"$:/language/ControlPanel/ViewTemplateBody/Hint\":{\"title\":\"$:/language/ControlPanel/ViewTemplateBody/Hint\",\"text\":\"This rule cascade is used by the default view template to dynamically choose the template for displaying the body of a tiddler.\"},\"$:/language/ControlPanel/ViewTemplateTitle/Caption\":{\"title\":\"$:/language/ControlPanel/ViewTemplateTitle/Caption\",\"text\":\"View Template Title\"},\"$:/language/ControlPanel/ViewTemplateTitle/Hint\":{\"title\":\"$:/language/ControlPanel/ViewTemplateTitle/Hint\",\"text\":\"This rule cascade is used by the default view template to dynamically choose the template for displaying the title of a tiddler.\"},\"$:/language/Date/DaySuffix/1\":{\"title\":\"$:/language/Date/DaySuffix/1\",\"text\":\"st\"},\"$:/language/Date/DaySuffix/2\":{\"title\":\"$:/language/Date/DaySuffix/2\",\"text\":\"nd\"},\"$:/language/Date/DaySuffix/3\":{\"title\":\"$:/language/Date/DaySuffix/3\",\"text\":\"rd\"},\"$:/language/Date/DaySuffix/4\":{\"title\":\"$:/language/Date/DaySuffix/4\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/5\":{\"title\":\"$:/language/Date/DaySuffix/5\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/6\":{\"title\":\"$:/language/Date/DaySuffix/6\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/7\":{\"title\":\"$:/language/Date/DaySuffix/7\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/8\":{\"title\":\"$:/language/Date/DaySuffix/8\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/9\":{\"title\":\"$:/language/Date/DaySuffix/9\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/10\":{\"title\":\"$:/language/Date/DaySuffix/10\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/11\":{\"title\":\"$:/language/Date/DaySuffix/11\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/12\":{\"title\":\"$:/language/Date/DaySuffix/12\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/13\":{\"title\":\"$:/language/Date/DaySuffix/13\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/14\":{\"title\":\"$:/language/Date/DaySuffix/14\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/15\":{\"title\":\"$:/language/Date/DaySuffix/15\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/16\":{\"title\":\"$:/language/Date/DaySuffix/16\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/17\":{\"title\":\"$:/language/Date/DaySuffix/17\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/18\":{\"title\":\"$:/language/Date/DaySuffix/18\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/19\":{\"title\":\"$:/language/Date/DaySuffix/19\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/20\":{\"title\":\"$:/language/Date/DaySuffix/20\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/21\":{\"title\":\"$:/language/Date/DaySuffix/21\",\"text\":\"st\"},\"$:/language/Date/DaySuffix/22\":{\"title\":\"$:/language/Date/DaySuffix/22\",\"text\":\"nd\"},\"$:/language/Date/DaySuffix/23\":{\"title\":\"$:/language/Date/DaySuffix/23\",\"text\":\"rd\"},\"$:/language/Date/DaySuffix/24\":{\"title\":\"$:/language/Date/DaySuffix/24\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/25\":{\"title\":\"$:/language/Date/DaySuffix/25\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/26\":{\"title\":\"$:/language/Date/DaySuffix/26\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/27\":{\"title\":\"$:/language/Date/DaySuffix/27\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/28\":{\"title\":\"$:/language/Date/DaySuffix/28\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/29\":{\"title\":\"$:/language/Date/DaySuffix/29\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/30\":{\"title\":\"$:/language/Date/DaySuffix/30\",\"text\":\"th\"},\"$:/language/Date/DaySuffix/31\":{\"title\":\"$:/language/Date/DaySuffix/31\",\"text\":\"st\"},\"$:/language/Date/Long/Day/0\":{\"title\":\"$:/language/Date/Long/Day/0\",\"text\":\"Sunday\"},\"$:/language/Date/Long/Day/1\":{\"title\":\"$:/language/Date/Long/Day/1\",\"text\":\"Monday\"},\"$:/language/Date/Long/Day/2\":{\"title\":\"$:/language/Date/Long/Day/2\",\"text\":\"Tuesday\"},\"$:/language/Date/Long/Day/3\":{\"title\":\"$:/language/Date/Long/Day/3\",\"text\":\"Wednesday\"},\"$:/language/Date/Long/Day/4\":{\"title\":\"$:/language/Date/Long/Day/4\",\"text\":\"Thursday\"},\"$:/language/Date/Long/Day/5\":{\"title\":\"$:/language/Date/Long/Day/5\",\"text\":\"Friday\"},\"$:/language/Date/Long/Day/6\":{\"title\":\"$:/language/Date/Long/Day/6\",\"text\":\"Saturday\"},\"$:/language/Date/Long/Month/1\":{\"title\":\"$:/language/Date/Long/Month/1\",\"text\":\"January\"},\"$:/language/Date/Long/Month/2\":{\"title\":\"$:/language/Date/Long/Month/2\",\"text\":\"February\"},\"$:/language/Date/Long/Month/3\":{\"title\":\"$:/language/Date/Long/Month/3\",\"text\":\"March\"},\"$:/language/Date/Long/Month/4\":{\"title\":\"$:/language/Date/Long/Month/4\",\"text\":\"April\"},\"$:/language/Date/Long/Month/5\":{\"title\":\"$:/language/Date/Long/Month/5\",\"text\":\"May\"},\"$:/language/Date/Long/Month/6\":{\"title\":\"$:/language/Date/Long/Month/6\",\"text\":\"June\"},\"$:/language/Date/Long/Month/7\":{\"title\":\"$:/language/Date/Long/Month/7\",\"text\":\"July\"},\"$:/language/Date/Long/Month/8\":{\"title\":\"$:/language/Date/Long/Month/8\",\"text\":\"August\"},\"$:/language/Date/Long/Month/9\":{\"title\":\"$:/language/Date/Long/Month/9\",\"text\":\"September\"},\"$:/language/Date/Long/Month/10\":{\"title\":\"$:/language/Date/Long/Month/10\",\"text\":\"October\"},\"$:/language/Date/Long/Month/11\":{\"title\":\"$:/language/Date/Long/Month/11\",\"text\":\"November\"},\"$:/language/Date/Long/Month/12\":{\"title\":\"$:/language/Date/Long/Month/12\",\"text\":\"December\"},\"$:/language/Date/Period/am\":{\"title\":\"$:/language/Date/Period/am\",\"text\":\"am\"},\"$:/language/Date/Period/pm\":{\"title\":\"$:/language/Date/Period/pm\",\"text\":\"pm\"},\"$:/language/Date/Short/Day/0\":{\"title\":\"$:/language/Date/Short/Day/0\",\"text\":\"Sun\"},\"$:/language/Date/Short/Day/1\":{\"title\":\"$:/language/Date/Short/Day/1\",\"text\":\"Mon\"},\"$:/language/Date/Short/Day/2\":{\"title\":\"$:/language/Date/Short/Day/2\",\"text\":\"Tue\"},\"$:/language/Date/Short/Day/3\":{\"title\":\"$:/language/Date/Short/Day/3\",\"text\":\"Wed\"},\"$:/language/Date/Short/Day/4\":{\"title\":\"$:/language/Date/Short/Day/4\",\"text\":\"Thu\"},\"$:/language/Date/Short/Day/5\":{\"title\":\"$:/language/Date/Short/Day/5\",\"text\":\"Fri\"},\"$:/language/Date/Short/Day/6\":{\"title\":\"$:/language/Date/Short/Day/6\",\"text\":\"Sat\"},\"$:/language/Date/Short/Month/1\":{\"title\":\"$:/language/Date/Short/Month/1\",\"text\":\"Jan\"},\"$:/language/Date/Short/Month/2\":{\"title\":\"$:/language/Date/Short/Month/2\",\"text\":\"Feb\"},\"$:/language/Date/Short/Month/3\":{\"title\":\"$:/language/Date/Short/Month/3\",\"text\":\"Mar\"},\"$:/language/Date/Short/Month/4\":{\"title\":\"$:/language/Date/Short/Month/4\",\"text\":\"Apr\"},\"$:/language/Date/Short/Month/5\":{\"title\":\"$:/language/Date/Short/Month/5\",\"text\":\"May\"},\"$:/language/Date/Short/Month/6\":{\"title\":\"$:/language/Date/Short/Month/6\",\"text\":\"Jun\"},\"$:/language/Date/Short/Month/7\":{\"title\":\"$:/language/Date/Short/Month/7\",\"text\":\"Jul\"},\"$:/language/Date/Short/Month/8\":{\"title\":\"$:/language/Date/Short/Month/8\",\"text\":\"Aug\"},\"$:/language/Date/Short/Month/9\":{\"title\":\"$:/language/Date/Short/Month/9\",\"text\":\"Sep\"},\"$:/language/Date/Short/Month/10\":{\"title\":\"$:/language/Date/Short/Month/10\",\"text\":\"Oct\"},\"$:/language/Date/Short/Month/11\":{\"title\":\"$:/language/Date/Short/Month/11\",\"text\":\"Nov\"},\"$:/language/Date/Short/Month/12\":{\"title\":\"$:/language/Date/Short/Month/12\",\"text\":\"Dec\"},\"$:/language/RelativeDate/Future/Days\":{\"title\":\"$:/language/RelativeDate/Future/Days\",\"text\":\"\u003C\u003Cperiod>> days from now\"},\"$:/language/RelativeDate/Future/Hours\":{\"title\":\"$:/language/RelativeDate/Future/Hours\",\"text\":\"\u003C\u003Cperiod>> hours from now\"},\"$:/language/RelativeDate/Future/Minutes\":{\"title\":\"$:/language/RelativeDate/Future/Minutes\",\"text\":\"\u003C\u003Cperiod>> minutes from now\"},\"$:/language/RelativeDate/Future/Months\":{\"title\":\"$:/language/RelativeDate/Future/Months\",\"text\":\"\u003C\u003Cperiod>> months from now\"},\"$:/language/RelativeDate/Future/Second\":{\"title\":\"$:/language/RelativeDate/Future/Second\",\"text\":\"1 second from now\"},\"$:/language/RelativeDate/Future/Seconds\":{\"title\":\"$:/language/RelativeDate/Future/Seconds\",\"text\":\"\u003C\u003Cperiod>> seconds from now\"},\"$:/language/RelativeDate/Future/Years\":{\"title\":\"$:/language/RelativeDate/Future/Years\",\"text\":\"\u003C\u003Cperiod>> years from now\"},\"$:/language/RelativeDate/Past/Days\":{\"title\":\"$:/language/RelativeDate/Past/Days\",\"text\":\"\u003C\u003Cperiod>> days ago\"},\"$:/language/RelativeDate/Past/Hours\":{\"title\":\"$:/language/RelativeDate/Past/Hours\",\"text\":\"\u003C\u003Cperiod>> hours ago\"},\"$:/language/RelativeDate/Past/Minutes\":{\"title\":\"$:/language/RelativeDate/Past/Minutes\",\"text\":\"\u003C\u003Cperiod>> minutes ago\"},\"$:/language/RelativeDate/Past/Months\":{\"title\":\"$:/language/RelativeDate/Past/Months\",\"text\":\"\u003C\u003Cperiod>> months ago\"},\"$:/language/RelativeDate/Past/Second\":{\"title\":\"$:/language/RelativeDate/Past/Second\",\"text\":\"1 second ago\"},\"$:/language/RelativeDate/Past/Seconds\":{\"title\":\"$:/language/RelativeDate/Past/Seconds\",\"text\":\"\u003C\u003Cperiod>> seconds ago\"},\"$:/language/RelativeDate/Past/Years\":{\"title\":\"$:/language/RelativeDate/Past/Years\",\"text\":\"\u003C\u003Cperiod>> years ago\"},\"$:/language/Docs/ModuleTypes/allfilteroperator\":{\"title\":\"$:/language/Docs/ModuleTypes/allfilteroperator\",\"text\":\"A sub-operator for the ''all'' filter operator.\"},\"$:/language/Docs/ModuleTypes/animation\":{\"title\":\"$:/language/Docs/ModuleTypes/animation\",\"text\":\"Animations that may be used with the RevealWidget.\"},\"$:/language/Docs/ModuleTypes/authenticator\":{\"title\":\"$:/language/Docs/ModuleTypes/authenticator\",\"text\":\"Defines how requests are authenticated by the built-in HTTP server.\"},\"$:/language/Docs/ModuleTypes/bitmapeditoroperation\":{\"title\":\"$:/language/Docs/ModuleTypes/bitmapeditoroperation\",\"text\":\"A bitmap editor toolbar operation.\"},\"$:/language/Docs/ModuleTypes/command\":{\"title\":\"$:/language/Docs/ModuleTypes/command\",\"text\":\"Commands that can be executed under Node.js.\"},\"$:/language/Docs/ModuleTypes/config\":{\"title\":\"$:/language/Docs/ModuleTypes/config\",\"text\":\"Data to be inserted into `$tw.config`.\"},\"$:/language/Docs/ModuleTypes/filteroperator\":{\"title\":\"$:/language/Docs/ModuleTypes/filteroperator\",\"text\":\"Individual filter operator methods.\"},\"$:/language/Docs/ModuleTypes/global\":{\"title\":\"$:/language/Docs/ModuleTypes/global\",\"text\":\"Global data to be inserted into `$tw`.\"},\"$:/language/Docs/ModuleTypes/info\":{\"title\":\"$:/language/Docs/ModuleTypes/info\",\"text\":\"Publishes system information via the [[$:/temp/info-plugin]] pseudo-plugin.\"},\"$:/language/Docs/ModuleTypes/isfilteroperator\":{\"title\":\"$:/language/Docs/ModuleTypes/isfilteroperator\",\"text\":\"Operands for the ''is'' filter operator.\"},\"$:/language/Docs/ModuleTypes/library\":{\"title\":\"$:/language/Docs/ModuleTypes/library\",\"text\":\"Generic module type for general purpose JavaScript modules.\"},\"$:/language/Docs/ModuleTypes/macro\":{\"title\":\"$:/language/Docs/ModuleTypes/macro\",\"text\":\"JavaScript macro definitions.\"},\"$:/language/Docs/ModuleTypes/parser\":{\"title\":\"$:/language/Docs/ModuleTypes/parser\",\"text\":\"Parsers for different content types.\"},\"$:/language/Docs/ModuleTypes/route\":{\"title\":\"$:/language/Docs/ModuleTypes/route\",\"text\":\"Defines how individual URL patterns are handled by the built-in HTTP server.\"},\"$:/language/Docs/ModuleTypes/saver\":{\"title\":\"$:/language/Docs/ModuleTypes/saver\",\"text\":\"Savers handle different methods for saving files from the browser.\"},\"$:/language/Docs/ModuleTypes/startup\":{\"title\":\"$:/language/Docs/ModuleTypes/startup\",\"text\":\"Startup functions.\"},\"$:/language/Docs/ModuleTypes/storyview\":{\"title\":\"$:/language/Docs/ModuleTypes/storyview\",\"text\":\"Story views customise the animation and behaviour of list widgets.\"},\"$:/language/Docs/ModuleTypes/texteditoroperation\":{\"title\":\"$:/language/Docs/ModuleTypes/texteditoroperation\",\"text\":\"A text editor toolbar operation.\"},\"$:/language/Docs/ModuleTypes/tiddlerdeserializer\":{\"title\":\"$:/language/Docs/ModuleTypes/tiddlerdeserializer\",\"text\":\"Converts different content types into tiddlers.\"},\"$:/language/Docs/ModuleTypes/tiddlerfield\":{\"title\":\"$:/language/Docs/ModuleTypes/tiddlerfield\",\"text\":\"Defines the behaviour of an individual tiddler field.\"},\"$:/language/Docs/ModuleTypes/tiddlermethod\":{\"title\":\"$:/language/Docs/ModuleTypes/tiddlermethod\",\"text\":\"Adds methods to the `$tw.Tiddler` prototype.\"},\"$:/language/Docs/ModuleTypes/upgrader\":{\"title\":\"$:/language/Docs/ModuleTypes/upgrader\",\"text\":\"Applies upgrade processing to tiddlers during an upgrade/import.\"},\"$:/language/Docs/ModuleTypes/utils\":{\"title\":\"$:/language/Docs/ModuleTypes/utils\",\"text\":\"Adds methods to `$tw.utils`.\"},\"$:/language/Docs/ModuleTypes/utils-browser\":{\"title\":\"$:/language/Docs/ModuleTypes/utils-browser\",\"text\":\"Adds browser-specific methods to `$tw.utils`.\"},\"$:/language/Docs/ModuleTypes/utils-node\":{\"title\":\"$:/language/Docs/ModuleTypes/utils-node\",\"text\":\"Adds Node.js-specific methods to `$tw.utils`.\"},\"$:/language/Docs/ModuleTypes/widget\":{\"title\":\"$:/language/Docs/ModuleTypes/widget\",\"text\":\"Widgets encapsulate DOM rendering and refreshing.\"},\"$:/language/Docs/ModuleTypes/wikimethod\":{\"title\":\"$:/language/Docs/ModuleTypes/wikimethod\",\"text\":\"Adds methods to `$tw.Wiki`.\"},\"$:/language/Docs/ModuleTypes/wikirule\":{\"title\":\"$:/language/Docs/ModuleTypes/wikirule\",\"text\":\"Individual parser rules for the main WikiText parser.\"},\"$:/language/Docs/PaletteColours/alert-background\":{\"title\":\"$:/language/Docs/PaletteColours/alert-background\",\"text\":\"Alert background\"},\"$:/language/Docs/PaletteColours/alert-border\":{\"title\":\"$:/language/Docs/PaletteColours/alert-border\",\"text\":\"Alert border\"},\"$:/language/Docs/PaletteColours/alert-highlight\":{\"title\":\"$:/language/Docs/PaletteColours/alert-highlight\",\"text\":\"Alert highlight\"},\"$:/language/Docs/PaletteColours/alert-muted-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/alert-muted-foreground\",\"text\":\"Alert muted foreground\"},\"$:/language/Docs/PaletteColours/background\":{\"title\":\"$:/language/Docs/PaletteColours/background\",\"text\":\"General background\"},\"$:/language/Docs/PaletteColours/blockquote-bar\":{\"title\":\"$:/language/Docs/PaletteColours/blockquote-bar\",\"text\":\"Blockquote bar\"},\"$:/language/Docs/PaletteColours/button-background\":{\"title\":\"$:/language/Docs/PaletteColours/button-background\",\"text\":\"Default button background\"},\"$:/language/Docs/PaletteColours/button-border\":{\"title\":\"$:/language/Docs/PaletteColours/button-border\",\"text\":\"Default button border\"},\"$:/language/Docs/PaletteColours/button-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/button-foreground\",\"text\":\"Default button foreground\"},\"$:/language/Docs/PaletteColours/dirty-indicator\":{\"title\":\"$:/language/Docs/PaletteColours/dirty-indicator\",\"text\":\"Unsaved changes indicator\"},\"$:/language/Docs/PaletteColours/code-background\":{\"title\":\"$:/language/Docs/PaletteColours/code-background\",\"text\":\"Code background\"},\"$:/language/Docs/PaletteColours/code-border\":{\"title\":\"$:/language/Docs/PaletteColours/code-border\",\"text\":\"Code border\"},\"$:/language/Docs/PaletteColours/code-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/code-foreground\",\"text\":\"Code foreground\"},\"$:/language/Docs/PaletteColours/download-background\":{\"title\":\"$:/language/Docs/PaletteColours/download-background\",\"text\":\"Download button background\"},\"$:/language/Docs/PaletteColours/download-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/download-foreground\",\"text\":\"Download button foreground\"},\"$:/language/Docs/PaletteColours/dragger-background\":{\"title\":\"$:/language/Docs/PaletteColours/dragger-background\",\"text\":\"Dragger background\"},\"$:/language/Docs/PaletteColours/dragger-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/dragger-foreground\",\"text\":\"Dragger foreground\"},\"$:/language/Docs/PaletteColours/dropdown-background\":{\"title\":\"$:/language/Docs/PaletteColours/dropdown-background\",\"text\":\"Dropdown background\"},\"$:/language/Docs/PaletteColours/dropdown-border\":{\"title\":\"$:/language/Docs/PaletteColours/dropdown-border\",\"text\":\"Dropdown border\"},\"$:/language/Docs/PaletteColours/dropdown-tab-background-selected\":{\"title\":\"$:/language/Docs/PaletteColours/dropdown-tab-background-selected\",\"text\":\"Dropdown tab background for selected tabs\"},\"$:/language/Docs/PaletteColours/dropdown-tab-background\":{\"title\":\"$:/language/Docs/PaletteColours/dropdown-tab-background\",\"text\":\"Dropdown tab background\"},\"$:/language/Docs/PaletteColours/dropzone-background\":{\"title\":\"$:/language/Docs/PaletteColours/dropzone-background\",\"text\":\"Dropzone background\"},\"$:/language/Docs/PaletteColours/external-link-background-hover\":{\"title\":\"$:/language/Docs/PaletteColours/external-link-background-hover\",\"text\":\"External link background hover\"},\"$:/language/Docs/PaletteColours/external-link-background-visited\":{\"title\":\"$:/language/Docs/PaletteColours/external-link-background-visited\",\"text\":\"External link background visited\"},\"$:/language/Docs/PaletteColours/external-link-background\":{\"title\":\"$:/language/Docs/PaletteColours/external-link-background\",\"text\":\"External link background\"},\"$:/language/Docs/PaletteColours/external-link-foreground-hover\":{\"title\":\"$:/language/Docs/PaletteColours/external-link-foreground-hover\",\"text\":\"External link foreground hover\"},\"$:/language/Docs/PaletteColours/external-link-foreground-visited\":{\"title\":\"$:/language/Docs/PaletteColours/external-link-foreground-visited\",\"text\":\"External link foreground visited\"},\"$:/language/Docs/PaletteColours/external-link-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/external-link-foreground\",\"text\":\"External link foreground\"},\"$:/language/Docs/PaletteColours/foreground\":{\"title\":\"$:/language/Docs/PaletteColours/foreground\",\"text\":\"General foreground\"},\"$:/language/Docs/PaletteColours/menubar-background\":{\"title\":\"$:/language/Docs/PaletteColours/menubar-background\",\"text\":\"Menu bar background\"},\"$:/language/Docs/PaletteColours/menubar-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/menubar-foreground\",\"text\":\"Menu bar foreground\"},\"$:/language/Docs/PaletteColours/message-background\":{\"title\":\"$:/language/Docs/PaletteColours/message-background\",\"text\":\"Message box background\"},\"$:/language/Docs/PaletteColours/message-border\":{\"title\":\"$:/language/Docs/PaletteColours/message-border\",\"text\":\"Message box border\"},\"$:/language/Docs/PaletteColours/message-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/message-foreground\",\"text\":\"Message box foreground\"},\"$:/language/Docs/PaletteColours/modal-backdrop\":{\"title\":\"$:/language/Docs/PaletteColours/modal-backdrop\",\"text\":\"Modal backdrop\"},\"$:/language/Docs/PaletteColours/modal-background\":{\"title\":\"$:/language/Docs/PaletteColours/modal-background\",\"text\":\"Modal background\"},\"$:/language/Docs/PaletteColours/modal-border\":{\"title\":\"$:/language/Docs/PaletteColours/modal-border\",\"text\":\"Modal border\"},\"$:/language/Docs/PaletteColours/modal-footer-background\":{\"title\":\"$:/language/Docs/PaletteColours/modal-footer-background\",\"text\":\"Modal footer background\"},\"$:/language/Docs/PaletteColours/modal-footer-border\":{\"title\":\"$:/language/Docs/PaletteColours/modal-footer-border\",\"text\":\"Modal footer border\"},\"$:/language/Docs/PaletteColours/modal-header-border\":{\"title\":\"$:/language/Docs/PaletteColours/modal-header-border\",\"text\":\"Modal header border\"},\"$:/language/Docs/PaletteColours/muted-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/muted-foreground\",\"text\":\"General muted foreground\"},\"$:/language/Docs/PaletteColours/notification-background\":{\"title\":\"$:/language/Docs/PaletteColours/notification-background\",\"text\":\"Notification background\"},\"$:/language/Docs/PaletteColours/notification-border\":{\"title\":\"$:/language/Docs/PaletteColours/notification-border\",\"text\":\"Notification border\"},\"$:/language/Docs/PaletteColours/page-background\":{\"title\":\"$:/language/Docs/PaletteColours/page-background\",\"text\":\"Page background\"},\"$:/language/Docs/PaletteColours/pre-background\":{\"title\":\"$:/language/Docs/PaletteColours/pre-background\",\"text\":\"Preformatted code background\"},\"$:/language/Docs/PaletteColours/pre-border\":{\"title\":\"$:/language/Docs/PaletteColours/pre-border\",\"text\":\"Preformatted code border\"},\"$:/language/Docs/PaletteColours/primary\":{\"title\":\"$:/language/Docs/PaletteColours/primary\",\"text\":\"General primary\"},\"$:/language/Docs/PaletteColours/select-tag-background\":{\"title\":\"$:/language/Docs/PaletteColours/select-tag-background\",\"text\":\"`\u003Cselect>` element background\"},\"$:/language/Docs/PaletteColours/select-tag-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/select-tag-foreground\",\"text\":\"`\u003Cselect>` element text\"},\"$:/language/Docs/PaletteColours/sidebar-button-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-button-foreground\",\"text\":\"Sidebar button foreground\"},\"$:/language/Docs/PaletteColours/sidebar-controls-foreground-hover\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-controls-foreground-hover\",\"text\":\"Sidebar controls foreground hover\"},\"$:/language/Docs/PaletteColours/sidebar-controls-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-controls-foreground\",\"text\":\"Sidebar controls foreground\"},\"$:/language/Docs/PaletteColours/sidebar-foreground-shadow\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-foreground-shadow\",\"text\":\"Sidebar foreground shadow\"},\"$:/language/Docs/PaletteColours/sidebar-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-foreground\",\"text\":\"Sidebar foreground\"},\"$:/language/Docs/PaletteColours/sidebar-muted-foreground-hover\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-muted-foreground-hover\",\"text\":\"Sidebar muted foreground hover\"},\"$:/language/Docs/PaletteColours/sidebar-muted-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-muted-foreground\",\"text\":\"Sidebar muted foreground\"},\"$:/language/Docs/PaletteColours/sidebar-tab-background-selected\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-background-selected\",\"text\":\"Sidebar tab background for selected tabs\"},\"$:/language/Docs/PaletteColours/sidebar-tab-background\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-background\",\"text\":\"Sidebar tab background\"},\"$:/language/Docs/PaletteColours/sidebar-tab-border-selected\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-border-selected\",\"text\":\"Sidebar tab border for selected tabs\"},\"$:/language/Docs/PaletteColours/sidebar-tab-border\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-border\",\"text\":\"Sidebar tab border\"},\"$:/language/Docs/PaletteColours/sidebar-tab-divider\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-divider\",\"text\":\"Sidebar tab divider\"},\"$:/language/Docs/PaletteColours/sidebar-tab-foreground-selected\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-foreground-selected\",\"text\":\"Sidebar tab foreground for selected tabs\"},\"$:/language/Docs/PaletteColours/sidebar-tab-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tab-foreground\",\"text\":\"Sidebar tab foreground\"},\"$:/language/Docs/PaletteColours/sidebar-tiddler-link-foreground-hover\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tiddler-link-foreground-hover\",\"text\":\"Sidebar tiddler link foreground hover\"},\"$:/language/Docs/PaletteColours/sidebar-tiddler-link-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/sidebar-tiddler-link-foreground\",\"text\":\"Sidebar tiddler link foreground\"},\"$:/language/Docs/PaletteColours/site-title-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/site-title-foreground\",\"text\":\"Site title foreground\"},\"$:/language/Docs/PaletteColours/static-alert-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/static-alert-foreground\",\"text\":\"Static alert foreground\"},\"$:/language/Docs/PaletteColours/tab-background-selected\":{\"title\":\"$:/language/Docs/PaletteColours/tab-background-selected\",\"text\":\"Tab background for selected tabs\"},\"$:/language/Docs/PaletteColours/tab-background\":{\"title\":\"$:/language/Docs/PaletteColours/tab-background\",\"text\":\"Tab background\"},\"$:/language/Docs/PaletteColours/tab-border-selected\":{\"title\":\"$:/language/Docs/PaletteColours/tab-border-selected\",\"text\":\"Tab border for selected tabs\"},\"$:/language/Docs/PaletteColours/tab-border\":{\"title\":\"$:/language/Docs/PaletteColours/tab-border\",\"text\":\"Tab border\"},\"$:/language/Docs/PaletteColours/tab-divider\":{\"title\":\"$:/language/Docs/PaletteColours/tab-divider\",\"text\":\"Tab divider\"},\"$:/language/Docs/PaletteColours/tab-foreground-selected\":{\"title\":\"$:/language/Docs/PaletteColours/tab-foreground-selected\",\"text\":\"Tab foreground for selected tabs\"},\"$:/language/Docs/PaletteColours/tab-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/tab-foreground\",\"text\":\"Tab foreground\"},\"$:/language/Docs/PaletteColours/table-border\":{\"title\":\"$:/language/Docs/PaletteColours/table-border\",\"text\":\"Table border\"},\"$:/language/Docs/PaletteColours/table-footer-background\":{\"title\":\"$:/language/Docs/PaletteColours/table-footer-background\",\"text\":\"Table footer background\"},\"$:/language/Docs/PaletteColours/table-header-background\":{\"title\":\"$:/language/Docs/PaletteColours/table-header-background\",\"text\":\"Table header background\"},\"$:/language/Docs/PaletteColours/tag-background\":{\"title\":\"$:/language/Docs/PaletteColours/tag-background\",\"text\":\"Tag background\"},\"$:/language/Docs/PaletteColours/tag-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/tag-foreground\",\"text\":\"Tag foreground\"},\"$:/language/Docs/PaletteColours/tiddler-background\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-background\",\"text\":\"Tiddler background\"},\"$:/language/Docs/PaletteColours/tiddler-border\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-border\",\"text\":\"Tiddler border\"},\"$:/language/Docs/PaletteColours/tiddler-controls-foreground-hover\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-controls-foreground-hover\",\"text\":\"Tiddler controls foreground hover\"},\"$:/language/Docs/PaletteColours/tiddler-controls-foreground-selected\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-controls-foreground-selected\",\"text\":\"Tiddler controls foreground for selected controls\"},\"$:/language/Docs/PaletteColours/tiddler-controls-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-controls-foreground\",\"text\":\"Tiddler controls foreground\"},\"$:/language/Docs/PaletteColours/tiddler-editor-background\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-editor-background\",\"text\":\"Tiddler editor background\"},\"$:/language/Docs/PaletteColours/tiddler-editor-border-image\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-editor-border-image\",\"text\":\"Tiddler editor border image\"},\"$:/language/Docs/PaletteColours/tiddler-editor-border\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-editor-border\",\"text\":\"Tiddler editor border\"},\"$:/language/Docs/PaletteColours/tiddler-editor-fields-even\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-editor-fields-even\",\"text\":\"Tiddler editor background for even fields\"},\"$:/language/Docs/PaletteColours/tiddler-editor-fields-odd\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-editor-fields-odd\",\"text\":\"Tiddler editor background for odd fields\"},\"$:/language/Docs/PaletteColours/tiddler-info-background\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-info-background\",\"text\":\"Tiddler info panel background\"},\"$:/language/Docs/PaletteColours/tiddler-info-border\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-info-border\",\"text\":\"Tiddler info panel border\"},\"$:/language/Docs/PaletteColours/tiddler-info-tab-background\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-info-tab-background\",\"text\":\"Tiddler info panel tab background\"},\"$:/language/Docs/PaletteColours/tiddler-link-background\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-link-background\",\"text\":\"Tiddler link background\"},\"$:/language/Docs/PaletteColours/tiddler-link-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-link-foreground\",\"text\":\"Tiddler link foreground\"},\"$:/language/Docs/PaletteColours/tiddler-subtitle-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-subtitle-foreground\",\"text\":\"Tiddler subtitle foreground\"},\"$:/language/Docs/PaletteColours/tiddler-title-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/tiddler-title-foreground\",\"text\":\"Tiddler title foreground\"},\"$:/language/Docs/PaletteColours/toolbar-new-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-new-button\",\"text\":\"Toolbar 'new tiddler' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-options-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-options-button\",\"text\":\"Toolbar 'options' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-save-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-save-button\",\"text\":\"Toolbar 'save' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-info-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-info-button\",\"text\":\"Toolbar 'info' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-edit-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-edit-button\",\"text\":\"Toolbar 'edit' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-close-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-close-button\",\"text\":\"Toolbar 'close' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-delete-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-delete-button\",\"text\":\"Toolbar 'delete' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-cancel-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-cancel-button\",\"text\":\"Toolbar 'cancel' button foreground\"},\"$:/language/Docs/PaletteColours/toolbar-done-button\":{\"title\":\"$:/language/Docs/PaletteColours/toolbar-done-button\",\"text\":\"Toolbar 'done' button foreground\"},\"$:/language/Docs/PaletteColours/untagged-background\":{\"title\":\"$:/language/Docs/PaletteColours/untagged-background\",\"text\":\"Untagged pill background\"},\"$:/language/Docs/PaletteColours/very-muted-foreground\":{\"title\":\"$:/language/Docs/PaletteColours/very-muted-foreground\",\"text\":\"Very muted foreground\"},\"$:/language/EditTemplate/Body/External/Hint\":{\"title\":\"$:/language/EditTemplate/Body/External/Hint\",\"text\":\"This tiddler shows content stored outside of the main TiddlyWiki file. You can edit the tags and fields but cannot directly edit the content itself\"},\"$:/language/EditTemplate/Body/Placeholder\":{\"title\":\"$:/language/EditTemplate/Body/Placeholder\",\"text\":\"Type the text for this tiddler\"},\"$:/language/EditTemplate/Body/Preview/Type/Output\":{\"title\":\"$:/language/EditTemplate/Body/Preview/Type/Output\",\"text\":\"output\"},\"$:/language/EditTemplate/Body/Preview/Type/DiffShadow\":{\"title\":\"$:/language/EditTemplate/Body/Preview/Type/DiffShadow\",\"text\":\"differences from shadow (if any)\"},\"$:/language/EditTemplate/Body/Preview/Type/DiffCurrent\":{\"title\":\"$:/language/EditTemplate/Body/Preview/Type/DiffCurrent\",\"text\":\"differences from current\"},\"$:/language/EditTemplate/Field/Remove/Caption\":{\"title\":\"$:/language/EditTemplate/Field/Remove/Caption\",\"text\":\"remove field\"},\"$:/language/EditTemplate/Field/Remove/Hint\":{\"title\":\"$:/language/EditTemplate/Field/Remove/Hint\",\"text\":\"Remove field\"},\"$:/language/EditTemplate/Field/Dropdown/Caption\":{\"title\":\"$:/language/EditTemplate/Field/Dropdown/Caption\",\"text\":\"field list\"},\"$:/language/EditTemplate/Field/Dropdown/Hint\":{\"title\":\"$:/language/EditTemplate/Field/Dropdown/Hint\",\"text\":\"Show field list\"},\"$:/language/EditTemplate/Fields/Add/Button\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Button\",\"text\":\"add\"},\"$:/language/EditTemplate/Fields/Add/Button/Hint\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Button/Hint\",\"text\":\"Add the new field to the tiddler\"},\"$:/language/EditTemplate/Fields/Add/Name/Placeholder\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Name/Placeholder\",\"text\":\"field name\"},\"$:/language/EditTemplate/Fields/Add/Prompt\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Prompt\",\"text\":\"Add a new field:\"},\"$:/language/EditTemplate/Fields/Add/Value/Placeholder\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Value/Placeholder\",\"text\":\"field value\"},\"$:/language/EditTemplate/Fields/Add/Dropdown/System\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Dropdown/System\",\"text\":\"System fields\"},\"$:/language/EditTemplate/Fields/Add/Dropdown/User\":{\"title\":\"$:/language/EditTemplate/Fields/Add/Dropdown/User\",\"text\":\"User fields\"},\"$:/language/EditTemplate/Shadow/Warning\":{\"title\":\"$:/language/EditTemplate/Shadow/Warning\",\"text\":\"This is a shadow tiddler. Any changes you make will override the default version from the plugin \u003C\u003CpluginLink>>\"},\"$:/language/EditTemplate/Shadow/OverriddenWarning\":{\"title\":\"$:/language/EditTemplate/Shadow/OverriddenWarning\",\"text\":\"This is a modified shadow tiddler. You can revert to the default version in the plugin \u003C\u003CpluginLink>> by deleting this tiddler\"},\"$:/language/EditTemplate/Tags/Add/Button\":{\"title\":\"$:/language/EditTemplate/Tags/Add/Button\",\"text\":\"add\"},\"$:/language/EditTemplate/Tags/Add/Button/Hint\":{\"title\":\"$:/language/EditTemplate/Tags/Add/Button/Hint\",\"text\":\"add tag\"},\"$:/language/EditTemplate/Tags/Add/Placeholder\":{\"title\":\"$:/language/EditTemplate/Tags/Add/Placeholder\",\"text\":\"tag name\"},\"$:/language/EditTemplate/Tags/ClearInput/Caption\":{\"title\":\"$:/language/EditTemplate/Tags/ClearInput/Caption\",\"text\":\"clear input\"},\"$:/language/EditTemplate/Tags/ClearInput/Hint\":{\"title\":\"$:/language/EditTemplate/Tags/ClearInput/Hint\",\"text\":\"Clear tag input\"},\"$:/language/EditTemplate/Tags/Dropdown/Caption\":{\"title\":\"$:/language/EditTemplate/Tags/Dropdown/Caption\",\"text\":\"tag list\"},\"$:/language/EditTemplate/Tags/Dropdown/Hint\":{\"title\":\"$:/language/EditTemplate/Tags/Dropdown/Hint\",\"text\":\"Show tag list\"},\"$:/language/EditTemplate/Title/BadCharacterWarning\":{\"title\":\"$:/language/EditTemplate/Title/BadCharacterWarning\",\"text\":\"Warning: avoid using any of the characters \u003C\u003Cbad-chars>> in tiddler titles\"},\"$:/language/EditTemplate/Title/Exists/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/Exists/Prompt\",\"text\":\"Target tiddler already exists\"},\"$:/language/EditTemplate/Title/Relink/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/Relink/Prompt\",\"text\":\"Update ''\u003C$text text=\u003C\u003CfromTitle>>/>'' to ''\u003C$text text=\u003C\u003CtoTitle>>/>'' in the //tags// and //list// fields of other tiddlers\"},\"$:/language/EditTemplate/Title/References/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/References/Prompt\",\"text\":\"The following references to this tiddler will not be automatically updated:\"},\"$:/language/EditTemplate/Type/Dropdown/Caption\":{\"title\":\"$:/language/EditTemplate/Type/Dropdown/Caption\",\"text\":\"content type list\"},\"$:/language/EditTemplate/Type/Dropdown/Hint\":{\"title\":\"$:/language/EditTemplate/Type/Dropdown/Hint\",\"text\":\"Show content type list\"},\"$:/language/EditTemplate/Type/Delete/Caption\":{\"title\":\"$:/language/EditTemplate/Type/Delete/Caption\",\"text\":\"delete content type\"},\"$:/language/EditTemplate/Type/Delete/Hint\":{\"title\":\"$:/language/EditTemplate/Type/Delete/Hint\",\"text\":\"Delete content type\"},\"$:/language/EditTemplate/Type/Placeholder\":{\"title\":\"$:/language/EditTemplate/Type/Placeholder\",\"text\":\"content type\"},\"$:/language/EditTemplate/Type/Prompt\":{\"title\":\"$:/language/EditTemplate/Type/Prompt\",\"text\":\"Type:\"},\"$:/language/Exporters/StaticRiver\":{\"title\":\"$:/language/Exporters/StaticRiver\",\"text\":\"Static HTML\"},\"$:/language/Exporters/JsonFile\":{\"title\":\"$:/language/Exporters/JsonFile\",\"text\":\"JSON file\"},\"$:/language/Exporters/CsvFile\":{\"title\":\"$:/language/Exporters/CsvFile\",\"text\":\"CSV file\"},\"$:/language/Exporters/TidFile\":{\"title\":\"$:/language/Exporters/TidFile\",\"text\":\"\\\".tid\\\" file\"},\"$:/language/Docs/Fields/_canonical_uri\":{\"title\":\"$:/language/Docs/Fields/_canonical_uri\",\"text\":\"The full URI of an external image tiddler\"},\"$:/language/Docs/Fields/bag\":{\"title\":\"$:/language/Docs/Fields/bag\",\"text\":\"The name of the bag from which a tiddler came\"},\"$:/language/Docs/Fields/caption\":{\"title\":\"$:/language/Docs/Fields/caption\",\"text\":\"The text to be displayed on a tab or button\"},\"$:/language/Docs/Fields/code-body\":{\"title\":\"$:/language/Docs/Fields/code-body\",\"text\":\"The view template will display the tiddler as code if set to ''yes''\"},\"$:/language/Docs/Fields/color\":{\"title\":\"$:/language/Docs/Fields/color\",\"text\":\"The CSS color value associated with a tiddler\"},\"$:/language/Docs/Fields/component\":{\"title\":\"$:/language/Docs/Fields/component\",\"text\":\"The name of the component responsible for an [[alert tiddler|AlertMechanism]]\"},\"$:/language/Docs/Fields/current-tiddler\":{\"title\":\"$:/language/Docs/Fields/current-tiddler\",\"text\":\"Used to cache the top tiddler in a [[history list|HistoryMechanism]]\"},\"$:/language/Docs/Fields/created\":{\"title\":\"$:/language/Docs/Fields/created\",\"text\":\"The date a tiddler was created\"},\"$:/language/Docs/Fields/creator\":{\"title\":\"$:/language/Docs/Fields/creator\",\"text\":\"The name of the person who created a tiddler\"},\"$:/language/Docs/Fields/dependents\":{\"title\":\"$:/language/Docs/Fields/dependents\",\"text\":\"For a plugin, lists the dependent plugin titles\"},\"$:/language/Docs/Fields/description\":{\"title\":\"$:/language/Docs/Fields/description\",\"text\":\"The descriptive text for a plugin, or a modal dialogue\"},\"$:/language/Docs/Fields/draft.of\":{\"title\":\"$:/language/Docs/Fields/draft.of\",\"text\":\"For draft tiddlers, contains the title of the tiddler of which this is a draft\"},\"$:/language/Docs/Fields/draft.title\":{\"title\":\"$:/language/Docs/Fields/draft.title\",\"text\":\"For draft tiddlers, contains the proposed new title of the tiddler\"},\"$:/language/Docs/Fields/footer\":{\"title\":\"$:/language/Docs/Fields/footer\",\"text\":\"The footer text for a wizard\"},\"$:/language/Docs/Fields/hide-body\":{\"title\":\"$:/language/Docs/Fields/hide-body\",\"text\":\"The view template will hide bodies of tiddlers if set to ''yes''\"},\"$:/language/Docs/Fields/icon\":{\"title\":\"$:/language/Docs/Fields/icon\",\"text\":\"The title of the tiddler containing the icon associated with a tiddler\"},\"$:/language/Docs/Fields/library\":{\"title\":\"$:/language/Docs/Fields/library\",\"text\":\"Indicates that a tiddler should be saved as a JavaScript library if set to ''yes''\"},\"$:/language/Docs/Fields/list\":{\"title\":\"$:/language/Docs/Fields/list\",\"text\":\"An ordered list of tiddler titles associated with a tiddler\"},\"$:/language/Docs/Fields/list-before\":{\"title\":\"$:/language/Docs/Fields/list-before\",\"text\":\"If set, the title of a tiddler before which this tiddler should be added to the ordered list of tiddler titles, or at the start of the list if this field is present but empty\"},\"$:/language/Docs/Fields/list-after\":{\"title\":\"$:/language/Docs/Fields/list-after\",\"text\":\"If set, the title of the tiddler after which this tiddler should be added to the ordered list of tiddler titles, or at the end of the list if this field is present but empty\"},\"$:/language/Docs/Fields/modified\":{\"title\":\"$:/language/Docs/Fields/modified\",\"text\":\"The date and time at which a tiddler was last modified\"},\"$:/language/Docs/Fields/modifier\":{\"title\":\"$:/language/Docs/Fields/modifier\",\"text\":\"The tiddler title associated with the person who last modified a tiddler\"},\"$:/language/Docs/Fields/name\":{\"title\":\"$:/language/Docs/Fields/name\",\"text\":\"The human readable name associated with a plugin tiddler\"},\"$:/language/Docs/Fields/plugin-priority\":{\"title\":\"$:/language/Docs/Fields/plugin-priority\",\"text\":\"A numerical value indicating the priority of a plugin tiddler\"},\"$:/language/Docs/Fields/plugin-type\":{\"title\":\"$:/language/Docs/Fields/plugin-type\",\"text\":\"The type of plugin in a plugin tiddler\"},\"$:/language/Docs/Fields/revision\":{\"title\":\"$:/language/Docs/Fields/revision\",\"text\":\"The revision of the tiddler held at the server\"},\"$:/language/Docs/Fields/released\":{\"title\":\"$:/language/Docs/Fields/released\",\"text\":\"Date of a TiddlyWiki release\"},\"$:/language/Docs/Fields/source\":{\"title\":\"$:/language/Docs/Fields/source\",\"text\":\"The source URL associated with a tiddler\"},\"$:/language/Docs/Fields/subtitle\":{\"title\":\"$:/language/Docs/Fields/subtitle\",\"text\":\"The subtitle text for a wizard\"},\"$:/language/Docs/Fields/tags\":{\"title\":\"$:/language/Docs/Fields/tags\",\"text\":\"A list of tags associated with a tiddler\"},\"$:/language/Docs/Fields/text\":{\"title\":\"$:/language/Docs/Fields/text\",\"text\":\"The body text of a tiddler\"},\"$:/language/Docs/Fields/throttle.refresh\":{\"title\":\"$:/language/Docs/Fields/throttle.refresh\",\"text\":\"If present, throttles refreshes of this tiddler\"},\"$:/language/Docs/Fields/title\":{\"title\":\"$:/language/Docs/Fields/title\",\"text\":\"The unique name of a tiddler\"},\"$:/language/Docs/Fields/toc-link\":{\"title\":\"$:/language/Docs/Fields/toc-link\",\"text\":\"Suppresses the tiddler's link in a Table of Contents tree if set to ''no''\"},\"$:/language/Docs/Fields/type\":{\"title\":\"$:/language/Docs/Fields/type\",\"text\":\"The content type of a tiddler\"},\"$:/language/Docs/Fields/version\":{\"title\":\"$:/language/Docs/Fields/version\",\"text\":\"Version information for a plugin\"},\"$:/language/Docs/Fields/_is_skinny\":{\"title\":\"$:/language/Docs/Fields/_is_skinny\",\"text\":\"If present, indicates that the tiddler text field must be loaded from the server\"},\"$:/language/Filters/AllTiddlers\":{\"title\":\"$:/language/Filters/AllTiddlers\",\"text\":\"All tiddlers except system tiddlers\"},\"$:/language/Filters/RecentSystemTiddlers\":{\"title\":\"$:/language/Filters/RecentSystemTiddlers\",\"text\":\"Recently modified tiddlers, including system tiddlers\"},\"$:/language/Filters/RecentTiddlers\":{\"title\":\"$:/language/Filters/RecentTiddlers\",\"text\":\"Recently modified tiddlers\"},\"$:/language/Filters/AllTags\":{\"title\":\"$:/language/Filters/AllTags\",\"text\":\"All tags except system tags\"},\"$:/language/Filters/Missing\":{\"title\":\"$:/language/Filters/Missing\",\"text\":\"Missing tiddlers\"},\"$:/language/Filters/Drafts\":{\"title\":\"$:/language/Filters/Drafts\",\"text\":\"Draft tiddlers\"},\"$:/language/Filters/Orphans\":{\"title\":\"$:/language/Filters/Orphans\",\"text\":\"Orphan tiddlers\"},\"$:/language/Filters/SystemTiddlers\":{\"title\":\"$:/language/Filters/SystemTiddlers\",\"text\":\"System tiddlers\"},\"$:/language/Filters/ShadowTiddlers\":{\"title\":\"$:/language/Filters/ShadowTiddlers\",\"text\":\"Shadow tiddlers\"},\"$:/language/Filters/OverriddenShadowTiddlers\":{\"title\":\"$:/language/Filters/OverriddenShadowTiddlers\",\"text\":\"Overridden shadow tiddlers\"},\"$:/language/Filters/SessionTiddlers\":{\"title\":\"$:/language/Filters/SessionTiddlers\",\"text\":\"Tiddlers modified since the wiki was loaded\"},\"$:/language/Filters/SystemTags\":{\"title\":\"$:/language/Filters/SystemTags\",\"text\":\"System tags\"},\"$:/language/Filters/StoryList\":{\"title\":\"$:/language/Filters/StoryList\",\"text\":\"Tiddlers in the story river, excluding \u003C$text text=\\\"$:/AdvancedSearch\\\"/>\"},\"$:/language/Filters/TypedTiddlers\":{\"title\":\"$:/language/Filters/TypedTiddlers\",\"text\":\"Non wiki-text tiddlers\"},\"GettingStarted\":{\"title\":\"GettingStarted\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Basics/\\nWelcome to ~TiddlyWiki and the ~TiddlyWiki community\\n\\nBefore you start storing important information in ~TiddlyWiki it is vital to make sure that you can reliably save changes. See https://tiddlywiki.com/#GettingStarted for details\\n\\n!! Set up this ~TiddlyWiki\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\\n|\u003C$link to=\\\"$:/SiteTitle\\\">\u003C\u003Clingo Title/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/SiteTitle\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/SiteSubtitle\\\">\u003C\u003Clingo Subtitle/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/SiteSubtitle\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/DefaultTiddlers\\\">\u003C\u003Clingo DefaultTiddlers/Prompt>>\u003C/$link> |\u003C\u003Clingo DefaultTiddlers/TopHint>>\u003Cbr> \u003C$edit tag=\\\"textarea\\\" tiddler=\\\"$:/DefaultTiddlers\\\"/>\u003Cbr>//\u003C\u003Clingo DefaultTiddlers/BottomHint>>// |\\n\u003C/div>\\n\\nSee the [[control panel|$:/ControlPanel]] for more options.\\n\"},\"$:/language/Help/build\":{\"title\":\"$:/language/Help/build\",\"description\":\"Automatically run configured commands\",\"text\":\"Build the specified build targets for the current wiki. If no build targets are specified then all available targets will be built.\\n\\n```\\n--build \u003Ctarget> [\u003Ctarget> ...]\\n```\\n\\nBuild targets are defined in the `tiddlywiki.info` file of a wiki folder.\\n\\n\"},\"$:/language/Help/clearpassword\":{\"title\":\"$:/language/Help/clearpassword\",\"description\":\"Clear a password for subsequent crypto operations\",\"text\":\"Clear the password for subsequent crypto operations\\n\\n```\\n--clearpassword\\n```\\n\"},\"$:/language/Help/default\":{\"title\":\"$:/language/Help/default\",\"text\":\"\\\\define commandTitle()\\n$:/language/Help/$(command)$\\n\\\\end\\n```\\nusage: tiddlywiki [\u003Cwikifolder>] [--\u003Ccommand> [\u003Cargs>...]...]\\n```\\n\\nAvailable commands:\\n\\n\u003Cul>\\n\u003C$list filter=\\\"[commands[]sort[title]]\\\" variable=\\\"command\\\">\\n\u003Cli>\u003C$link to=\u003C\u003CcommandTitle>>>\u003C$macrocall $name=\\\"command\\\" $type=\\\"text/plain\\\" $output=\\\"text/plain\\\"/>\u003C/$link>: \u003C$transclude tiddler=\u003C\u003CcommandTitle>> field=\\\"description\\\"/>\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\\nTo get detailed help on a command:\\n\\n```\\ntiddlywiki --help \u003Ccommand>\\n```\\n\"},\"$:/language/Help/deletetiddlers\":{\"title\":\"$:/language/Help/deletetiddlers\",\"description\":\"Deletes a group of tiddlers\",\"text\":\"\u003C\u003C.from-version \\\"5.1.20\\\">> Deletes a group of tiddlers identified by a filter.\\n\\n```\\n--deletetiddlers \u003Cfilter>\\n```\\n\"},\"$:/language/Help/editions\":{\"title\":\"$:/language/Help/editions\",\"description\":\"Lists the available editions of TiddlyWiki\",\"text\":\"Lists the names and descriptions of the available editions. You can create a new wiki of a specified edition with the `--init` command.\\n\\n```\\n--editions\\n```\\n\"},\"$:/language/Help/fetch\":{\"title\":\"$:/language/Help/fetch\",\"description\":\"Fetch tiddlers from wiki by URL\",\"text\":\"Fetch one or more files over HTTP/HTTPS, and import the tiddlers matching a filter, optionally transforming the incoming titles.\\n\\n```\\n--fetch file \u003Curl> \u003Cimport-filter> \u003Ctransform-filter>\\n--fetch files \u003Curl-filter> \u003Cimport-filter> \u003Ctransform-filter>\\n--fetch raw-file \u003Curl> \u003Ctransform-filter>\\n--fetch raw-files \u003Curl-filter> \u003Ctransform-filter>\\n```\\n\\nThe \\\"file\\\" and \\\"files\\\" variants fetch the specified files and attempt to import the tiddlers within them (the same processing as if the files were dragged into the browser window). The \\\"raw-file\\\" and \\\"raw-files\\\" variants fetch the specified files and then store the raw file data in tiddlers, without applying the import logic.\\n\\nWith the \\\"file\\\" and \\\"raw-file\\\" variants only a single file is fetched and the first parameter is the URL of the file to read.\\n\\nWith the \\\"files\\\" and \\\"raw-files\\\" variants, multiple files are fetched and the first parameter is a filter yielding a list of URLs of the files to read. For example, given a set of tiddlers tagged \\\"remote-server\\\" that have a field \\\"url\\\" the filter `[tag[remote-server]get[url]]` will retrieve all the available URLs.\\n\\nFor the \\\"file\\\" and \\\"files\\\" variants, the `\u003Cimport-filter>` parameter specifies a filter determining which tiddlers are imported. It defaults to `[all[tiddlers]]` if not provided.\\n\\nFor all variants, the `\u003Ctransform-filter>` parameter specifies an optional filter that transforms the titles of the imported tiddlers. For example, `[addprefix[$:/myimports/]]` would add the prefix `$:/myimports/` to each title.\\n\\nPreceding the `--fetch` command with `--verbose` will output progress information during the import.\\n\\nNote that TiddlyWiki will not fetch an older version of an already loaded plugin.\\n\\nThe following example retrieves all the non-system tiddlers from https://tiddlywiki.com and saves them to a JSON file:\\n\\n```\\ntiddlywiki --verbose --fetch file \\\"https://tiddlywiki.com/\\\" \\\"[!is[system]]\\\" \\\"\\\" --rendertiddler \\\"$:/core/templates/exporters/JsonFile\\\" output.json text/plain \\\"\\\" exportFilter \\\"[!is[system]]\\\"\\n```\\n\\nThe following example retrieves the \\\"favicon\\\" file from tiddlywiki.com and saves it in a file called \\\"output.ico\\\". Note that the intermediate tiddler \\\"Icon Tiddler\\\" is quoted in the \\\"--fetch\\\" command because it is being used as a transformation filter to replace the default title, while there are no quotes for the \\\"--savetiddler\\\" command because it is being used directly as a title.\\n\\n```\\ntiddlywiki --verbose --fetch raw-file \\\"https://tiddlywiki.com/favicon.ico\\\" \\\"[[Icon Tiddler]]\\\" --savetiddler \\\"Icon Tiddler\\\" output.ico\\n```\\n\\n\"},\"$:/language/Help/help\":{\"title\":\"$:/language/Help/help\",\"description\":\"Display help for TiddlyWiki commands\",\"text\":\"Displays help text for a command:\\n\\n```\\n--help [\u003Ccommand>]\\n```\\n\\nIf the command name is omitted then a list of available commands is displayed.\\n\"},\"$:/language/Help/import\":{\"title\":\"$:/language/Help/import\",\"description\":\"Import tiddlers from a file\",\"text\":\"Import tiddlers from TiddlyWiki (`.html`), `.tiddler`, `.tid`, `.json` or other local files. The deserializer must be explicitly specified, unlike the `load` command which infers the deserializer from the file extension.\\n\\n```\\n--import \u003Cfilepath> \u003Cdeserializer> [\u003Ctitle>] [\u003Cencoding>]\\n```\\n\\nThe deserializers in the core include:\\n\\n* application/javascript\\n* application/json\\n* application/x-tiddler\\n* application/x-tiddler-html-div\\n* application/x-tiddlers\\n* text/html\\n* text/plain\\n\\nThe title of the imported tiddler defaults to the filename.\\n\\nThe encoding defaults to \\\"utf8\\\", but can be \\\"base64\\\" for importing binary files.\\n\\nNote that TiddlyWiki will not import an older version of an already loaded plugin.\\n\"},\"$:/language/Help/init\":{\"title\":\"$:/language/Help/init\",\"description\":\"Initialise a new wiki folder\",\"text\":\"Initialise an empty [[WikiFolder|WikiFolders]] with a copy of the specified edition.\\n\\n```\\n--init \u003Cedition> [\u003Cedition> ...]\\n```\\n\\nFor example:\\n\\n```\\ntiddlywiki ./MyWikiFolder --init empty\\n```\\n\\nNote:\\n\\n* The wiki folder directory will be created if necessary\\n* The \\\"edition\\\" defaults to ''empty''\\n* The init command will fail if the wiki folder is not empty\\n* The init command removes any `includeWikis` definitions in the edition's `tiddlywiki.info` file\\n* When multiple editions are specified, editions initialised later will overwrite any files shared with earlier editions (so, the final `tiddlywiki.info` file will be copied from the last edition)\\n* `--editions` returns a list of available editions\\n\"},\"$:/language/Help/listen\":{\"title\":\"$:/language/Help/listen\",\"description\":\"Provides an HTTP server interface to TiddlyWiki\",\"text\":\"Serves a wiki over HTTP.\\n\\nThe listen command uses NamedCommandParameters:\\n\\n```\\n--listen [\u003Cname>=\u003Cvalue>]...\\n```\\n\\nAll parameters are optional with safe defaults, and can be specified in any order. The recognised parameters are:\\n\\n* ''host'' - optional hostname to serve from (defaults to \\\"127.0.0.1\\\" aka \\\"localhost\\\")\\n* ''path-prefix'' - optional prefix for paths\\n* ''port'' - port number on which to listen; non-numeric values are interpreted as a system environment variable from which the port number is extracted (defaults to \\\"8080\\\")\\n* ''credentials'' - pathname of credentials CSV file (relative to wiki folder)\\n* ''anon-username'' - the username for signing edits for anonymous users\\n* ''username'' - optional username for basic authentication\\n* ''password'' - optional password for basic authentication\\n* ''authenticated-user-header'' - optional name of header to be used for trusted authentication\\n* ''readers'' - comma-separated list of principals allowed to read from this wiki\\n* ''writers'' - comma-separated list of principals allowed to write to this wiki\\n* ''csrf-disable'' - set to \\\"yes\\\" to disable CSRF checks (defaults to \\\"no\\\")\\n* ''root-tiddler'' - the tiddler to serve at the root (defaults to \\\"$:/core/save/all\\\")\\n* ''root-render-type'' - the content type to which the root tiddler should be rendered (defaults to \\\"text/plain\\\")\\n* ''root-serve-type'' - the content type with which the root tiddler should be served (defaults to \\\"text/html\\\")\\n* ''tls-cert'' - pathname of TLS certificate file (relative to wiki folder)\\n* ''tls-key'' - pathname of TLS key file (relative to wiki folder)\\n* ''debug-level'' - optional debug level; set to \\\"debug\\\" to view request details (defaults to \\\"none\\\")\\n* ''gzip'' - set to \\\"yes\\\" to enable gzip compression for some http endpoints (defaults to \\\"no\\\")\\n* ''use-browser-cache'' - set to \\\"yes\\\" to allow the browser to cache responses to save bandwidth (defaults to \\\"no\\\")\\n\\nFor information on opening up your instance to the entire local network, and possible security concerns, see the WebServer tiddler at TiddlyWiki.com.\\n\\n\"},\"$:/language/Help/load\":{\"title\":\"$:/language/Help/load\",\"description\":\"Load tiddlers from a file\",\"text\":\"Load tiddlers from TiddlyWiki (`.html`), `.tiddler`, `.tid`, `.json` or other local files. The processing applied to incoming files is determined by the file extension. Use the alternative `import` command if you need to specify the deserializer and encoding explicitly.\\n\\n```\\n--load \u003Cfilepath> [noerror]\\n--load \u003Cdirpath> [noerror]\\n```\\n\\nBy default, the load command raises an error if no tiddlers are found. The error can be suppressed by providing the optional \\\"noerror\\\" parameter.\\n\\nTo load tiddlers from an encrypted TiddlyWiki file you should first specify the password with the PasswordCommand. For example:\\n\\n```\\ntiddlywiki ./MyWiki --password pa55w0rd --load my_encrypted_wiki.html\\n```\\n\\nNote that TiddlyWiki will not load an older version of an already loaded plugin.\\n\"},\"$:/language/Help/makelibrary\":{\"title\":\"$:/language/Help/makelibrary\",\"description\":\"Construct library plugin required by upgrade process\",\"text\":\"Constructs the `$:/UpgradeLibrary` tiddler for the upgrade process.\\n\\nThe upgrade library is formatted as an ordinary plugin tiddler with the plugin type `library`. It contains a copy of each of the plugins, themes and language packs available within the TiddlyWiki5 repository.\\n\\nThis command is intended for internal use; it is only relevant to users constructing a custom upgrade procedure.\\n\\n```\\n--makelibrary \u003Ctitle>\\n```\\n\\nThe title argument defaults to `$:/UpgradeLibrary`.\\n\"},\"$:/language/Help/notfound\":{\"title\":\"$:/language/Help/notfound\",\"text\":\"No such help item\"},\"$:/language/Help/output\":{\"title\":\"$:/language/Help/output\",\"description\":\"Set the base output directory for subsequent commands\",\"text\":\"Sets the base output directory for subsequent commands. The default output directory is the `output` subdirectory of the edition directory.\\n\\n```\\n--output \u003Cpathname>\\n```\\n\\nIf the specified pathname is relative then it is resolved relative to the current working directory. For example `--output .` sets the output directory to the current working directory.\\n\\n\"},\"$:/language/Help/password\":{\"title\":\"$:/language/Help/password\",\"description\":\"Set a password for subsequent crypto operations\",\"text\":\"Set a password for subsequent crypto operations\\n\\n```\\n--password \u003Cpassword>\\n```\\n\\n''Note'': This should not be used for serving TiddlyWiki with password protection. Instead, see the password option under the [[ServerCommand]].\\n\"},\"$:/language/Help/render\":{\"title\":\"$:/language/Help/render\",\"description\":\"Renders individual tiddlers to files\",\"text\":\"Render individual tiddlers identified by a filter and save the results to the specified files.\\n\\nOptionally, the title of a template tiddler can be specified. In this case, instead of directly rendering each tiddler, the template tiddler is rendered with the \\\"currentTiddler\\\" variable set to the title of the tiddler that is being rendered.\\n\\nA name and value for an additional variable may optionally also be specified.\\n\\n```\\n--render \u003Ctiddler-filter> [\u003Cfilename-filter>] [\u003Crender-type>] [\u003Ctemplate>] [ [\u003Cname>] [\u003Cvalue>] ]*\\n```\\n\\n* ''tiddler-filter'': A filter identifying the tiddler(s) to be rendered\\n* ''filename-filter'': Optional filter transforming tiddler titles into pathnames. If omitted, defaults to `[is[tiddler]addsuffix[.html]]`, which uses the unchanged tiddler title as the filename\\n* ''render-type'': Optional render type: `text/html` (the default) returns the full HTML text and `text/plain` just returns the text content (ie it ignores HTML tags and other unprintable material)\\n* ''template'': Optional template through which each tiddler is rendered\\n* ''name'': Name of optional variables\\n* ''value'': Value of optional variables\\n\\nBy default, the filename is resolved relative to the `output` subdirectory of the edition directory. The `--output` command can be used to direct output to a different directory.\\n\\nNotes:\\n\\n* The output directory is not cleared of any existing files\\n* Any missing directories in the path to the filename are automatically created.\\n* When referring to a tiddler with spaces in its title, take care to use both the quotes required by your shell and also TiddlyWiki's double square brackets: `--render \\\"[[Motovun Jack.jpg]]\\\"`\\n* The filename filter is evaluated with the selected items being set to the title of the tiddler currently being rendered, allowing the title to be used as the basis for computing the filename. For example `[encodeuricomponent[]addprefix[static/]]` applies URI encoding to each title, and then adds the prefix `static/`\\n* Multiple ''name''/''value'' pairs can be used to pass more than one variable\\n* The `--render` command is a more flexible replacement for both the `--rendertiddler` and `--rendertiddlers` commands, which are deprecated\\n\\nExamples:\\n\\n* `--render \\\"[!is[system]]\\\" \\\"[encodeuricomponent[]addprefix[tiddlers/]addsuffix[.html]]\\\"` -- renders all non-system tiddlers as files in the subdirectory \\\"tiddlers\\\" with URL-encoded titles and the extension HTML\\n\\n\"},\"$:/language/Help/rendertiddler\":{\"title\":\"$:/language/Help/rendertiddler\",\"description\":\"Render an individual tiddler as a specified ContentType\",\"text\":\"(Note: The `--rendertiddler` command is deprecated in favour of the new, more flexible `--render` command)\\n\\nRender an individual tiddler as a specified ContentType, defaulting to `text/html` and save it to the specified filename.\\n\\nOptionally the title of a template tiddler can be specified, in which case the template tiddler is rendered with the \\\"currentTiddler\\\" variable set to the tiddler that is being rendered (the first parameter value).\\n\\nA name and value for an additional variable may optionally also be specified.\\n\\n```\\n--rendertiddler \u003Ctitle> \u003Cfilename> [\u003Ctype>] [\u003Ctemplate>] [\u003Cname>] [\u003Cvalue>]\\n```\\n\\nBy default, the filename is resolved relative to the `output` subdirectory of the edition directory. The `--output` command can be used to direct output to a different directory.\\n\\nAny missing directories in the path to the filename are automatically created.\\n\\nFor example, the following command saves all tiddlers matching the filter `[tag[done]]` to a JSON file titled `output.json` by employing the core template `$:/core/templates/exporters/JsonFile`.\\n\\n```\\n--rendertiddler \\\"$:/core/templates/exporters/JsonFile\\\" output.json text/plain \\\"\\\" exportFilter \\\"[tag[done]]\\\"\\n```\\n\"},\"$:/language/Help/rendertiddlers\":{\"title\":\"$:/language/Help/rendertiddlers\",\"description\":\"Render tiddlers matching a filter to a specified ContentType\",\"text\":\"(Note: The `--rendertiddlers` command is deprecated in favour of the new, more flexible `--render` command)\\n\\nRender a set of tiddlers matching a filter to separate files of a specified ContentType (defaults to `text/html`) and extension (defaults to `.html`).\\n\\n```\\n--rendertiddlers '\u003Cfilter>' \u003Ctemplate> \u003Cpathname> [\u003Ctype>] [\u003Cextension>] [\\\"noclean\\\"]\\n```\\n\\nFor example:\\n\\n```\\n--rendertiddlers '[!is[system]]' $:/core/templates/static.tiddler.html ./static text/plain\\n```\\n\\nBy default, the pathname is resolved relative to the `output` subdirectory of the edition directory. The `--output` command can be used to direct output to a different directory.\\n\\nAny files in the target directory are deleted unless the ''noclean'' flag is specified. The target directory is recursively created if it is missing.\\n\"},\"$:/language/Help/save\":{\"title\":\"$:/language/Help/save\",\"description\":\"Saves individual raw tiddlers to files\",\"text\":\"Saves individual tiddlers identified by a filter in their raw text or binary format to the specified files.\\n\\n```\\n--save \u003Ctiddler-filter> \u003Cfilename-filter>\\n```\\n\\n* ''tiddler-filter'': A filter identifying the tiddler(s) to be saved\\n* ''filename-filter'': Optional filter transforming tiddler titles into pathnames. If omitted, defaults to `[is[tiddler]]`, which uses the unchanged tiddler title as the filename\\n\\nBy default, the filename is resolved relative to the `output` subdirectory of the edition directory. The `--output` command can be used to direct output to a different directory.\\n\\nNotes:\\n\\n* The output directory is not cleared of any existing files\\n* Any missing directories in the path to the filename are automatically created.\\n* When saving a tiddler with spaces in its title, take care to use both the quotes required by your shell and also TiddlyWiki's double square brackets: `--save \\\"[[Motovun Jack.jpg]]\\\"`\\n* The filename filter is evaluated with the selected items being set to the title of the tiddler currently being saved, allowing the title to be used as the basis for computing the filename. For example `[encodeuricomponent[]addprefix[static/]]` applies URI encoding to each title, and then adds the prefix `static/`\\n* The `--save` command is a more flexible replacement for both the `--savetiddler` and `--savetiddlers` commands, which are deprecated\\n\\nExamples:\\n\\n* `--save \\\"[!is[system]is[image]]\\\" \\\"[encodeuricomponent[]addprefix[tiddlers/]]\\\"` -- saves all non-system image tiddlers as files in the subdirectory \\\"tiddlers\\\" with URL-encoded titles\\n\"},\"$:/language/Help/savetiddler\":{\"title\":\"$:/language/Help/savetiddler\",\"description\":\"Saves a raw tiddler to a file\",\"text\":\"(Note: The `--savetiddler` command is deprecated in favour of the new, more flexible `--save` command)\\n\\nSaves an individual tiddler in its raw text or binary format to the specified filename.\\n\\n```\\n--savetiddler \u003Ctitle> \u003Cfilename>\\n```\\n\\nBy default, the filename is resolved relative to the `output` subdirectory of the edition directory. The `--output` command can be used to direct output to a different directory.\\n\\nAny missing directories in the path to the filename are automatically created.\\n\"},\"$:/language/Help/savetiddlers\":{\"title\":\"$:/language/Help/savetiddlers\",\"description\":\"Saves a group of raw tiddlers to a directory\",\"text\":\"(Note: The `--savetiddlers` command is deprecated in favour of the new, more flexible `--save` command)\\n\\nSaves a group of tiddlers in their raw text or binary format to the specified directory.\\n\\n```\\n--savetiddlers \u003Cfilter> \u003Cpathname> [\\\"noclean\\\"]\\n```\\n\\nBy default, the pathname is resolved relative to the `output` subdirectory of the edition directory. The `--output` command can be used to direct output to a different directory.\\n\\nThe output directory is cleared of existing files before saving the specified files. The deletion can be disabled by specifying the ''noclean'' flag.\\n\\nAny missing directories in the pathname are automatically created.\\n\"},\"$:/language/Help/savewikifolder\":{\"title\":\"$:/language/Help/savewikifolder\",\"description\":\"Saves a wiki to a new wiki folder\",\"text\":\"\u003C\u003C.from-version \\\"5.1.20\\\">> Saves the current wiki as a wiki folder, including tiddlers, plugins and configuration:\\n\\n```\\n--savewikifolder \u003Cwikifolderpath> [\u003Cfilter>]\\n```\\n\\n* The target wiki folder must be empty or non-existent\\n* The filter specifies which tiddlers should be included. It is optional, defaulting to `[all[tiddlers]]`\\n* Plugins from the official plugin library are replaced with references to those plugins in the `tiddlywiki.info` file\\n* Custom plugins are unpacked into their own folder\\n\\nA common usage is to convert a TiddlyWiki HTML file into a wiki folder:\\n\\n```\\ntiddlywiki --load ./mywiki.html --savewikifolder ./mywikifolder\\n```\\n\"},\"$:/language/Help/server\":{\"title\":\"$:/language/Help/server\",\"description\":\"Provides an HTTP server interface to TiddlyWiki (deprecated in favour of the new listen command)\",\"text\":\"Legacy command to serve a wiki over HTTP.\\n\\n```\\n--server \u003Cport> \u003Croot-tiddler> \u003Croot-render-type> \u003Croot-serve-type> \u003Cusername> \u003Cpassword> \u003Chost> \u003Cpath-prefix> \u003Cdebug-level>\\n```\\n\\nThe parameters are:\\n\\n* ''port'' - port number on which to listen; non-numeric values are interpreted as a system environment variable from which the port number is extracted (defaults to \\\"8080\\\")\\n* ''root-tiddler'' - the tiddler to serve at the root (defaults to \\\"$:/core/save/all\\\")\\n* ''root-render-type'' - the content type to which the root tiddler should be rendered (defaults to \\\"text/plain\\\")\\n* ''root-serve-type'' - the content type with which the root tiddler should be served (defaults to \\\"text/html\\\")\\n* ''username'' - the default username for signing edits\\n* ''password'' - optional password for basic authentication\\n* ''host'' - optional hostname to serve from (defaults to \\\"127.0.0.1\\\" aka \\\"localhost\\\")\\n* ''path-prefix'' - optional prefix for paths\\n* ''debug-level'' - optional debug level; set to \\\"debug\\\" to view request details (defaults to \\\"none\\\")\\n\\nIf the password parameter is specified then the browser will prompt the user for the username and password. Note that the password is transmitted in plain text so this implementation should only be used on a trusted network or over HTTPS.\\n\\nFor example:\\n\\n```\\n--server 8080 $:/core/save/all text/plain text/html MyUserName passw0rd\\n```\\n\\nThe username and password can be specified as empty strings if you need to set the hostname or pathprefix and don't want to require a password.\\n\\n\\n```\\n--server 8080 $:/core/save/all text/plain text/html \\\"\\\" \\\"\\\" 192.168.0.245\\n```\\n\\nUsing an address like this exposes your system to the local network. For information on opening up your instance to the entire local network, and possible security concerns, see the WebServer tiddler at TiddlyWiki.com.\\n\\nTo run multiple TiddlyWiki servers at the same time you'll need to put each one on a different port. It can be useful to use an environment variable to pass the port number to the Node.js process. This example references an environment variable called \\\"MY_PORT_NUMBER\\\":\\n\\n```\\n--server MY_PORT_NUMBER $:/core/save/all text/plain text/html MyUserName passw0rd\\n```\\n\"},\"$:/language/Help/setfield\":{\"title\":\"$:/language/Help/setfield\",\"description\":\"Prepares external tiddlers for use\",\"text\":\"//Note that this command is experimental and may change or be replaced before being finalised//\\n\\nSets the specified field of a group of tiddlers to the result of wikifying a template tiddler with the `currentTiddler` variable set to the tiddler.\\n\\n```\\n--setfield \u003Cfilter> \u003Cfieldname> \u003Ctemplatetitle> \u003Crendertype>\\n```\\n\\nThe parameters are:\\n\\n* ''filter'' - filter identifying the tiddlers to be affected\\n* ''fieldname'' - the field to modify (defaults to \\\"text\\\")\\n* ''templatetitle'' - the tiddler to wikify into the specified field. If blank or missing then the specified field is deleted\\n* ''rendertype'' - the text type to render (defaults to \\\"text/plain\\\"; \\\"text/html\\\" can be used to include HTML tags)\\n\"},\"$:/language/Help/unpackplugin\":{\"title\":\"$:/language/Help/unpackplugin\",\"description\":\"Unpack the payload tiddlers from a plugin\",\"text\":\"Extract the payload tiddlers from a plugin, creating them as ordinary tiddlers:\\n\\n```\\n--unpackplugin \u003Ctitle>\\n```\\n\"},\"$:/language/Help/verbose\":{\"title\":\"$:/language/Help/verbose\",\"description\":\"Triggers verbose output mode\",\"text\":\"Triggers verbose output, useful for debugging\\n\\n```\\n--verbose\\n```\\n\"},\"$:/language/Help/version\":{\"title\":\"$:/language/Help/version\",\"description\":\"Displays the version number of TiddlyWiki\",\"text\":\"Displays the version number of TiddlyWiki.\\n\\n```\\n--version\\n```\\n\"},\"$:/language/Import/Editor/Import/Heading\":{\"title\":\"$:/language/Import/Editor/Import/Heading\",\"text\":\"Import images and insert them into the editor.\"},\"$:/language/Import/Imported/Hint\":{\"title\":\"$:/language/Import/Imported/Hint\",\"text\":\"The following tiddlers were imported:\"},\"$:/language/Import/Listing/Cancel/Caption\":{\"title\":\"$:/language/Import/Listing/Cancel/Caption\",\"text\":\"Cancel\"},\"$:/language/Import/Listing/Cancel/Warning\":{\"title\":\"$:/language/Import/Listing/Cancel/Warning\",\"text\":\"Do you wish to cancel the import?\"},\"$:/language/Import/Listing/Hint\":{\"title\":\"$:/language/Import/Listing/Hint\",\"text\":\"These tiddlers are ready to import:\"},\"$:/language/Import/Listing/Import/Caption\":{\"title\":\"$:/language/Import/Listing/Import/Caption\",\"text\":\"Import\"},\"$:/language/Import/Listing/Select/Caption\":{\"title\":\"$:/language/Import/Listing/Select/Caption\",\"text\":\"Select\"},\"$:/language/Import/Listing/Status/Caption\":{\"title\":\"$:/language/Import/Listing/Status/Caption\",\"text\":\"Status\"},\"$:/language/Import/Listing/Title/Caption\":{\"title\":\"$:/language/Import/Listing/Title/Caption\",\"text\":\"Title\"},\"$:/language/Import/Listing/Preview\":{\"title\":\"$:/language/Import/Listing/Preview\",\"text\":\"Preview:\"},\"$:/language/Import/Listing/Preview/Text\":{\"title\":\"$:/language/Import/Listing/Preview/Text\",\"text\":\"Text\"},\"$:/language/Import/Listing/Preview/TextRaw\":{\"title\":\"$:/language/Import/Listing/Preview/TextRaw\",\"text\":\"Text (Raw)\"},\"$:/language/Import/Listing/Preview/Fields\":{\"title\":\"$:/language/Import/Listing/Preview/Fields\",\"text\":\"Fields\"},\"$:/language/Import/Listing/Preview/Diff\":{\"title\":\"$:/language/Import/Listing/Preview/Diff\",\"text\":\"Diff\"},\"$:/language/Import/Listing/Preview/DiffFields\":{\"title\":\"$:/language/Import/Listing/Preview/DiffFields\",\"text\":\"Diff (Fields)\"},\"$:/language/Import/Listing/Rename/Tooltip\":{\"title\":\"$:/language/Import/Listing/Rename/Tooltip\",\"text\":\"Rename tiddler before importing\"},\"$:/language/Import/Listing/Rename/Prompt\":{\"title\":\"$:/language/Import/Listing/Rename/Prompt\",\"text\":\"Rename to:\"},\"$:/language/Import/Listing/Rename/ConfirmRename\":{\"title\":\"$:/language/Import/Listing/Rename/ConfirmRename\",\"text\":\"Rename tiddler\"},\"$:/language/Import/Listing/Rename/CancelRename\":{\"title\":\"$:/language/Import/Listing/Rename/CancelRename\",\"text\":\"Cancel\"},\"$:/language/Import/Listing/Rename/OverwriteWarning\":{\"title\":\"$:/language/Import/Listing/Rename/OverwriteWarning\",\"text\":\"A tiddler with this title already exists.\"},\"$:/language/Import/Upgrader/Plugins/Suppressed/Incompatible\":{\"title\":\"$:/language/Import/Upgrader/Plugins/Suppressed/Incompatible\",\"text\":\"Blocked incompatible or obsolete plugin.\"},\"$:/language/Import/Upgrader/Plugins/Suppressed/Version\":{\"title\":\"$:/language/Import/Upgrader/Plugins/Suppressed/Version\",\"text\":\"Blocked plugin (due to incoming \u003C\u003Cincoming>> not being newer than existing \u003C\u003Cexisting>>).\"},\"$:/language/Import/Upgrader/Plugins/Upgraded\":{\"title\":\"$:/language/Import/Upgrader/Plugins/Upgraded\",\"text\":\"Upgraded plugin from \u003C\u003Cincoming>> to \u003C\u003Cupgraded>>.\"},\"$:/language/Import/Upgrader/State/Suppressed\":{\"title\":\"$:/language/Import/Upgrader/State/Suppressed\",\"text\":\"Blocked temporary state tiddler.\"},\"$:/language/Import/Upgrader/System/Disabled\":{\"title\":\"$:/language/Import/Upgrader/System/Disabled\",\"text\":\"Disabled system tiddler.\"},\"$:/language/Import/Upgrader/System/Suppressed\":{\"title\":\"$:/language/Import/Upgrader/System/Suppressed\",\"text\":\"Blocked system tiddler.\"},\"$:/language/Import/Upgrader/System/Warning\":{\"title\":\"$:/language/Import/Upgrader/System/Warning\",\"text\":\"Core module tiddler.\"},\"$:/language/Import/Upgrader/System/Alert\":{\"title\":\"$:/language/Import/Upgrader/System/Alert\",\"text\":\"You are about to import a tiddler that will overwrite a core module tiddler. This is not recommended as it may make the system unstable.\"},\"$:/language/Import/Upgrader/ThemeTweaks/Created\":{\"title\":\"$:/language/Import/Upgrader/ThemeTweaks/Created\",\"text\":\"Migrated theme tweak from \u003C$text text=\u003C\u003Cfrom>>/>.\"},\"$:/language/Import/Upgrader/Tiddler/Disabled\":{\"title\":\"$:/language/Import/Upgrader/Tiddler/Disabled\",\"text\":\"Disabled tiddler.\"},\"$:/language/Import/Upgrader/Tiddler/Selected\":{\"title\":\"$:/language/Import/Upgrader/Tiddler/Selected\",\"text\":\"Selected tiddler.\"},\"$:/language/Import/Upgrader/Tiddler/Unselected\":{\"title\":\"$:/language/Import/Upgrader/Tiddler/Unselected\",\"text\":\"Unselected tiddler.\"},\"$:/language/AboveStory/ClassicPlugin/Warning\":{\"title\":\"$:/language/AboveStory/ClassicPlugin/Warning\",\"text\":\"It looks like you are trying to load a plugin designed for ~TiddlyWiki Classic. Please note that [[these plugins do not work with TiddlyWiki version 5.x.x|https://tiddlywiki.com/#TiddlyWikiClassic]]. ~TiddlyWiki Classic plugins detected:\"},\"$:/language/BinaryWarning/Prompt\":{\"title\":\"$:/language/BinaryWarning/Prompt\",\"text\":\"This tiddler contains binary data\"},\"$:/language/ClassicWarning/Hint\":{\"title\":\"$:/language/ClassicWarning/Hint\",\"text\":\"This tiddler is written in TiddlyWiki Classic wiki text format, which is not fully compatible with TiddlyWiki version 5. See https://tiddlywiki.com/static/Upgrading.html for more details.\"},\"$:/language/ClassicWarning/Upgrade/Caption\":{\"title\":\"$:/language/ClassicWarning/Upgrade/Caption\",\"text\":\"upgrade\"},\"$:/language/CloseAll/Button\":{\"title\":\"$:/language/CloseAll/Button\",\"text\":\"close all\"},\"$:/language/ColourPicker/Recent\":{\"title\":\"$:/language/ColourPicker/Recent\",\"text\":\"Recent:\"},\"$:/language/ConfirmCancelTiddler\":{\"title\":\"$:/language/ConfirmCancelTiddler\",\"text\":\"Do you wish to discard changes to the tiddler \\\"\u003C$text text=\u003C\u003Ctitle>>/>\\\"?\"},\"$:/language/ConfirmDeleteTiddler\":{\"title\":\"$:/language/ConfirmDeleteTiddler\",\"text\":\"Do you wish to delete the tiddler \\\"\u003C$text text=\u003C\u003Ctitle>>/>\\\"?\"},\"$:/language/ConfirmOverwriteTiddler\":{\"title\":\"$:/language/ConfirmOverwriteTiddler\",\"text\":\"Do you wish to overwrite the tiddler \\\"\u003C$text text=\u003C\u003Ctitle>>/>\\\"?\"},\"$:/language/ConfirmEditShadowTiddler\":{\"title\":\"$:/language/ConfirmEditShadowTiddler\",\"text\":\"You are about to edit a ShadowTiddler. Any changes will override the default system making future upgrades non-trivial. Are you sure you want to edit \\\"\u003C$text text=\u003C\u003Ctitle>>/>\\\"?\"},\"$:/language/ConfirmAction\":{\"title\":\"$:/language/ConfirmAction\",\"text\":\"Do you wish to proceed?\"},\"$:/language/Count\":{\"title\":\"$:/language/Count\",\"text\":\"count\"},\"$:/language/DefaultNewTiddlerTitle\":{\"title\":\"$:/language/DefaultNewTiddlerTitle\",\"text\":\"New Tiddler\"},\"$:/language/Diffs/CountMessage\":{\"title\":\"$:/language/Diffs/CountMessage\",\"text\":\"\u003C\u003Cdiff-count>> differences\"},\"$:/language/DropMessage\":{\"title\":\"$:/language/DropMessage\",\"text\":\"Drop now (or use the 'Escape' key to cancel)\"},\"$:/language/Encryption/Cancel\":{\"title\":\"$:/language/Encryption/Cancel\",\"text\":\"Cancel\"},\"$:/language/Encryption/ConfirmClearPassword\":{\"title\":\"$:/language/Encryption/ConfirmClearPassword\",\"text\":\"Do you wish to clear the password? This will remove the encryption applied when saving this wiki\"},\"$:/language/Encryption/PromptSetPassword\":{\"title\":\"$:/language/Encryption/PromptSetPassword\",\"text\":\"Set a new password for this TiddlyWiki\"},\"$:/language/Encryption/Username\":{\"title\":\"$:/language/Encryption/Username\",\"text\":\"Username\"},\"$:/language/Encryption/Password\":{\"title\":\"$:/language/Encryption/Password\",\"text\":\"Password\"},\"$:/language/Encryption/RepeatPassword\":{\"title\":\"$:/language/Encryption/RepeatPassword\",\"text\":\"Repeat password\"},\"$:/language/Encryption/PasswordNoMatch\":{\"title\":\"$:/language/Encryption/PasswordNoMatch\",\"text\":\"Passwords do not match\"},\"$:/language/Encryption/SetPassword\":{\"title\":\"$:/language/Encryption/SetPassword\",\"text\":\"Set password\"},\"$:/language/Error/Caption\":{\"title\":\"$:/language/Error/Caption\",\"text\":\"Error\"},\"$:/language/Error/Filter\":{\"title\":\"$:/language/Error/Filter\",\"text\":\"Filter error\"},\"$:/language/Error/FilterSyntax\":{\"title\":\"$:/language/Error/FilterSyntax\",\"text\":\"Syntax error in filter expression\"},\"$:/language/Error/FilterRunPrefix\":{\"title\":\"$:/language/Error/FilterRunPrefix\",\"text\":\"Filter Error: Unknown prefix for filter run\"},\"$:/language/Error/IsFilterOperator\":{\"title\":\"$:/language/Error/IsFilterOperator\",\"text\":\"Filter Error: Unknown operand for the 'is' filter operator\"},\"$:/language/Error/FormatFilterOperator\":{\"title\":\"$:/language/Error/FormatFilterOperator\",\"text\":\"Filter Error: Unknown suffix for the 'format' filter operator\"},\"$:/language/Error/LoadingPluginLibrary\":{\"title\":\"$:/language/Error/LoadingPluginLibrary\",\"text\":\"Error loading plugin library\"},\"$:/language/Error/NetworkErrorAlert\":{\"title\":\"$:/language/Error/NetworkErrorAlert\",\"text\":\"`\u003Ch2>''Network Error''\u003C/h2>It looks like the connection to the server has been lost. This may indicate a problem with your network connection. Please attempt to restore network connectivity before continuing.\u003Cbr>\u003Cbr>''Any unsaved changes will be automatically synchronised when connectivity is restored''.`\"},\"$:/language/Error/PutEditConflict\":{\"title\":\"$:/language/Error/PutEditConflict\",\"text\":\"File changed on server\"},\"$:/language/Error/PutForbidden\":{\"title\":\"$:/language/Error/PutForbidden\",\"text\":\"Permission denied\"},\"$:/language/Error/PutUnauthorized\":{\"title\":\"$:/language/Error/PutUnauthorized\",\"text\":\"Authentication required\"},\"$:/language/Error/RecursiveTransclusion\":{\"title\":\"$:/language/Error/RecursiveTransclusion\",\"text\":\"Recursive transclusion error in transclude widget\"},\"$:/language/Error/RetrievingSkinny\":{\"title\":\"$:/language/Error/RetrievingSkinny\",\"text\":\"Error retrieving skinny tiddler list\"},\"$:/language/Error/SavingToTWEdit\":{\"title\":\"$:/language/Error/SavingToTWEdit\",\"text\":\"Error saving to TWEdit\"},\"$:/language/Error/WhileSaving\":{\"title\":\"$:/language/Error/WhileSaving\",\"text\":\"Error while saving\"},\"$:/language/Error/XMLHttpRequest\":{\"title\":\"$:/language/Error/XMLHttpRequest\",\"text\":\"XMLHttpRequest error code\"},\"$:/language/InternalJavaScriptError/Title\":{\"title\":\"$:/language/InternalJavaScriptError/Title\",\"text\":\"Internal JavaScript Error\"},\"$:/language/InternalJavaScriptError/Hint\":{\"title\":\"$:/language/InternalJavaScriptError/Hint\",\"text\":\"Well, this is embarrassing. It is recommended that you restart TiddlyWiki by refreshing your browser\"},\"$:/language/LayoutSwitcher/Description\":{\"title\":\"$:/language/LayoutSwitcher/Description\",\"text\":\"Open the layout switcher\"},\"$:/language/LazyLoadingWarning\":{\"title\":\"$:/language/LazyLoadingWarning\",\"text\":\"\u003Cp>Trying to load external content from ''\u003C$text text={{!!_canonical_uri}}/>''\u003C/p>\u003Cp>If this message doesn't disappear, either the tiddler content type doesn't match the type of the external content, or you may be using a browser that doesn't support external content for wikis loaded as standalone files. See https://tiddlywiki.com/#ExternalText\u003C/p>\"},\"$:/language/LoginToTiddlySpace\":{\"title\":\"$:/language/LoginToTiddlySpace\",\"text\":\"Login to TiddlySpace\"},\"$:/language/Manager/Controls/FilterByTag/None\":{\"title\":\"$:/language/Manager/Controls/FilterByTag/None\",\"text\":\"(none)\"},\"$:/language/Manager/Controls/FilterByTag/Prompt\":{\"title\":\"$:/language/Manager/Controls/FilterByTag/Prompt\",\"text\":\"Filter by tag:\"},\"$:/language/Manager/Controls/Order/Prompt\":{\"title\":\"$:/language/Manager/Controls/Order/Prompt\",\"text\":\"Reverse order\"},\"$:/language/Manager/Controls/Search/Placeholder\":{\"title\":\"$:/language/Manager/Controls/Search/Placeholder\",\"text\":\"Search\"},\"$:/language/Manager/Controls/Search/Prompt\":{\"title\":\"$:/language/Manager/Controls/Search/Prompt\",\"text\":\"Search:\"},\"$:/language/Manager/Controls/Show/Option/Tags\":{\"title\":\"$:/language/Manager/Controls/Show/Option/Tags\",\"text\":\"tags\"},\"$:/language/Manager/Controls/Show/Option/Tiddlers\":{\"title\":\"$:/language/Manager/Controls/Show/Option/Tiddlers\",\"text\":\"tiddlers\"},\"$:/language/Manager/Controls/Show/Prompt\":{\"title\":\"$:/language/Manager/Controls/Show/Prompt\",\"text\":\"Show:\"},\"$:/language/Manager/Controls/Sort/Prompt\":{\"title\":\"$:/language/Manager/Controls/Sort/Prompt\",\"text\":\"Sort by:\"},\"$:/language/Manager/Item/Colour\":{\"title\":\"$:/language/Manager/Item/Colour\",\"text\":\"Colour\"},\"$:/language/Manager/Item/Fields\":{\"title\":\"$:/language/Manager/Item/Fields\",\"text\":\"Fields\"},\"$:/language/Manager/Item/Icon/None\":{\"title\":\"$:/language/Manager/Item/Icon/None\",\"text\":\"(none)\"},\"$:/language/Manager/Item/Icon\":{\"title\":\"$:/language/Manager/Item/Icon\",\"text\":\"Icon\"},\"$:/language/Manager/Item/RawText\":{\"title\":\"$:/language/Manager/Item/RawText\",\"text\":\"Raw text\"},\"$:/language/Manager/Item/Tags\":{\"title\":\"$:/language/Manager/Item/Tags\",\"text\":\"Tags\"},\"$:/language/Manager/Item/Tools\":{\"title\":\"$:/language/Manager/Item/Tools\",\"text\":\"Tools\"},\"$:/language/Manager/Item/WikifiedText\":{\"title\":\"$:/language/Manager/Item/WikifiedText\",\"text\":\"Wikified text\"},\"$:/language/MissingTiddler/Hint\":{\"title\":\"$:/language/MissingTiddler/Hint\",\"text\":\"Missing tiddler \\\"\u003C$text text=\u003C\u003CcurrentTiddler>>/>\\\" -- click {{||$:/core/ui/Buttons/edit}} to create\"},\"$:/language/No\":{\"title\":\"$:/language/No\",\"text\":\"No\"},\"$:/language/OfficialPluginLibrary\":{\"title\":\"$:/language/OfficialPluginLibrary\",\"text\":\"Official ~TiddlyWiki Plugin Library\"},\"$:/language/OfficialPluginLibrary/Hint\":{\"title\":\"$:/language/OfficialPluginLibrary/Hint\",\"text\":\"The official ~TiddlyWiki plugin library at tiddlywiki.com. Plugins, themes and language packs are maintained by the core team.\"},\"$:/language/PageTemplate/Description\":{\"title\":\"$:/language/PageTemplate/Description\",\"text\":\"the default ~TiddlyWiki layout\"},\"$:/language/PageTemplate/Name\":{\"title\":\"$:/language/PageTemplate/Name\",\"text\":\"Default ~PageTemplate\"},\"$:/language/PluginReloadWarning\":{\"title\":\"$:/language/PluginReloadWarning\",\"text\":\"Please save {{$:/core/ui/Buttons/save-wiki}} and reload {{$:/core/ui/Buttons/refresh}} to allow changes to ~JavaScript plugins to take effect\"},\"$:/language/RecentChanges/DateFormat\":{\"title\":\"$:/language/RecentChanges/DateFormat\",\"text\":\"DDth MMM YYYY\"},\"$:/language/Shortcuts/Input/AdvancedSearch/Hint\":{\"title\":\"$:/language/Shortcuts/Input/AdvancedSearch/Hint\",\"text\":\"Open the ~AdvancedSearch panel from within the sidebar search field\"},\"$:/language/Shortcuts/Input/Accept/Hint\":{\"title\":\"$:/language/Shortcuts/Input/Accept/Hint\",\"text\":\"Accept the selected item\"},\"$:/language/Shortcuts/Input/AcceptVariant/Hint\":{\"title\":\"$:/language/Shortcuts/Input/AcceptVariant/Hint\",\"text\":\"Accept the selected item (variant)\"},\"$:/language/Shortcuts/Input/Cancel/Hint\":{\"title\":\"$:/language/Shortcuts/Input/Cancel/Hint\",\"text\":\"Clear the input field\"},\"$:/language/Shortcuts/Input/Down/Hint\":{\"title\":\"$:/language/Shortcuts/Input/Down/Hint\",\"text\":\"Select the next item\"},\"$:/language/Shortcuts/Input/Tab-Left/Hint\":{\"title\":\"$:/language/Shortcuts/Input/Tab-Left/Hint\",\"text\":\"Select the previous Tab\"},\"$:/language/Shortcuts/Input/Tab-Right/Hint\":{\"title\":\"$:/language/Shortcuts/Input/Tab-Right/Hint\",\"text\":\"Select the next Tab\"},\"$:/language/Shortcuts/Input/Up/Hint\":{\"title\":\"$:/language/Shortcuts/Input/Up/Hint\",\"text\":\"Select the previous item\"},\"$:/language/Shortcuts/SidebarLayout/Hint\":{\"title\":\"$:/language/Shortcuts/SidebarLayout/Hint\",\"text\":\"Change the sidebar layout\"},\"$:/language/Switcher/Subtitle/theme\":{\"title\":\"$:/language/Switcher/Subtitle/theme\",\"text\":\"Switch Theme\"},\"$:/language/Switcher/Subtitle/layout\":{\"title\":\"$:/language/Switcher/Subtitle/layout\",\"text\":\"Switch Layout\"},\"$:/language/Switcher/Subtitle/language\":{\"title\":\"$:/language/Switcher/Subtitle/language\",\"text\":\"Switch Language\"},\"$:/language/Switcher/Subtitle/palette\":{\"title\":\"$:/language/Switcher/Subtitle/palette\",\"text\":\"Switch Palette\"},\"$:/language/SystemTiddler/Tooltip\":{\"title\":\"$:/language/SystemTiddler/Tooltip\",\"text\":\"This is a system tiddler\"},\"$:/language/SystemTiddlers/Include/Prompt\":{\"title\":\"$:/language/SystemTiddlers/Include/Prompt\",\"text\":\"Include system tiddlers\"},\"$:/language/TagManager/Colour/Heading\":{\"title\":\"$:/language/TagManager/Colour/Heading\",\"text\":\"Colour\"},\"$:/language/TagManager/Count/Heading\":{\"title\":\"$:/language/TagManager/Count/Heading\",\"text\":\"Count\"},\"$:/language/TagManager/Icon/Heading\":{\"title\":\"$:/language/TagManager/Icon/Heading\",\"text\":\"Icon\"},\"$:/language/TagManager/Icons/None\":{\"title\":\"$:/language/TagManager/Icons/None\",\"text\":\"None\"},\"$:/language/TagManager/Info/Heading\":{\"title\":\"$:/language/TagManager/Info/Heading\",\"text\":\"Info\"},\"$:/language/TagManager/Tag/Heading\":{\"title\":\"$:/language/TagManager/Tag/Heading\",\"text\":\"Tag\"},\"$:/language/Tiddler/DateFormat\":{\"title\":\"$:/language/Tiddler/DateFormat\",\"text\":\"DDth MMM YYYY at hh12:0mmam\"},\"$:/language/UnsavedChangesWarning\":{\"title\":\"$:/language/UnsavedChangesWarning\",\"text\":\"You have unsaved changes in TiddlyWiki\"},\"$:/language/Yes\":{\"title\":\"$:/language/Yes\",\"text\":\"Yes\"},\"$:/language/Modals/Download\":{\"title\":\"$:/language/Modals/Download\",\"subtitle\":\"Download changes\",\"footer\":\"\u003C$button message=\\\"tm-close-tiddler\\\">Close\u003C/$button>\",\"help\":\"https://tiddlywiki.com/static/DownloadingChanges.html\",\"text\":\"Your browser only supports manual saving.\\n\\nTo save your modified wiki, right click on the download link below and select \\\"Download file\\\" or \\\"Save file\\\", and then choose the folder and filename.\\n\\n//You can marginally speed things up by clicking the link with the control key (Windows) or the options/alt key (Mac OS X). You will not be prompted for the folder or filename, but your browser is likely to give it an unrecognisable name -- you may need to rename the file to include an `.html` extension before you can do anything useful with it.//\\n\\nOn smartphones that do not allow files to be downloaded you can instead bookmark the link, and then sync your bookmarks to a desktop computer from where the wiki can be saved normally.\\n\"},\"$:/language/Modals/SaveInstructions\":{\"title\":\"$:/language/Modals/SaveInstructions\",\"subtitle\":\"Save your work\",\"footer\":\"\u003C$button message=\\\"tm-close-tiddler\\\">Close\u003C/$button>\",\"help\":\"https://tiddlywiki.com/static/SavingChanges.html\",\"text\":\"Your changes to this wiki need to be saved as a ~TiddlyWiki HTML file.\\n\\n!!! Desktop browsers\\n\\n# Select ''Save As'' from the ''File'' menu\\n# Choose a filename and location\\n#* Some browsers also require you to explicitly specify the file saving format as ''Webpage, HTML only'' or similar\\n# Close this tab\\n\\n!!! Smartphone browsers\\n\\n# Create a bookmark to this page\\n#* If you've got iCloud or Google Sync set up then the bookmark will automatically sync to your desktop where you can open it and save it as above\\n# Close this tab\\n\\n//If you open the bookmark again in Mobile Safari you will see this message again. If you want to go ahead and use the file, just click the ''close'' button below//\\n\"},\"$:/config/NewJournal/Title\":{\"title\":\"$:/config/NewJournal/Title\",\"text\":\"DDth MMM YYYY\"},\"$:/config/NewJournal/Text\":{\"title\":\"$:/config/NewJournal/Text\",\"text\":\"\"},\"$:/config/NewJournal/Tags\":{\"title\":\"$:/config/NewJournal/Tags\",\"text\":\"Journal\\n\"},\"$:/language/Notifications/Save/Done\":{\"title\":\"$:/language/Notifications/Save/Done\",\"text\":\"Saved wiki\"},\"$:/language/Notifications/Save/Starting\":{\"title\":\"$:/language/Notifications/Save/Starting\",\"text\":\"Starting to save wiki\"},\"$:/language/Notifications/CopiedToClipboard/Succeeded\":{\"title\":\"$:/language/Notifications/CopiedToClipboard/Succeeded\",\"text\":\"Copied to clipboard!\"},\"$:/language/Notifications/CopiedToClipboard/Failed\":{\"title\":\"$:/language/Notifications/CopiedToClipboard/Failed\",\"text\":\"Failed to copy to clipboard!\"},\"$:/language/Search/DefaultResults/Caption\":{\"title\":\"$:/language/Search/DefaultResults/Caption\",\"text\":\"List\"},\"$:/language/Search/Filter/Caption\":{\"title\":\"$:/language/Search/Filter/Caption\",\"text\":\"Filter\"},\"$:/language/Search/Filter/Hint\":{\"title\":\"$:/language/Search/Filter/Hint\",\"text\":\"Search via a [[filter expression|https://tiddlywiki.com/static/Filters.html]]\"},\"$:/language/Search/Filter/Matches\":{\"title\":\"$:/language/Search/Filter/Matches\",\"text\":\"//\u003Csmall>\u003C\u003CresultCount>> matches\u003C/small>//\"},\"$:/language/Search/Matches\":{\"title\":\"$:/language/Search/Matches\",\"text\":\"//\u003Csmall>\u003C\u003CresultCount>> matches\u003C/small>//\"},\"$:/language/Search/Matches/All\":{\"title\":\"$:/language/Search/Matches/All\",\"text\":\"All matches:\"},\"$:/language/Search/Matches/Title\":{\"title\":\"$:/language/Search/Matches/Title\",\"text\":\"Title matches:\"},\"$:/language/Search/Search\":{\"title\":\"$:/language/Search/Search\",\"text\":\"Search\"},\"$:/language/Search/Search/TooShort\":{\"title\":\"$:/language/Search/Search/TooShort\",\"text\":\"Search text too short\"},\"$:/language/Search/Shadows/Caption\":{\"title\":\"$:/language/Search/Shadows/Caption\",\"text\":\"Shadows\"},\"$:/language/Search/Shadows/Hint\":{\"title\":\"$:/language/Search/Shadows/Hint\",\"text\":\"Search for shadow tiddlers\"},\"$:/language/Search/Shadows/Matches\":{\"title\":\"$:/language/Search/Shadows/Matches\",\"text\":\"//\u003Csmall>\u003C\u003CresultCount>> matches\u003C/small>//\"},\"$:/language/Search/Standard/Caption\":{\"title\":\"$:/language/Search/Standard/Caption\",\"text\":\"Standard\"},\"$:/language/Search/Standard/Hint\":{\"title\":\"$:/language/Search/Standard/Hint\",\"text\":\"Search for standard tiddlers\"},\"$:/language/Search/Standard/Matches\":{\"title\":\"$:/language/Search/Standard/Matches\",\"text\":\"//\u003Csmall>\u003C\u003CresultCount>> matches\u003C/small>//\"},\"$:/language/Search/System/Caption\":{\"title\":\"$:/language/Search/System/Caption\",\"text\":\"System\"},\"$:/language/Search/System/Hint\":{\"title\":\"$:/language/Search/System/Hint\",\"text\":\"Search for system tiddlers\"},\"$:/language/Search/System/Matches\":{\"title\":\"$:/language/Search/System/Matches\",\"text\":\"//\u003Csmall>\u003C\u003CresultCount>> matches\u003C/small>//\"},\"$:/language/SideBar/All/Caption\":{\"title\":\"$:/language/SideBar/All/Caption\",\"text\":\"All\"},\"$:/language/SideBar/Contents/Caption\":{\"title\":\"$:/language/SideBar/Contents/Caption\",\"text\":\"Contents\"},\"$:/language/SideBar/Drafts/Caption\":{\"title\":\"$:/language/SideBar/Drafts/Caption\",\"text\":\"Drafts\"},\"$:/language/SideBar/Explorer/Caption\":{\"title\":\"$:/language/SideBar/Explorer/Caption\",\"text\":\"Explorer\"},\"$:/language/SideBar/Missing/Caption\":{\"title\":\"$:/language/SideBar/Missing/Caption\",\"text\":\"Missing\"},\"$:/language/SideBar/More/Caption\":{\"title\":\"$:/language/SideBar/More/Caption\",\"text\":\"More\"},\"$:/language/SideBar/Open/Caption\":{\"title\":\"$:/language/SideBar/Open/Caption\",\"text\":\"Open\"},\"$:/language/SideBar/Orphans/Caption\":{\"title\":\"$:/language/SideBar/Orphans/Caption\",\"text\":\"Orphans\"},\"$:/language/SideBar/Recent/Caption\":{\"title\":\"$:/language/SideBar/Recent/Caption\",\"text\":\"Recent\"},\"$:/language/SideBar/Shadows/Caption\":{\"title\":\"$:/language/SideBar/Shadows/Caption\",\"text\":\"Shadows\"},\"$:/language/SideBar/System/Caption\":{\"title\":\"$:/language/SideBar/System/Caption\",\"text\":\"System\"},\"$:/language/SideBar/Tags/Caption\":{\"title\":\"$:/language/SideBar/Tags/Caption\",\"text\":\"Tags\"},\"$:/language/SideBar/Tags/Untagged/Caption\":{\"title\":\"$:/language/SideBar/Tags/Untagged/Caption\",\"text\":\"untagged\"},\"$:/language/SideBar/Tools/Caption\":{\"title\":\"$:/language/SideBar/Tools/Caption\",\"text\":\"Tools\"},\"$:/language/SideBar/Types/Caption\":{\"title\":\"$:/language/SideBar/Types/Caption\",\"text\":\"Types\"},\"$:/SiteSubtitle\":{\"title\":\"$:/SiteSubtitle\",\"text\":\"a non-linear personal web notebook\"},\"$:/SiteTitle\":{\"title\":\"$:/SiteTitle\",\"text\":\"My ~TiddlyWiki\"},\"$:/language/Snippets/ListByTag\":{\"title\":\"$:/language/Snippets/ListByTag\",\"tags\":\"$:/tags/TextEditor/Snippet\",\"caption\":\"List of tiddlers by tag\",\"text\":\"\u003C\u003Clist-links \\\"[tag[task]sort[title]]\\\">>\\n\"},\"$:/language/Snippets/MacroDefinition\":{\"title\":\"$:/language/Snippets/MacroDefinition\",\"tags\":\"$:/tags/TextEditor/Snippet\",\"caption\":\"Macro definition\",\"text\":\"\\\\define macroName(param1:\\\"default value\\\",param2)\\nText of the macro\\n\\\\end\\n\"},\"$:/language/Snippets/Table4x3\":{\"title\":\"$:/language/Snippets/Table4x3\",\"tags\":\"$:/tags/TextEditor/Snippet\",\"caption\":\"Table with 4 columns by 3 rows\",\"text\":\"|! |!Alpha |!Beta |!Gamma |!Delta |\\n|!One | | | | |\\n|!Two | | | | |\\n|!Three | | | | |\\n\"},\"$:/language/Snippets/TableOfContents\":{\"title\":\"$:/language/Snippets/TableOfContents\",\"tags\":\"$:/tags/TextEditor/Snippet\",\"caption\":\"Table of Contents\",\"text\":\"\u003Cdiv class=\\\"tc-table-of-contents\\\">\\n\\n\u003C\u003Ctoc-selective-expandable 'TableOfContents'>>\\n\\n\u003C/div>\"},\"$:/language/ThemeTweaks/ThemeTweaks\":{\"title\":\"$:/language/ThemeTweaks/ThemeTweaks\",\"text\":\"Theme Tweaks\"},\"$:/language/ThemeTweaks/ThemeTweaks/Hint\":{\"title\":\"$:/language/ThemeTweaks/ThemeTweaks/Hint\",\"text\":\"You can tweak certain aspects of the ''Vanilla'' theme.\"},\"$:/language/ThemeTweaks/Options\":{\"title\":\"$:/language/ThemeTweaks/Options\",\"text\":\"Options\"},\"$:/language/ThemeTweaks/Options/SidebarLayout\":{\"title\":\"$:/language/ThemeTweaks/Options/SidebarLayout\",\"text\":\"Sidebar layout\"},\"$:/language/ThemeTweaks/Options/SidebarLayout/Fixed-Fluid\":{\"title\":\"$:/language/ThemeTweaks/Options/SidebarLayout/Fixed-Fluid\",\"text\":\"Fixed story, fluid sidebar\"},\"$:/language/ThemeTweaks/Options/SidebarLayout/Fluid-Fixed\":{\"title\":\"$:/language/ThemeTweaks/Options/SidebarLayout/Fluid-Fixed\",\"text\":\"Fluid story, fixed sidebar\"},\"$:/language/ThemeTweaks/Options/StickyTitles\":{\"title\":\"$:/language/ThemeTweaks/Options/StickyTitles\",\"text\":\"Sticky titles\"},\"$:/language/ThemeTweaks/Options/StickyTitles/Hint\":{\"title\":\"$:/language/ThemeTweaks/Options/StickyTitles/Hint\",\"text\":\"Causes tiddler titles to \\\"stick\\\" to the top of the browser window\"},\"$:/language/ThemeTweaks/Options/CodeWrapping\":{\"title\":\"$:/language/ThemeTweaks/Options/CodeWrapping\",\"text\":\"Wrap long lines in code blocks\"},\"$:/language/ThemeTweaks/Settings\":{\"title\":\"$:/language/ThemeTweaks/Settings\",\"text\":\"Settings\"},\"$:/language/ThemeTweaks/Settings/FontFamily\":{\"title\":\"$:/language/ThemeTweaks/Settings/FontFamily\",\"text\":\"Font family\"},\"$:/language/ThemeTweaks/Settings/CodeFontFamily\":{\"title\":\"$:/language/ThemeTweaks/Settings/CodeFontFamily\",\"text\":\"Code font family\"},\"$:/language/ThemeTweaks/Settings/EditorFontFamily\":{\"title\":\"$:/language/ThemeTweaks/Settings/EditorFontFamily\",\"text\":\"Editor font family\"},\"$:/language/ThemeTweaks/Settings/BackgroundImage\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImage\",\"text\":\"Page background image\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageAttachment\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageAttachment\",\"text\":\"Page background image attachment\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageAttachment/Scroll\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageAttachment/Scroll\",\"text\":\"Scroll with tiddlers\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageAttachment/Fixed\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageAttachment/Fixed\",\"text\":\"Fixed to window\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageSize\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageSize\",\"text\":\"Page background image size\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageSize/Auto\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageSize/Auto\",\"text\":\"Auto\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageSize/Cover\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageSize/Cover\",\"text\":\"Cover\"},\"$:/language/ThemeTweaks/Settings/BackgroundImageSize/Contain\":{\"title\":\"$:/language/ThemeTweaks/Settings/BackgroundImageSize/Contain\",\"text\":\"Contain\"},\"$:/language/ThemeTweaks/Metrics\":{\"title\":\"$:/language/ThemeTweaks/Metrics\",\"text\":\"Sizes\"},\"$:/language/ThemeTweaks/Metrics/FontSize\":{\"title\":\"$:/language/ThemeTweaks/Metrics/FontSize\",\"text\":\"Font size\"},\"$:/language/ThemeTweaks/Metrics/LineHeight\":{\"title\":\"$:/language/ThemeTweaks/Metrics/LineHeight\",\"text\":\"Line height\"},\"$:/language/ThemeTweaks/Metrics/BodyFontSize\":{\"title\":\"$:/language/ThemeTweaks/Metrics/BodyFontSize\",\"text\":\"Font size for tiddler body\"},\"$:/language/ThemeTweaks/Metrics/BodyLineHeight\":{\"title\":\"$:/language/ThemeTweaks/Metrics/BodyLineHeight\",\"text\":\"Line height for tiddler body\"},\"$:/language/ThemeTweaks/Metrics/StoryLeft\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryLeft\",\"text\":\"Story left position\"},\"$:/language/ThemeTweaks/Metrics/StoryLeft/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryLeft/Hint\",\"text\":\"how far the left margin of the story river\u003Cbr>(tiddler area) is from the left of the page\"},\"$:/language/ThemeTweaks/Metrics/StoryTop\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryTop\",\"text\":\"Story top position\"},\"$:/language/ThemeTweaks/Metrics/StoryTop/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryTop/Hint\",\"text\":\"how far the top margin of the story river\u003Cbr>is from the top of the page\"},\"$:/language/ThemeTweaks/Metrics/StoryRight\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryRight\",\"text\":\"Story right\"},\"$:/language/ThemeTweaks/Metrics/StoryRight/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryRight/Hint\",\"text\":\"how far the left margin of the sidebar \u003Cbr>is from the left of the page\"},\"$:/language/ThemeTweaks/Metrics/StoryWidth\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryWidth\",\"text\":\"Story width\"},\"$:/language/ThemeTweaks/Metrics/StoryWidth/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/StoryWidth/Hint\",\"text\":\"the overall width of the story river\"},\"$:/language/ThemeTweaks/Metrics/TiddlerWidth\":{\"title\":\"$:/language/ThemeTweaks/Metrics/TiddlerWidth\",\"text\":\"Tiddler width\"},\"$:/language/ThemeTweaks/Metrics/TiddlerWidth/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/TiddlerWidth/Hint\",\"text\":\"within the story river\"},\"$:/language/ThemeTweaks/Metrics/SidebarBreakpoint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/SidebarBreakpoint\",\"text\":\"Sidebar breakpoint\"},\"$:/language/ThemeTweaks/Metrics/SidebarBreakpoint/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/SidebarBreakpoint/Hint\",\"text\":\"the minimum page width at which the story\u003Cbr>river and sidebar will appear side by side\"},\"$:/language/ThemeTweaks/Metrics/SidebarWidth\":{\"title\":\"$:/language/ThemeTweaks/Metrics/SidebarWidth\",\"text\":\"Sidebar width\"},\"$:/language/ThemeTweaks/Metrics/SidebarWidth/Hint\":{\"title\":\"$:/language/ThemeTweaks/Metrics/SidebarWidth/Hint\",\"text\":\"the width of the sidebar in fluid-fixed layout\"},\"$:/language/TiddlerInfo/Advanced/Caption\":{\"title\":\"$:/language/TiddlerInfo/Advanced/Caption\",\"text\":\"Advanced\"},\"$:/language/TiddlerInfo/Advanced/PluginInfo/Empty/Hint\":{\"title\":\"$:/language/TiddlerInfo/Advanced/PluginInfo/Empty/Hint\",\"text\":\"none\"},\"$:/language/TiddlerInfo/Advanced/PluginInfo/Heading\":{\"title\":\"$:/language/TiddlerInfo/Advanced/PluginInfo/Heading\",\"text\":\"Plugin Details\"},\"$:/language/TiddlerInfo/Advanced/PluginInfo/Hint\":{\"title\":\"$:/language/TiddlerInfo/Advanced/PluginInfo/Hint\",\"text\":\"This plugin contains the following shadow tiddlers:\"},\"$:/language/TiddlerInfo/Advanced/ShadowInfo/Heading\":{\"title\":\"$:/language/TiddlerInfo/Advanced/ShadowInfo/Heading\",\"text\":\"Shadow Status\"},\"$:/language/TiddlerInfo/Advanced/ShadowInfo/NotShadow/Hint\":{\"title\":\"$:/language/TiddlerInfo/Advanced/ShadowInfo/NotShadow/Hint\",\"text\":\"The tiddler \u003C$link to=\u003C\u003CinfoTiddler>>>\u003C$text text=\u003C\u003CinfoTiddler>>/>\u003C/$link> is not a shadow tiddler\"},\"$:/language/TiddlerInfo/Advanced/ShadowInfo/Shadow/Hint\":{\"title\":\"$:/language/TiddlerInfo/Advanced/ShadowInfo/Shadow/Hint\",\"text\":\"The tiddler \u003C$link to=\u003C\u003CinfoTiddler>>>\u003C$text text=\u003C\u003CinfoTiddler>>/>\u003C/$link> is a shadow tiddler\"},\"$:/language/TiddlerInfo/Advanced/ShadowInfo/Shadow/Source\":{\"title\":\"$:/language/TiddlerInfo/Advanced/ShadowInfo/Shadow/Source\",\"text\":\"It is defined in the plugin \u003C$link to=\u003C\u003CpluginTiddler>>>\u003C$text text=\u003C\u003CpluginTiddler>>/>\u003C/$link>\"},\"$:/language/TiddlerInfo/Advanced/ShadowInfo/OverriddenShadow/Hint\":{\"title\":\"$:/language/TiddlerInfo/Advanced/ShadowInfo/OverriddenShadow/Hint\",\"text\":\"It is overridden by an ordinary tiddler\"},\"$:/language/TiddlerInfo/Fields/Caption\":{\"title\":\"$:/language/TiddlerInfo/Fields/Caption\",\"text\":\"Fields\"},\"$:/language/TiddlerInfo/List/Caption\":{\"title\":\"$:/language/TiddlerInfo/List/Caption\",\"text\":\"List\"},\"$:/language/TiddlerInfo/List/Empty\":{\"title\":\"$:/language/TiddlerInfo/List/Empty\",\"text\":\"This tiddler does not have a list\"},\"$:/language/TiddlerInfo/Listed/Caption\":{\"title\":\"$:/language/TiddlerInfo/Listed/Caption\",\"text\":\"Listed\"},\"$:/language/TiddlerInfo/Listed/Empty\":{\"title\":\"$:/language/TiddlerInfo/Listed/Empty\",\"text\":\"This tiddler is not listed by any others\"},\"$:/language/TiddlerInfo/References/Caption\":{\"title\":\"$:/language/TiddlerInfo/References/Caption\",\"text\":\"Backlinks\"},\"$:/language/TiddlerInfo/References/Empty\":{\"title\":\"$:/language/TiddlerInfo/References/Empty\",\"text\":\"No tiddlers link to this one\"},\"$:/language/TiddlerInfo/Tagging/Caption\":{\"title\":\"$:/language/TiddlerInfo/Tagging/Caption\",\"text\":\"Tagging\"},\"$:/language/TiddlerInfo/Tagging/Empty\":{\"title\":\"$:/language/TiddlerInfo/Tagging/Empty\",\"text\":\"No tiddlers are tagged with this one\"},\"$:/language/TiddlerInfo/Tools/Caption\":{\"title\":\"$:/language/TiddlerInfo/Tools/Caption\",\"text\":\"Tools\"},\"$:/language/Docs/Types/application/javascript\":{\"title\":\"$:/language/Docs/Types/application/javascript\",\"description\":\"JavaScript code\",\"name\":\"application/javascript\",\"group\":\"Developer\",\"group-sort\":\"2\"},\"$:/language/Docs/Types/application/json\":{\"title\":\"$:/language/Docs/Types/application/json\",\"description\":\"JSON data\",\"name\":\"application/json\",\"group\":\"Developer\",\"group-sort\":\"2\"},\"$:/language/Docs/Types/application/x-tiddler-dictionary\":{\"title\":\"$:/language/Docs/Types/application/x-tiddler-dictionary\",\"description\":\"Data dictionary\",\"name\":\"application/x-tiddler-dictionary\",\"group\":\"Developer\",\"group-sort\":\"2\"},\"$:/language/Docs/Types/image/gif\":{\"title\":\"$:/language/Docs/Types/image/gif\",\"description\":\"GIF image\",\"name\":\"image/gif\",\"group\":\"Image\",\"group-sort\":\"1\"},\"$:/language/Docs/Types/image/jpeg\":{\"title\":\"$:/language/Docs/Types/image/jpeg\",\"description\":\"JPEG image\",\"name\":\"image/jpeg\",\"group\":\"Image\",\"group-sort\":\"1\"},\"$:/language/Docs/Types/image/png\":{\"title\":\"$:/language/Docs/Types/image/png\",\"description\":\"PNG image\",\"name\":\"image/png\",\"group\":\"Image\",\"group-sort\":\"1\"},\"$:/language/Docs/Types/image/svg+xml\":{\"title\":\"$:/language/Docs/Types/image/svg+xml\",\"description\":\"Structured Vector Graphics image\",\"name\":\"image/svg+xml\",\"group\":\"Image\",\"group-sort\":\"1\"},\"$:/language/Docs/Types/image/x-icon\":{\"title\":\"$:/language/Docs/Types/image/x-icon\",\"description\":\"ICO format icon file\",\"name\":\"image/x-icon\",\"group\":\"Image\",\"group-sort\":\"1\"},\"$:/language/Docs/Types/text/css\":{\"title\":\"$:/language/Docs/Types/text/css\",\"description\":\"Static stylesheet\",\"name\":\"text/css\",\"group\":\"Developer\",\"group-sort\":\"2\"},\"$:/language/Docs/Types/text/html\":{\"title\":\"$:/language/Docs/Types/text/html\",\"description\":\"HTML markup\",\"name\":\"text/html\",\"group\":\"Text\",\"group-sort\":\"0\"},\"$:/language/Docs/Types/text/plain\":{\"title\":\"$:/language/Docs/Types/text/plain\",\"description\":\"Plain text\",\"name\":\"text/plain\",\"group\":\"Text\",\"group-sort\":\"0\"},\"$:/language/Docs/Types/text/vnd.tiddlywiki\":{\"title\":\"$:/language/Docs/Types/text/vnd.tiddlywiki\",\"description\":\"TiddlyWiki 5\",\"name\":\"text/vnd.tiddlywiki\",\"group\":\"Text\",\"group-sort\":\"0\"},\"$:/language/Docs/Types/text/x-tiddlywiki\":{\"title\":\"$:/language/Docs/Types/text/x-tiddlywiki\",\"description\":\"TiddlyWiki Classic\",\"name\":\"text/x-tiddlywiki\",\"group\":\"Text\",\"group-sort\":\"0\"},\"$:/languages/en-GB/icon\":{\"title\":\"$:/languages/en-GB/icon\",\"type\":\"image/svg+xml\",\"text\":\"\u003Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 60 30\\\" width=\\\"1200\\\" height=\\\"600\\\">\\n\u003CclipPath id=\\\"t\\\">\\n\\t\u003Cpath d=\\\"M30,15 h30 v15 z v15 h-30 z h-30 v-15 z v-15 h30 z\\\"/>\\n\u003C/clipPath>\\n\u003Cpath d=\\\"M0,0 v30 h60 v-30 z\\\" fill=\\\"#00247d\\\"/>\\n\u003Cpath d=\\\"M0,0 L60,30 M60,0 L0,30\\\" stroke=\\\"#fff\\\" stroke-width=\\\"6\\\"/>\\n\u003Cpath d=\\\"M0,0 L60,30 M60,0 L0,30\\\" clip-path=\\\"url(#t)\\\" stroke=\\\"#cf142b\\\" stroke-width=\\\"4\\\"/>\\n\u003Cpath d=\\\"M30,0 v30 M0,15 h60\\\" stroke=\\\"#fff\\\" stroke-width=\\\"10\\\"/>\\n\u003Cpath d=\\\"M30,0 v30 M0,15 h60\\\" stroke=\\\"#cf142b\\\" stroke-width=\\\"6\\\"/>\\n\u003C/svg>\\n\"},\"$:/languages/en-GB\":{\"title\":\"$:/languages/en-GB\",\"name\":\"en-GB\",\"description\":\"English (British)\",\"author\":\"JeremyRuston\",\"core-version\":\">=5.0.0\\\"\",\"text\":\"Stub pseudo-plugin for the default language\"},\"$:/core/modules/commander.js\":{\"title\":\"$:/core/modules/commander.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commander.js\\ntype: application/javascript\\nmodule-type: global\\n\\nThe $tw.Commander class is a command interpreter\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nParse a sequence of commands\\n\\tcommandTokens: an array of command string tokens\\n\\twiki: reference to the wiki store object\\n\\tstreams: {output:, error:}, each of which has a write(string) method\\n\\tcallback: a callback invoked as callback(err) where err is null if there was no error\\n*/\\nvar Commander = function(commandTokens,callback,wiki,streams) {\\n\\tvar path = require(\\\"path\\\");\\n\\tthis.commandTokens = commandTokens;\\n\\tthis.nextToken = 0;\\n\\tthis.callback = callback;\\n\\tthis.wiki = wiki;\\n\\tthis.streams = streams;\\n\\tthis.outputPath = path.resolve($tw.boot.wikiPath,$tw.config.wikiOutputSubDir);\\n};\\n\\n/*\\nLog a string if verbose flag is set\\n*/\\nCommander.prototype.log = function(str) {\\n\\tif(this.verbose) {\\n\\t\\tthis.streams.output.write(str + \\\"\\\\n\\\");\\n\\t}\\n};\\n\\n/*\\nWrite a string if verbose flag is set\\n*/\\nCommander.prototype.write = function(str) {\\n\\tif(this.verbose) {\\n\\t\\tthis.streams.output.write(str);\\n\\t}\\n};\\n\\n/*\\nAdd a string of tokens to the command queue\\n*/\\nCommander.prototype.addCommandTokens = function(commandTokens) {\\n\\tvar params = commandTokens.slice(0);\\n\\tparams.unshift(0);\\n\\tparams.unshift(this.nextToken);\\n\\tArray.prototype.splice.apply(this.commandTokens,params);\\n};\\n\\n/*\\nExecute the sequence of commands and invoke a callback on completion\\n*/\\nCommander.prototype.execute = function() {\\n\\tthis.executeNextCommand();\\n};\\n\\n/*\\nExecute the next command in the sequence\\n*/\\nCommander.prototype.executeNextCommand = function() {\\n\\tvar self = this;\\n\\t// Invoke the callback if there are no more commands\\n\\tif(this.nextToken >= this.commandTokens.length) {\\n\\t\\tthis.callback(null);\\n\\t} else {\\n\\t\\t// Get and check the command token\\n\\t\\tvar commandName = this.commandTokens[this.nextToken++];\\n\\t\\tif(commandName.substr(0,2) !== \\\"--\\\") {\\n\\t\\t\\tthis.callback(\\\"Missing command: \\\" + commandName);\\n\\t\\t} else {\\n\\t\\t\\tcommandName = commandName.substr(2); // Trim off the --\\n\\t\\t\\t// Accumulate the parameters to the command\\n\\t\\t\\tvar params = [];\\n\\t\\t\\twhile(this.nextToken \u003C this.commandTokens.length && \\n\\t\\t\\t\\tthis.commandTokens[this.nextToken].substr(0,2) !== \\\"--\\\") {\\n\\t\\t\\t\\tparams.push(this.commandTokens[this.nextToken++]);\\n\\t\\t\\t}\\n\\t\\t\\t// Get the command info\\n\\t\\t\\tvar command = $tw.commands[commandName],\\n\\t\\t\\t\\tc,err;\\n\\t\\t\\tif(!command) {\\n\\t\\t\\t\\tthis.callback(\\\"Unknown command: \\\" + commandName);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif(this.verbose) {\\n\\t\\t\\t\\t\\tthis.streams.output.write(\\\"Executing command: \\\" + commandName + \\\" \\\" + params.join(\\\" \\\") + \\\"\\\\n\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Parse named parameters if required\\n\\t\\t\\t\\tif(command.info.namedParameterMode) {\\n\\t\\t\\t\\t\\tparams = this.extractNamedParameters(params,command.info.mandatoryParameters);\\n\\t\\t\\t\\t\\tif(typeof params === \\\"string\\\") {\\n\\t\\t\\t\\t\\t\\treturn this.callback(params);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(command.info.synchronous) {\\n\\t\\t\\t\\t\\t// Synchronous command\\n\\t\\t\\t\\t\\tc = new command.Command(params,this);\\n\\t\\t\\t\\t\\terr = c.execute();\\n\\t\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\t\\tthis.callback(err);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tthis.executeNextCommand();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Asynchronous command\\n\\t\\t\\t\\t\\tc = new command.Command(params,this,function(err) {\\n\\t\\t\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\t\\t\\tself.callback(err);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tself.executeNextCommand();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\terr = c.execute();\\n\\t\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\t\\tthis.callback(err);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nGiven an array of parameter strings `params` in name:value format, and an array of mandatory parameter names in `mandatoryParameters`, returns a hashmap of values or a string if error\\n*/\\nCommander.prototype.extractNamedParameters = function(params,mandatoryParameters) {\\n\\tmandatoryParameters = mandatoryParameters || [];\\n\\tvar errors = [],\\n\\t\\tparamsByName = Object.create(null);\\n\\t// Extract the parameters\\n\\t$tw.utils.each(params,function(param) {\\n\\t\\tvar index = param.indexOf(\\\"=\\\");\\n\\t\\tif(index \u003C 1) {\\n\\t\\t\\terrors.push(\\\"malformed named parameter: '\\\" + param + \\\"'\\\");\\n\\t\\t}\\n\\t\\tparamsByName[param.slice(0,index)] = $tw.utils.trim(param.slice(index+1));\\n\\t});\\n\\t// Check the mandatory parameters are present\\n\\t$tw.utils.each(mandatoryParameters,function(mandatoryParameter) {\\n\\t\\tif(!$tw.utils.hop(paramsByName,mandatoryParameter)) {\\n\\t\\t\\terrors.push(\\\"missing mandatory parameter: '\\\" + mandatoryParameter + \\\"'\\\");\\n\\t\\t}\\n\\t});\\n\\t// Return any errors\\n\\tif(errors.length > 0) {\\n\\t\\treturn errors.join(\\\" and\\\\n\\\");\\n\\t} else {\\n\\t\\treturn paramsByName;\\n\\t}\\n};\\n\\nCommander.initCommands = function(moduleType) {\\n\\tmoduleType = moduleType || \\\"command\\\";\\n\\t$tw.commands = {};\\n\\t$tw.modules.forEachModuleOfType(moduleType,function(title,module) {\\n\\t\\tvar c = $tw.commands[module.info.name] = {};\\n\\t\\t// Add the methods defined by the module\\n\\t\\tfor(var f in module) {\\n\\t\\t\\tif($tw.utils.hop(module,f)) {\\n\\t\\t\\t\\tc[f] = module[f];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\nexports.Commander = Commander;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/commands/build.js\":{\"title\":\"$:/core/modules/commands/build.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/build.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to build a build target\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"build\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\t// Get the build targets defined in the wiki\\n\\tvar buildTargets = $tw.boot.wikiInfo.build;\\n\\tif(!buildTargets) {\\n\\t\\treturn \\\"No build targets defined\\\";\\n\\t}\\n\\t// Loop through each of the specified targets\\n\\tvar targets;\\n\\tif(this.params.length > 0) {\\n\\t\\ttargets = this.params;\\n\\t} else {\\n\\t\\ttargets = Object.keys(buildTargets);\\n\\t}\\n\\tfor(var targetIndex=0; targetIndex\u003Ctargets.length; targetIndex++) {\\n\\t\\tvar target = targets[targetIndex],\\n\\t\\t\\tcommands = buildTargets[target];\\n\\t\\tif(!commands) {\\n\\t\\t\\treturn \\\"Build target '\\\" + target + \\\"' not found\\\";\\n\\t\\t}\\n\\t\\t// Add the commands to the queue\\n\\t\\tthis.commander.addCommandTokens(commands);\\n\\t}\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/clearpassword.js\":{\"title\":\"$:/core/modules/commands/clearpassword.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/clearpassword.js\\ntype: application/javascript\\nmodule-type: command\\n\\nClear password for crypto operations\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"clearpassword\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\t$tw.crypto.setPassword(null);\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/deletetiddlers.js\":{\"title\":\"$:/core/modules/commands/deletetiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/deletetiddlers.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to delete tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"deletetiddlers\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing filter\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\twiki = this.commander.wiki,\\n\\t\\tfilter = this.params[0],\\n\\t\\ttiddlers = wiki.filterTiddlers(filter);\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\twiki.deleteTiddler(title);\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/editions.js\":{\"title\":\"$:/core/modules/commands/editions.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/editions.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to list the available editions\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"editions\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar self = this;\\n\\t// Output the list\\n\\tthis.commander.streams.output.write(\\\"Available editions:\\\\n\\\\n\\\");\\n\\tvar editionInfo = $tw.utils.getEditionInfo();\\n\\t$tw.utils.each(editionInfo,function(info,name) {\\n\\t\\tself.commander.streams.output.write(\\\"    \\\" + name + \\\": \\\" + info.description + \\\"\\\\n\\\");\\n\\t});\\n\\tthis.commander.streams.output.write(\\\"\\\\n\\\");\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/fetch.js\":{\"title\":\"$:/core/modules/commands/fetch.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/fetch.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommands to fetch external tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"fetch\\\",\\n\\tsynchronous: false\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 2) {\\n\\t\\treturn \\\"Missing subcommand and url\\\";\\n\\t}\\n\\tswitch(this.params[0]) {\\n\\t\\tcase \\\"raw-file\\\":\\n\\t\\t\\treturn this.fetchFiles({\\n\\t\\t\\t\\traw: true,\\n\\t\\t\\t\\turl: this.params[1],\\n\\t\\t\\t\\ttransformFilter: this.params[2] || \\\"\\\",\\n\\t\\t\\t\\tcallback: this.callback\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"file\\\":\\n\\t\\t\\treturn this.fetchFiles({\\n\\t\\t\\t\\turl: this.params[1],\\n\\t\\t\\t\\timportFilter: this.params[2],\\n\\t\\t\\t\\ttransformFilter: this.params[3] || \\\"\\\",\\n\\t\\t\\t\\tcallback: this.callback\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"raw-files\\\":\\n\\t\\t\\treturn this.fetchFiles({\\n\\t\\t\\t\\traw: true,\\n\\t\\t\\t\\turlFilter: this.params[1],\\n\\t\\t\\t\\ttransformFilter: this.params[2] || \\\"\\\",\\n\\t\\t\\t\\tcallback: this.callback\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"files\\\":\\n\\t\\t\\treturn this.fetchFiles({\\n\\t\\t\\t\\turlFilter: this.params[1],\\n\\t\\t\\t\\timportFilter: this.params[2],\\n\\t\\t\\t\\ttransformFilter: this.params[3] || \\\"\\\",\\n\\t\\t\\t\\tcallback: this.callback\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t}\\n\\treturn null;\\n};\\n\\nCommand.prototype.fetchFiles = function(options) {\\n\\tvar self = this;\\n\\t// Get the list of URLs\\n\\tvar urls;\\n\\tif(options.url) {\\n\\t\\turls = [options.url]\\n\\t} else if(options.urlFilter) {\\n\\t\\turls = this.commander.wiki.filterTiddlers(options.urlFilter);\\n\\t} else {\\n\\t\\treturn \\\"Missing URL\\\";\\n\\t}\\n\\t// Process each URL in turn\\n\\tvar next = 0;\\n\\tvar getNextFile = function(err) {\\n\\t\\tif(err) {\\n\\t\\t\\treturn options.callback(err);\\n\\t\\t}\\n\\t\\tif(next \u003C urls.length) {\\n\\t\\t\\tself.fetchFile(urls[next++],options,getNextFile);\\n\\t\\t} else {\\n\\t\\t\\toptions.callback(null);\\n\\t\\t}\\n\\t};\\n\\tgetNextFile(null);\\n\\t// Success\\n\\treturn null;\\n};\\n\\nCommand.prototype.fetchFile = function(url,options,callback,redirectCount) {\\n\\tif(redirectCount > 10) {\\n\\t\\treturn callback(\\\"Error too many redirects retrieving \\\" + url);\\n\\t}\\n\\tvar self = this,\\n\\t\\tlib = url.substr(0,8) === \\\"https://\\\" ? require(\\\"https\\\") : require(\\\"http\\\");\\n\\tlib.get(url).on(\\\"response\\\",function(response) {\\n\\t    var type = (response.headers[\\\"content-type\\\"] || \\\"\\\").split(\\\";\\\")[0],\\n\\t    \\tdata = [];\\n\\t    self.commander.write(\\\"Reading \\\" + url + \\\": \\\");\\n\\t    response.on(\\\"data\\\",function(chunk) {\\n\\t        data.push(chunk);\\n\\t        self.commander.write(\\\".\\\");\\n\\t    });\\n\\t    response.on(\\\"end\\\",function() {\\n\\t        self.commander.write(\\\"\\\\n\\\");\\n\\t        if(response.statusCode === 200) {\\n\\t\\t        self.processBody(Buffer.concat(data),type,options,url);\\n\\t\\t        callback(null);\\n\\t        } else {\\n\\t        \\tif(response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\\n\\t        \\t\\treturn self.fetchFile(response.headers.location,options,callback,redirectCount + 1);\\n\\t        \\t} else {\\n\\t\\t        \\treturn callback(\\\"Error \\\" + response.statusCode + \\\" retrieving \\\" + url)\\n\\t        \\t}\\n\\t        }\\n\\t   \\t});\\n\\t   \\tresponse.on(\\\"error\\\",function(e) {\\n\\t\\t\\tconsole.log(\\\"Error on GET request: \\\" + e);\\n\\t\\t\\tcallback(e);\\n\\t   \\t});\\n\\t});\\n\\treturn null;\\n};\\n\\nCommand.prototype.processBody = function(body,type,options,url) {\\n\\tvar self = this;\\n\\t// Collect the tiddlers in a wiki\\n\\tvar incomingWiki = new $tw.Wiki();\\n\\tif(options.raw) {\\n\\t\\tvar typeInfo = type ? $tw.config.contentTypeInfo[type] : null,\\n\\t\\t\\tencoding = typeInfo ? typeInfo.encoding : \\\"utf8\\\";\\n\\t\\tincomingWiki.addTiddler(new $tw.Tiddler({\\n\\t\\t\\ttitle: url,\\n\\t\\t\\ttype: type,\\n\\t\\t\\ttext: body.toString(encoding)\\n\\t\\t}));\\n\\t} else {\\n\\t\\t// Deserialise the file to extract the tiddlers\\n\\t\\tvar tiddlers = this.commander.wiki.deserializeTiddlers(type || \\\"text/html\\\",body.toString(\\\"utf8\\\"),{});\\n\\t\\t$tw.utils.each(tiddlers,function(tiddler) {\\n\\t\\t\\tincomingWiki.addTiddler(new $tw.Tiddler(tiddler));\\n\\t\\t});\\n\\t}\\n\\t// Filter the tiddlers to select the ones we want\\n\\tvar filteredTitles = incomingWiki.filterTiddlers(options.importFilter || \\\"[all[tiddlers]]\\\");\\n\\t// Import the selected tiddlers\\n\\tvar count = 0;\\n\\tincomingWiki.each(function(tiddler,title) {\\n\\t\\tif(filteredTitles.indexOf(title) !== -1) {\\n\\t\\t\\tvar newTiddler;\\n\\t\\t\\tif(options.transformFilter) {\\n\\t\\t\\t\\tvar transformedTitle = (incomingWiki.filterTiddlers(options.transformFilter,null,self.commander.wiki.makeTiddlerIterator([title])) || [\\\"\\\"])[0];\\n\\t\\t\\t\\tif(transformedTitle) {\\n\\t\\t\\t\\t\\tself.commander.log(\\\"Importing \\\" + title + \\\" as \\\" + transformedTitle)\\n\\t\\t\\t\\t\\tnewTiddler = new $tw.Tiddler(tiddler,{title: transformedTitle});\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.commander.log(\\\"Importing \\\" + title)\\n\\t\\t\\t\\tnewTiddler = tiddler;\\n\\t\\t\\t}\\n\\t\\t\\tself.commander.wiki.importTiddler(newTiddler);\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t});\\n\\tself.commander.log(\\\"Imported \\\" + count + \\\" tiddlers\\\")\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/help.js\":{\"title\":\"$:/core/modules/commands/help.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/help.js\\ntype: application/javascript\\nmodule-type: command\\n\\nHelp command\\n\\n\\\\*/\\n(function(){\\n\\n/*jshint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"help\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar subhelp = this.params[0] || \\\"default\\\",\\n\\t\\thelpBase = \\\"$:/language/Help/\\\",\\n\\t\\ttext;\\n\\tif(!this.commander.wiki.getTiddler(helpBase + subhelp)) {\\n\\t\\tsubhelp = \\\"notfound\\\";\\n\\t}\\n\\t// Wikify the help as formatted text (ie block elements generate newlines)\\n\\ttext = this.commander.wiki.renderTiddler(\\\"text/plain-formatted\\\",helpBase + subhelp);\\n\\t// Remove any leading linebreaks\\n\\ttext = text.replace(/^(\\\\r?\\\\n)*/g,\\\"\\\");\\n\\tthis.commander.streams.output.write(text);\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/import.js\":{\"title\":\"$:/core/modules/commands/import.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/import.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to import tiddlers from a file\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"import\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\");\\n\\tif(this.params.length \u003C 2) {\\n\\t\\treturn \\\"Missing parameters\\\";\\n\\t}\\n\\tvar filename = self.params[0],\\n\\t\\tdeserializer = self.params[1],\\n\\t\\ttitle = self.params[2] || filename,\\n\\t\\tencoding = self.params[3] || \\\"utf8\\\",\\n\\t\\ttext = fs.readFileSync(filename,encoding),\\n\\t\\ttiddlers = this.commander.wiki.deserializeTiddlers(null,text,{title: title},{deserializer: deserializer});\\n\\t$tw.utils.each(tiddlers,function(tiddler) {\\n\\t\\tself.commander.wiki.importTiddler(new $tw.Tiddler(tiddler));\\n\\t});\\n\\tthis.commander.log(tiddlers.length + \\\" tiddler(s) imported\\\");\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/init.js\":{\"title\":\"$:/core/modules/commands/init.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/init.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to initialise an empty wiki folder\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"init\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar fs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\");\\n\\t// Check that we don't already have a valid wiki folder\\n\\tif($tw.boot.wikiTiddlersPath || ($tw.utils.isDirectory($tw.boot.wikiPath) && !$tw.utils.isDirectoryEmpty($tw.boot.wikiPath))) {\\n\\t\\treturn \\\"Wiki folder is not empty\\\";\\n\\t}\\n\\t// Loop through each of the specified editions\\n\\tvar editions = this.params.length > 0 ? this.params : [\\\"empty\\\"];\\n\\tfor(var editionIndex=0; editionIndex\u003Ceditions.length; editionIndex++) {\\n\\t\\tvar editionName = editions[editionIndex];\\n\\t\\t// Check the edition exists\\n\\t\\tvar editionPath = $tw.findLibraryItem(editionName,$tw.getLibraryItemSearchPaths($tw.config.editionsPath,$tw.config.editionsEnvVar));\\n\\t\\tif(!$tw.utils.isDirectory(editionPath)) {\\n\\t\\t\\treturn \\\"Edition '\\\" + editionName + \\\"' not found\\\";\\n\\t\\t}\\n\\t\\t// Copy the edition content\\n\\t\\tvar err = $tw.utils.copyDirectory(editionPath,$tw.boot.wikiPath);\\n\\t\\tif(!err) {\\n\\t\\t\\tthis.commander.streams.output.write(\\\"Copied edition '\\\" + editionName + \\\"' to \\\" + $tw.boot.wikiPath + \\\"\\\\n\\\");\\n\\t\\t} else {\\n\\t\\t\\treturn err;\\n\\t\\t}\\n\\t}\\n\\t// Tweak the tiddlywiki.info to remove any included wikis\\n\\tvar packagePath = $tw.boot.wikiPath + \\\"/tiddlywiki.info\\\",\\n\\t\\tpackageJson = $tw.utils.parseJSONSafe(fs.readFileSync(packagePath));\\n\\tdelete packageJson.includeWikis;\\n\\tfs.writeFileSync(packagePath,JSON.stringify(packageJson,null,$tw.config.preferences.jsonSpaces));\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/listen.js\":{\"title\":\"$:/core/modules/commands/listen.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/listen.js\\ntype: application/javascript\\nmodule-type: command\\n\\nListen for HTTP requests and serve tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Server = require(\\\"$:/core/modules/server/server.js\\\").Server;\\n\\nexports.info = {\\n\\tname: \\\"listen\\\",\\n\\tsynchronous: true,\\n\\tnamedParameterMode: true,\\n\\tmandatoryParameters: [],\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tvar self = this;\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar self = this;\\n\\tif(!$tw.boot.wikiTiddlersPath) {\\n\\t\\t$tw.utils.warning(\\\"Warning: Wiki folder '\\\" + $tw.boot.wikiPath + \\\"' does not exist or is missing a tiddlywiki.info file\\\");\\n\\t}\\n\\t// Set up server\\n\\tthis.server = new Server({\\n\\t\\twiki: this.commander.wiki,\\n\\t\\tvariables: self.params\\n\\t});\\n\\tvar nodeServer = this.server.listen();\\n\\t$tw.hooks.invokeHook(\\\"th-server-command-post-start\\\",this.server,nodeServer,\\\"tiddlywiki\\\");\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/load.js\":{\"title\":\"$:/core/modules/commands/load.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/load.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to load tiddlers from a file or directory\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"load\\\",\\n\\tsynchronous: false\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\");\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing filename\\\";\\n\\t}\\n\\tvar tiddlers = $tw.loadTiddlersFromPath(self.params[0]),\\n\\t\\tcount = 0;\\n\\t$tw.utils.each(tiddlers,function(tiddlerInfo) {\\n\\t\\t$tw.utils.each(tiddlerInfo.tiddlers,function(tiddler) {\\n\\t\\t\\tself.commander.wiki.importTiddler(new $tw.Tiddler(tiddler));\\n\\t\\t\\tcount++;\\n\\t\\t});\\n\\t});\\n\\tif(!count && self.params[1] !== \\\"noerror\\\") {\\n\\t\\tself.callback(\\\"No tiddlers found in file \\\\\\\"\\\" + self.params[0] + \\\"\\\\\\\"\\\");\\n\\t} else {\\n\\t\\tself.callback(null);\\n\\t}\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/makelibrary.js\":{\"title\":\"$:/core/modules/commands/makelibrary.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/makelibrary.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to pack all of the plugins in the library into a plugin tiddler of type \\\"library\\\"\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"makelibrary\\\",\\n\\tsynchronous: true\\n};\\n\\nvar UPGRADE_LIBRARY_TITLE = \\\"$:/UpgradeLibrary\\\";\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar wiki = this.commander.wiki,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\tupgradeLibraryTitle = this.params[0] || UPGRADE_LIBRARY_TITLE,\\n\\t\\ttiddlers = {};\\n\\t// Collect up the library plugins\\n\\tvar collectPlugins = function(folder) {\\n\\t\\t\\tvar pluginFolders = $tw.utils.getSubdirectories(folder) || [];\\n\\t\\t\\tfor(var p=0; p\u003CpluginFolders.length; p++) {\\n\\t\\t\\t\\tif(!$tw.boot.excludeRegExp.test(pluginFolders[p])) {\\n\\t\\t\\t\\t\\tpluginFields = $tw.loadPluginFolder(path.resolve(folder,\\\"./\\\" + pluginFolders[p]));\\n\\t\\t\\t\\t\\tif(pluginFields && pluginFields.title) {\\n\\t\\t\\t\\t\\t\\ttiddlers[pluginFields.title] = pluginFields;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tcollectPublisherPlugins = function(folder) {\\n\\t\\t\\tvar publisherFolders = $tw.utils.getSubdirectories(folder) || [];\\n\\t\\t\\tfor(var t=0; t\u003CpublisherFolders.length; t++) {\\n\\t\\t\\t\\tif(!$tw.boot.excludeRegExp.test(publisherFolders[t])) {\\n\\t\\t\\t\\t\\tcollectPlugins(path.resolve(folder,\\\"./\\\" + publisherFolders[t]));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t$tw.utils.each($tw.getLibraryItemSearchPaths($tw.config.pluginsPath,$tw.config.pluginsEnvVar),collectPublisherPlugins);\\n\\t$tw.utils.each($tw.getLibraryItemSearchPaths($tw.config.themesPath,$tw.config.themesEnvVar),collectPublisherPlugins);\\n\\t$tw.utils.each($tw.getLibraryItemSearchPaths($tw.config.languagesPath,$tw.config.languagesEnvVar),collectPlugins);\\n\\t// Save the upgrade library tiddler\\n\\tvar pluginFields = {\\n\\t\\ttitle: upgradeLibraryTitle,\\n\\t\\ttype: \\\"application/json\\\",\\n\\t\\t\\\"plugin-type\\\": \\\"library\\\",\\n\\t\\t\\\"text\\\": JSON.stringify({tiddlers: tiddlers})\\n\\t};\\n\\twiki.addTiddler(new $tw.Tiddler(pluginFields));\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/output.js\":{\"title\":\"$:/core/modules/commands/output.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/output.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to set the default output location (defaults to current working directory)\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"output\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tvar fs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\");\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing output path\\\";\\n\\t}\\n\\tthis.commander.outputPath = path.resolve(process.cwd(),this.params[0]);\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/password.js\":{\"title\":\"$:/core/modules/commands/password.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/password.js\\ntype: application/javascript\\nmodule-type: command\\n\\nSave password for crypto operations\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"password\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing password\\\";\\n\\t}\\n\\t$tw.crypto.setPassword(this.params[0]);\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/render.js\":{\"title\":\"$:/core/modules/commands/render.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/render.js\\ntype: application/javascript\\nmodule-type: command\\n\\nRender individual tiddlers and save the results to the specified files\\n\\n\\\\*/\\n(function(){\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\t\\n\\tvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\t\\n\\texports.info = {\\n\\t\\tname: \\\"render\\\",\\n\\t\\tsynchronous: true\\n\\t};\\n\\t\\n\\tvar Command = function(params,commander,callback) {\\n\\t\\tthis.params = params;\\n\\t\\tthis.commander = commander;\\n\\t\\tthis.callback = callback;\\n\\t};\\n\\t\\n\\tCommand.prototype.execute = function() {\\n\\t\\tif(this.params.length \u003C 1) {\\n\\t\\t\\treturn \\\"Missing tiddler filter\\\";\\n\\t\\t}\\n\\t\\tvar self = this,\\n\\t\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\t\\tpath = require(\\\"path\\\"),\\n\\t\\t\\twiki = this.commander.wiki,\\n\\t\\t\\ttiddlerFilter = this.params[0],\\n\\t\\t\\tfilenameFilter = this.params[1] || \\\"[is[tiddler]addsuffix[.html]]\\\",\\n\\t\\t\\ttype = this.params[2] || \\\"text/html\\\",\\n\\t\\t\\ttemplate = this.params[3],\\n\\t\\t\\tvariableList = this.params.slice(4),\\n\\t\\t\\ttiddlers = wiki.filterTiddlers(tiddlerFilter),\\n\\t\\t\\tvariables =  Object.create(null);\\n\\t\\t\\twhile(variableList.length >= 2) {\\n\\t\\t\\t\\tvariables[variableList[0]] = variableList[1];\\n\\t\\t\\t\\tvariableList = variableList.slice(2);\\n\\t\\t\\t}\\n\\t\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\t\\tvar filepath = path.resolve(self.commander.outputPath,wiki.filterTiddlers(filenameFilter,$tw.rootWidget,wiki.makeTiddlerIterator([title]))[0]);\\n\\t\\t\\tif(self.commander.verbose) {\\n\\t\\t\\t\\tconsole.log(\\\"Rendering \\\\\\\"\\\" + title + \\\"\\\\\\\" to \\\\\\\"\\\" + filepath + \\\"\\\\\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\tvar parser = wiki.parseTiddler(template || title),\\n\\t\\t\\t\\twidgetNode = wiki.makeWidget(parser,{variables: $tw.utils.extend({},variables,{currentTiddler: title})}),\\n\\t\\t\\t\\tcontainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\t\\twidgetNode.render(container,null);\\n\\t\\t\\tvar text = type === \\\"text/html\\\" ? container.innerHTML : container.textContent;\\n\\t\\t\\t$tw.utils.createFileDirectories(filepath);\\n\\t\\t\\tfs.writeFileSync(filepath,text,\\\"utf8\\\");\\n\\t\\t});\\n\\t\\treturn null;\\n\\t};\\n\\t\\n\\texports.Command = Command;\\n\\t\\n\\t})();\\n\\t\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/rendertiddler.js\":{\"title\":\"$:/core/modules/commands/rendertiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/rendertiddler.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to render a tiddler and save it to a file\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"rendertiddler\\\",\\n\\tsynchronous: false\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 2) {\\n\\t\\treturn \\\"Missing filename\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\ttitle = this.params[0],\\n\\t\\tfilename = path.resolve(this.commander.outputPath,this.params[1]),\\n\\t\\ttype = this.params[2] || \\\"text/html\\\",\\n\\t\\ttemplate = this.params[3],\\n\\t\\tname = this.params[4],\\n\\t\\tvalue = this.params[5],\\n\\t\\tvariables = {};\\n\\t$tw.utils.createFileDirectories(filename);\\n\\tif(template) {\\n\\t\\tvariables.currentTiddler = title;\\n\\t\\ttitle = template;\\n\\t}\\n\\tif(name && value) {\\n\\t\\tvariables[name] = value;\\n\\t}\\n\\tfs.writeFile(filename,this.commander.wiki.renderTiddler(type,title,{variables: variables}),\\\"utf8\\\",function(err) {\\n\\t\\tself.callback(err);\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/rendertiddlers.js\":{\"title\":\"$:/core/modules/commands/rendertiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/rendertiddlers.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to render several tiddlers to a folder of files\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nexports.info = {\\n\\tname: \\\"rendertiddlers\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 2) {\\n\\t\\treturn \\\"Missing filename\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\twiki = this.commander.wiki,\\n\\t\\tfilter = this.params[0],\\n\\t\\ttemplate = this.params[1],\\n\\t\\toutputPath = this.commander.outputPath,\\n\\t\\tpathname = path.resolve(outputPath,this.params[2]),\\n\\t\\ttype = this.params[3] || \\\"text/html\\\",\\n\\t\\textension = this.params[4] || \\\".html\\\",\\n\\t\\tdeleteDirectory = (this.params[5] || \\\"\\\").toLowerCase() !== \\\"noclean\\\",\\n\\t\\ttiddlers = wiki.filterTiddlers(filter);\\n\\tif(deleteDirectory) {\\n\\t\\t$tw.utils.deleteDirectory(pathname);\\n\\t}\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar parser = wiki.parseTiddler(template),\\n\\t\\t\\twidgetNode = wiki.makeWidget(parser,{variables: {currentTiddler: title}}),\\n\\t\\t\\tcontainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\twidgetNode.render(container,null);\\n\\t\\tvar text = type === \\\"text/html\\\" ? container.innerHTML : container.textContent,\\n\\t\\t\\texportPath = null;\\n\\t\\tif($tw.utils.hop($tw.macros,\\\"tv-get-export-path\\\")) {\\n\\t\\t\\tvar macroPath = $tw.macros[\\\"tv-get-export-path\\\"].run.apply(self,[title]);\\n\\t\\t\\tif(macroPath) {\\n\\t\\t\\t\\texportPath = path.resolve(outputPath,macroPath + extension);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvar finalPath = exportPath || path.resolve(pathname,encodeURIComponent(title) + extension);\\n\\t\\t$tw.utils.createFileDirectories(finalPath);\\n\\t\\tfs.writeFileSync(finalPath,text,\\\"utf8\\\");\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/save.js\":{\"title\":\"$:/core/modules/commands/save.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/save.js\\ntype: application/javascript\\nmodule-type: command\\n\\nSaves individual tiddlers in their raw text or binary format to the specified files\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"save\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing filename filter\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\twiki = this.commander.wiki,\\n\\t\\ttiddlerFilter = this.params[0],\\n\\t\\tfilenameFilter = this.params[1] || \\\"[is[tiddler]]\\\",\\n\\t\\ttiddlers = wiki.filterTiddlers(tiddlerFilter);\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar tiddler = self.commander.wiki.getTiddler(title),\\n\\t\\t\\ttype = tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\",\\n\\t\\t\\tcontentTypeInfo = $tw.config.contentTypeInfo[type] || {encoding: \\\"utf8\\\"},\\n\\t\\t\\tfilepath = path.resolve(self.commander.outputPath,wiki.filterTiddlers(filenameFilter,$tw.rootWidget,wiki.makeTiddlerIterator([title]))[0]);\\n\\t\\tif(self.commander.verbose) {\\n\\t\\t\\tconsole.log(\\\"Saving \\\\\\\"\\\" + title + \\\"\\\\\\\" to \\\\\\\"\\\" + filepath + \\\"\\\\\\\"\\\");\\n\\t\\t}\\n\\t\\t$tw.utils.createFileDirectories(filepath);\\n\\t\\tfs.writeFileSync(filepath,tiddler.fields.text,contentTypeInfo.encoding);\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/savelibrarytiddlers.js\":{\"title\":\"$:/core/modules/commands/savelibrarytiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/savelibrarytiddlers.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to save the subtiddlers of a bundle tiddler as a series of JSON files\\n\\n--savelibrarytiddlers \u003Ctiddler> \u003Ctiddler-filter> \u003Cpathname> \u003Cskinnylisting>\\n\\nThe tiddler identifies the bundle tiddler that contains the subtiddlers.\\n\\nThe tiddler filter specifies the plugins to be included.\\n\\nThe pathname specifies the pathname to the folder in which the JSON files should be saved. The filename is the URL encoded title of the subtiddler.\\n\\nThe skinnylisting specifies the title of the tiddler to which a JSON catalogue of the subtiddlers will be saved. The JSON file contains the same data as the bundle tiddler but with the `text` field removed.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"savelibrarytiddlers\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 2) {\\n\\t\\treturn \\\"Missing filename\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\tcontainerTitle = this.params[0],\\n\\t\\tfilter = this.params[1],\\n\\t\\tbasepath = this.params[2],\\n\\t\\tskinnyListTitle = this.params[3];\\n\\t// Get the container tiddler as data\\n\\tvar containerData = self.commander.wiki.getTiddlerDataCached(containerTitle,undefined);\\n\\tif(!containerData) {\\n\\t\\treturn \\\"'\\\" + containerTitle + \\\"' is not a tiddler bundle\\\";\\n\\t}\\n\\t// Filter the list of plugins\\n\\tvar pluginList = [];\\n\\t$tw.utils.each(containerData.tiddlers,function(tiddler,title) {\\n\\t\\tpluginList.push(title);\\n\\t});\\n\\tvar filteredPluginList;\\n\\tif(filter) {\\n\\t\\tfilteredPluginList = self.commander.wiki.filterTiddlers(filter,null,self.commander.wiki.makeTiddlerIterator(pluginList));\\n\\t} else {\\n\\t\\tfilteredPluginList = pluginList;\\n\\t}\\n\\t// Iterate through the plugins\\n\\tvar skinnyList = [];\\n\\t$tw.utils.each(filteredPluginList,function(title) {\\n\\t\\tvar tiddler = containerData.tiddlers[title];\\n\\t\\t// Save each JSON file and collect the skinny data\\n\\t\\tvar pathname = path.resolve(self.commander.outputPath,basepath + encodeURIComponent(title) + \\\".json\\\");\\n\\t\\t$tw.utils.createFileDirectories(pathname);\\n\\t\\tfs.writeFileSync(pathname,JSON.stringify(tiddler),\\\"utf8\\\");\\n\\t\\t// Collect the skinny list data\\n\\t\\tvar pluginTiddlers = $tw.utils.parseJSONSafe(tiddler.text),\\n\\t\\t\\treadmeContent = (pluginTiddlers.tiddlers[title + \\\"/readme\\\"] || {}).text,\\n\\t\\t\\tdoesRequireReload = !!self.commander.wiki.doesPluginInfoRequireReload(pluginTiddlers),\\n\\t\\t\\ticonTiddler = pluginTiddlers.tiddlers[title + \\\"/icon\\\"] || {},\\n\\t\\t\\ticonType = iconTiddler.type,\\n\\t\\t\\ticonText = iconTiddler.text,\\n\\t\\t\\ticonContent;\\n\\t\\tif(iconType && iconText) {\\n\\t\\t\\ticonContent = $tw.utils.makeDataUri(iconText,iconType);\\n\\t\\t}\\n\\t\\tskinnyList.push($tw.utils.extend({},tiddler,{\\n\\t\\t\\ttext: undefined,\\n\\t\\t\\treadme: readmeContent,\\n\\t\\t\\t\\\"requires-reload\\\": doesRequireReload ? \\\"yes\\\" : \\\"no\\\",\\n\\t\\t\\ticon: iconContent\\n\\t\\t}));\\n\\t});\\n\\t// Save the catalogue tiddler\\n\\tif(skinnyListTitle) {\\n\\t\\tself.commander.wiki.setTiddlerData(skinnyListTitle,skinnyList);\\n\\t}\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/savetiddler.js\":{\"title\":\"$:/core/modules/commands/savetiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/savetiddler.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to save the content of a tiddler to a file\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"savetiddler\\\",\\n\\tsynchronous: false\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 2) {\\n\\t\\treturn \\\"Missing filename\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\ttitle = this.params[0],\\n\\t\\tfilename = path.resolve(this.commander.outputPath,this.params[1]),\\n\\t\\ttiddler = this.commander.wiki.getTiddler(title);\\n\\tif(tiddler) {\\n\\t\\tvar type = tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\",\\n\\t\\t\\tcontentTypeInfo = $tw.config.contentTypeInfo[type] || {encoding: \\\"utf8\\\"};\\n\\t\\t$tw.utils.createFileDirectories(filename);\\n\\t\\tfs.writeFile(filename,tiddler.fields.text,contentTypeInfo.encoding,function(err) {\\n\\t\\t\\tself.callback(err);\\n\\t\\t});\\n\\t} else {\\n\\t\\treturn \\\"Missing tiddler: \\\" + title;\\n\\t}\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/savetiddlers.js\":{\"title\":\"$:/core/modules/commands/savetiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/savetiddlers.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to save several tiddlers to a folder of files\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nexports.info = {\\n\\tname: \\\"savetiddlers\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing filename\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\twiki = this.commander.wiki,\\n\\t\\tfilter = this.params[0],\\n\\t\\tpathname = path.resolve(this.commander.outputPath,this.params[1]),\\n\\t\\tdeleteDirectory = (this.params[2] || \\\"\\\").toLowerCase() !== \\\"noclean\\\",\\n\\t\\ttiddlers = wiki.filterTiddlers(filter);\\n\\tif(deleteDirectory) {\\n\\t\\t$tw.utils.deleteDirectory(pathname);\\n\\t}\\n\\t$tw.utils.createDirectory(pathname);\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar tiddler = self.commander.wiki.getTiddler(title),\\n\\t\\t\\ttype = tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\",\\n\\t\\t\\tcontentTypeInfo = $tw.config.contentTypeInfo[type] || {encoding: \\\"utf8\\\"},\\n\\t\\t\\tfilename = path.resolve(pathname,encodeURIComponent(title));\\n\\t\\tfs.writeFileSync(filename,tiddler.fields.text,contentTypeInfo.encoding);\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/savewikifolder.js\":{\"title\":\"$:/core/modules/commands/savewikifolder.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/savewikifolder.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to save the current wiki as a wiki folder\\n\\n--savewikifolder \u003Cwikifolderpath> [\u003Cfilter>]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"savewikifolder\\\",\\n\\tsynchronous: true\\n};\\n\\nvar fs,path;\\nif($tw.node) {\\n\\tfs = require(\\\"fs\\\");\\n\\tpath = require(\\\"path\\\");\\n}\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing wiki folder path\\\";\\n\\t}\\n\\tvar wikifoldermaker = new WikiFolderMaker(this.params[0],this.params[1],this.commander);\\n\\treturn wikifoldermaker.save();\\n};\\n\\nfunction WikiFolderMaker(wikiFolderPath,wikiFilter,commander) {\\n\\tthis.wikiFolderPath = wikiFolderPath;\\n\\tthis.wikiFilter = wikiFilter || \\\"[all[tiddlers]]\\\";\\n\\tthis.commander = commander;\\n\\tthis.wiki = commander.wiki;\\n\\tthis.savedPaths = []; // So that we can detect filename clashes\\n}\\n\\nWikiFolderMaker.prototype.log = function(str) {\\n\\tif(this.commander.verbose) {\\n\\t\\tconsole.log(str);\\n\\t}\\n};\\n\\nWikiFolderMaker.prototype.tiddlersToIgnore = [\\n\\t\\\"$:/boot/boot.css\\\",\\n\\t\\\"$:/boot/boot.js\\\",\\n\\t\\\"$:/boot/bootprefix.js\\\",\\n\\t\\\"$:/core\\\",\\n\\t\\\"$:/library/sjcl.js\\\",\\n\\t\\\"$:/temp/info-plugin\\\"\\n];\\n\\n/*\\nReturns null if successful, or an error string if there was an error\\n*/\\nWikiFolderMaker.prototype.save = function() {\\n\\tvar self = this;\\n\\t// Check that the output directory doesn't exist\\n\\tif(fs.existsSync(this.wikiFolderPath) && !$tw.utils.isDirectoryEmpty(this.wikiFolderPath)) {\\n\\t\\treturn \\\"The unpackwiki command requires that the output wiki folder be empty\\\";\\n\\t}\\n\\t// Get the tiddlers from the source wiki\\n\\tvar tiddlerTitles = this.wiki.filterTiddlers(this.wikiFilter);\\n\\t// Initialise a new tiddlwiki.info file\\n\\tvar newWikiInfo = {};\\n\\t// Process each incoming tiddler in turn\\n\\t$tw.utils.each(tiddlerTitles,function(title) {\\n\\t\\tvar tiddler = self.wiki.getTiddler(title);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tif(self.tiddlersToIgnore.indexOf(title) !== -1) {\\n\\t\\t\\t\\t// Ignore the core plugin and the ephemeral info plugin\\n\\t\\t\\t\\tself.log(\\\"Ignoring tiddler: \\\" + title);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar type = tiddler.fields.type,\\n\\t\\t\\t\\t\\tpluginType = tiddler.fields[\\\"plugin-type\\\"];\\n\\t\\t\\t\\tif(type === \\\"application/json\\\" && pluginType) {\\n\\t\\t\\t\\t\\t// Plugin tiddler\\n\\t\\t\\t\\t\\tvar libraryDetails = self.findPluginInLibrary(title);\\n\\t\\t\\t\\t\\tif(libraryDetails) {\\n\\t\\t\\t\\t\\t\\t// A plugin from the core library\\n\\t\\t\\t\\t\\t\\tself.log(\\\"Adding built-in plugin: \\\" + libraryDetails.name);\\n\\t\\t\\t\\t\\t\\tnewWikiInfo[libraryDetails.type] = newWikiInfo[libraryDetails.type]  || [];\\n\\t\\t\\t\\t\\t\\t$tw.utils.pushTop(newWikiInfo[libraryDetails.type],libraryDetails.name);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// A custom plugin\\n\\t\\t\\t\\t\\t\\tself.log(\\\"Processing custom plugin: \\\" + title);\\n\\t\\t\\t\\t\\t\\tself.saveCustomPlugin(tiddler);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Ordinary tiddler\\n\\t\\t\\t\\t\\tself.saveTiddler(\\\"tiddlers\\\",tiddler);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\t// Save the tiddlywiki.info file\\n\\tthis.saveJSONFile(\\\"tiddlywiki.info\\\",newWikiInfo);\\n\\tself.log(\\\"Writing tiddlywiki.info: \\\" + JSON.stringify(newWikiInfo,null,$tw.config.preferences.jsonSpaces));\\n\\treturn null;\\n};\\n\\n/*\\nTest whether the specified tiddler is a plugin in the plugin library\\n*/\\nWikiFolderMaker.prototype.findPluginInLibrary = function(title) {\\n\\tvar parts = title.split(\\\"/\\\"),\\n\\t\\tpluginPath, type, name;\\n\\tif(parts[0] === \\\"$:\\\") {\\n\\t\\tif(parts[1] === \\\"languages\\\" && parts.length === 3) {\\n\\t\\t\\tpluginPath = \\\"languages\\\" + path.sep + parts[2];\\n\\t\\t\\ttype = parts[1];\\n\\t\\t\\tname = parts[2];\\n\\t\\t} else if(parts[1] === \\\"plugins\\\" || parts[1] === \\\"themes\\\" && parts.length === 4) {\\n\\t\\t\\tpluginPath = parts[1] + path.sep + parts[2] + path.sep + parts[3];\\n\\t\\t\\ttype = parts[1];\\n\\t\\t\\tname = parts[2] + \\\"/\\\" + parts[3];\\n\\t\\t}\\n\\t}\\n\\tif(pluginPath && type && name) {\\n\\t\\tpluginPath = path.resolve($tw.boot.bootPath,\\\"..\\\",pluginPath);\\n\\t\\tif(fs.existsSync(pluginPath)) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tpluginPath: pluginPath,\\n\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\tname: name\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\nWikiFolderMaker.prototype.saveCustomPlugin = function(pluginTiddler) {\\n\\tvar self = this,\\n\\t\\tpluginTitle = pluginTiddler.fields.title,\\n\\t\\ttitleParts = pluginTitle.split(\\\"/\\\"),\\n\\t\\tdirectory = $tw.utils.generateTiddlerFilepath(titleParts[titleParts.length - 1],{\\n\\t\\t\\tdirectory: path.resolve(this.wikiFolderPath,pluginTiddler.fields[\\\"plugin-type\\\"] + \\\"s\\\")\\n\\t\\t}),\\n\\t\\tpluginInfo = pluginTiddler.getFieldStrings({exclude: [\\\"text\\\",\\\"type\\\"]});\\n\\tthis.saveJSONFile(directory + path.sep + \\\"plugin.info\\\",pluginInfo);\\n\\tself.log(\\\"Writing \\\" + directory + path.sep + \\\"plugin.info: \\\" + JSON.stringify(pluginInfo,null,$tw.config.preferences.jsonSpaces));\\n\\tvar pluginTiddlers = $tw.utils.parseJSONSafe(pluginTiddler.fields.text).tiddlers; // A hashmap of tiddlers in the plugin\\n\\t$tw.utils.each(pluginTiddlers,function(tiddler) {\\n\\t\\tself.saveTiddler(directory,new $tw.Tiddler(tiddler));\\n\\t});\\n};\\n\\nWikiFolderMaker.prototype.saveTiddler = function(directory,tiddler) {\\n\\tvar title = tiddler.fields.title, fileInfo, pathFilters, extFilters;\\n\\tif(this.wiki.tiddlerExists(\\\"$:/config/FileSystemPaths\\\")) {\\n\\t\\tpathFilters = this.wiki.getTiddlerText(\\\"$:/config/FileSystemPaths\\\",\\\"\\\").split(\\\"\\\\n\\\");\\n\\t}\\n\\tif(this.wiki.tiddlerExists(\\\"$:/config/FileSystemExtensions\\\")) {\\n\\t\\textFilters = this.wiki.getTiddlerText(\\\"$:/config/FileSystemExtensions\\\",\\\"\\\").split(\\\"\\\\n\\\");\\n\\t}\\n\\tvar fileInfo = $tw.utils.generateTiddlerFileInfo(tiddler,{\\n\\t\\tdirectory: path.resolve(this.wikiFolderPath,directory),\\n\\t\\tpathFilters: pathFilters,\\n\\t\\textFilters: extFilters,\\n\\t\\twiki: this.wiki,\\n\\t\\tfileInfo: {}\\n\\t});\\n\\ttry {\\n\\t\\t$tw.utils.saveTiddlerToFileSync(tiddler,fileInfo);\\n\\t} catch (err) {\\n\\t\\tconsole.log(\\\"SaveWikiFolder: Error saving file '\\\" + fileInfo.filepath + \\\"', tiddler: '\\\" + tiddler.fields.title);\\n\\t}\\n};\\n\\nWikiFolderMaker.prototype.saveJSONFile = function(filename,json) {\\n\\tthis.saveTextFile(filename,JSON.stringify(json,null,$tw.config.preferences.jsonSpaces));\\n};\\n\\nWikiFolderMaker.prototype.saveTextFile = function(filename,data) {\\n\\tthis.saveFile(filename,\\\"utf8\\\",data);\\n};\\n\\nWikiFolderMaker.prototype.saveFile = function(filename,encoding,data) {\\n\\tvar filepath = path.resolve(this.wikiFolderPath,filename);\\n\\t$tw.utils.createFileDirectories(filepath);\\n\\tfs.writeFileSync(filepath,data,encoding);\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/server.js\":{\"title\":\"$:/core/modules/commands/server.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/server.js\\ntype: application/javascript\\nmodule-type: command\\n\\nDeprecated legacy command for serving tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Server = require(\\\"$:/core/modules/server/server.js\\\").Server;\\n\\nexports.info = {\\n\\tname: \\\"server\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tvar self = this;\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(!$tw.boot.wikiTiddlersPath) {\\n\\t\\t$tw.utils.warning(\\\"Warning: Wiki folder '\\\" + $tw.boot.wikiPath + \\\"' does not exist or is missing a tiddlywiki.info file\\\");\\n\\t}\\n\\t// Set up server\\n\\tthis.server = new Server({\\n\\t\\twiki: this.commander.wiki,\\n\\t\\tvariables: {\\n\\t\\t\\tport: this.params[0],\\n\\t\\t\\thost: this.params[6],\\n\\t\\t\\t\\\"root-tiddler\\\": this.params[1],\\n\\t\\t\\t\\\"root-render-type\\\": this.params[2],\\n\\t\\t\\t\\\"root-serve-type\\\": this.params[3],\\n\\t\\t\\tusername: this.params[4],\\n\\t\\t\\tpassword: this.params[5],\\n\\t\\t\\t\\\"path-prefix\\\": this.params[7],\\n\\t\\t\\t\\\"debug-level\\\": this.params[8]\\n\\t\\t}\\n\\t});\\n\\tvar nodeServer = this.server.listen();\\n\\t$tw.hooks.invokeHook(\\\"th-server-command-post-start\\\",this.server,nodeServer,\\\"tiddlywiki\\\");\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/setfield.js\":{\"title\":\"$:/core/modules/commands/setfield.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/setfield.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to modify selected tiddlers to set a field to the text of a template tiddler that has been wikified with the selected tiddler as the current tiddler.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nexports.info = {\\n\\tname: \\\"setfield\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 4) {\\n\\t\\treturn \\\"Missing parameters\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\twiki = this.commander.wiki,\\n\\t\\tfilter = this.params[0],\\n\\t\\tfieldname = this.params[1] || \\\"text\\\",\\n\\t\\ttemplatetitle = this.params[2],\\n\\t\\trendertype = this.params[3] || \\\"text/plain\\\",\\n\\t\\ttiddlers = wiki.filterTiddlers(filter);\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar parser = wiki.parseTiddler(templatetitle),\\n\\t\\t\\tnewFields = {},\\n\\t\\t\\ttiddler = wiki.getTiddler(title);\\n\\t\\tif(parser) {\\n\\t\\t\\tvar widgetNode = wiki.makeWidget(parser,{variables: {currentTiddler: title}});\\n\\t\\t\\tvar container = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\t\\twidgetNode.render(container,null);\\n\\t\\t\\tnewFields[fieldname] = rendertype === \\\"text/html\\\" ? container.innerHTML : container.textContent;\\n\\t\\t} else {\\n\\t\\t\\tnewFields[fieldname] = undefined;\\n\\t\\t}\\n\\t\\twiki.addTiddler(new $tw.Tiddler(tiddler,newFields));\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/unpackplugin.js\":{\"title\":\"$:/core/modules/commands/unpackplugin.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/unpackplugin.js\\ntype: application/javascript\\nmodule-type: command\\n\\nCommand to extract the shadow tiddlers from within a plugin\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"unpackplugin\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander,callback) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n\\tthis.callback = callback;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tif(this.params.length \u003C 1) {\\n\\t\\treturn \\\"Missing plugin name\\\";\\n\\t}\\n\\tvar self = this,\\n\\t\\ttitle = this.params[0],\\n\\t\\tpluginData = this.commander.wiki.getTiddlerDataCached(title);\\n\\tif(!pluginData) {\\n\\t\\treturn \\\"Plugin '\\\" + title + \\\"' not found\\\";\\n\\t}\\n\\t$tw.utils.each(pluginData.tiddlers,function(tiddler) {\\n\\t\\tself.commander.wiki.addTiddler(new $tw.Tiddler(tiddler));\\n\\t});\\n\\treturn null;\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/verbose.js\":{\"title\":\"$:/core/modules/commands/verbose.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/verbose.js\\ntype: application/javascript\\nmodule-type: command\\n\\nVerbose command\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"verbose\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tthis.commander.verbose = true;\\n\\t// Output the boot message log\\n\\tthis.commander.streams.output.write(\\\"Boot log:\\\\n  \\\" + $tw.boot.logMessages.join(\\\"\\\\n  \\\") + \\\"\\\\n\\\");\\n\\treturn null; // No error\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/commands/version.js\":{\"title\":\"$:/core/modules/commands/version.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/commands/version.js\\ntype: application/javascript\\nmodule-type: command\\n\\nVersion command\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.info = {\\n\\tname: \\\"version\\\",\\n\\tsynchronous: true\\n};\\n\\nvar Command = function(params,commander) {\\n\\tthis.params = params;\\n\\tthis.commander = commander;\\n};\\n\\nCommand.prototype.execute = function() {\\n\\tthis.commander.streams.output.write($tw.version + \\\"\\\\n\\\");\\n\\treturn null; // No error\\n};\\n\\nexports.Command = Command;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"command\"},\"$:/core/modules/config.js\":{\"title\":\"$:/core/modules/config.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/config.js\\ntype: application/javascript\\nmodule-type: config\\n\\nCore configuration constants\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.preferences = {};\\n\\nexports.preferences.notificationDuration = 3 * 1000;\\nexports.preferences.jsonSpaces = 4;\\n\\nexports.textPrimitives = {\\n\\tupperLetter: \\\"[A-Z\\\\u00c0-\\\\u00d6\\\\u00d8-\\\\u00de\\\\u0150\\\\u0170]\\\",\\n\\tlowerLetter: \\\"[a-z\\\\u00df-\\\\u00f6\\\\u00f8-\\\\u00ff\\\\u0151\\\\u0171]\\\",\\n\\tanyLetter:   \\\"[A-Za-z0-9\\\\u00c0-\\\\u00d6\\\\u00d8-\\\\u00de\\\\u00df-\\\\u00f6\\\\u00f8-\\\\u00ff\\\\u0150\\\\u0170\\\\u0151\\\\u0171]\\\",\\n\\tblockPrefixLetters:\\t\\\"[A-Za-z0-9-_\\\\u00c0-\\\\u00d6\\\\u00d8-\\\\u00de\\\\u00df-\\\\u00f6\\\\u00f8-\\\\u00ff\\\\u0150\\\\u0170\\\\u0151\\\\u0171]\\\"\\n};\\n\\nexports.textPrimitives.unWikiLink = \\\"~\\\";\\nexports.textPrimitives.wikiLink = exports.textPrimitives.upperLetter + \\\"+\\\" +\\n\\texports.textPrimitives.lowerLetter + \\\"+\\\" +\\n\\texports.textPrimitives.upperLetter +\\n\\texports.textPrimitives.anyLetter + \\\"*\\\";\\n\\nexports.htmlEntities = {quot:34, amp:38, apos:39, lt:60, gt:62, nbsp:160, iexcl:161, cent:162, pound:163, curren:164, yen:165, brvbar:166, sect:167, uml:168, copy:169, ordf:170, laquo:171, not:172, shy:173, reg:174, macr:175, deg:176, plusmn:177, sup2:178, sup3:179, acute:180, micro:181, para:182, middot:183, cedil:184, sup1:185, ordm:186, raquo:187, frac14:188, frac12:189, frac34:190, iquest:191, Agrave:192, Aacute:193, Acirc:194, Atilde:195, Auml:196, Aring:197, AElig:198, Ccedil:199, Egrave:200, Eacute:201, Ecirc:202, Euml:203, Igrave:204, Iacute:205, Icirc:206, Iuml:207, ETH:208, Ntilde:209, Ograve:210, Oacute:211, Ocirc:212, Otilde:213, Ouml:214, times:215, Oslash:216, Ugrave:217, Uacute:218, Ucirc:219, Uuml:220, Yacute:221, THORN:222, szlig:223, agrave:224, aacute:225, acirc:226, atilde:227, auml:228, aring:229, aelig:230, ccedil:231, egrave:232, eacute:233, ecirc:234, euml:235, igrave:236, iacute:237, icirc:238, iuml:239, eth:240, ntilde:241, ograve:242, oacute:243, ocirc:244, otilde:245, ouml:246, divide:247, oslash:248, ugrave:249, uacute:250, ucirc:251, uuml:252, yacute:253, thorn:254, yuml:255, OElig:338, oelig:339, Scaron:352, scaron:353, Yuml:376, fnof:402, circ:710, tilde:732, Alpha:913, Beta:914, Gamma:915, Delta:916, Epsilon:917, Zeta:918, Eta:919, Theta:920, Iota:921, Kappa:922, Lambda:923, Mu:924, Nu:925, Xi:926, Omicron:927, Pi:928, Rho:929, Sigma:931, Tau:932, Upsilon:933, Phi:934, Chi:935, Psi:936, Omega:937, alpha:945, beta:946, gamma:947, delta:948, epsilon:949, zeta:950, eta:951, theta:952, iota:953, kappa:954, lambda:955, mu:956, nu:957, xi:958, omicron:959, pi:960, rho:961, sigmaf:962, sigma:963, tau:964, upsilon:965, phi:966, chi:967, psi:968, omega:969, thetasym:977, upsih:978, piv:982, ensp:8194, emsp:8195, thinsp:8201, zwnj:8204, zwj:8205, lrm:8206, rlm:8207, ndash:8211, mdash:8212, lsquo:8216, rsquo:8217, sbquo:8218, ldquo:8220, rdquo:8221, bdquo:8222, dagger:8224, Dagger:8225, bull:8226, hellip:8230, permil:8240, prime:8242, Prime:8243, lsaquo:8249, rsaquo:8250, oline:8254, frasl:8260, euro:8364, image:8465, weierp:8472, real:8476, trade:8482, alefsym:8501, larr:8592, uarr:8593, rarr:8594, darr:8595, harr:8596, crarr:8629, lArr:8656, uArr:8657, rArr:8658, dArr:8659, hArr:8660, forall:8704, part:8706, exist:8707, empty:8709, nabla:8711, isin:8712, notin:8713, ni:8715, prod:8719, sum:8721, minus:8722, lowast:8727, radic:8730, prop:8733, infin:8734, ang:8736, and:8743, or:8744, cap:8745, cup:8746, int:8747, there4:8756, sim:8764, cong:8773, asymp:8776, ne:8800, equiv:8801, le:8804, ge:8805, sub:8834, sup:8835, nsub:8836, sube:8838, supe:8839, oplus:8853, otimes:8855, perp:8869, sdot:8901, lceil:8968, rceil:8969, lfloor:8970, rfloor:8971, lang:9001, rang:9002, loz:9674, spades:9824, clubs:9827, hearts:9829, diams:9830 };\\n\\nexports.htmlVoidElements = \\\"area,base,br,col,command,embed,hr,img,input,keygen,link,meta,param,source,track,wbr\\\".split(\\\",\\\");\\n\\nexports.htmlBlockElements = \\\"address,article,aside,audio,blockquote,canvas,dd,details,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,li,nav,ol,p,pre,section,summary,table,tfoot,ul,video\\\".split(\\\",\\\");\\n\\nexports.htmlUnsafeElements = \\\"script\\\".split(\\\",\\\");\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"config\"},\"$:/core/modules/deserializers.js\":{\"title\":\"$:/core/modules/deserializers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/deserializers.js\\ntype: application/javascript\\nmodule-type: tiddlerdeserializer\\n\\nFunctions to deserialise tiddlers from a block of text\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"application/x-tiddler-html-div\\\"] = function(text,fields) {\\n\\treturn [deserializeTiddlerDiv(text,fields)];\\n};\\n\\nexports[\\\"application/json\\\"] = function(text,fields) {\\n\\tvar results = [],\\n\\t\\tincoming = $tw.utils.parseJSONSafe(text,function(err) {\\n\\t\\t\\treturn [{\\n\\t\\t\\t\\ttitle: \\\"JSON error: \\\" + err,\\n\\t\\t\\t\\ttext: \\\"\\\"\\n\\t\\t\\t}];\\n\\t\\t});\\n\\tif(!$tw.utils.isArray(incoming)) {\\n\\t\\tincoming = [incoming];\\n\\t}\\n\\tfor(var t=0; t\u003Cincoming.length; t++) {\\n\\t\\tvar incomingFields = incoming[t],\\n\\t\\t\\tfields = {};\\n\\t\\tfor(var f in incomingFields) {\\n\\t\\t\\tif(typeof incomingFields[f] === \\\"string\\\") {\\n\\t\\t\\t\\tfields[f] = incomingFields[f];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tresults.push(fields);\\n\\t}\\n\\treturn results;\\n};\\n\\n/*\\nParse an HTML file into tiddlers. There are three possibilities:\\n# A TiddlyWiki classic HTML file containing `text/x-tiddlywiki` tiddlers\\n# A TiddlyWiki5 HTML file containing `text/vnd.tiddlywiki` tiddlers\\n# An ordinary HTML file\\n*/\\nexports[\\\"text/html\\\"] = function(text,fields) {\\n\\tvar results = [];\\n\\t// Check if we've got an old-style store area\\n\\tvar storeAreaMarkerRegExp = /\u003Cdiv id=[\\\"']?storeArea['\\\"]?( style=[\\\"']?display:none;[\\\"']?)?>/gi,\\n\\t\\tstoreAreaMatch = storeAreaMarkerRegExp.exec(text);\\n\\tif(storeAreaMatch) {\\n\\t\\t// If so, we've got tiddlers in classic TiddlyWiki format or unencrypted old-style TW5 format\\n\\t\\tresults.push.apply(results,deserializeStoreArea(text,storeAreaMarkerRegExp.lastIndex,!!storeAreaMatch[1],fields));\\n\\t}\\n\\t// Check for new-style store areas\\n\\tvar newStoreAreaMarkerRegExp = /\u003Cscript class=\\\"tiddlywiki-tiddler-store\\\" type=\\\"([^\\\"]*)\\\">/gi,\\n\\t\\tnewStoreAreaMatch = newStoreAreaMarkerRegExp.exec(text),\\n\\t\\thaveHadNewStoreArea = !!newStoreAreaMatch;\\n\\twhile(newStoreAreaMatch) {\\n\\t\\tresults.push.apply(results,deserializeNewStoreArea(text,newStoreAreaMarkerRegExp.lastIndex,newStoreAreaMatch[1],fields));\\n\\t\\tnewStoreAreaMatch = newStoreAreaMarkerRegExp.exec(text);\\n\\t}\\n\\t// Return if we had either an old-style or a new-style store area\\n\\tif(storeAreaMatch || haveHadNewStoreArea) {\\n\\t\\treturn results;\\n\\t}\\n\\t// Otherwise, check whether we've got an encrypted file\\n\\tvar encryptedStoreArea = $tw.utils.extractEncryptedStoreArea(text);\\n\\tif(encryptedStoreArea) {\\n\\t\\t// If so, attempt to decrypt it using the current password\\n\\t\\treturn $tw.utils.decryptStoreArea(encryptedStoreArea);\\n\\t} else {\\n\\t\\t// It's not a TiddlyWiki so we'll return the entire HTML file as a tiddler\\n\\t\\treturn deserializeHtmlFile(text,fields);\\n\\t}\\n};\\n\\nfunction deserializeHtmlFile(text,fields) {\\n\\tvar result = {};\\n\\t$tw.utils.each(fields,function(value,name) {\\n\\t\\tresult[name] = value;\\n\\t});\\n\\tresult.text = text;\\n\\tresult.type = \\\"text/html\\\";\\n\\treturn [result];\\n}\\n\\nfunction deserializeNewStoreArea(text,storeAreaEnd,type,fields) {\\n\\tvar endOfScriptRegExp = /\u003C\\\\/script>/gi;\\n\\tendOfScriptRegExp.lastIndex = storeAreaEnd;\\n\\tvar match = endOfScriptRegExp.exec(text);\\n\\tif(match) {\\n\\t\\tvar scriptContent = text.substring(storeAreaEnd,match.index);\\n\\t\\treturn $tw.wiki.deserializeTiddlers(type,scriptContent);\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n}\\n\\nfunction deserializeStoreArea(text,storeAreaEnd,isTiddlyWiki5,fields) {\\n\\tvar results = [],\\n\\t\\tendOfDivRegExp = /(\u003C\\\\/div>\\\\s*)/gi,\\n\\t\\tstartPos = storeAreaEnd,\\n\\t\\tdefaultType = isTiddlyWiki5 ? undefined : \\\"text/x-tiddlywiki\\\";\\n\\tendOfDivRegExp.lastIndex = startPos;\\n\\tvar match = endOfDivRegExp.exec(text);\\n\\twhile(match) {\\n\\t\\tvar endPos = endOfDivRegExp.lastIndex,\\n\\t\\t\\ttiddlerFields = deserializeTiddlerDiv(text.substring(startPos,endPos),fields,{type: defaultType});\\n\\t\\tif(!tiddlerFields) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t$tw.utils.each(tiddlerFields,function(value,name) {\\n\\t\\t\\tif(typeof value === \\\"string\\\") {\\n\\t\\t\\t\\ttiddlerFields[name] = $tw.utils.htmlDecode(value);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tif(tiddlerFields.text !== null) {\\n\\t\\t\\tresults.push(tiddlerFields);\\n\\t\\t}\\n\\t\\tstartPos = endPos;\\n\\t\\tmatch = endOfDivRegExp.exec(text);\\n\\t}\\n\\treturn results;\\n}\\n\\n/*\\nUtility function to parse an old-style tiddler DIV in a *.tid file. It looks like this:\\n\\n\u003Cdiv title=\\\"Title\\\" creator=\\\"JoeBloggs\\\" modifier=\\\"JoeBloggs\\\" created=\\\"201102111106\\\" modified=\\\"201102111310\\\" tags=\\\"myTag [[my long tag]]\\\">\\n\u003Cpre>The text of the tiddler (without the expected HTML encoding).\\n\u003C/pre>\\n\u003C/div>\\n\\nNote that the field attributes are HTML encoded, but that the body of the \u003CPRE> tag is not encoded.\\n\\nWhen these tiddler DIVs are encountered within a TiddlyWiki HTML file then the body is encoded in the usual way.\\n*/\\nvar deserializeTiddlerDiv = function(text /* [,fields] */) {\\n\\t// Slot together the default results\\n\\tvar result = {};\\n\\tif(arguments.length > 1) {\\n\\t\\tfor(var f=1; f\u003Carguments.length; f++) {\\n\\t\\t\\tvar fields = arguments[f];\\n\\t\\t\\tfor(var t in fields) {\\n\\t\\t\\t\\tresult[t] = fields[t];\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Parse the DIV body\\n\\tvar startRegExp = /^\\\\s*\u003Cdiv\\\\s+([^>]*)>(\\\\s*\u003Cpre>)?/gi,\\n\\t\\tendRegExp,\\n\\t\\tmatch = startRegExp.exec(text);\\n\\tif(match) {\\n\\t\\t// Old-style DIVs don't have the \u003Cpre> tag\\n\\t\\tif(match[2]) {\\n\\t\\t\\tendRegExp = /\u003C\\\\/pre>\\\\s*\u003C\\\\/div>\\\\s*$/gi;\\n\\t\\t} else {\\n\\t\\t\\tendRegExp = /\u003C\\\\/div>\\\\s*$/gi;\\n\\t\\t}\\n\\t\\tvar endMatch = endRegExp.exec(text);\\n\\t\\tif(endMatch) {\\n\\t\\t\\t// Extract the text\\n\\t\\t\\tresult.text = text.substring(match.index + match[0].length,endMatch.index);\\n\\t\\t\\t// Process the attributes\\n\\t\\t\\tvar attrRegExp = /\\\\s*([^=\\\\s]+)\\\\s*=\\\\s*(?:\\\"([^\\\"]*)\\\"|'([^']*)')/gi,\\n\\t\\t\\t\\tattrMatch;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tattrMatch = attrRegExp.exec(match[1]);\\n\\t\\t\\t\\tif(attrMatch) {\\n\\t\\t\\t\\t\\tvar name = attrMatch[1];\\n\\t\\t\\t\\t\\tvar value = attrMatch[2] !== undefined ? attrMatch[2] : attrMatch[3];\\n\\t\\t\\t\\t\\tresult[name] = value;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} while(attrMatch);\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\treturn undefined;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"tiddlerdeserializer\"},\"$:/core/modules/editor/engines/framed.js\":{\"title\":\"$:/core/modules/editor/engines/framed.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/engines/framed.js\\ntype: application/javascript\\nmodule-type: library\\n\\nText editor engine based on a simple input or textarea within an iframe. This is done so that the selection is preserved even when clicking away from the textarea\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true,browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar HEIGHT_VALUE_TITLE = \\\"$:/config/TextEditor/EditorHeight/Height\\\";\\n\\nfunction FramedEngine(options) {\\n\\t// Save our options\\n\\toptions = options || {};\\n\\tthis.widget = options.widget;\\n\\tthis.value = options.value;\\n\\tthis.parentNode = options.parentNode;\\n\\tthis.nextSibling = options.nextSibling;\\n\\t// Create our hidden dummy text area for reading styles\\n\\tthis.dummyTextArea = this.widget.document.createElement(\\\"textarea\\\");\\n\\tif(this.widget.editClass) {\\n\\t\\tthis.dummyTextArea.className = this.widget.editClass;\\n\\t}\\n\\tthis.dummyTextArea.setAttribute(\\\"hidden\\\",\\\"true\\\");\\n\\tthis.parentNode.insertBefore(this.dummyTextArea,this.nextSibling);\\n\\tthis.widget.domNodes.push(this.dummyTextArea);\\n\\t// Create the iframe\\n\\tthis.iframeNode = this.widget.document.createElement(\\\"iframe\\\");\\n\\tthis.parentNode.insertBefore(this.iframeNode,this.nextSibling);\\n\\tthis.iframeDoc = this.iframeNode.contentWindow.document;\\n\\t// (Firefox requires us to put some empty content in the iframe)\\n\\tthis.iframeDoc.open();\\n\\tthis.iframeDoc.write(\\\"\\\");\\n\\tthis.iframeDoc.close();\\n\\t// Style the iframe\\n\\tthis.iframeNode.className = this.dummyTextArea.className;\\n\\tthis.iframeNode.style.border = \\\"none\\\";\\n\\tthis.iframeNode.style.padding = \\\"0\\\";\\n\\tthis.iframeNode.style.resize = \\\"none\\\";\\n\\tthis.iframeDoc.body.style.margin = \\\"0\\\";\\n\\tthis.iframeDoc.body.style.padding = \\\"0\\\";\\n\\tthis.widget.domNodes.push(this.iframeNode);\\n\\t// Construct the textarea or input node\\n\\tvar tag = this.widget.editTag;\\n\\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n\\t\\ttag = \\\"input\\\";\\n\\t}\\n\\tthis.domNode = this.iframeDoc.createElement(tag);\\n\\t// Set the text\\n\\tif(this.widget.editTag === \\\"textarea\\\") {\\n\\t\\tthis.domNode.appendChild(this.iframeDoc.createTextNode(this.value));\\n\\t} else {\\n\\t\\tthis.domNode.value = this.value;\\n\\t}\\n\\t// Set the attributes\\n\\tif(this.widget.editType) {\\n\\t\\tthis.domNode.setAttribute(\\\"type\\\",this.widget.editType);\\n\\t}\\n\\tif(this.widget.editPlaceholder) {\\n\\t\\tthis.domNode.setAttribute(\\\"placeholder\\\",this.widget.editPlaceholder);\\n\\t}\\n\\tif(this.widget.editSize) {\\n\\t\\tthis.domNode.setAttribute(\\\"size\\\",this.widget.editSize);\\n\\t}\\n\\tif(this.widget.editRows) {\\n\\t\\tthis.domNode.setAttribute(\\\"rows\\\",this.widget.editRows);\\n\\t}\\n\\tif(this.widget.editTabIndex) {\\n\\t\\tthis.iframeNode.setAttribute(\\\"tabindex\\\",this.widget.editTabIndex);\\n\\t}\\n\\tif(this.widget.editAutoComplete) {\\n\\t\\tthis.domNode.setAttribute(\\\"autocomplete\\\",this.widget.editAutoComplete);\\n\\t}\\n\\tif(this.widget.isDisabled === \\\"yes\\\") {\\n\\t\\tthis.domNode.setAttribute(\\\"disabled\\\",true);\\n\\t}\\n\\t// Copy the styles from the dummy textarea\\n\\tthis.copyStyles();\\n\\t// Add event listeners\\n\\t$tw.utils.addEventListeners(this.domNode,[\\n\\t\\t{name: \\\"click\\\",handlerObject: this,handlerMethod: \\\"handleClickEvent\\\"},\\n\\t\\t{name: \\\"input\\\",handlerObject: this,handlerMethod: \\\"handleInputEvent\\\"},\\n\\t\\t{name: \\\"keydown\\\",handlerObject: this.widget,handlerMethod: \\\"handleKeydownEvent\\\"},\\n\\t\\t{name: \\\"focus\\\",handlerObject: this,handlerMethod: \\\"handleFocusEvent\\\"}\\n\\t]);\\n\\t// Add drag and drop event listeners if fileDrop is enabled\\n\\tif(this.widget.isFileDropEnabled) {\\n\\t\\t$tw.utils.addEventListeners(this.domNode,[\\n\\t\\t\\t{name: \\\"dragenter\\\",handlerObject: this.widget,handlerMethod: \\\"handleDragEnterEvent\\\"},\\n\\t\\t\\t{name: \\\"dragover\\\",handlerObject: this.widget,handlerMethod: \\\"handleDragOverEvent\\\"},\\n\\t\\t\\t{name: \\\"dragleave\\\",handlerObject: this.widget,handlerMethod: \\\"handleDragLeaveEvent\\\"},\\n\\t\\t\\t{name: \\\"dragend\\\",handlerObject: this.widget,handlerMethod: \\\"handleDragEndEvent\\\"},\\n\\t\\t\\t{name: \\\"drop\\\", handlerObject: this.widget,handlerMethod: \\\"handleDropEvent\\\"},\\n\\t\\t\\t{name: \\\"paste\\\", handlerObject: this.widget,handlerMethod: \\\"handlePasteEvent\\\"},\\n\\t\\t\\t{name: \\\"click\\\",handlerObject: this.widget,handlerMethod: \\\"handleClickEvent\\\"}\\n\\t\\t]);\\n\\t}\\n\\t// Insert the element into the DOM\\n\\tthis.iframeDoc.body.appendChild(this.domNode);\\n}\\n\\n/*\\nCopy styles from the dummy text area to the textarea in the iframe\\n*/\\nFramedEngine.prototype.copyStyles = function() {\\n\\t// Copy all styles\\n\\t$tw.utils.copyStyles(this.dummyTextArea,this.domNode);\\n\\t// Override the ones that should not be set the same as the dummy textarea\\n\\tthis.domNode.style.display = \\\"block\\\";\\n\\tthis.domNode.style.width = \\\"100%\\\";\\n\\tthis.domNode.style.margin = \\\"0\\\";\\n\\t// In Chrome setting -webkit-text-fill-color overrides the placeholder text colour\\n\\tthis.domNode.style[\\\"-webkit-text-fill-color\\\"] = \\\"currentcolor\\\";\\n};\\n\\n/*\\nSet the text of the engine if it doesn't currently have focus\\n*/\\nFramedEngine.prototype.setText = function(text,type) {\\n\\tif(!this.domNode.isTiddlyWikiFakeDom) {\\n\\t\\tif(this.domNode.ownerDocument.activeElement !== this.domNode) {\\n\\t\\t\\tthis.updateDomNodeText(text);\\n\\t\\t}\\n\\t\\t// Fix the height if needed\\n\\t\\tthis.fixHeight();\\n\\t}\\n};\\n\\n/*\\nUpdate the DomNode with the new text\\n*/\\nFramedEngine.prototype.updateDomNodeText = function(text) {\\n\\ttry {\\n\\t\\tthis.domNode.value = text;\\n\\t} catch(e) {\\n\\t\\t// Ignore\\n\\t}\\n};\\n\\n/*\\nGet the text of the engine\\n*/\\nFramedEngine.prototype.getText = function() {\\n\\treturn this.domNode.value;\\n};\\n\\n/*\\nFix the height of textarea to fit content\\n*/\\nFramedEngine.prototype.fixHeight = function() {\\n\\t// Make sure styles are updated\\n\\tthis.copyStyles();\\n\\t// Adjust height\\n\\tif(this.widget.editTag === \\\"textarea\\\") {\\n\\t\\tif(this.widget.editAutoHeight) {\\n\\t\\t\\tif(this.domNode && !this.domNode.isTiddlyWikiFakeDom) {\\n\\t\\t\\t\\tvar newHeight = $tw.utils.resizeTextAreaToFit(this.domNode,this.widget.editMinHeight);\\n\\t\\t\\t\\tthis.iframeNode.style.height = (newHeight + 14) + \\\"px\\\"; // +14 for the border on the textarea\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tvar fixedHeight = parseInt(this.widget.wiki.getTiddlerText(HEIGHT_VALUE_TITLE,\\\"400px\\\"),10);\\n\\t\\t\\tfixedHeight = Math.max(fixedHeight,20);\\n\\t\\t\\tthis.domNode.style.height = fixedHeight + \\\"px\\\";\\n\\t\\t\\tthis.iframeNode.style.height = (fixedHeight + 14) + \\\"px\\\";\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nFocus the engine node\\n*/\\nFramedEngine.prototype.focus  = function() {\\n\\tif(this.domNode.focus && this.domNode.select) {\\n\\t\\tthis.domNode.focus();\\n\\t\\tthis.domNode.select();\\n\\t}\\n};\\n\\n/*\\nHandle a focus event\\n*/\\nFramedEngine.prototype.handleFocusEvent = function(event) {\\n\\tif(this.widget.editCancelPopups) {\\n\\t\\t$tw.popup.cancel(0);\\n\\t}\\n};\\n\\n/*\\nHandle a click\\n*/\\nFramedEngine.prototype.handleClickEvent = function(event) {\\n\\tthis.fixHeight();\\n\\treturn true;\\n};\\n\\n/*\\nHandle a dom \\\"input\\\" event which occurs when the text has changed\\n*/\\nFramedEngine.prototype.handleInputEvent = function(event) {\\n\\tthis.widget.saveChanges(this.getText());\\n\\tthis.fixHeight();\\n\\tif(this.widget.editInputActions) {\\n\\t\\tthis.widget.invokeActionString(this.widget.editInputActions,this,event,{actionValue: this.getText()});\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nCreate a blank structure representing a text operation\\n*/\\nFramedEngine.prototype.createTextOperation = function() {\\n\\tvar operation = {\\n\\t\\ttext: this.domNode.value,\\n\\t\\tselStart: this.domNode.selectionStart,\\n\\t\\tselEnd: this.domNode.selectionEnd,\\n\\t\\tcutStart: null,\\n\\t\\tcutEnd: null,\\n\\t\\treplacement: null,\\n\\t\\tnewSelStart: null,\\n\\t\\tnewSelEnd: null\\n\\t};\\n\\toperation.selection = operation.text.substring(operation.selStart,operation.selEnd);\\n\\treturn operation;\\n};\\n\\n/*\\nExecute a text operation\\n*/\\nFramedEngine.prototype.executeTextOperation = function(operation) {\\n\\t// Perform the required changes to the text area and the underlying tiddler\\n\\tvar newText = operation.text;\\n\\tif(operation.replacement !== null) {\\n\\t\\tnewText = operation.text.substring(0,operation.cutStart) + operation.replacement + operation.text.substring(operation.cutEnd);\\n\\t\\t// Attempt to use a execCommand to modify the value of the control\\n\\t\\tif(this.iframeDoc.queryCommandSupported(\\\"insertText\\\") && this.iframeDoc.queryCommandSupported(\\\"delete\\\") && !$tw.browser.isFirefox) {\\n\\t\\t\\tthis.domNode.focus();\\n\\t\\t\\tthis.domNode.setSelectionRange(operation.cutStart,operation.cutEnd);\\n\\t\\t\\tif(operation.replacement === \\\"\\\") {\\n\\t\\t\\t\\tthis.iframeDoc.execCommand(\\\"delete\\\",false,\\\"\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.iframeDoc.execCommand(\\\"insertText\\\",false,operation.replacement);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis.domNode.value = newText;\\n\\t\\t}\\n\\t\\tthis.domNode.focus();\\n\\t\\tthis.domNode.setSelectionRange(operation.newSelStart,operation.newSelEnd);\\n\\t}\\n\\tthis.domNode.focus();\\n\\treturn newText;\\n};\\n\\nexports.FramedEngine = FramedEngine;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/core/modules/editor/engines/simple.js\":{\"title\":\"$:/core/modules/editor/engines/simple.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/engines/simple.js\\ntype: application/javascript\\nmodule-type: library\\n\\nText editor engine based on a simple input or textarea tag\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar HEIGHT_VALUE_TITLE = \\\"$:/config/TextEditor/EditorHeight/Height\\\";\\n\\nfunction SimpleEngine(options) {\\n\\t// Save our options\\n\\toptions = options || {};\\n\\tthis.widget = options.widget;\\n\\tthis.value = options.value;\\n\\tthis.parentNode = options.parentNode;\\n\\tthis.nextSibling = options.nextSibling;\\n\\t// Construct the textarea or input node\\n\\tvar tag = this.widget.editTag;\\n\\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n\\t\\ttag = \\\"input\\\";\\n\\t}\\n\\tthis.domNode = this.widget.document.createElement(tag);\\n\\t// Set the text\\n\\tif(this.widget.editTag === \\\"textarea\\\") {\\n\\t\\tthis.domNode.appendChild(this.widget.document.createTextNode(this.value));\\n\\t} else {\\n\\t\\tthis.domNode.value = this.value;\\n\\t}\\n\\t// Set the attributes\\n\\tif(this.widget.editType) {\\n\\t\\tthis.domNode.setAttribute(\\\"type\\\",this.widget.editType);\\n\\t}\\n\\tif(this.widget.editPlaceholder) {\\n\\t\\tthis.domNode.setAttribute(\\\"placeholder\\\",this.widget.editPlaceholder);\\n\\t}\\n\\tif(this.widget.editSize) {\\n\\t\\tthis.domNode.setAttribute(\\\"size\\\",this.widget.editSize);\\n\\t}\\n\\tif(this.widget.editRows) {\\n\\t\\tthis.domNode.setAttribute(\\\"rows\\\",this.widget.editRows);\\n\\t}\\n\\tif(this.widget.editClass) {\\n\\t\\tthis.domNode.className = this.widget.editClass;\\n\\t}\\n\\tif(this.widget.editTabIndex) {\\n\\t\\tthis.domNode.setAttribute(\\\"tabindex\\\",this.widget.editTabIndex);\\n\\t}\\n\\tif(this.widget.editAutoComplete) {\\n\\t\\tthis.domNode.setAttribute(\\\"autocomplete\\\",this.widget.editAutoComplete);\\n\\t}\\n\\tif(this.widget.isDisabled === \\\"yes\\\") {\\n\\t\\tthis.domNode.setAttribute(\\\"disabled\\\",true);\\n\\t}\\n\\t// Add an input event handler\\n\\t$tw.utils.addEventListeners(this.domNode,[\\n\\t\\t{name: \\\"focus\\\", handlerObject: this, handlerMethod: \\\"handleFocusEvent\\\"},\\n\\t\\t{name: \\\"input\\\", handlerObject: this, handlerMethod: \\\"handleInputEvent\\\"}\\n\\t]);\\n\\t// Insert the element into the DOM\\n\\tthis.parentNode.insertBefore(this.domNode,this.nextSibling);\\n\\tthis.widget.domNodes.push(this.domNode);\\n}\\n\\n/*\\nSet the text of the engine if it doesn't currently have focus\\n*/\\nSimpleEngine.prototype.setText = function(text,type) {\\n\\tif(!this.domNode.isTiddlyWikiFakeDom) {\\n\\t\\tif(this.domNode.ownerDocument.activeElement !== this.domNode || text === \\\"\\\") {\\n\\t\\t\\tthis.updateDomNodeText(text);\\n\\t\\t}\\n\\t\\t// Fix the height if needed\\n\\t\\tthis.fixHeight();\\n\\t}\\n};\\n\\n/*\\nUpdate the DomNode with the new text\\n*/\\nSimpleEngine.prototype.updateDomNodeText = function(text) {\\n\\ttry {\\n\\t\\tthis.domNode.value = text;\\n\\t} catch(e) {\\n\\t\\t// Ignore\\n\\t}\\n};\\n\\n/*\\nGet the text of the engine\\n*/\\nSimpleEngine.prototype.getText = function() {\\n\\treturn this.domNode.value;\\n};\\n\\n/*\\nFix the height of textarea to fit content\\n*/\\nSimpleEngine.prototype.fixHeight = function() {\\n\\tif(this.widget.editTag === \\\"textarea\\\") {\\n\\t\\tif(this.widget.editAutoHeight) {\\n\\t\\t\\tif(this.domNode && !this.domNode.isTiddlyWikiFakeDom) {\\n\\t\\t\\t\\t$tw.utils.resizeTextAreaToFit(this.domNode,this.widget.editMinHeight);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tvar fixedHeight = parseInt(this.widget.wiki.getTiddlerText(HEIGHT_VALUE_TITLE,\\\"400px\\\"),10);\\n\\t\\t\\tfixedHeight = Math.max(fixedHeight,20);\\n\\t\\t\\tthis.domNode.style.height = fixedHeight + \\\"px\\\";\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nFocus the engine node\\n*/\\nSimpleEngine.prototype.focus  = function() {\\n\\tif(this.domNode.focus && this.domNode.select) {\\n\\t\\tthis.domNode.focus();\\n\\t\\tthis.domNode.select();\\n\\t}\\n};\\n\\n/*\\nHandle a dom \\\"input\\\" event which occurs when the text has changed\\n*/\\nSimpleEngine.prototype.handleInputEvent = function(event) {\\n\\tthis.widget.saveChanges(this.getText());\\n\\tthis.fixHeight();\\n\\tif(this.widget.editInputActions) {\\n\\t\\tthis.widget.invokeActionString(this.widget.editInputActions,this,event,{actionValue: this.getText()});\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nHandle a dom \\\"focus\\\" event\\n*/\\nSimpleEngine.prototype.handleFocusEvent = function(event) {\\n\\tif(this.widget.editCancelPopups) {\\n\\t\\t$tw.popup.cancel(0);\\n\\t}\\n\\tif(this.widget.editFocusPopup) {\\n\\t\\t$tw.popup.triggerPopup({\\n\\t\\t\\tdomNode: this.domNode,\\n\\t\\t\\ttitle: this.widget.editFocusPopup,\\n\\t\\t\\twiki: this.widget.wiki,\\n\\t\\t\\tforce: true\\n\\t\\t});\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nCreate a blank structure representing a text operation\\n*/\\nSimpleEngine.prototype.createTextOperation = function() {\\n\\treturn null;\\n};\\n\\n/*\\nExecute a text operation\\n*/\\nSimpleEngine.prototype.executeTextOperation = function(operation) {\\n};\\n\\nexports.SimpleEngine = SimpleEngine;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/core/modules/editor/factory.js\":{\"title\":\"$:/core/modules/editor/factory.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/factory.js\\ntype: application/javascript\\nmodule-type: library\\n\\nFactory for constructing text editor widgets with specified engines for the toolbar and non-toolbar cases\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar DEFAULT_MIN_TEXT_AREA_HEIGHT = \\\"100px\\\"; // Minimum height of textareas in pixels\\n\\n// Configuration tiddlers\\nvar HEIGHT_MODE_TITLE = \\\"$:/config/TextEditor/EditorHeight/Mode\\\";\\nvar ENABLE_TOOLBAR_TITLE = \\\"$:/config/TextEditor/EnableToolbar\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nfunction editTextWidgetFactory(toolbarEngine,nonToolbarEngine) {\\n\\n\\tvar EditTextWidget = function(parseTreeNode,options) {\\n\\t\\t// Initialise the editor operations if they've not been done already\\n\\t\\tif(!this.editorOperations) {\\n\\t\\t\\tEditTextWidget.prototype.editorOperations = {};\\n\\t\\t\\t$tw.modules.applyMethods(\\\"texteditoroperation\\\",this.editorOperations);\\n\\t\\t}\\n\\t\\tthis.initialise(parseTreeNode,options);\\n\\t};\\n\\n\\t/*\\n\\tInherit from the base widget class\\n\\t*/\\n\\tEditTextWidget.prototype = new Widget();\\n\\n\\t/*\\n\\tRender this widget into the DOM\\n\\t*/\\n\\tEditTextWidget.prototype.render = function(parent,nextSibling) {\\n\\t\\t// Save the parent dom node\\n\\t\\tthis.parentDomNode = parent;\\n\\t\\t// Compute our attributes\\n\\t\\tthis.computeAttributes();\\n\\t\\t// Execute our logic\\n\\t\\tthis.execute();\\n\\t\\t// Create the wrapper for the toolbar and render its content\\n\\t\\tif(this.editShowToolbar) {\\n\\t\\t\\tthis.toolbarNode = this.document.createElement(\\\"div\\\");\\n\\t\\t\\tthis.toolbarNode.className = \\\"tc-editor-toolbar\\\";\\n\\t\\t\\tparent.insertBefore(this.toolbarNode,nextSibling);\\n\\t\\t\\tthis.renderChildren(this.toolbarNode,null);\\n\\t\\t\\tthis.domNodes.push(this.toolbarNode);\\n\\t\\t}\\n\\t\\t// Create our element\\n\\t\\tvar editInfo = this.getEditInfo(),\\n\\t\\t\\tEngine = this.editShowToolbar ? toolbarEngine : nonToolbarEngine;\\n\\t\\tthis.engine = new Engine({\\n\\t\\t\\t\\twidget: this,\\n\\t\\t\\t\\tvalue: editInfo.value,\\n\\t\\t\\t\\ttype: editInfo.type,\\n\\t\\t\\t\\tparentNode: parent,\\n\\t\\t\\t\\tnextSibling: nextSibling\\n\\t\\t\\t});\\n\\t\\t// Call the postRender hook\\n\\t\\tif(this.postRender) {\\n\\t\\t\\tthis.postRender();\\n\\t\\t}\\n\\t\\t// Fix height\\n\\t\\tthis.engine.fixHeight();\\n\\t\\t// Focus if required\\n\\t\\tif(this.editFocus === \\\"true\\\" || this.editFocus === \\\"yes\\\") {\\n\\t\\t\\tthis.engine.focus();\\n\\t\\t}\\n\\t\\t// Add widget message listeners\\n\\t\\tthis.addEventListeners([\\n\\t\\t\\t{type: \\\"tm-edit-text-operation\\\", handler: \\\"handleEditTextOperationMessage\\\"}\\n\\t\\t]);\\n\\t};\\n\\n\\t/*\\n\\tGet the tiddler being edited and current value\\n\\t*/\\n\\tEditTextWidget.prototype.getEditInfo = function() {\\n\\t\\t// Get the edit value\\n\\t\\tvar self = this,\\n\\t\\t\\tvalue,\\n\\t\\t\\ttype = \\\"text/plain\\\",\\n\\t\\t\\tupdate;\\n\\t\\tif(this.editIndex) {\\n\\t\\t\\tvalue = this.wiki.extractTiddlerDataItem(this.editTitle,this.editIndex,this.editDefault);\\n\\t\\t\\tupdate = function(value) {\\n\\t\\t\\t\\tvar data = self.wiki.getTiddlerData(self.editTitle,{});\\n\\t\\t\\t\\tif(data[self.editIndex] !== value) {\\n\\t\\t\\t\\t\\tdata[self.editIndex] = value;\\n\\t\\t\\t\\t\\tself.wiki.setTiddlerData(self.editTitle,data);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t} else {\\n\\t\\t\\t// Get the current tiddler and the field name\\n\\t\\t\\tvar tiddler = this.wiki.getTiddler(this.editTitle);\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t// If we've got a tiddler, the value to display is the field string value\\n\\t\\t\\t\\tif(tiddler.hasField(this.editField)) {\\n\\t\\t\\t\\t\\tvalue = tiddler.getFieldString(this.editField);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tvalue = this.editDefault || \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(this.editField === \\\"text\\\") {\\n\\t\\t\\t\\t\\ttype = tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Otherwise, we need to construct a default value for the editor\\n\\t\\t\\t\\tswitch(this.editField) {\\n\\t\\t\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\t\\t\\tvalue = \\\"Type the text for the tiddler '\\\" + this.editTitle + \\\"'\\\";\\n\\t\\t\\t\\t\\t\\ttype = \\\"text/vnd.tiddlywiki\\\";\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase \\\"title\\\":\\n\\t\\t\\t\\t\\t\\tvalue = this.editTitle;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tvalue = \\\"\\\";\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(this.editDefault !== undefined) {\\n\\t\\t\\t\\t\\tvalue = this.editDefault;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tupdate = function(value) {\\n\\t\\t\\t\\tvar tiddler = self.wiki.getTiddler(self.editTitle),\\n\\t\\t\\t\\t\\tupdateFields = {\\n\\t\\t\\t\\t\\t\\ttitle: self.editTitle\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\tupdateFields[self.editField] = value;\\n\\t\\t\\t\\tself.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),tiddler,updateFields,self.wiki.getModificationFields()));\\n\\t\\t\\t};\\n\\t\\t}\\n\\t\\tif(this.editType) {\\n\\t\\t\\ttype = this.editType;\\n\\t\\t}\\n\\t\\treturn {value: value || \\\"\\\", type: type, update: update};\\n\\t};\\n\\n\\t/*\\n\\tHandle an edit text operation message from the toolbar\\n\\t*/\\n\\tEditTextWidget.prototype.handleEditTextOperationMessage = function(event) {\\n\\t\\t// Prepare information about the operation\\n\\t\\tvar operation = this.engine.createTextOperation();\\n\\t\\t// Invoke the handler for the selected operation\\n\\t\\tvar handler = this.editorOperations[event.param];\\n\\t\\tif(handler) {\\n\\t\\t\\thandler.call(this,event,operation);\\n\\t\\t}\\n\\t\\t// Execute the operation via the engine\\n\\t\\tvar newText = this.engine.executeTextOperation(operation);\\n\\t\\t// Fix the tiddler height and save changes\\n\\t\\tthis.engine.fixHeight();\\n\\t\\tthis.saveChanges(newText);\\n\\t};\\n\\n\\t/*\\n\\tCompute the internal state of the widget\\n\\t*/\\n\\tEditTextWidget.prototype.execute = function() {\\n\\t\\t// Get our parameters\\n\\t\\tthis.editTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\t\\tthis.editField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\t\\tthis.editIndex = this.getAttribute(\\\"index\\\");\\n\\t\\tthis.editDefault = this.getAttribute(\\\"default\\\");\\n\\t\\tthis.editClass = this.getAttribute(\\\"class\\\");\\n\\t\\tthis.editPlaceholder = this.getAttribute(\\\"placeholder\\\");\\n\\t\\tthis.editSize = this.getAttribute(\\\"size\\\");\\n\\t\\tthis.editRows = this.getAttribute(\\\"rows\\\");\\n\\t\\tthis.editAutoHeight = this.wiki.getTiddlerText(HEIGHT_MODE_TITLE,\\\"auto\\\");\\n\\t\\tthis.editAutoHeight = this.getAttribute(\\\"autoHeight\\\",this.editAutoHeight === \\\"auto\\\" ? \\\"yes\\\" : \\\"no\\\") === \\\"yes\\\";\\n\\t\\tthis.editMinHeight = this.getAttribute(\\\"minHeight\\\",DEFAULT_MIN_TEXT_AREA_HEIGHT);\\n\\t\\tthis.editFocusPopup = this.getAttribute(\\\"focusPopup\\\");\\n\\t\\tthis.editFocus = this.getAttribute(\\\"focus\\\");\\n\\t\\tthis.editTabIndex = this.getAttribute(\\\"tabindex\\\");\\n\\t\\tthis.editCancelPopups = this.getAttribute(\\\"cancelPopups\\\",\\\"\\\") === \\\"yes\\\";\\n\\t\\tthis.editInputActions = this.getAttribute(\\\"inputActions\\\");\\n\\t\\tthis.editRefreshTitle = this.getAttribute(\\\"refreshTitle\\\");\\n\\t\\tthis.editAutoComplete = this.getAttribute(\\\"autocomplete\\\");\\n\\t\\tthis.isDisabled = this.getAttribute(\\\"disabled\\\",\\\"no\\\");\\n\\t\\tthis.isFileDropEnabled = this.getAttribute(\\\"fileDrop\\\",\\\"no\\\") === \\\"yes\\\";\\n\\t\\t// Get the default editor element tag and type\\n\\t\\tvar tag,type;\\n\\t\\tif(this.editField === \\\"text\\\") {\\n\\t\\t\\ttag = \\\"textarea\\\";\\n\\t\\t} else {\\n\\t\\t\\ttag = \\\"input\\\";\\n\\t\\t\\tvar fieldModule = $tw.Tiddler.fieldModules[this.editField];\\n\\t\\t\\tif(fieldModule && fieldModule.editTag) {\\n\\t\\t\\t\\ttag = fieldModule.editTag;\\n\\t\\t\\t}\\n\\t\\t\\tif(fieldModule && fieldModule.editType) {\\n\\t\\t\\t\\ttype = fieldModule.editType;\\n\\t\\t\\t}\\n\\t\\t\\ttype = type || \\\"text\\\";\\n\\t\\t}\\n\\t\\t// Get the rest of our parameters\\n\\t\\tthis.editTag = this.getAttribute(\\\"tag\\\",tag) || \\\"input\\\";\\n\\t\\tthis.editType = this.getAttribute(\\\"type\\\",type);\\n\\t\\t// Make the child widgets\\n\\t\\tthis.makeChildWidgets();\\n\\t\\t// Determine whether to show the toolbar\\n\\t\\tthis.editShowToolbar = this.wiki.getTiddlerText(ENABLE_TOOLBAR_TITLE,\\\"yes\\\");\\n\\t\\tthis.editShowToolbar = (this.editShowToolbar === \\\"yes\\\") && !!(this.children && this.children.length > 0) && (!this.document.isTiddlyWikiFakeDom);\\n\\t};\\n\\n\\t/*\\n\\tSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n\\t*/\\n\\tEditTextWidget.prototype.refresh = function(changedTiddlers) {\\n\\t\\tvar changedAttributes = this.computeAttributes();\\n\\t\\t// Completely rerender if any of our attributes have changed\\n\\t\\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes[\\\"default\\\"] || changedAttributes[\\\"class\\\"] || changedAttributes.placeholder || changedAttributes.size || changedAttributes.autoHeight || changedAttributes.minHeight || changedAttributes.focusPopup ||  changedAttributes.rows || changedAttributes.tabindex || changedAttributes.cancelPopups || changedAttributes.inputActions || changedAttributes.refreshTitle || changedAttributes.autocomplete || changedTiddlers[HEIGHT_MODE_TITLE] || changedTiddlers[ENABLE_TOOLBAR_TITLE] || changedAttributes.disabled || changedAttributes.fileDrop) {\\n\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\treturn true;\\n\\t\\t} else if (changedTiddlers[this.editRefreshTitle]) {\\n\\t\\t\\tthis.engine.updateDomNodeText(this.getEditInfo().value);\\n\\t\\t} else if(changedTiddlers[this.editTitle]) {\\n\\t\\t\\tvar editInfo = this.getEditInfo();\\n\\t\\t\\tthis.updateEditor(editInfo.value,editInfo.type);\\n\\t\\t}\\n\\t\\tthis.engine.fixHeight();\\n\\t\\tif(this.editShowToolbar) {\\n\\t\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t};\\n\\n\\t/*\\n\\tUpdate the editor with new text. This method is separate from updateEditorDomNode()\\n\\tso that subclasses can override updateEditor() and still use updateEditorDomNode()\\n\\t*/\\n\\tEditTextWidget.prototype.updateEditor = function(text,type) {\\n\\t\\tthis.updateEditorDomNode(text,type);\\n\\t};\\n\\n\\t/*\\n\\tUpdate the editor dom node with new text\\n\\t*/\\n\\tEditTextWidget.prototype.updateEditorDomNode = function(text,type) {\\n\\t\\tthis.engine.setText(text,type);\\n\\t};\\n\\n\\t/*\\n\\tSave changes back to the tiddler store\\n\\t*/\\n\\tEditTextWidget.prototype.saveChanges = function(text) {\\n\\t\\tvar editInfo = this.getEditInfo();\\n\\t\\tif(text !== editInfo.value) {\\n\\t\\t\\teditInfo.update(text);\\n\\t\\t}\\n\\t};\\n\\n\\t/*\\n\\tHandle a dom \\\"keydown\\\" event, which we'll bubble up to our container for the keyboard widgets benefit\\n\\t*/\\n\\tEditTextWidget.prototype.handleKeydownEvent = function(event) {\\n\\t\\t// Check for a keyboard shortcut\\n\\t\\tif(this.toolbarNode) {\\n\\t\\t\\tvar shortcutElements = this.toolbarNode.querySelectorAll(\\\"[data-tw-keyboard-shortcut]\\\");\\n\\t\\t\\tfor(var index=0; index\u003CshortcutElements.length; index++) {\\n\\t\\t\\t\\tvar el = shortcutElements[index],\\n\\t\\t\\t\\t\\tshortcutData = el.getAttribute(\\\"data-tw-keyboard-shortcut\\\"),\\n\\t\\t\\t\\t\\tkeyInfoArray = $tw.keyboardManager.parseKeyDescriptors(shortcutData,{\\n\\t\\t\\t\\t\\t\\twiki: this.wiki\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\tif($tw.keyboardManager.checkKeyDescriptors(event,keyInfoArray)) {\\n\\t\\t\\t\\t\\tvar clickEvent = this.document.createEvent(\\\"Events\\\");\\n\\t\\t\\t\\t    clickEvent.initEvent(\\\"click\\\",true,false);\\n\\t\\t\\t\\t    el.dispatchEvent(clickEvent);\\n\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Propogate the event to the container\\n\\t\\tif(this.propogateKeydownEvent(event)) {\\n\\t\\t\\t// Ignore the keydown if it was already handled\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\t// Otherwise, process the keydown normally\\n\\t\\treturn false;\\n\\t};\\n\\n\\t/*\\n\\tPropogate keydown events to our container for the keyboard widgets benefit\\n\\t*/\\n\\tEditTextWidget.prototype.propogateKeydownEvent = function(event) {\\n\\t\\tvar newEvent = this.cloneEvent(event,[\\\"keyCode\\\",\\\"which\\\",\\\"metaKey\\\",\\\"ctrlKey\\\",\\\"altKey\\\",\\\"shiftKey\\\"]);\\n\\t\\treturn !this.parentDomNode.dispatchEvent(newEvent);\\n\\t};\\n\\n\\tEditTextWidget.prototype.cloneEvent = function(event,propertiesToCopy) {\\n\\t\\tvar propertiesToCopy = propertiesToCopy || [],\\n\\t\\t\\tnewEvent = this.document.createEventObject ? this.document.createEventObject() : this.document.createEvent(\\\"Events\\\");\\n\\t\\tif(newEvent.initEvent) {\\n\\t\\t\\tnewEvent.initEvent(event.type, true, true);\\n\\t\\t}\\n\\t\\t$tw.utils.each(propertiesToCopy,function(prop){\\n\\t\\t\\tnewEvent[prop] = event[prop];\\n\\t\\t});\\n\\t\\treturn newEvent;\\n\\t};\\n\\n\\tEditTextWidget.prototype.dispatchDOMEvent = function(newEvent) {\\n\\t\\tvar dispatchNode = this.engine.iframeNode || this.engine.parentNode;\\n\\t\\treturn dispatchNode.dispatchEvent(newEvent);\\n\\t};\\n\\n\\t/*\\n\\tPropogate drag and drop events with File data to our container for the dropzone widgets benefit.\\n\\tIf there are no Files, let the browser handle it.\\n\\t*/\\n\\tEditTextWidget.prototype.handleDropEvent = function(event) {\\n\\t\\tif($tw.utils.dragEventContainsFiles(event)) {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\tthis.dispatchDOMEvent(this.cloneEvent(event,[\\\"dataTransfer\\\"]));\\n\\t\\t} \\n\\t};\\n\\n\\tEditTextWidget.prototype.handlePasteEvent = function(event) {\\n\\t\\tif(event.clipboardData && event.clipboardData.files && event.clipboardData.files.length) {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\tthis.dispatchDOMEvent(this.cloneEvent(event,[\\\"clipboardData\\\"]));\\n\\t\\t}\\n\\t};\\n\\n\\tEditTextWidget.prototype.handleDragEnterEvent = function(event) {\\n\\t\\tif($tw.utils.dragEventContainsFiles(event)) {\\n\\t\\t\\t// Ignore excessive events fired by FF when entering and leaving text nodes in a text area.\\n\\t\\t\\tif( event.relatedTarget && (event.relatedTarget.nodeType === 3 || event.target === event.relatedTarget)) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\treturn this.dispatchDOMEvent(this.cloneEvent(event,[\\\"dataTransfer\\\"]));\\n\\t\\t}\\n\\t\\treturn true;\\n\\t};\\n\\n\\tEditTextWidget.prototype.handleDragOverEvent = function(event) {\\n\\t\\tif($tw.utils.dragEventContainsFiles(event)) {\\n\\t\\t\\t// Call preventDefault() in browsers that default to not allowing drop events on textarea\\n\\t\\t\\tif($tw.browser.isFirefox || $tw.browser.isIE) {\\n\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t}\\n\\t\\t\\tevent.dataTransfer.dropEffect = \\\"copy\\\";\\n\\t\\t\\treturn this.dispatchDOMEvent(this.cloneEvent(event,[\\\"dataTransfer\\\"]));\\n\\t\\t}\\n\\t\\treturn true;\\n\\t};\\n\\n\\tEditTextWidget.prototype.handleDragLeaveEvent = function(event) {\\n\\t\\t// Ignore excessive events fired by FF when entering and leaving text nodes in a text area.\\n\\t\\tif(event.relatedTarget && ((event.relatedTarget.nodeType === 3) || (event.target === event.relatedTarget))) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tevent.preventDefault();\\n\\t\\tthis.dispatchDOMEvent(this.cloneEvent(event,[\\\"dataTransfer\\\"]));\\n\\t};\\n\\n\\tEditTextWidget.prototype.handleDragEndEvent = function(event) {\\n\\t\\tthis.dispatchDOMEvent(this.cloneEvent(event));\\n\\t};\\n\\n\\tEditTextWidget.prototype.handleClickEvent = function(event) {\\n\\t\\treturn !this.dispatchDOMEvent(this.cloneEvent(event));\\n\\t};\\n\\n\\treturn EditTextWidget;\\n}\\n\\nexports.editTextWidgetFactory = editTextWidgetFactory;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/core/modules/editor/operations/bitmap/clear.js\":{\"title\":\"$:/core/modules/editor/operations/bitmap/clear.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/bitmap/clear.js\\ntype: application/javascript\\nmodule-type: bitmapeditoroperation\\n\\nBitmap editor operation to clear the image\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"clear\\\"] = function(event) {\\n\\tvar ctx = this.canvasDomNode.getContext(\\\"2d\\\");\\n\\tctx.globalAlpha = 1;\\n\\tctx.fillStyle = event.paramObject.colour || \\\"white\\\";\\n\\tctx.fillRect(0,0,this.canvasDomNode.width,this.canvasDomNode.height);\\n\\t// Save changes\\n\\tthis.strokeEnd();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"bitmapeditoroperation\"},\"$:/core/modules/editor/operations/bitmap/resize.js\":{\"title\":\"$:/core/modules/editor/operations/bitmap/resize.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/bitmap/resize.js\\ntype: application/javascript\\nmodule-type: bitmapeditoroperation\\n\\nBitmap editor operation to resize the image\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"resize\\\"] = function(event) {\\n\\t// Get the new width\\n\\tvar newWidth = parseInt(event.paramObject.width || this.canvasDomNode.width,10),\\n\\t\\tnewHeight = parseInt(event.paramObject.height || this.canvasDomNode.height,10);\\n\\t// Update if necessary\\n\\tif(newWidth > 0 && newHeight > 0 && !(newWidth === this.currCanvas.width && newHeight === this.currCanvas.height)) {\\n\\t\\tthis.changeCanvasSize(newWidth,newHeight);\\n\\t}\\n\\t// Update the input controls\\n\\tthis.refreshToolbar();\\n\\t// Save the image into the tiddler\\n\\tthis.saveChanges();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"bitmapeditoroperation\"},\"$:/core/modules/editor/operations/bitmap/rotate-left.js\":{\"title\":\"$:/core/modules/editor/operations/bitmap/rotate-left.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/bitmap/rotate-left.js\\ntype: application/javascript\\nmodule-type: bitmapeditoroperation\\n\\nBitmap editor operation to rotate the image left by 90 degrees\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"rotate-left\\\"] = function(event) {\\n\\t// Rotate the canvas left by 90 degrees\\n\\tthis.rotateCanvasLeft();\\n\\t// Update the input controls\\n\\tthis.refreshToolbar();\\n\\t// Save the image into the tiddler\\n\\tthis.saveChanges();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"bitmapeditoroperation\"},\"$:/core/modules/editor/operations/text/excise.js\":{\"title\":\"$:/core/modules/editor/operations/text/excise.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/excise.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to excise the selection to a new tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"excise\\\"] = function(event,operation) {\\n\\tvar editTiddler = this.wiki.getTiddler(this.editTitle),\\n\\t\\teditTiddlerTitle = this.editTitle;\\n\\tif(editTiddler && editTiddler.fields[\\\"draft.of\\\"]) {\\n\\t\\teditTiddlerTitle = editTiddler.fields[\\\"draft.of\\\"];\\n\\t}\\n\\tvar excisionTitle = event.paramObject.title || this.wiki.generateNewTitle(\\\"New Excision\\\");\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(\\n\\t\\tthis.wiki.getCreationFields(),\\n\\t\\tthis.wiki.getModificationFields(),\\n\\t\\t{\\n\\t\\t\\ttitle: excisionTitle,\\n\\t\\t\\ttext: operation.selection,\\n\\t\\t\\ttags: event.paramObject.tagnew === \\\"yes\\\" ?  [editTiddlerTitle] : []\\n\\t\\t}\\n\\t));\\n\\toperation.replacement = excisionTitle;\\n\\tswitch(event.paramObject.type || \\\"transclude\\\") {\\n\\t\\tcase \\\"transclude\\\":\\n\\t\\t\\toperation.replacement = \\\"{{\\\" + operation.replacement+ \\\"}}\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"link\\\":\\n\\t\\t\\toperation.replacement = \\\"[[\\\" + operation.replacement+ \\\"]]\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"macro\\\":\\n\\t\\t\\toperation.replacement = \\\"\u003C\u003C\\\" + (event.paramObject.macro || \\\"translink\\\") + \\\" \\\\\\\"\\\\\\\"\\\\\\\"\\\" + operation.replacement + \\\"\\\\\\\"\\\\\\\"\\\\\\\">>\\\";\\n\\t\\t\\tbreak;\\n\\t}\\n\\toperation.cutStart = operation.selStart;\\n\\toperation.cutEnd = operation.selEnd;\\n\\toperation.newSelStart = operation.selStart;\\n\\toperation.newSelEnd = operation.selStart + operation.replacement.length;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/focus-editor.js\":{\"title\":\"$:/core/modules/editor/operations/text/focus-editor.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/focus-editor.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\nSimply focus the Text editor\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"focus-editor\\\"] = function(event,operation) {\\n\\toperation = null;\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/insert-text.js\":{\"title\":\"$:/core/modules/editor/operations/text/insert-text.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/insert-text.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation insert text at the caret position. If there is a selection it is replaced.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"insert-text\\\"] = function(event,operation) {\\n\\toperation.replacement = event.paramObject.text;\\n\\toperation.cutStart = operation.selStart;\\n\\toperation.cutEnd = operation.selEnd;\\n\\toperation.newSelStart = operation.selStart + operation.replacement.length;\\n\\toperation.newSelEnd = operation.newSelStart;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/make-link.js\":{\"title\":\"$:/core/modules/editor/operations/text/make-link.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/make-link.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to make a link\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"make-link\\\"] = function(event,operation) {\\n\\tif(operation.selection) {\\n\\t\\toperation.replacement = \\\"[[\\\" + operation.selection + \\\"|\\\" + event.paramObject.text + \\\"]]\\\";\\n\\t\\toperation.cutStart = operation.selStart;\\n\\t\\toperation.cutEnd = operation.selEnd;\\n\\t} else {\\n\\t\\toperation.replacement = \\\"[[\\\" + event.paramObject.text + \\\"]]\\\";\\n\\t\\toperation.cutStart = operation.selStart;\\n\\t\\toperation.cutEnd = operation.selEnd;\\n\\t}\\n\\toperation.newSelStart = operation.selStart + operation.replacement.length;\\n\\toperation.newSelEnd = operation.newSelStart;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/prefix-lines.js\":{\"title\":\"$:/core/modules/editor/operations/text/prefix-lines.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/prefix-lines.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"prefix-lines\\\"] = function(event,operation) {\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0;\\n\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\tif(count !== targetCount) {\\n\\t\\t\\t// Apply the prefix\\n\\t\\t\\tline =  prefix + \\\" \\\" + line;\\n\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/replace-all.js\":{\"title\":\"$:/core/modules/editor/operations/text/replace-all.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/replace-all.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to replace the entire text\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"replace-all\\\"] = function(event,operation) {\\n\\toperation.cutStart = 0;\\n\\toperation.cutEnd = operation.text.length;\\n\\toperation.replacement = event.paramObject.text;\\n\\toperation.newSelStart = 0;\\n\\toperation.newSelEnd = operation.replacement.length;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/replace-selection.js\":{\"title\":\"$:/core/modules/editor/operations/text/replace-selection.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/replace-selection.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to replace the selection\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"replace-selection\\\"] = function(event,operation) {\\n\\toperation.replacement = event.paramObject.text;\\n\\toperation.cutStart = operation.selStart;\\n\\toperation.cutEnd = operation.selEnd;\\n\\toperation.newSelStart = operation.selStart;\\n\\toperation.newSelEnd = operation.selStart + operation.replacement.length;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/save-selection.js\":{\"title\":\"$:/core/modules/editor/operations/text/save-selection.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/save-selection.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to save the current selection in a specified tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"save-selection\\\"] = function(event,operation) {\\n\\tvar tiddler = event.paramObject.tiddler,\\n\\t\\tfield = event.paramObject.field || \\\"text\\\";\\n\\tif(tiddler && field) {\\n\\t\\tthis.wiki.setText(tiddler,field,null,operation.text.substring(operation.selStart,operation.selEnd));\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/wrap-lines.js\":{\"title\":\"$:/core/modules/editor/operations/text/wrap-lines.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/wrap-lines.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to wrap the selected lines with a prefix and suffix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"wrap-lines\\\"] = function(event,operation) {\\n\\tvar prefix = event.paramObject.prefix || \\\"\\\",\\n\\t\\tsuffix = event.paramObject.suffix || \\\"\\\";\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Add the prefix and suffix\\n\\toperation.replacement = prefix + \\\"\\\\n\\\" +\\n\\t\\t\\t\\toperation.text.substring(operation.cutStart,operation.cutEnd) + \\\"\\\\n\\\" +\\n\\t\\t\\t\\tsuffix + \\\"\\\\n\\\";\\n\\toperation.newSelStart = operation.cutStart + prefix.length + 1;\\n\\toperation.newSelEnd = operation.newSelStart + (operation.cutEnd - operation.cutStart);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/editor/operations/text/wrap-selection.js\":{\"title\":\"$:/core/modules/editor/operations/text/wrap-selection.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/editor/operations/text/wrap-selection.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to wrap the selection with the specified prefix and suffix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"wrap-selection\\\"] = function(event,operation) {\\n\\tif(operation.selStart === operation.selEnd) {\\n\\t\\t// No selection; check if we're within the prefix/suffix\\n\\t\\tif(operation.text.substring(operation.selStart - event.paramObject.prefix.length,operation.selStart + event.paramObject.suffix.length) === event.paramObject.prefix + event.paramObject.suffix) {\\n\\t\\t\\t// Remove the prefix and suffix\\n\\t\\t\\toperation.cutStart = operation.selStart - event.paramObject.prefix.length;\\n\\t\\t\\toperation.cutEnd = operation.selEnd + event.paramObject.suffix.length;\\n\\t\\t\\toperation.replacement = \\\"\\\";\\n\\t\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t\\t} else {\\n\\t\\t\\t// Wrap the cursor instead\\n\\t\\t\\toperation.cutStart = operation.selStart;\\n\\t\\t\\toperation.cutEnd = operation.selEnd;\\n\\t\\t\\toperation.replacement = event.paramObject.prefix + event.paramObject.suffix;\\n\\t\\t\\toperation.newSelStart = operation.selStart + event.paramObject.prefix.length;\\n\\t\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t\\t}\\n\\t} else if(operation.text.substring(operation.selStart,operation.selStart + event.paramObject.prefix.length) === event.paramObject.prefix && operation.text.substring(operation.selEnd - event.paramObject.suffix.length,operation.selEnd) === event.paramObject.suffix) {\\n\\t\\t// Prefix and suffix are already present, so remove them\\n\\t\\toperation.cutStart = operation.selStart;\\n\\t\\toperation.cutEnd = operation.selEnd;\\n\\t\\toperation.replacement = operation.selection.substring(event.paramObject.prefix.length,operation.selection.length - event.paramObject.suffix.length);\\n\\t\\toperation.newSelStart = operation.selStart;\\n\\t\\toperation.newSelEnd = operation.selStart + operation.replacement.length;\\n\\t} else {\\n\\t\\t// Add the prefix and suffix\\n\\t\\toperation.cutStart = operation.selStart;\\n\\t\\toperation.cutEnd = operation.selEnd;\\n\\t\\toperation.replacement = event.paramObject.prefix + operation.selection + event.paramObject.suffix;\\n\\t\\toperation.newSelStart = operation.selStart;\\n\\t\\toperation.newSelEnd = operation.selStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\"},\"$:/core/modules/filterrunprefixes/all.js\":{\"title\":\"$:/core/modules/filterrunprefixes/all.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/all.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\nUnion of sets without de-duplication.\\nEquivalent to = filter run prefix.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.all = function(operationSubFunction) {\\n\\treturn function(results,source,widget) {\\n\\t\\tresults.push.apply(results, operationSubFunction(source,widget));\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/and.js\":{\"title\":\"$:/core/modules/filterrunprefixes/and.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/and.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\nIntersection of sets.\\nEquivalent to + filter run prefix.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.and = function(operationSubFunction,options) {\\n\\treturn function(results,source,widget) {\\n\\t\\t// This replaces all the elements of the array, but keeps the actual array so that references to it are preserved\\n\\t\\tsource = options.wiki.makeTiddlerIterator(results.toArray());\\n\\t\\tresults.clear();\\n\\t\\tresults.pushTop(operationSubFunction(source,widget));\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/cascade.js\":{\"title\":\"$:/core/modules/filterrunprefixes/cascade.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/cascade.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.cascade = function(operationSubFunction,options) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length !== 0) {\\n\\t\\t\\tvar filterList = operationSubFunction(source,widget),\\n\\t\\t\\t\\tfilterFnList = [];\\n\\t\\t\\tvar inputResults = results.toArray();\\n\\t\\t\\tresults.clear();\\n\\t\\t\\t$tw.utils.each(inputResults,function(title) {\\n\\t\\t\\t\\tvar result = \\\"\\\"; // If no filter matches, we return an empty string\\n\\t\\t\\t\\t$tw.utils.each(filterList,function(filter,index) {\\n\\t\\t\\t\\t\\tif(!filterFnList[index]) {\\n\\t\\t\\t\\t\\t\\tfilterFnList[index] = options.wiki.compileFilter(filter);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvar output = filterFnList[index](options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\t\\t\\tgetVariable: function(name,opts) {\\n\\t\\t\\t\\t\\t\\t\\topts = opts || {};\\n\\t\\t\\t\\t\\t\\t\\topts.variables = {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"currentTiddler\\\": \\\"\\\" + title,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"..currentTiddler\\\": widget.getVariable(\\\"currentTiddler\\\")\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t\\tif(name in opts.variables) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn opts.variables[name];\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn widget.getVariable(name,opts);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tif(output.length !== 0) {\\n\\t\\t\\t\\t\\t\\tresult = output[0];\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tresults.push(result);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/else.js\":{\"title\":\"$:/core/modules/filterrunprefixes/else.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/else.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\nEquivalent to ~ filter run prefix.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.else = function(operationSubFunction) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length === 0) {\\n\\t\\t\\t// Main result so far is empty\\n\\t\\t\\tresults.pushTop(operationSubFunction(source,widget));\\n\\t\\t}\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/except.js\":{\"title\":\"$:/core/modules/filterrunprefixes/except.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/except.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\nDifference of sets.\\nEquivalent to - filter run prefix.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.except = function(operationSubFunction) {\\n\\treturn function(results,source,widget) {\\n\\t\\tresults.remove(operationSubFunction(source,widget));\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/filter.js\":{\"title\":\"$:/core/modules/filterrunprefixes/filter.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/filter.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.filter = function(operationSubFunction,options) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length > 0) {\\n\\t\\t\\tvar resultsToRemove = [],\\n\\t\\t\\t\\tindex = 0;\\n\\t\\t\\tresults.each(function(title) {\\n\\t\\t\\t\\tvar filtered = operationSubFunction(options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\t\\tgetVariable: function(name,opts) {\\n\\t\\t\\t\\t\\t\\topts = opts || {};\\n\\t\\t\\t\\t\\t\\topts.variables = {\\n\\t\\t\\t\\t\\t\\t\\t\\\"currentTiddler\\\": \\\"\\\" + title,\\n\\t\\t\\t\\t\\t\\t\\t\\\"..currentTiddler\\\": widget.getVariable(\\\"currentTiddler\\\"),\\n\\t\\t\\t\\t\\t\\t\\t\\\"index\\\": \\\"\\\" + index,\\n\\t\\t\\t\\t\\t\\t\\t\\\"revIndex\\\": \\\"\\\" +  (results.length - 1 - index),\\n\\t\\t\\t\\t\\t\\t\\t\\\"length\\\": \\\"\\\" + results.length\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tif(name in opts.variables) {\\n\\t\\t\\t\\t\\t\\t\\treturn opts.variables[name];\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn widget.getVariable(name,opts);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tif(filtered.length === 0) {\\n\\t\\t\\t\\t\\tresultsToRemove.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t++index;\\n\\t\\t\\t});\\n\\t\\t\\tresults.remove(resultsToRemove);\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/intersection.js\":{\"title\":\"$:/core/modules/filterrunprefixes/intersection.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/intersection.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.intersection = function(operationSubFunction) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length !== 0) {\\n\\t\\t\\tvar secondRunResults = operationSubFunction(source,widget);\\n\\t\\t\\tvar firstRunResults = results.toArray();\\n\\t\\t\\tresults.clear();\\n\\t\\t\\t$tw.utils.each(firstRunResults,function(title) {\\n\\t\\t\\t\\tif(secondRunResults.indexOf(title) !== -1) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/map.js\":{\"title\":\"$:/core/modules/filterrunprefixes/map.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/map.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.map = function(operationSubFunction,options) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length > 0) {\\n\\t\\t\\tvar inputTitles = results.toArray(),\\n\\t\\t\\t\\tindex = 0;\\n\\t\\t\\tresults.clear();\\n\\t\\t\\t$tw.utils.each(inputTitles,function(title) {\\n\\t\\t\\t\\tvar filtered = operationSubFunction(options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\t\\tgetVariable: function(name,opts) {\\n\\t\\t\\t\\t\\t\\topts = opts || {};\\n\\t\\t\\t\\t\\t\\topts.variables = {\\n\\t\\t\\t\\t\\t\\t\\t\\\"currentTiddler\\\": \\\"\\\" + title,\\n\\t\\t\\t\\t\\t\\t\\t\\\"..currentTiddler\\\": widget.getVariable(\\\"currentTiddler\\\"),\\n\\t\\t\\t\\t\\t\\t\\t\\\"index\\\": \\\"\\\" + index,\\n\\t\\t\\t\\t\\t\\t\\t\\\"revIndex\\\": \\\"\\\" +  (inputTitles.length - 1 - index),\\n\\t\\t\\t\\t\\t\\t\\t\\\"length\\\": \\\"\\\" + inputTitles.length\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tif(name in opts.variables) {\\n\\t\\t\\t\\t\\t\\t\\treturn opts.variables[name];\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn widget.getVariable(name,opts);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tresults.push(filtered[0] || \\\"\\\");\\n\\t\\t\\t\\t++index;\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/or.js\":{\"title\":\"$:/core/modules/filterrunprefixes/or.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/or.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\nEquivalent to a filter run with no prefix.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.or = function(operationSubFunction) {\\n\\treturn function(results,source,widget) {\\n\\t\\tresults.pushTop(operationSubFunction(source,widget));\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/reduce.js\":{\"title\":\"$:/core/modules/filterrunprefixes/reduce.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/reduce.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.reduce = function(operationSubFunction,options) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length > 0) {\\n\\t\\t\\tvar accumulator = \\\"\\\",\\n\\t\\t\\t\\tindex = 0;\\n\\t\\t\\tresults.each(function(title) {\\n\\t\\t\\t\\tvar list = operationSubFunction(options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\t\\tgetVariable: function(name,opts) {\\n\\t\\t\\t\\t\\t\\topts = opts || {};\\n\\t\\t\\t\\t\\t\\topts.variables = {\\n\\t\\t\\t\\t\\t\\t\\t\\\"currentTiddler\\\": \\\"\\\" + title,\\n\\t\\t\\t\\t\\t\\t\\t\\\"..currentTiddler\\\": widget.getVariable(\\\"currentTiddler\\\"),\\n\\t\\t\\t\\t\\t\\t\\t\\\"index\\\": \\\"\\\" + index,\\n\\t\\t\\t\\t\\t\\t\\t\\\"revIndex\\\": \\\"\\\" +  (results.length - 1 - index),\\n\\t\\t\\t\\t\\t\\t\\t\\\"length\\\": \\\"\\\" + results.length,\\n\\t\\t\\t\\t\\t\\t\\t\\\"accumulator\\\": \\\"\\\" + accumulator\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tif(name in opts.variables) {\\n\\t\\t\\t\\t\\t\\t\\treturn opts.variables[name];\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn widget.getVariable(name,opts);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tif(list.length > 0) {\\n\\t\\t\\t\\t\\taccumulator = \\\"\\\" + list[0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t++index;\\n\\t\\t\\t});\\n\\t\\t\\tresults.clear();\\n\\t\\t\\tresults.push(accumulator);\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filterrunprefixes/sort.js\":{\"title\":\"$:/core/modules/filterrunprefixes/sort.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filterrunprefixes/sort.js\\ntype: application/javascript\\nmodule-type: filterrunprefix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter prefix function\\n*/\\nexports.sort = function(operationSubFunction,options) {\\n\\treturn function(results,source,widget) {\\n\\t\\tif(results.length > 0) {\\n\\t\\t\\tvar suffixes = options.suffixes,\\n\\t\\t\\t\\tsortType = (suffixes[0] && suffixes[0][0]) ? suffixes[0][0] : \\\"string\\\",\\n\\t\\t\\t\\tinvert = suffixes[1] ? (suffixes[1].indexOf(\\\"reverse\\\") !== -1) : false,\\n\\t\\t\\t\\tisCaseSensitive = suffixes[1] ? (suffixes[1].indexOf(\\\"casesensitive\\\") !== -1) : false,\\n\\t\\t\\t\\tinputTitles = results.toArray(),\\n\\t\\t\\t\\tsortKeys = [],\\n\\t\\t\\t\\tindexes = new Array(inputTitles.length),\\n\\t\\t\\t\\tcompareFn;\\n\\t\\t\\tresults.each(function(title) {\\n\\t\\t\\t\\tvar key = operationSubFunction(options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\t\\tgetVariable: function(name,opts) {\\n\\t\\t\\t\\t\\t\\topts = opts || {};\\n\\t\\t\\t\\t\\t\\topts.variables = {\\n\\t\\t\\t\\t\\t\\t\\t\\\"currentTiddler\\\": \\\"\\\" + title,\\n\\t\\t\\t\\t\\t\\t\\t\\\"..currentTiddler\\\": widget.getVariable(\\\"currentTiddler\\\")\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tif(name in opts.variables) {\\n\\t\\t\\t\\t\\t\\t\\treturn opts.variables[name];\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn widget.getVariable(name,opts);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tsortKeys.push(key[0] || \\\"\\\");\\n\\t\\t\\t});\\n\\t\\t\\tresults.clear();\\n\\t\\t\\t// Prepare an array of indexes to sort\\n\\t\\t\\tfor(var t=0; t\u003CinputTitles.length; t++) {\\n\\t\\t\\t\\tindexes[t] = t;\\n\\t\\t\\t}\\n\\t\\t\\t// Sort the indexes\\n\\t\\t\\tcompareFn = $tw.utils.makeCompareFunction(sortType,{defaultType: \\\"string\\\", invert:invert, isCaseSensitive:isCaseSensitive});\\n\\t\\t\\tindexes = indexes.sort(function(a,b) {\\n\\t\\t\\t\\t\\treturn compareFn(sortKeys[a],sortKeys[b]);\\n\\t\\t\\t});\\n\\t\\t\\t// Add to results in correct order\\n\\t\\t\\t$tw.utils.each(indexes,function(index) {\\n\\t\\t\\t\\tresults.push(inputTitles[index]);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filterrunprefix\"},\"$:/core/modules/filters/addprefix.js\":{\"title\":\"$:/core/modules/filters/addprefix.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/addprefix.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for adding a prefix to each title in the list. This is\\nespecially useful in contexts where only a filter expression is allowed\\nand macro substitution isn't available.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.addprefix = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(operator.operand + title);\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/addsuffix.js\":{\"title\":\"$:/core/modules/filters/addsuffix.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/addsuffix.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for adding a suffix to each title in the list. This is\\nespecially useful in contexts where only a filter expression is allowed\\nand macro substitution isn't available.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.addsuffix = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title + operator.operand);\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/after.js\":{\"title\":\"$:/core/modules/filters/after.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/after.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning the tiddler from the current list that is after the tiddler named in the operand.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.after = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\tvar index = results.indexOf(operator.operand);\\n\\tif(index === -1 || index > (results.length - 2)) {\\n\\t\\treturn [];\\n\\t} else {\\n\\t\\treturn [results[index + 1]];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/all/current.js\":{\"title\":\"$:/core/modules/filters/all/current.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all/current.js\\ntype: application/javascript\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[current]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.current = function(source,prefix,options) {\\n\\tvar currTiddlerTitle = options.widget && options.widget.getVariable(\\\"currentTiddler\\\");\\n\\tif(currTiddlerTitle) {\\n\\t\\treturn [currTiddlerTitle];\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"allfilteroperator\"},\"$:/core/modules/filters/all/missing.js\":{\"title\":\"$:/core/modules/filters/all/missing.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all/missing.js\\ntype: application/javascript\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[missing]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.missing = function(source,prefix,options) {\\n\\treturn options.wiki.getMissingTitles();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"allfilteroperator\"},\"$:/core/modules/filters/all/orphans.js\":{\"title\":\"$:/core/modules/filters/all/orphans.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all/orphans.js\\ntype: application/javascript\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[orphans]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.orphans = function(source,prefix,options) {\\n\\treturn options.wiki.getOrphanTitles();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"allfilteroperator\"},\"$:/core/modules/filters/all/shadows.js\":{\"title\":\"$:/core/modules/filters/all/shadows.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all/shadows.js\\ntype: application/javascript\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[shadows]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.shadows = function(source,prefix,options) {\\n\\treturn options.wiki.allShadowTitles();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"allfilteroperator\"},\"$:/core/modules/filters/all/tags.js\":{\"title\":\"$:/core/modules/filters/all/tags.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all/tags.js\\ntype: application/javascript\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[tags]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tags = function(source,prefix,options) {\\n\\treturn Object.keys(options.wiki.getTagMap());\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"allfilteroperator\"},\"$:/core/modules/filters/all/tiddlers.js\":{\"title\":\"$:/core/modules/filters/all/tiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all/tiddlers.js\\ntype: application/javascript\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[tiddlers]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tiddlers = function(source,prefix,options) {\\n\\treturn options.wiki.allTitles();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"allfilteroperator\"},\"$:/core/modules/filters/all.js\":{\"title\":\"$:/core/modules/filters/all.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/all.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for selecting tiddlers\\n\\n[all[shadows+tiddlers]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar allFilterOperators;\\n\\nfunction getAllFilterOperators() {\\n\\tif(!allFilterOperators) {\\n\\t\\tallFilterOperators = {};\\n\\t\\t$tw.modules.applyMethods(\\\"allfilteroperator\\\",allFilterOperators);\\n\\t}\\n\\treturn allFilterOperators;\\n}\\n\\n/*\\nExport our filter function\\n*/\\nexports.all = function(source,operator,options) {\\n\\t// Get our suboperators\\n\\tvar allFilterOperators = getAllFilterOperators();\\n\\t// Cycle through the suboperators accumulating their results\\n\\tvar results = new $tw.utils.LinkedList(),\\n\\t\\tsubops = operator.operand.split(\\\"+\\\");\\n\\t// Check for common optimisations\\n\\tif(subops.length === 1 && subops[0] === \\\"\\\") {\\n\\t\\treturn source;\\n\\t} else if(subops.length === 1 && subops[0] === \\\"tiddlers\\\") {\\n\\t\\treturn options.wiki.each;\\n\\t} else if(subops.length === 1 && subops[0] === \\\"shadows\\\") {\\n\\t\\treturn options.wiki.eachShadow;\\n\\t} else if(subops.length === 2 && subops[0] === \\\"tiddlers\\\" && subops[1] === \\\"shadows\\\") {\\n\\t\\treturn options.wiki.eachTiddlerPlusShadows;\\n\\t} else if(subops.length === 2 && subops[0] === \\\"shadows\\\" && subops[1] === \\\"tiddlers\\\") {\\n\\t\\treturn options.wiki.eachShadowPlusTiddlers;\\n\\t}\\n\\t// Do it the hard way\\n\\tfor(var t=0; t\u003Csubops.length; t++) {\\n\\t\\tvar subop = allFilterOperators[subops[t]];\\n\\t\\tif(subop) {\\n\\t\\t\\tresults.pushTop(subop(source,operator.prefix,options));\\n\\t\\t}\\n\\t}\\n\\treturn results.makeTiddlerIterator(options.wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/backlinks.js\":{\"title\":\"$:/core/modules/filters/backlinks.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/backlinks.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning all the backlinks from a tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.backlinks = function(source,operator,options) {\\n\\tvar results = new $tw.utils.LinkedList();\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.pushTop(options.wiki.getTiddlerBacklinks(title));\\n\\t});\\n\\treturn results.makeTiddlerIterator(options.wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/before.js\":{\"title\":\"$:/core/modules/filters/before.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/before.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning the tiddler from the current list that is before the tiddler named in the operand.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.before = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\tvar index = results.indexOf(operator.operand);\\n\\tif(index \u003C= 0) {\\n\\t\\treturn [];\\n\\t} else {\\n\\t\\treturn [results[index - 1]];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/commands.js\":{\"title\":\"$:/core/modules/filters/commands.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/commands.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the commands available in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.commands = function(source,operator,options) {\\n\\tvar results = [];\\n\\t$tw.utils.each($tw.commands,function(commandInfo,name) {\\n\\t\\tresults.push(name);\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/compare.js\":{\"title\":\"$:/core/modules/filters/compare.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/compare.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nGeneral purpose comparison operator\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.compare = function(source,operator,options) {\\n\\tvar suffixes = operator.suffixes || [],\\n\\t\\ttype = (suffixes[0] || [])[0],\\n\\t\\tmode = (suffixes[1] || [])[0],\\n\\t\\ttypeFn = $tw.utils.makeCompareFunction(type,{defaultType: \\\"number\\\"}),\\n\\t\\tmodeFn = modes[mode] || modes.eq,\\n\\t\\tinvert = operator.prefix === \\\"!\\\",\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(modeFn(typeFn(title,operator.operand)) !== invert) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\nvar modes = {\\n\\t\\\"eq\\\": function(value) {return value === 0;},\\n\\t\\\"ne\\\": function(value) {return value !== 0;},\\n\\t\\\"gteq\\\": function(value) {return value >= 0;},\\n\\t\\\"gt\\\": function(value) {return value > 0;},\\n\\t\\\"lteq\\\": function(value) {return value \u003C= 0;},\\n\\t\\\"lt\\\": function(value) {return value \u003C 0;}\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/contains.js\":{\"title\":\"$:/core/modules/filters/contains.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/contains.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for finding values in array fields\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.contains = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldname = operator.suffix || \\\"list\\\";\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\tvar list = tiddler.getFieldList(fieldname);\\n\\t\\t\\t\\tif(list.indexOf(operator.operand) === -1) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\tvar list = tiddler.getFieldList(fieldname);\\n\\t\\t\\t\\tif(list.indexOf(operator.operand) !== -1) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/count.js\":{\"title\":\"$:/core/modules/filters/count.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/count.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning the number of entries in the current list.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.count = function(source,operator,options) {\\n\\tvar count = 0;\\n\\tsource(function(tiddler,title) {\\n\\t\\tcount++;\\n\\t});\\n\\treturn [count + \\\"\\\"];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/crypto.js\":{\"title\":\"$:/core/modules/filters/crypto.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/crypto.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operators for cryptography, using the Stanford JavaScript library\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.sha256 = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tlength = parseInt(operator.operand,10) || 20,\\n\\t\\tsha256 = function(text) {\\n\\t\\t\\treturn sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(text)).substr(0,length);\\n\\t\\t};\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(sha256(title));\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/days.js\":{\"title\":\"$:/core/modules/filters/days.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/days.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator that selects tiddlers with a specified date field within a specified date interval.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.days = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldName = operator.suffix || \\\"modified\\\",\\n\\t\\tdayInterval = (parseInt(operator.operand,10)||0),\\n\\t\\tdayIntervalSign = $tw.utils.sign(dayInterval),\\n\\t\\ttargetTimeStamp = (new Date()).setHours(0,0,0,0) + 1000*60*60*24*dayInterval,\\n\\t\\tisWithinDays = function(dateField) {\\n\\t\\t\\tvar sign = $tw.utils.sign(targetTimeStamp - (new Date(dateField)).setHours(0,0,0,0));\\n\\t\\t\\treturn sign === 0 || sign === dayIntervalSign;\\n\\t\\t};\\n\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\ttargetTimeStamp = targetTimeStamp - 1000*60*60*24*dayIntervalSign;\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler && tiddler.fields[fieldName]) {\\n\\t\\t\\t\\tif(!isWithinDays($tw.utils.parseDate(tiddler.fields[fieldName]))) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler && tiddler.fields[fieldName]) {\\n\\t\\t\\t\\tif(isWithinDays($tw.utils.parseDate(tiddler.fields[fieldName]))) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/deserializers.js\":{\"title\":\"$:/core/modules/filters/deserializers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/deserializers.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the deserializers in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.deserializers = function(source,operator,options) {\\n\\tvar results = [];\\n\\t$tw.utils.each($tw.Wiki.tiddlerDeserializerModules,function(deserializer,type) {\\n\\t\\tresults.push(type);\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/duplicateslugs.js\":{\"title\":\"$:/core/modules/filters/duplicateslugs.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/duplicateslugs.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter function for [duplicateslugs[]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.duplicateslugs = function(source,operator,options) {\\n\\tvar slugs = Object.create(null), // Hashmap by slug of title, replaced with \\\"true\\\" if the duplicate title has already been output\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar slug = options.wiki.slugify(title);\\n\\t\\tif(slug in slugs) {\\n\\t\\t\\tif(slugs[slug] !== true) {\\n\\t\\t\\t\\tresults.push(slugs[slug]);\\n\\t\\t\\t\\tslugs[slug] = true;\\n\\t\\t\\t}\\n\\t\\t\\tresults.push(title);\\n\\t\\t} else {\\n\\t\\t\\tslugs[slug] = title;\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/each.js\":{\"title\":\"$:/core/modules/filters/each.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/each.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator that selects one tiddler for each unique value of the specified field.\\nWith suffix \\\"list\\\", selects all tiddlers that are values in a specified list field.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.each = function(source,operator,options) {\\n\\tvar results =[] ,\\n\\tvalue,values = {},\\n\\tfield = operator.operand || \\\"title\\\";\\n\\tif(operator.suffix === \\\"value\\\" && field === \\\"title\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!$tw.utils.hop(values,title)) {\\n\\t\\t\\t\\tvalues[title] = true;\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else if(operator.suffix !== \\\"list-item\\\") {\\n\\t\\tif(field === \\\"title\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler && !$tw.utils.hop(values,title)) {\\n\\t\\t\\t\\t\\tvalues[title] = true;\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t\\tvalue = tiddler.getFieldString(field);\\n\\t\\t\\t\\t\\tif(!$tw.utils.hop(values,value)) {\\n\\t\\t\\t\\t\\t\\tvalues[value] = true;\\n\\t\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t$tw.utils.each(\\n\\t\\t\\t\\t\\toptions.wiki.getTiddlerList(title,field),\\n\\t\\t\\t\\t\\tfunction(value) {\\n\\t\\t\\t\\t\\t\\tif(!$tw.utils.hop(values,value)) {\\n\\t\\t\\t\\t\\t\\t\\tvalues[value] = true;\\n\\t\\t\\t\\t\\t\\t\\tresults.push(value);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/eachday.js\":{\"title\":\"$:/core/modules/filters/eachday.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/eachday.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator that selects one tiddler for each unique day covered by the specified date field\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.eachday = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tvalues = [],\\n\\t\\tfieldName = operator.operand || \\\"modified\\\";\\n\\t// Function to convert a date/time to a date integer\\n\\tvar toDate = function(value) {\\n\\t\\tvalue = (new Date(value)).setHours(0,0,0,0);\\n\\t\\treturn value+0;\\n\\t};\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(tiddler && tiddler.fields[fieldName]) {\\n\\t\\t\\tvar value = toDate($tw.utils.parseDate(tiddler.fields[fieldName]));\\n\\t\\t\\tif(values.indexOf(value) === -1) {\\n\\t\\t\\t\\tvalues.push(value);\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/editiondescription.js\":{\"title\":\"$:/core/modules/filters/editiondescription.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/editiondescription.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the descriptions of the specified edition names\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.editiondescription = function(source,operator,options) {\\n\\tvar results = [];\\n\\tif($tw.node) {\\n\\t\\tvar editionInfo = $tw.utils.getEditionInfo();\\n\\t\\tif(editionInfo) {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif($tw.utils.hop(editionInfo,title)) {\\n\\t\\t\\t\\t\\tresults.push(editionInfo[title].description || \\\"\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/editions.js\":{\"title\":\"$:/core/modules/filters/editions.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/editions.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the available editions in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.editions = function(source,operator,options) {\\n\\tvar results = [];\\n\\tif($tw.node) {\\n\\t\\tvar editionInfo = $tw.utils.getEditionInfo();\\n\\t\\tif(editionInfo) {\\n\\t\\t\\t$tw.utils.each(editionInfo,function(info,name) {\\n\\t\\t\\t\\tresults.push(name);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tresults.sort();\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/else.js\":{\"title\":\"$:/core/modules/filters/else.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/else.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for replacing an empty input list with a constant, passing a non-empty input list straight through\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.else = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\tif(results.length === 0) {\\n\\t\\treturn [operator.operand];\\n\\t} else {\\n\\t\\treturn results;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/decodeuricomponent.js\":{\"title\":\"$:/core/modules/filters/decodeuricomponent.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/decodeuricomponent.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for applying decodeURIComponent() to each item.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter functions\\n*/\\n\\nexports.decodeuricomponent = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.decodeURIComponentSafe(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.encodeuricomponent = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(encodeURIComponent(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.decodeuri = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.decodeURISafe(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.encodeuri = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(encodeURI(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.decodehtml = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.htmlDecode(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.encodehtml = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.htmlEncode(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.stringify = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.stringify(title,(operator.suffix === \\\"rawunicode\\\")));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.jsonstringify = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.jsonStringify(title,(operator.suffix === \\\"rawunicode\\\")));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.escaperegexp = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push($tw.utils.escapeRegExp(title));\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.escapecss = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\t// escape any character with a special meaning in CSS using CSS.escape()\\n\\t\\tresults.push($tw.utils.escapeCSS(title));\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/enlist.js\":{\"title\":\"$:/core/modules/filters/enlist.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/enlist.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning its operand parsed as a list\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.enlist = function(source,operator,options) {\\n\\tvar allowDuplicates = false;\\n\\tswitch(operator.suffix) {\\n\\t\\tcase \\\"raw\\\":\\n\\t\\t\\tallowDuplicates = true;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"dedupe\\\":\\n\\t\\t\\tallowDuplicates = false;\\n\\t\\t\\tbreak;\\n\\t}\\n\\tvar list = $tw.utils.parseStringArray(operator.operand,allowDuplicates);\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tvar results = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(list.indexOf(title) === -1) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn results;\\n\\t} else {\\n\\t\\treturn list;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/field.js\":{\"title\":\"$:/core/modules/filters/field.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/field.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for comparing fields for equality\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.field = function(source,operator,options) {\\n\\tvar results = [],indexedResults,\\n\\t\\tfieldname = operator.suffix || operator.operator || \\\"title\\\";\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tif(operator.regexp) {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t\\tvar text = tiddler.getFieldString(fieldname);\\n\\t\\t\\t\\t\\tif(text !== null && !operator.regexp.exec(text)) {\\n\\t\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t\\tvar text = tiddler.getFieldString(fieldname);\\n\\t\\t\\t\\t\\tif(text !== null && text !== operator.operand) {\\n\\t\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(operator.regexp) {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t\\tvar text = tiddler.getFieldString(fieldname);\\n\\t\\t\\t\\t\\tif(text !== null && !!operator.regexp.exec(text)) {\\n\\t\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tif(source.byField && operator.operand) {\\n\\t\\t\\t\\tindexedResults = source.byField(fieldname,operator.operand);\\n\\t\\t\\t\\tif(indexedResults) {\\n\\t\\t\\t\\t\\treturn indexedResults\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\t\\tvar text = tiddler.getFieldString(fieldname);\\n\\t\\t\\t\\t\\tif(text !== null && text === operator.operand) {\\n\\t\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/fields.js\":{\"title\":\"$:/core/modules/filters/fields.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/fields.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the fields on the selected tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.fields = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldName,\\n\\t\\tsuffixes = (operator.suffixes || [])[0] || [],\\n\\t\\toperand = $tw.utils.parseStringArray(operator.operand);\\n\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(tiddler) {\\n\\t\\t\\tif(suffixes.indexOf(\\\"include\\\") !== -1) {\\n\\t\\t\\t\\tfor(fieldName in tiddler.fields) {\\n\\t\\t\\t\\t\\t(operand.indexOf(fieldName) !== -1) ? $tw.utils.pushTop(results,fieldName) : \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (suffixes.indexOf(\\\"exclude\\\") !== -1) {\\n\\t\\t\\t\\tfor(fieldName in tiddler.fields) {\\n\\t\\t\\t\\t\\t(operand.indexOf(fieldName) !== -1) ? \\\"\\\" : $tw.utils.pushTop(results,fieldName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} // else if\\n\\t\\t\\telse {\\n\\t\\t\\t\\tfor(fieldName in tiddler.fields) {\\n\\t\\t\\t\\t\\t$tw.utils.pushTop(results,fieldName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} // else\\n\\t\\t} // if (tiddler)\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/filter.js\":{\"title\":\"$:/core/modules/filters/filter.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/filter.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning those input titles that pass a subfilter\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.filter = function(source,operator,options) {\\n\\tvar filterFn = options.wiki.compileFilter(operator.operand),\\n\\t\\tresults = [],\\n\\t\\ttarget = operator.prefix !== \\\"!\\\";\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar list = filterFn.call(options.wiki,options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\tgetVariable: function(name) {\\n\\t\\t\\t\\t\\tswitch(name) {\\n\\t\\t\\t\\t\\t\\tcase \\\"currentTiddler\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn \\\"\\\" + title;\\n\\t\\t\\t\\t\\t\\tcase \\\"..currentTiddler\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn options.widget.getVariable(\\\"currentTiddler\\\");\\n\\t\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t\\treturn options.widget.getVariable(name);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\tif((list.length > 0) === target) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/format/date.js\":{\"title\":\"$:/core/modules/filters/format/date.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/format/date.js\\ntype: application/javascript\\nmodule-type: formatfilteroperator\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.date = function(source,operand,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar value = $tw.utils.parseDate(title);\\n\\t\\tif(value && $tw.utils.isDate(value) && value.toString() !== \\\"Invalid Date\\\") {\\n\\t\\t\\tresults.push($tw.utils.formatDateString(value,operand || \\\"YYYY MM DD 0hh:0mm\\\"));\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"formatfilteroperator\"},\"$:/core/modules/filters/format/relativedate.js\":{\"title\":\"$:/core/modules/filters/format/relativedate.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/format/relativedate.js\\ntype: application/javascript\\nmodule-type: formatfilteroperator\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.relativedate = function(source,operand,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar value = $tw.utils.parseDate(title);\\n\\t\\tif(value && $tw.utils.isDate(value) && value.toString() !== \\\"Invalid Date\\\") {\\n\\t\\t\\tresults.push($tw.utils.getRelativeDate((new Date()) - (new Date(value))).description);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"formatfilteroperator\"},\"$:/core/modules/filters/format/titlelist.js\":{\"title\":\"$:/core/modules/filters/format/titlelist.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/format/titlelist.js\\ntype: application/javascript\\nmodule-type: formatfilteroperator\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.titlelist = function(source,operand,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(title && title.length) {\\n\\t\\t\\tresults.push($tw.utils.stringifyList([title]));\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"formatfilteroperator\"},\"$:/core/modules/filters/format.js\":{\"title\":\"$:/core/modules/filters/format.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/format.js\\ntype: application/javascript\\nmodule-type: filteroperator\\nFilter operator for formatting strings\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar formatFilterOperators;\\n\\nfunction getFormatFilterOperators() {\\n\\tif(!formatFilterOperators) {\\n\\t\\tformatFilterOperators = {};\\n\\t\\t$tw.modules.applyMethods(\\\"formatfilteroperator\\\",formatFilterOperators);\\n\\t}\\n\\treturn formatFilterOperators;\\n}\\n\\n/*\\nExport our filter function\\n*/\\nexports.format = function(source,operator,options) {\\n\\t// Dispatch to the correct formatfilteroperator\\n\\tvar formatFilterOperators = getFormatFilterOperators();\\n\\tif(operator.suffix) {\\n\\t\\tvar formatFilterOperator = formatFilterOperators[operator.suffix];\\n\\t\\tif(formatFilterOperator) {\\n\\t\\t\\treturn formatFilterOperator(source,operator.operand,options);\\n\\t\\t} else {\\n\\t\\t\\treturn [$tw.language.getString(\\\"Error/FormatFilterOperator\\\")];\\n\\t\\t}\\n\\t} else {\\n\\t\\t// Return all unchanged if the suffix is missing\\n\\t\\tvar results = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t\\treturn results;\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/get.js\":{\"title\":\"$:/core/modules/filters/get.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/get.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for replacing tiddler titles by the value of the field specified in the operand.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.get = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(tiddler) {\\n\\t\\t\\tvar value = tiddler.getFieldString(operator.operand);\\n\\t\\t\\tif(value) {\\n\\t\\t\\t\\tresults.push(value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/getindex.js\":{\"title\":\"$:/core/modules/filters/getindex.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/getindex.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nreturns the value at a given index of datatiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.getindex = function(source,operator,options) {\\n\\tvar data,title,results = [];\\n\\tif(operator.operand){\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\ttitle = tiddler ? tiddler.fields.title : title;\\n\\t\\t\\tdata = options.wiki.extractTiddlerDataItem(tiddler,operator.operand);\\n\\t\\t\\tif(data) {\\n\\t\\t\\t\\tresults.push(data);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/getvariable.js\":{\"title\":\"$:/core/modules/filters/getvariable.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/getvariable.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for replacing input values by the value of the variable with the same name, or blank if the variable is missing\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.getvariable = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(options.widget.getVariable(title) || \\\"\\\");\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/has.js\":{\"title\":\"$:/core/modules/filters/has.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/has.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for checking if a tiddler has the specified field or index\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.has = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tinvert = operator.prefix === \\\"!\\\";\\n\\n\\tif(operator.suffix === \\\"field\\\") {\\n\\t\\tif(invert) {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(!tiddler || (tiddler && (!$tw.utils.hop(tiddler.fields,operator.operand)))) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler && $tw.utils.hop(tiddler.fields,operator.operand)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\telse if(operator.suffix === \\\"index\\\") {\\n\\t\\tif(invert) {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(!tiddler || (tiddler && (!$tw.utils.hop(options.wiki.getTiddlerDataCached(tiddler,Object.create(null)),operator.operand)))) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler && $tw.utils.hop(options.wiki.getTiddlerDataCached(tiddler,Object.create(null)),operator.operand)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tif(invert) {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(!tiddler || !$tw.utils.hop(tiddler.fields,operator.operand) || (tiddler.fields[operator.operand].length === 0)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddler && $tw.utils.hop(tiddler.fields,operator.operand) && (tiddler.fields[operator.operand].length !== 0)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/haschanged.js\":{\"title\":\"$:/core/modules/filters/haschanged.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/haschanged.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returns tiddlers from the list that have a non-zero changecount.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.haschanged = function(source,operator,options) {\\n\\tvar results = [];\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.getChangeCount(title) === 0) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.getChangeCount(title) > 0) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/indexes.js\":{\"title\":\"$:/core/modules/filters/indexes.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/indexes.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the indexes of a data tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.indexes = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar data = options.wiki.getTiddlerDataCached(title);\\n\\t\\tif(data) {\\n\\t\\t\\t$tw.utils.pushTop(results,Object.keys(data));\\n\\t\\t}\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/insertbefore.js\":{\"title\":\"$:/core/modules/filters/insertbefore.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/insertbefore.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nInsert an item before another item in a list\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nOrder a list\\n*/\\nexports.insertbefore = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\tvar target = operator.operands[1] || (options.widget && options.widget.getVariable(operator.suffix || \\\"currentTiddler\\\"));\\n\\tif(target !== operator.operand) {\\n\\t\\t// Remove the entry from the list if it is present\\n\\t\\tvar pos = results.indexOf(operator.operand);\\n\\t\\tif(pos !== -1) {\\n\\t\\t\\tresults.splice(pos,1);\\n\\t\\t}\\n\\t\\t// Insert the entry before the target marker\\n\\t\\tpos = results.indexOf(target);\\n\\t\\tif(pos !== -1) {\\n\\t\\t\\tresults.splice(pos,0,operator.operand);\\n\\t\\t} else {\\n\\t\\t\\tresults.push(operator.operand);\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/is/binary.js\":{\"title\":\"$:/core/modules/filters/is/binary.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/binary.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[binary]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.binary = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!options.wiki.isBinaryTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.isBinaryTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/blank.js\":{\"title\":\"$:/core/modules/filters/is/blank.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/blank.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[blank]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.blank = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!title) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/current.js\":{\"title\":\"$:/core/modules/filters/is/current.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/current.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[current]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.current = function(source,prefix,options) {\\n\\tvar results = [],\\n\\t\\tcurrTiddlerTitle = options.widget && options.widget.getVariable(\\\"currentTiddler\\\");\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title !== currTiddlerTitle) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title === currTiddlerTitle) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/draft.js\":{\"title\":\"$:/core/modules/filters/is/draft.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/draft.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[draft]] analagous to [has[draft.of]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.draft = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!tiddler || !tiddler.isDraft()) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler && tiddler.isDraft()) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/image.js\":{\"title\":\"$:/core/modules/filters/is/image.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/image.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[image]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.image = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!options.wiki.isImageTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.isImageTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/missing.js\":{\"title\":\"$:/core/modules/filters/is/missing.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/missing.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[missing]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.missing = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.tiddlerExists(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!options.wiki.tiddlerExists(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/orphan.js\":{\"title\":\"$:/core/modules/filters/is/orphan.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/orphan.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[orphan]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.orphan = function(source,prefix,options) {\\n\\tvar results = [],\\n\\t\\torphanTitles = options.wiki.getOrphanTitles();\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(orphanTitles.indexOf(title) === -1) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(orphanTitles.indexOf(title) !== -1) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/shadow.js\":{\"title\":\"$:/core/modules/filters/is/shadow.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/shadow.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[shadow]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.shadow = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!options.wiki.isShadowTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.isShadowTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/system.js\":{\"title\":\"$:/core/modules/filters/is/system.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/system.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[system]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.system = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!options.wiki.isSystemTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.isSystemTiddler(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/tag.js\":{\"title\":\"$:/core/modules/filters/is/tag.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/tag.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[tag]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tag = function(source,prefix,options) {\\n\\tvar results = [],\\n\\t\\ttagMap = options.wiki.getTagMap();\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!$tw.utils.hop(tagMap,title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif($tw.utils.hop(tagMap,title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/tiddler.js\":{\"title\":\"$:/core/modules/filters/is/tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/tiddler.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[tiddler]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tiddler = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!options.wiki.tiddlerExists(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(options.wiki.tiddlerExists(title)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is/variable.js\":{\"title\":\"$:/core/modules/filters/is/variable.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is/variable.js\\ntype: application/javascript\\nmodule-type: isfilteroperator\\n\\nFilter function for [is[variable]]\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.variable = function(source,prefix,options) {\\n\\tvar results = [];\\n\\tif(prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(!(title in options.widget.variables)) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title in options.widget.variables) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"isfilteroperator\"},\"$:/core/modules/filters/is.js\":{\"title\":\"$:/core/modules/filters/is.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/is.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for checking tiddler properties\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar isFilterOperators;\\n\\nfunction getIsFilterOperators() {\\n\\tif(!isFilterOperators) {\\n\\t\\tisFilterOperators = {};\\n\\t\\t$tw.modules.applyMethods(\\\"isfilteroperator\\\",isFilterOperators);\\n\\t}\\n\\treturn isFilterOperators;\\n}\\n\\n/*\\nExport our filter function\\n*/\\nexports.is = function(source,operator,options) {\\n\\t// Dispatch to the correct isfilteroperator\\n\\tvar isFilterOperators = getIsFilterOperators();\\n\\tif(operator.operand) {\\n\\t\\tvar isFilterOperator = isFilterOperators[operator.operand];\\n\\t\\tif(isFilterOperator) {\\n\\t\\t\\treturn isFilterOperator(source,operator.prefix,options);\\n\\t\\t} else {\\n\\t\\t\\treturn [$tw.language.getString(\\\"Error/IsFilterOperator\\\")];\\n\\t\\t}\\n\\t} else {\\n\\t\\t// Return all tiddlers if the operand is missing\\n\\t\\tvar results = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t\\treturn results;\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/limit.js\":{\"title\":\"$:/core/modules/filters/limit.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/limit.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for chopping the results to a specified maximum number of entries\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.limit = function(source,operator,options) {\\n\\tvar results = [];\\n\\t// Convert to an array\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\t// Slice the array if necessary\\n\\tvar limit = Math.min(results.length,parseInt(operator.operand,10));\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tresults = results.slice(-limit);\\n\\t} else {\\n\\t\\tresults = results.slice(0,limit);\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/links.js\":{\"title\":\"$:/core/modules/filters/links.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/links.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning all the links from a tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.links = function(source,operator,options) {\\n\\tvar results = new $tw.utils.LinkedList();\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.pushTop(options.wiki.getTiddlerLinks(title));\\n\\t});\\n\\treturn results.makeTiddlerIterator(options.wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/list.js\":{\"title\":\"$:/core/modules/filters/list.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/list.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning the tiddlers whose title is listed in the operand tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.list = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\ttr = $tw.utils.parseTextReference(operator.operand),\\n\\t\\tcurrTiddlerTitle = options.widget && options.widget.getVariable(\\\"currentTiddler\\\"),\\n\\t\\tlist = options.wiki.getTiddlerList(tr.title || currTiddlerTitle,tr.field,tr.index);\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(list.indexOf(title) === -1) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tresults = list;\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/listed.js\":{\"title\":\"$:/core/modules/filters/listed.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/listed.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning all tiddlers that have the selected tiddlers in a list\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.listed = function(source,operator,options) {\\n\\tvar field = operator.operand || \\\"list\\\",\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\t$tw.utils.pushTop(results,options.wiki.findListingsOfTiddler(title,field));\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/listops.js\":{\"title\":\"$:/core/modules/filters/listops.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/listops.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operators for manipulating the current selection list\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nOrder a list\\n*/\\nexports.order = function(source,operator,options) {\\n\\tvar results = [];\\n\\tif(operator.operand.toLowerCase() === \\\"reverse\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.unshift(title);\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n/*\\nReverse list\\n*/\\nexports.reverse = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.unshift(title);\\n\\t});\\n\\treturn results;\\n};\\n\\n/*\\nFirst entry/entries in list\\n*/\\nexports.first = function(source,operator,options) {\\n\\tvar count = $tw.utils.getInt(operator.operand,1),\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\treturn results.slice(0,count);\\n};\\n\\n/*\\nLast entry/entries in list\\n*/\\nexports.last = function(source,operator,options) {\\n\\tvar count = $tw.utils.getInt(operator.operand,1),\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\treturn results.slice(-count);\\n};\\n\\n/*\\nAll but the first entry/entries of the list\\n*/\\nexports.rest = function(source,operator,options) {\\n\\tvar count = $tw.utils.getInt(operator.operand,1),\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\treturn results.slice(count);\\n};\\nexports.butfirst = exports.rest;\\nexports.bf = exports.rest;\\n\\n/*\\nAll but the last entry/entries of the list\\n*/\\nexports.butlast = function(source,operator,options) {\\n\\tvar count = $tw.utils.getInt(operator.operand,1),\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\tvar index = count === 0 ? results.length : -count;\\n\\treturn results.slice(0,index);\\n};\\nexports.bl = exports.butlast;\\n\\n/*\\nThe nth member of the list\\n*/\\nexports.nth = function(source,operator,options) {\\n\\tvar count = $tw.utils.getInt(operator.operand,1),\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\treturn results.slice(count - 1,count);\\n};\\n\\n/*\\nThe zero based nth member of the list\\n*/\\nexports.zth = function(source,operator,options) {\\n\\tvar count = $tw.utils.getInt(operator.operand,0),\\n\\t\\tresults = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\treturn results.slice(count,count + 1);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/lookup.js\":{\"title\":\"$:/core/modules/filters/lookup.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/lookup.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator that looks up values via a title prefix\\n\\n[lookup:\u003Cdefaultvalue>:\u003Cfield OR index>[\u003Cprefix>],[\u003Cfield-name OR index-name>]]\\n\\nPrepends the prefix to the selected items and returns the specified \\nfield or index value. If the 2nd suffix does not exist, it defaults to field.\\nIf the second operand is missing it defaults to \\\"text\\\" for fields, and \\\"0\\\" for indexes\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.lookup = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = operator.suffixes || [],\\n\\t\\tdefaultSuffix = suffixes[0] ? (suffixes[0][0] || \\\"\\\") : \\\"\\\",\\n\\t\\tindexSuffix = (suffixes[1] && suffixes[1][0] === \\\"index\\\") ? true : false,\\n\\t\\ttarget;\\n\\tif(operator.operands.length == 2) {\\n\\t\\ttarget = operator.operands[1]\\n\\t} else {\\n\\t\\ttarget = indexSuffix ? \\\"0\\\": \\\"text\\\";\\n\\t}\\n\\tif(indexSuffix) {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tvar data = options.wiki.extractTiddlerDataItem(operator.operands[0]+title,target,defaultSuffix);\\n\\t\\t\\tresults.push(data);\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tvar value = defaultSuffix;\\n\\t\\t\\tvar targetTiddler = options.wiki.getTiddler(operator.operands[0]+title);\\n\\t\\t\\tif(targetTiddler && targetTiddler.getFieldString(target)) {\\n\\t\\t\\t\\tvalue = targetTiddler.getFieldString(target);\\n\\t\\t\\t}\\n\\t\\t\\tresults.push(value);\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/match.js\":{\"title\":\"$:/core/modules/filters/match.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/match.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for checking if a title matches a string\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.match = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = (operator.suffixes || [])[0] || [];\\n\\tif(suffixes.indexOf(\\\"caseinsensitive\\\") !== -1) {\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.toLowerCase() !== (operator.operand || \\\"\\\").toLowerCase()) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.toLowerCase() === (operator.operand || \\\"\\\").toLowerCase()) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title !== operator.operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title === operator.operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/math.js\":{\"title\":\"$:/core/modules/filters/math.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/math.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operators for math. Unary/binary operators work on each item in turn, and return a new item list.\\n\\nSum/product/maxall/minall operate on the entire list, returning a single item.\\n\\nNote that strings are converted to numbers automatically. Trailing non-digits are ignored.\\n\\n* \\\"\\\" converts to 0\\n* \\\"12kk\\\" converts to 12\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.negate = makeNumericBinaryOperator(\\n\\tfunction(a) {return -a}\\n);\\n\\nexports.abs = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.abs(a)}\\n);\\n\\nexports.ceil = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.ceil(a)}\\n);\\n\\nexports.floor = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.floor(a)}\\n);\\n\\nexports.round = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.round(a)}\\n);\\n\\nexports.trunc = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.trunc(a)}\\n);\\n\\nexports.untrunc = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.ceil(Math.abs(a)) * Math.sign(a)}\\n);\\n\\nexports.sign = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.sign(a)}\\n);\\n\\nexports.add = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return a + b;}\\n);\\n\\nexports.subtract = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return a - b;}\\n);\\n\\nexports.multiply = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return a * b;}\\n);\\n\\nexports.divide = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return a / b;}\\n);\\n\\nexports.remainder = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return a % b;}\\n);\\n\\nexports.max = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Math.max(a,b);}\\n);\\n\\nexports.min = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Math.min(a,b);}\\n);\\n\\nexports.fixed = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Number.prototype.toFixed.call(a,Math.min(Math.max(b,0),100));}\\n);\\n\\nexports.precision = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Number.prototype.toPrecision.call(a,Math.min(Math.max(b,1),100));}\\n);\\n\\nexports.exponential = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Number.prototype.toExponential.call(a,Math.min(Math.max(b,0),100));}\\n);\\n\\nexports.power = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Math.pow(a,b);}\\n);\\n\\nexports.log = makeNumericBinaryOperator(\\n\\tfunction(a,b) {\\n\\t\\tif(b) {\\n\\t\\t\\treturn Math.log(a)/Math.log(b);\\n\\t\\t} else {\\n\\t\\t\\treturn Math.log(a);\\n\\t\\t}\\n\\t}\\n);\\n\\nexports.sum = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return accumulator + value},\\n\\t0 // Initial value\\n);\\n\\nexports.product = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return accumulator * value},\\n\\t1 // Initial value\\n);\\n\\nexports.maxall = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return Math.max(accumulator,value)},\\n\\t-Infinity // Initial value\\n);\\n\\nexports.minall = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return Math.min(accumulator,value)},\\n\\tInfinity // Initial value\\n);\\n\\nexports.median = makeNumericArrayOperator(\\n\\tfunction(values) {\\n\\t\\tvar len = values.length, median;\\n\\t\\tvalues.sort();\\n\\t\\tif(len % 2) { \\n\\t\\t\\t// Odd, return the middle number\\n\\t\\t\\tmedian = values[(len - 1) / 2];\\n\\t\\t} else {\\n\\t\\t\\t// Even, return average of two middle numbers\\n\\t\\t\\tmedian = (values[len / 2 - 1] + values[len / 2]) / 2;\\n\\t\\t}\\n\\t\\treturn [median];\\n\\t}\\n);\\n\\nexports.average = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return accumulator + value},\\n\\t0, // Initial value\\n\\tfunction(finalValue,numberOfValues) {\\n\\t\\treturn finalValue/numberOfValues;\\n\\t}\\n);\\n\\nexports.variance = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return accumulator + value},\\n\\t0,\\n\\tfunction(finalValue,numberOfValues,originalValues) {\\n\\t\\treturn getVarianceFromArray(originalValues,finalValue/numberOfValues);\\n\\t}\\n);\\n\\nexports[\\\"standard-deviation\\\"] = makeNumericReducingOperator(\\n\\tfunction(accumulator,value) {return accumulator + value},\\n\\t0,\\n\\tfunction(finalValue,numberOfValues,originalValues) {\\n\\t\\tvar variance = getVarianceFromArray(originalValues,finalValue/numberOfValues);\\n\\t\\treturn Math.sqrt(variance);\\n\\t}\\n);\\n\\n//trigonometry\\nexports.cos = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.cos(a)}\\n);\\n\\nexports.sin = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.sin(a)}\\n);\\n\\nexports.tan = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.tan(a)}\\n);\\n\\nexports.acos = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.acos(a)}\\n);\\n\\nexports.asin = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.asin(a)}\\n);\\n\\nexports.atan = makeNumericBinaryOperator(\\n\\tfunction(a) {return Math.atan(a)}\\n);\\n\\nexports.atan2 = makeNumericBinaryOperator(\\n\\tfunction(a,b) {return Math.atan2(a,b)}\\n);\\n\\n//Calculate the variance of a population of numbers in an array given its mean\\nfunction getVarianceFromArray(values,mean) {\\n\\tvar deviationTotal = values.reduce(function(accumulator,value) {\\n\\t\\treturn accumulator + Math.pow(value - mean, 2);\\n\\t},0);\\n\\treturn deviationTotal/values.length;\\n};\\n\\nfunction makeNumericBinaryOperator(fnCalc) {\\n\\treturn function(source,operator,options) {\\n\\t\\tvar result = [],\\n\\t\\t\\tnumOperand = $tw.utils.parseNumber(operator.operand);\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresult.push($tw.utils.stringifyNumber(fnCalc($tw.utils.parseNumber(title),numOperand)));\\n\\t\\t});\\n\\t\\treturn result;\\n\\t};\\n};\\n\\nfunction makeNumericReducingOperator(fnCalc,initialValue,fnFinal) {\\n\\tinitialValue = initialValue || 0;\\n\\treturn function(source,operator,options) {\\n\\t\\tvar result = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresult.push($tw.utils.parseNumber(title));\\n\\t\\t});\\n\\t\\tvar value = result.reduce(function(accumulator,currentValue) {\\n\\t\\t\\t\\treturn fnCalc(accumulator,currentValue);\\n\\t\\t\\t},initialValue);\\n\\t\\tif(fnFinal) {\\n\\t\\t\\tvalue = fnFinal(value,result.length,result);\\n\\t\\t}\\n\\t\\treturn [$tw.utils.stringifyNumber(value)];\\n\\t};\\n};\\n\\nfunction makeNumericArrayOperator(fnCalc) {\\n\\treturn function(source,operator,options) {\\n\\t\\tvar results = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push($tw.utils.parseNumber(title));\\n\\t\\t});\\n\\t\\tresults = fnCalc(results);\\n\\t\\t$tw.utils.each(results,function(value,index) {\\n\\t\\t\\tresults[index] = $tw.utils.stringifyNumber(value);\\n\\t\\t});\\n\\t\\treturn results;\\n\\t};\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/minlength.js\":{\"title\":\"$:/core/modules/filters/minlength.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/minlength.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for filtering out titles that don't meet the minimum length in the operand\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.minlength = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tminLength = parseInt(operator.operand || \\\"\\\",10) || 0;\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(title.length >= minLength) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/moduleproperty.js\":{\"title\":\"$:/core/modules/filters/moduleproperty.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/moduleproperty.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter [[module-name]moduleproperty[name]] retrieve a module property\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.moduleproperty = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar value = require(title)[operator.operand || \\\"\\\"];\\n\\t\\tif(value !== undefined) {\\n\\t\\t\\tresults.push(value);\\n\\t\\t}\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/modules.js\":{\"title\":\"$:/core/modules/filters/modules.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/modules.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the titles of the modules of a given type in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.modules = function(source,operator,options) {\\n\\tvar results = [];\\n\\tif(operator.operands.length >= 2) {\\n\\t\\t// Return the modules that have the module property specified in the first operand with the value in the second operand\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t$tw.utils.each($tw.modules.types[title],function(moduleInfo,moduleName) {\\n\\t\\t\\t\\tif(require(moduleName)[operator.operands[0]] === operator.operands[1]) {\\n\\t\\t\\t\\t\\tresults.push(moduleName);\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\t} else {\\n\\t\\t// Return all the module names without filtering\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t$tw.utils.each($tw.modules.types[title],function(moduleInfo,moduleName) {\\n\\t\\t\\t\\tresults.push(moduleName);\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/moduletypes.js\":{\"title\":\"$:/core/modules/filters/moduletypes.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/moduletypes.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the module types in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.moduletypes = function(source,operator,options) {\\n\\tvar results = [];\\n\\t$tw.utils.each($tw.modules.types,function(moduleInfo,type) {\\n\\t\\tresults.push(type);\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/next.js\":{\"title\":\"$:/core/modules/filters/next.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/next.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning the tiddler whose title occurs next in the list supplied in the operand tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.next = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tlist = options.wiki.getTiddlerList(operator.operand);\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar match = list.indexOf(title);\\n\\t\\t// increment match and then test if result is in range\\n\\t\\tmatch++;\\n\\t\\tif(match > 0 && match \u003C list.length) {\\n\\t\\t\\tresults.push(list[match]);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/plugintiddlers.js\":{\"title\":\"$:/core/modules/filters/plugintiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/plugintiddlers.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the titles of the shadow tiddlers within a plugin\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.plugintiddlers = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar pluginInfo = options.wiki.getPluginInfo(title) || options.wiki.getTiddlerDataCached(title,{tiddlers:[]});\\n\\t\\tif(pluginInfo && pluginInfo.tiddlers) {\\n\\t\\t\\t$tw.utils.each(pluginInfo.tiddlers,function(fields,title) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/prefix.js\":{\"title\":\"$:/core/modules/filters/prefix.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/prefix.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for checking if a title starts with a prefix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.prefix = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = (operator.suffixes || [])[0] || [];\\n\\tif(suffixes.indexOf(\\\"caseinsensitive\\\") !== -1) {\\n\\t\\tvar operand = operator.operand.toLowerCase();\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.toLowerCase().substr(0,operand.length) !== operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.toLowerCase().substr(0,operand.length) === operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.substr(0,operator.operand.length) !== operator.operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.substr(0,operator.operand.length) === operator.operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/previous.js\":{\"title\":\"$:/core/modules/filters/previous.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/previous.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning the tiddler whose title occurs immediately prior in the list supplied in the operand tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.previous = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tlist = options.wiki.getTiddlerList(operator.operand);\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar match = list.indexOf(title);\\n\\t\\t// increment match and then test if result is in range\\n\\t\\tmatch--;\\n\\t\\tif(match >= 0) {\\n\\t\\t\\tresults.push(list[match]);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/range.js\":{\"title\":\"$:/core/modules/filters/range.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/range.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for generating a numeric range.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.range = function(source,operator,options) {\\n\\tvar results = [];\\n\\t// For backwards compatibility, if there is only one operand, try to split it using one of the delimiters\\n\\tvar parts = operator.operands || [];\\n\\tif(parts.length === 1) {\\n\\t\\tparts = operator.operand.split(/[,:;]/g);\\n\\t}\\n\\t// Process the parts\\n\\tvar beg, end, inc, i, fixed = 0;\\n\\tfor (i=0; i\u003Cparts.length; i++) {\\n\\t\\t// Validate real number\\n\\t\\tif(!/^\\\\s*[+-]?((\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+))\\\\s*$/.test(parts[i])) {\\n\\t\\t\\treturn [\\\"range: bad number \\\\\\\"\\\" + parts[i] + \\\"\\\\\\\"\\\"];\\n\\t\\t}\\n\\t\\t// Count digits; the most precise number determines decimal places in output.\\n\\t\\tvar frac = /\\\\.\\\\d+/.exec(parts[i]);\\n\\t\\tif(frac) {\\n\\t\\t\\tfixed = Math.max(fixed,frac[0].length-1);\\n\\t\\t}\\n\\t\\tparts[i] = parseFloat(parts[i]);\\n\\t}\\n\\tswitch(parts.length) {\\n\\t\\tcase 1:\\n\\t\\t\\tend = parts[0];\\n\\t\\t\\tif (end >= 1) {\\n\\t\\t\\t\\tbeg = 1;\\n\\t\\t\\t}\\n\\t\\t\\telse if (end \u003C= -1) {\\n\\t\\t\\t\\tbeg = -1;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\treturn [];\\n\\t\\t\\t}\\n\\t\\t\\tinc = 1;\\n\\t\\t\\tbreak;\\n\\t\\tcase 2:\\n\\t\\t\\tbeg = parts[0];\\n\\t\\t\\tend = parts[1];\\n\\t\\t\\tinc = 1;\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tbeg = parts[0];\\n\\t\\t\\tend = parts[1];\\n\\t\\t\\tinc = Math.abs(parts[2]);\\n\\t\\t\\tbreak;\\n\\t}\\n\\tif(inc === 0) {\\n\\t\\treturn [\\\"range: increment 0 causes infinite loop\\\"];\\n\\t}\\n\\t// May need to count backwards\\n\\tvar direction = ((end \u003C beg) ? -1 : 1);\\n\\tinc *= direction;\\n\\t// Estimate number of resulting elements\\n\\tif((end - beg) / inc > 10000) {\\n\\t\\treturn [\\\"range: too many steps (over 10K)\\\"];\\n\\t}\\n\\t// Avoid rounding error on last step\\n\\tend += direction * 0.5 * Math.pow(0.1,fixed);\\n\\tvar safety = 10010;\\n\\t// Enumerate the range\\n\\tif (end\u003Cbeg) {\\n\\t\\tfor(i=beg; i>end; i+=inc) {\\n\\t\\t\\tresults.push(i.toFixed(fixed));\\n\\t\\t\\tif(--safety\u003C0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tfor(i=beg; i\u003Cend; i+=inc) {\\n\\t\\t\\tresults.push(i.toFixed(fixed));\\n\\t\\t\\tif(--safety\u003C0) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif(safety\u003C0) {\\n\\t\\treturn [\\\"range: unexpectedly large output\\\"];\\n\\t}\\n\\t// Reverse?\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tresults.reverse();\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/reduce.js\":{\"title\":\"$:/core/modules/filters/reduce.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/reduce.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator evaluates a subfilter for each item, making the running total available in the variable `accumulator`, and the current index available in the variable `index`\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.reduce = function(source,operator,options) {\\n\\t// Accumulate the list\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\t// Run the filter over each item\\n\\tvar filterFn = options.wiki.compileFilter(operator.operand),\\n\\t\\taccumulator = operator.operands[1] || \\\"\\\";\\n\\tfor(var index=0; index\u003Cresults.length; index++) {\\n\\t\\tvar title = results[index],\\n\\t\\t\\tlist = filterFn.call(options.wiki,options.wiki.makeTiddlerIterator([title]),{\\n\\t\\t\\t\\tgetVariable: function(name) {\\n\\t\\t\\t\\t\\tswitch(name) {\\n\\t\\t\\t\\t\\t\\tcase \\\"currentTiddler\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn \\\"\\\" + title;\\n\\t\\t\\t\\t\\t\\tcase \\\"..currentTiddler\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn options.widget.getVariable(\\\"currentTiddler\\\");\\n\\t\\t\\t\\t\\t\\tcase \\\"accumulator\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn \\\"\\\" + accumulator;\\n\\t\\t\\t\\t\\t\\tcase \\\"index\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn \\\"\\\" + index;\\n\\t\\t\\t\\t\\t\\tcase \\\"revIndex\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn \\\"\\\" + (results.length - 1 - index);\\n\\t\\t\\t\\t\\t\\tcase \\\"length\\\":\\n\\t\\t\\t\\t\\t\\t\\treturn \\\"\\\" + results.length;\\n\\t\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t\\treturn options.widget.getVariable(name);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\tif(list.length > 0) {\\n\\t\\t\\taccumulator = \\\"\\\" +  list[0];\\n\\t\\t}\\n\\t}\\n\\tif(results.length > 0) {\\n\\t\\treturn [accumulator];\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/regexp.js\":{\"title\":\"$:/core/modules/filters/regexp.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/regexp.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for regexp matching\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.regexp = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldname = operator.suffix || \\\"title\\\",\\n\\t\\tregexpString, regexp, flags = \\\"\\\", match,\\n\\t\\tgetFieldString = function(tiddler,title) {\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\treturn tiddler.getFieldString(fieldname);\\n\\t\\t\\t} else if(fieldname === \\\"title\\\") {\\n\\t\\t\\t\\treturn title;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t};\\n\\t// Process flags and construct regexp\\n\\tregexpString = operator.operand;\\n\\tmatch = /^\\\\(\\\\?([gim]+)\\\\)/.exec(regexpString);\\n\\tif(match) {\\n\\t\\tflags = match[1];\\n\\t\\tregexpString = regexpString.substr(match[0].length);\\n\\t} else {\\n\\t\\tmatch = /\\\\(\\\\?([gim]+)\\\\)$/.exec(regexpString);\\n\\t\\tif(match) {\\n\\t\\t\\tflags = match[1];\\n\\t\\t\\tregexpString = regexpString.substr(0,regexpString.length - match[0].length);\\n\\t\\t}\\n\\t}\\n\\ttry {\\n\\t\\tregexp = new RegExp(regexpString,flags);\\n\\t} catch(e) {\\n\\t\\treturn [\\\"\\\" + e];\\n\\t}\\n\\t// Process the incoming tiddlers\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tvar text = getFieldString(tiddler,title);\\n\\t\\t\\tif(text !== null) {\\n\\t\\t\\t\\tif(!regexp.exec(text)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tvar text = getFieldString(tiddler,title);\\n\\t\\t\\tif(text !== null) {\\n\\t\\t\\t\\tif(!!regexp.exec(text)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/removeprefix.js\":{\"title\":\"$:/core/modules/filters/removeprefix.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/removeprefix.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for removing a prefix from each title in the list. Titles that do not start with the prefix are removed.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.removeprefix = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = (operator.suffixes || [])[0] || [];\\n\\tif(suffixes.indexOf(\\\"caseinsensitive\\\") !== -1) {\\n\\t\\tvar operand = operator.operand.toLowerCase();\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title.toLowerCase().substr(0,operand.length) === operand) {\\n\\t\\t\\t\\tresults.push(title.substr(operand.length));\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title.substr(0,operator.operand.length) === operator.operand) {\\n\\t\\t\\t\\tresults.push(title.substr(operator.operand.length));\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/removesuffix.js\":{\"title\":\"$:/core/modules/filters/removesuffix.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/removesuffix.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for removing a suffix from each title in the list. Titles that do not end with the suffix are removed.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.removesuffix = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = (operator.suffixes || [])[0] || [];\\n\\tif (!operator.operand) {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t} else if(suffixes.indexOf(\\\"caseinsensitive\\\") !== -1) {\\n\\t\\tvar operand = operator.operand.toLowerCase();\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title && title.toLowerCase().substr(-operand.length) === operand) {\\n\\t\\t\\t\\tresults.push(title.substr(0,title.length - operand.length));\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(title && title.substr(-operator.operand.length) === operator.operand) {\\n\\t\\t\\t\\tresults.push(title.substr(0,title.length - operator.operand.length));\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/sameday.js\":{\"title\":\"$:/core/modules/filters/sameday.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/sameday.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator that selects tiddlers with a modified date field on the same day as the provided value.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.sameday = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldName = operator.suffix || \\\"modified\\\",\\n\\t\\ttargetDate = (new Date($tw.utils.parseDate(operator.operand))).setHours(0,0,0,0);\\n\\t// Function to convert a date/time to a date integer\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(tiddler) {\\n\\t\\t\\tif(tiddler.getFieldDay(fieldName) === targetDate) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/search.js\":{\"title\":\"$:/core/modules/filters/search.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/search.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for searching for the text in the operand tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.search = function(source,operator,options) {\\n\\tvar invert = operator.prefix === \\\"!\\\";\\n\\tif(operator.suffixes) {\\n\\t\\tvar hasFlag = function(flag) {\\n\\t\\t\\t\\treturn (operator.suffixes[1] || []).indexOf(flag) !== -1;\\n\\t\\t\\t},\\n\\t\\t\\texcludeFields = false,\\n\\t\\t\\tfieldList = operator.suffixes[0] || [],\\n\\t\\t\\tfirstField = fieldList[0] || \\\"\\\", \\n\\t\\t\\tfirstChar = firstField.charAt(0),\\n\\t\\t\\tfields;\\n\\t\\tif(firstChar === \\\"-\\\") {\\n\\t\\t\\tfields = [firstField.slice(1)].concat(fieldList.slice(1));\\n\\t\\t\\texcludeFields = true;\\n\\t\\t} else if(fieldList[0] === \\\"*\\\"){\\n\\t\\t\\tfields = [];\\n\\t\\t\\texcludeFields = true;\\n\\t\\t} else {\\n\\t\\t\\tfields = fieldList.slice(0);\\n\\t\\t}\\n\\t\\treturn options.wiki.search(operator.operand,{\\n\\t\\t\\tsource: source,\\n\\t\\t\\tinvert: invert,\\n\\t\\t\\tfield: fields,\\n\\t\\t\\texcludeField: excludeFields,\\n\\t\\t\\tsome: hasFlag(\\\"some\\\"),\\n\\t\\t\\tcaseSensitive: hasFlag(\\\"casesensitive\\\"),\\n\\t\\t\\tliteral: hasFlag(\\\"literal\\\"),\\n\\t\\t\\twhitespace: hasFlag(\\\"whitespace\\\"),\\n\\t\\t\\tanchored: hasFlag(\\\"anchored\\\"),\\n\\t\\t\\tregexp: hasFlag(\\\"regexp\\\"),\\n\\t\\t\\twords: hasFlag(\\\"words\\\")\\n\\t\\t});\\n\\t} else {\\n\\t\\treturn options.wiki.search(operator.operand,{\\n\\t\\t\\tsource: source,\\n\\t\\t\\tinvert: invert\\n\\t\\t});\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/shadowsource.js\":{\"title\":\"$:/core/modules/filters/shadowsource.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/shadowsource.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the source plugins for shadow tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.shadowsource = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar source = options.wiki.getShadowSource(title);\\n\\t\\tif(source) {\\n\\t\\t\\t$tw.utils.pushTop(results,source);\\n\\t\\t}\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/slugify.js\":{\"title\":\"$:/core/modules/filters/slugify.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/slugify.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for slugifying a tiddler title\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.slugify = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(options.wiki.slugify(title));\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/sort.js\":{\"title\":\"$:/core/modules/filters/sort.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/sort.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for sorting\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.sort = function(source,operator,options) {\\n\\tvar results = prepare_results(source);\\n\\toptions.wiki.sortTiddlers(results,operator.operand || \\\"title\\\",operator.prefix === \\\"!\\\",false,false);\\n\\treturn results;\\n};\\n\\nexports.nsort = function(source,operator,options) {\\n\\tvar results = prepare_results(source);\\n\\toptions.wiki.sortTiddlers(results,operator.operand || \\\"title\\\",operator.prefix === \\\"!\\\",false,true);\\n\\treturn results;\\n};\\n\\nexports.sortan = function(source, operator, options) {\\n\\tvar results = prepare_results(source);\\n\\toptions.wiki.sortTiddlers(results, operator.operand || \\\"title\\\", operator.prefix === \\\"!\\\",false,false,true);\\n\\treturn results;\\n};\\n\\nexports.sortcs = function(source,operator,options) {\\n\\tvar results = prepare_results(source);\\n\\toptions.wiki.sortTiddlers(results,operator.operand || \\\"title\\\",operator.prefix === \\\"!\\\",true,false);\\n\\treturn results;\\n};\\n\\nexports.nsortcs = function(source,operator,options) {\\n\\tvar results = prepare_results(source);\\n\\toptions.wiki.sortTiddlers(results,operator.operand || \\\"title\\\",operator.prefix === \\\"!\\\",true,true);\\n\\treturn results;\\n};\\n\\nvar prepare_results = function (source) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(title);\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/sortsub.js\":{\"title\":\"$:/core/modules/filters/sortsub.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/sortsub.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for sorting by a subfilter\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.sortsub = function(source,operator,options) {\\n\\t// Compile the subfilter\\n\\tvar filterFn = options.wiki.compileFilter(operator.operand);\\n\\t// Collect the input titles and the corresponding sort keys\\n\\tvar inputTitles = [],\\n\\t\\tsortKeys = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tinputTitles.push(title);\\n\\t\\tvar r = filterFn.call(options.wiki,function(iterator) {\\n\\t\\t\\titerator(options.wiki.getTiddler(title),title);\\n\\t\\t},{\\n\\t\\t\\tgetVariable: function(name) {\\n\\t\\t\\t\\tswitch(name) {\\n\\t\\t\\t\\t\\tcase \\\"currentTiddler\\\":\\n\\t\\t\\t\\t\\t\\treturn \\\"\\\" + title;\\n\\t\\t\\t\\t\\tcase \\\"..currentTiddler\\\":\\n\\t\\t\\t\\t\\t\\treturn options.widget.getVariable(\\\"currentTiddler\\\");\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\treturn options.widget.getVariable(name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tsortKeys.push(r[0] || \\\"\\\");\\n\\t});\\n\\t// Rather than sorting the titles array, we'll sort the indexes so that we can consult both arrays\\n\\tvar indexes = new Array(inputTitles.length);\\n\\tfor(var t=0; t\u003CinputTitles.length; t++) {\\n\\t\\tindexes[t] = t;\\n\\t}\\n\\t// Sort the indexes\\n\\tvar compareFn = $tw.utils.makeCompareFunction(operator.suffix,{defaultType: \\\"string\\\",invert: operator.prefix === \\\"!\\\"});\\n\\tindexes = indexes.sort(function(a,b) {\\n\\t\\treturn compareFn(sortKeys[a],sortKeys[b]);\\n\\t});\\n\\t// Make the results array in order\\n\\tvar results = [];\\n\\t$tw.utils.each(indexes,function(index) {\\n\\t\\tresults.push(inputTitles[index]);\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/splitbefore.js\":{\"title\":\"$:/core/modules/filters/splitbefore.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/splitbefore.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator that splits each result on the first occurance of the specified separator and returns the unique values.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.splitbefore = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar parts = title.split(operator.operand);\\n\\t\\tif(parts.length === 1) {\\n\\t\\t\\t$tw.utils.pushTop(results,parts[0]);\\n\\t\\t} else {\\n\\t\\t\\t$tw.utils.pushTop(results,parts[0] + operator.operand);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/storyviews.js\":{\"title\":\"$:/core/modules/filters/storyviews.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/storyviews.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the story views in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.storyviews = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tstoryviews = {};\\n\\t$tw.modules.applyMethods(\\\"storyview\\\",storyviews);\\n\\t$tw.utils.each(storyviews,function(info,name) {\\n\\t\\tresults.push(name);\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/strings.js\":{\"title\":\"$:/core/modules/filters/strings.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/strings.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operators for strings. Unary/binary operators work on each item in turn, and return a new item list.\\n\\nSum/product/maxall/minall operate on the entire list, returning a single item.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.length = makeStringBinaryOperator(\\n\\tfunction(a) {return [\\\"\\\" + (\\\"\\\" + a).length];}\\n);\\n\\nexports.uppercase = makeStringBinaryOperator(\\n\\tfunction(a) {return [(\\\"\\\" + a).toUpperCase()];}\\n);\\n\\nexports.lowercase = makeStringBinaryOperator(\\n\\tfunction(a) {return [(\\\"\\\" + a).toLowerCase()];}\\n);\\n\\nexports.sentencecase = makeStringBinaryOperator(\\n\\tfunction(a) {return [$tw.utils.toSentenceCase(a)];}\\n);\\n\\nexports.titlecase = makeStringBinaryOperator(\\n\\tfunction(a) {return [$tw.utils.toTitleCase(a)];}\\n);\\n\\nexports.trim = function(source,operator,options) {\\n\\tvar result = [],\\n\\t\\tsuffix = operator.suffix || \\\"\\\",\\n\\t\\toperand = (operator.operand || \\\"\\\"),\\n\\t\\tfnCalc;\\n\\tif(suffix === \\\"prefix\\\") {\\n\\t\\tfnCalc = function(a,b) {return [$tw.utils.trimPrefix(a,b)];}\\n\\t} else if(suffix === \\\"suffix\\\") {\\n\\t\\tfnCalc = function(a,b) {return [$tw.utils.trimSuffix(a,b)];}\\n\\t} else {\\n\\t\\tif(operand === \\\"\\\") {\\n\\t\\t\\tfnCalc = function(a) {return [$tw.utils.trim(a)];}\\n\\t\\t} else {\\n\\t\\t\\tfnCalc = function(a,b) {return [$tw.utils.trimSuffix($tw.utils.trimPrefix(a,b),b)];}\\n\\t\\t}\\n\\t}\\n\\tsource(function(tiddler,title) {\\n\\t\\tArray.prototype.push.apply(result,fnCalc(title,operand));\\n\\t});\\n\\treturn result;\\n};\\n\\nexports.split = makeStringBinaryOperator(\\n\\tfunction(a,b) {return (\\\"\\\" + a).split(b);}\\n);\\n\\nexports[\\\"enlist-input\\\"] = makeStringBinaryOperator(\\n\\tfunction(a,o,s) {return $tw.utils.parseStringArray(\\\"\\\" + a,(s === \\\"raw\\\"));}\\n);\\n\\nexports.join = makeStringReducingOperator(\\n\\tfunction(accumulator,value,operand) {\\n\\t\\tif(accumulator === null) {\\n\\t\\t\\treturn value;\\n\\t\\t} else {\\n\\t\\t\\treturn accumulator + operand + value;\\n\\t\\t}\\n\\t},null\\n);\\n\\nfunction makeStringBinaryOperator(fnCalc) {\\n\\treturn function(source,operator,options) {\\n\\t\\tvar result = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tArray.prototype.push.apply(result,fnCalc(title,operator.operand || \\\"\\\",operator.suffix || \\\"\\\"));\\n\\t\\t});\\n\\t\\treturn result;\\n\\t};\\n}\\n\\nfunction makeStringReducingOperator(fnCalc,initialValue) {\\n\\treturn function(source,operator,options) {\\n\\t\\tvar result = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresult.push(title);\\n\\t\\t});\\n\\t\\tif(result.length === 0) {\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\t\\treturn [result.reduce(function(accumulator,currentValue) {\\n\\t\\t\\treturn fnCalc(accumulator,currentValue,operator.operand || \\\"\\\");\\n\\t\\t},initialValue) || \\\"\\\"];\\n\\t};\\n}\\n\\nexports.splitregexp = function(source,operator,options) {\\n\\tvar result = [],\\n\\t\\tsuffix = operator.suffix || \\\"\\\",\\n\\t\\tflags = (suffix.indexOf(\\\"m\\\") !== -1 ? \\\"m\\\" : \\\"\\\") + (suffix.indexOf(\\\"i\\\") !== -1 ? \\\"i\\\" : \\\"\\\"),\\n\\t\\tregExp;\\n\\ttry {\\n\\t\\tregExp = new RegExp(operator.operand || \\\"\\\",flags);\\n\\t} catch(ex) {\\n\\t\\treturn [\\\"RegExp error: \\\" + ex];\\n\\t}\\n\\tsource(function(tiddler,title) {\\n\\t\\tArray.prototype.push.apply(result,title.split(regExp));\\n\\t});\\n\\treturn result;\\n};\\n\\nexports[\\\"search-replace\\\"] = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = operator.suffixes || [],\\n\\t\\tflagSuffix = (suffixes[0] ? (suffixes[0][0] || \\\"\\\") : \\\"\\\"),\\n\\t\\tflags = (flagSuffix.indexOf(\\\"g\\\") !== -1 ? \\\"g\\\" : \\\"\\\") + (flagSuffix.indexOf(\\\"i\\\") !== -1 ? \\\"i\\\" : \\\"\\\") + (flagSuffix.indexOf(\\\"m\\\") !== -1 ? \\\"m\\\" : \\\"\\\"),\\n\\t\\tisRegExp = (suffixes[1] && suffixes[1][0] === \\\"regexp\\\") ? true : false,\\n\\t\\t//Escape regexp characters if the operand is not a regular expression\\n\\t\\tsearchTerm = isRegExp ? operator.operand : $tw.utils.escapeRegExp(operator.operand),\\n\\t\\t//Escape $ character in replacement string if not in regular expression mode\\n\\t\\treplacement = isRegExp ? operator.operands[1] : (operator.operands[1]||\\\"\\\").replace(/\\\\$/g,\\\"$$$$\\\"),\\n\\t\\tregExp;\\n\\ttry {\\n\\t\\tregExp = new RegExp(searchTerm,flags);\\n\\t} catch(ex) {\\n\\t\\treturn [\\\"RegExp error: \\\" + ex];\\n\\t}\\n\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(title && (operator.operands.length > 1)) {\\n\\t\\t\\tresults.push(\\n\\t\\t\\t\\ttitle.replace(regExp,replacement)\\n\\t\\t\\t);\\n\\t\\t\\tregExp.lastIndex = 0;\\n\\t\\t} else {\\n\\t\\t\\tresults.push(title);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.pad = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\ttargetLength = operator.operand ? parseInt(operator.operand) : 0,\\n\\t\\tfill = operator.operands[1] || \\\"0\\\";\\n\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(title && title.length) {\\n\\t\\t\\tif(title.length >= targetLength) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar padString = \\\"\\\",\\n\\t\\t\\t\\t\\tpadStringLength = targetLength - title.length;\\n\\t\\t\\t\\twhile (padStringLength > padString.length) {\\n\\t\\t\\t\\t\\tpadString += fill;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t//make sure we do not exceed the specified length\\n\\t\\t\\t\\tpadString = padString.slice(0,padStringLength);\\n\\t\\t\\t\\tif(operator.suffix && (operator.suffix === \\\"suffix\\\")) {\\n\\t\\t\\t\\t\\ttitle = title + padString;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttitle = padString + title;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n}\\n\\nexports.charcode = function(source,operator,options) {\\n\\tvar chars = [];\\n\\t$tw.utils.each(operator.operands,function(operand) {\\n\\t\\tif(operand !== \\\"\\\") {\\n\\t\\t\\tchars.push(String.fromCharCode($tw.utils.parseInt(operand)));\\n\\t\\t}\\n\\t});\\n\\treturn [chars.join(\\\"\\\")];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/subfilter.js\":{\"title\":\"$:/core/modules/filters/subfilter.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/subfilter.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning its operand evaluated as a filter\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.subfilter = function(source,operator,options) {\\n\\tvar list = options.wiki.filterTiddlers(operator.operand,options.widget,source);\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tvar results = [];\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(list.indexOf(title) === -1) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn results;\\n\\t} else {\\n\\t\\treturn list;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/subtiddlerfields.js\":{\"title\":\"$:/core/modules/filters/subtiddlerfields.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/subtiddlerfields.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the fields on the selected subtiddlers of the plugin named in the operand\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.subtiddlerfields = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar subtiddler = options.wiki.getSubTiddler(operator.operand,title);\\n\\t\\tif(subtiddler) {\\n\\t\\t\\tfor(var fieldName in subtiddler.fields) {\\n\\t\\t\\t\\t$tw.utils.pushTop(results,fieldName);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/suffix.js\":{\"title\":\"$:/core/modules/filters/suffix.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/suffix.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for checking if a title ends with a suffix\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.suffix = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tsuffixes = (operator.suffixes || [])[0] || [];\\n\\tif (!operator.operand) {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t} else if(suffixes.indexOf(\\\"caseinsensitive\\\") !== -1) {\\n\\t\\tvar operand = operator.operand.toLowerCase();\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.toLowerCase().substr(-operand.length) !== operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.toLowerCase().substr(-operand.length) === operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.substr(-operator.operand.length) !== operator.operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(title.substr(-operator.operand.length) === operator.operand) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/tag.js\":{\"title\":\"$:/core/modules/filters/tag.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/tag.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for checking for the presence of a tag\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tag = function(source,operator,options) {\\n\\tvar results = [],indexedResults;\\n\\tif((operator.suffix || \\\"\\\").toLowerCase() === \\\"strict\\\" && !operator.operand) {\\n\\t\\t// New semantics:\\n\\t\\t// Always return copy of input if operator.operand is missing\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t} else {\\n\\t\\t// Old semantics:\\n\\t\\tvar tiddlers;\\n\\t\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\t\\t// Returns a copy of the input if operator.operand is missing\\n\\t\\t\\ttiddlers = options.wiki.getTiddlersWithTag(operator.operand);\\n\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\tif(tiddlers.indexOf(title) === -1) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\t// Returns empty results if operator.operand is missing\\n\\t\\t\\tif(source.byTag) {\\n\\t\\t\\t\\tindexedResults = source.byTag(operator.operand);\\n\\t\\t\\t\\tif(indexedResults) {\\n\\t\\t\\t\\t\\treturn indexedResults;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttiddlers = options.wiki.getTiddlersWithTag(operator.operand);\\n\\t\\t\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\t\\t\\tif(tiddlers.indexOf(title) !== -1) {\\n\\t\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tresults = options.wiki.sortByList(results,operator.operand);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/tagging.js\":{\"title\":\"$:/core/modules/filters/tagging.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/tagging.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning all tiddlers that are tagged with the selected tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tagging = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\t$tw.utils.pushTop(results,options.wiki.getTiddlersWithTag(title));\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/tags.js\":{\"title\":\"$:/core/modules/filters/tags.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/tags.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning all the tags of the selected tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.tags = function(source,operator,options) {\\n\\tvar tags = {};\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar t, length;\\n\\t\\tif(tiddler && tiddler.fields.tags) {\\n\\t\\t\\tfor(t=0, length=tiddler.fields.tags.length; t\u003Clength; t++) {\\n\\t\\t\\t\\ttags[tiddler.fields.tags[t]] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn Object.keys(tags);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/then.js\":{\"title\":\"$:/core/modules/filters/then.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/then.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for replacing any titles with a constant\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.then = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.push(operator.operand);\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/title.js\":{\"title\":\"$:/core/modules/filters/title.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/title.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for comparing title fields for equality\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.title = function(source,operator,options) {\\n\\tvar results = [];\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tif(tiddler && tiddler.fields.title !== operator.operand) {\\n\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tresults.push(operator.operand);\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/untagged.js\":{\"title\":\"$:/core/modules/filters/untagged.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/untagged.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator returning all the selected tiddlers that are untagged\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.untagged = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\texpected = (operator.prefix === \\\"!\\\");\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(((tiddler && $tw.utils.isArray(tiddler.fields.tags) && tiddler.fields.tags.length > 0) === expected) || (!tiddler && !expected)) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/variables.js\":{\"title\":\"$:/core/modules/filters/variables.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/variables.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the active variables\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.variables = function(source,operator,options) {\\n\\tvar names = [];\\n\\tfor(var variable in options.widget.variables) {\\n\\t\\tnames.push(variable);\\n\\t}\\n\\treturn names.sort();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/wikiparserrules.js\":{\"title\":\"$:/core/modules/filters/wikiparserrules.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/wikiparserrules.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for returning the names of the wiki parser rules in this wiki\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.wikiparserrules = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\toperand = operator.operand;\\n\\t$tw.utils.each($tw.modules.types.wikirule,function(mod) {\\n\\t\\tvar exp = mod.exports;\\n\\t\\tif(!operand || exp.types[operand]) {\\n\\t\\t\\tresults.push(exp.name);\\n\\t\\t}\\n\\t});\\n\\tresults.sort();\\n\\treturn results;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters/x-listops.js\":{\"title\":\"$:/core/modules/filters/x-listops.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/x-listops.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nExtended filter operators to manipulate the current list.\\n\\n\\\\*/\\n(function () {\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\t/*\\n\\tFetch titles from the current list\\n\\t*/\\n\\tvar prepare_results = function (source) {\\n\\tvar results = [];\\n\\t\\tsource(function (tiddler, title) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t});\\n\\t\\treturn results;\\n\\t};\\n\\n\\t/*\\n\\tMoves a number of items from the tail of the current list before the item named in the operand\\n\\t*/\\n\\texports.putbefore = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tindex = results.indexOf(operator.operand),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,1);\\n\\t\\treturn (index === -1) ?\\n\\t\\t\\tresults.slice(0, -1) :\\n\\t\\t\\tresults.slice(0, index).concat(results.slice(-count)).concat(results.slice(index, -count));\\n\\t};\\n\\n\\t/*\\n\\tMoves a number of items from the tail of the current list after the item named in the operand\\n\\t*/\\n\\texports.putafter = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tindex = results.indexOf(operator.operand),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,1);\\n\\t\\treturn (index === -1) ?\\n\\t\\t\\tresults.slice(0, -1) :\\n\\t\\t\\tresults.slice(0, index + 1).concat(results.slice(-count)).concat(results.slice(index + 1, -count));\\n\\t};\\n\\n\\t/*\\n\\tReplaces the item named in the operand with a number of items from the tail of the current list\\n\\t*/\\n\\texports.replace = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tindex = results.indexOf(operator.operand),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,1);\\n\\t\\treturn (index === -1) ?\\n\\t\\t\\tresults.slice(0, -count) :\\n\\t\\t\\tresults.slice(0, index).concat(results.slice(-count)).concat(results.slice(index + 1, -count));\\n\\t};\\n\\n\\t/*\\n\\tMoves a number of items from the tail of the current list to the head of the list\\n\\t*/\\n\\texports.putfirst = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,1);\\n\\t\\treturn results.slice(-count).concat(results.slice(0, -count));\\n\\t};\\n\\n\\t/*\\n\\tMoves a number of items from the head of the current list to the tail of the list\\n\\t*/\\n\\texports.putlast = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,1);\\n\\t\\treturn results.slice(count).concat(results.slice(0, count));\\n\\t};\\n\\n\\t/*\\n\\tMoves the item named in the operand a number of places forward or backward in the list\\n\\t*/\\n\\texports.move = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tindex = results.indexOf(operator.operand),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,1),\\n\\t\\t\\tmarker = results.splice(index, 1),\\n\\t\\t\\toffset =  (index + count) > 0 ? index + count : 0;\\n\\t\\treturn results.slice(0, offset).concat(marker).concat(results.slice(offset));\\n\\t};\\n\\n\\t/*\\n\\tReturns the items from the current list that are after the item named in the operand\\n\\t*/\\n\\texports.allafter = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tindex = results.indexOf(operator.operand);\\n\\t\\treturn (index === -1) ? [] :\\n\\t\\t\\t(operator.suffix) ? results.slice(index) :\\n\\t\\t\\tresults.slice(index + 1);\\n\\t};\\n\\n\\t/*\\n\\tReturns the items from the current list that are before the item named in the operand\\n\\t*/\\n\\texports.allbefore = function (source, operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\tindex = results.indexOf(operator.operand);\\n\\t\\treturn (index === -1) ? [] :\\n\\t\\t\\t(operator.suffix) ? results.slice(0, index + 1) :\\n\\t\\t\\tresults.slice(0, index);\\n\\t};\\n\\n\\t/*\\n\\tAppends the items listed in the operand array to the tail of the current list\\n\\t*/\\n\\texports.append = function (source, operator) {\\n\\t\\tvar append = $tw.utils.parseStringArray(operator.operand, \\\"true\\\"),\\n\\t\\t\\tresults = prepare_results(source),\\n\\t\\t\\tcount = parseInt(operator.suffix) || append.length;\\n\\t\\treturn (append.length === 0) ? results :\\n\\t\\t\\t(operator.prefix) ? results.concat(append.slice(-count)) :\\n\\t\\t\\tresults.concat(append.slice(0, count));\\n\\t};\\n\\n\\t/*\\n\\tPrepends the items listed in the operand array to the head of the current list\\n\\t*/\\n\\texports.prepend = function (source, operator) {\\n\\t\\tvar prepend = $tw.utils.parseStringArray(operator.operand, \\\"true\\\"),\\n\\t\\t\\tresults = prepare_results(source),\\n\\t\\t\\tcount = $tw.utils.getInt(operator.suffix,prepend.length);\\n\\t\\treturn (prepend.length === 0) ? results :\\n\\t\\t\\t(operator.prefix) ? prepend.slice(-count).concat(results) :\\n\\t\\t\\tprepend.slice(0, count).concat(results);\\n\\t};\\n\\n\\t/*\\n\\tReturns all items from the current list except the items listed in the operand array\\n\\t*/\\n\\texports.remove = function (source, operator) {\\n\\t\\tvar array = $tw.utils.parseStringArray(operator.operand, \\\"true\\\"),\\n\\t\\t\\tresults = prepare_results(source),\\n\\t\\t\\tcount = parseInt(operator.suffix) || array.length,\\n\\t\\t\\tp,\\n\\t\\t\\tlen,\\n\\t\\t\\tindex;\\n\\t\\tlen = array.length - 1;\\n\\t\\tfor (p = 0; p \u003C count; ++p) {\\n\\t\\t\\tif (operator.prefix) {\\n\\t\\t\\t\\tindex = results.indexOf(array[len - p]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tindex = results.indexOf(array[p]);\\n\\t\\t\\t}\\n\\t\\t\\tif (index !== -1) {\\n\\t\\t\\t\\tresults.splice(index, 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn results;\\n\\t};\\n\\n\\t/*\\n\\tReturns all items from the current list sorted in the order of the items in the operand array\\n\\t*/\\n\\texports.sortby = function (source, operator) {\\n\\t\\tvar results = prepare_results(source);\\n\\t\\tif (!results || results.length \u003C 2) {\\n\\t\\t\\treturn results;\\n\\t\\t}\\n\\t\\tvar lookup = $tw.utils.parseStringArray(operator.operand, \\\"true\\\");\\n\\t\\tresults.sort(function (a, b) {\\n\\t\\t\\treturn lookup.indexOf(a) - lookup.indexOf(b);\\n\\t\\t});\\n\\t\\treturn results;\\n\\t};\\n\\n\\t/*\\n\\tRemoves all duplicate items from the current list\\n\\t*/\\n\\texports.unique = function (source, operator) {\\n\\t\\tvar results = prepare_results(source);\\n\\t\\tvar set = results.reduce(function (a, b) {\\n\\t\\t\\tif (a.indexOf(b) \u003C 0) {\\n\\t\\t\\t\\ta.push(b);\\n\\t\\t\\t}\\n\\t\\t\\treturn a;\\n\\t\\t}, []);\\n\\t\\treturn set;\\n\\t};\\n\\n\\tvar cycleValueInArray = function(results,operands,stepSize) {\\n\\t\\tvar resultsIndex,\\n\\t\\t\\tstep = stepSize || 1,\\n\\t\\t\\ti = 0,\\n\\t\\t\\topLength = operands.length,\\n\\t\\t\\tnextOperandIndex;\\n\\t\\tfor(i; i \u003C opLength; i++) {\\n\\t\\t\\tresultsIndex = results.indexOf(operands[i]);\\n\\t\\t\\tif(resultsIndex !== -1) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(resultsIndex !== -1) {\\n\\t\\t\\ti = i + step;\\n\\t\\t\\tnextOperandIndex = (i \u003C opLength ? i : i - opLength);\\n\\t\\t\\tif(operands.length > 1) {\\n\\t\\t\\t\\tresults.splice(resultsIndex,1,operands[nextOperandIndex]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tresults.splice(resultsIndex,1);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tresults.push(operands[0]);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t/*\\n\\tToggles an item in the current list.\\n\\t*/\\n\\texports.toggle = function(source,operator) {\\n\\t\\treturn cycleValueInArray(prepare_results(source),operator.operands);\\n\\t}\\n\\n\\texports.cycle = function(source,operator) {\\n\\t\\tvar results = prepare_results(source),\\n\\t\\t\\toperands = (operator.operand.length ? $tw.utils.parseStringArray(operator.operand, \\\"true\\\") : [\\\"\\\"]),\\n\\t\\t\\tstep = $tw.utils.getInt(operator.operands[1]||\\\"\\\",1);\\n\\t\\tif(step \u003C 0) {\\n\\t\\t\\toperands.reverse();\\n\\t\\t\\tstep = Math.abs(step);\\n\\t\\t}\\n\\t\\treturn cycleValueInArray(results,operands,step);\\n\\t}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"},\"$:/core/modules/filters.js\":{\"title\":\"$:/core/modules/filters.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters.js\\ntype: application/javascript\\nmodule-type: wikimethod\\n\\nAdds tiddler filtering methods to the $tw.Wiki object.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nParses an operation (i.e. a run) within a filter string\\n\\toperators: Array of array of operator nodes into which results should be inserted\\n\\tfilterString: filter string\\n\\tp: start position within the string\\nReturns the new start position, after the parsed operation\\n*/\\nfunction parseFilterOperation(operators,filterString,p) {\\n\\tvar nextBracketPos, operator;\\n\\t// Skip the starting square bracket\\n\\tif(filterString.charAt(p++) !== \\\"[\\\") {\\n\\t\\tthrow \\\"Missing [ in filter expression\\\";\\n\\t}\\n\\t// Process each operator in turn\\n\\tdo {\\n\\t\\toperator = {};\\n\\t\\t// Check for an operator prefix\\n\\t\\tif(filterString.charAt(p) === \\\"!\\\") {\\n\\t\\t\\toperator.prefix = filterString.charAt(p++);\\n\\t\\t}\\n\\t\\t// Get the operator name\\n\\t\\tnextBracketPos = filterString.substring(p).search(/[\\\\[\\\\{\u003C\\\\/]/);\\n\\t\\tif(nextBracketPos === -1) {\\n\\t\\t\\tthrow \\\"Missing [ in filter expression\\\";\\n\\t\\t}\\n\\t\\tnextBracketPos += p;\\n\\t\\tvar bracket = filterString.charAt(nextBracketPos);\\n\\t\\toperator.operator = filterString.substring(p,nextBracketPos);\\n\\t\\t// Any suffix?\\n\\t\\tvar colon = operator.operator.indexOf(':');\\n\\t\\tif(colon > -1) {\\n\\t\\t\\t// The raw suffix for older filters\\n\\t\\t\\toperator.suffix = operator.operator.substring(colon + 1);\\n\\t\\t\\toperator.operator = operator.operator.substring(0,colon) || \\\"field\\\";\\n\\t\\t\\t// The processed suffix for newer filters\\n\\t\\t\\toperator.suffixes = [];\\n\\t\\t\\t$tw.utils.each(operator.suffix.split(\\\":\\\"),function(subsuffix) {\\n\\t\\t\\t\\toperator.suffixes.push([]);\\n\\t\\t\\t\\t$tw.utils.each(subsuffix.split(\\\",\\\"),function(entry) {\\n\\t\\t\\t\\t\\tentry = $tw.utils.trim(entry);\\n\\t\\t\\t\\t\\tif(entry) {\\n\\t\\t\\t\\t\\t\\toperator.suffixes[operator.suffixes.length - 1].push(entry); \\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\t// Empty operator means: title\\n\\t\\telse if(operator.operator === \\\"\\\") {\\n\\t\\t\\toperator.operator = \\\"title\\\";\\n\\t\\t}\\n\\t\\toperator.operands = [];\\n\\t\\tvar parseOperand = function(bracketType) {\\n\\t\\t\\tvar operand = {};\\n\\t\\t\\tswitch (bracketType) {\\n\\t\\t\\t\\tcase \\\"{\\\": // Curly brackets\\n\\t\\t\\t\\t\\toperand.indirect = true;\\n\\t\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"}\\\",p);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"[\\\": // Square brackets\\n\\t\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"]\\\",p);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"\u003C\\\": // Angle brackets\\n\\t\\t\\t\\t\\toperand.variable = true;\\n\\t\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\">\\\",p);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"/\\\": // regexp brackets\\n\\t\\t\\t\\t\\tvar rex = /^((?:[^\\\\\\\\\\\\/]|\\\\\\\\.)*)\\\\/(?:\\\\(([mygi]+)\\\\))?/g,\\n\\t\\t\\t\\t\\t\\trexMatch = rex.exec(filterString.substring(p));\\n\\t\\t\\t\\t\\tif(rexMatch) {\\n\\t\\t\\t\\t\\t\\toperator.regexp = new RegExp(rexMatch[1], rexMatch[2]);\\n\\t// DEPRECATION WARNING\\n\\tconsole.log(\\\"WARNING: Filter\\\",operator.operator,\\\"has a deprecated regexp operand\\\",operator.regexp);\\n\\t\\t\\t\\t\\t\\tnextBracketPos = p + rex.lastIndex - 1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tthrow \\\"Unterminated regular expression in filter expression\\\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(nextBracketPos === -1) {\\n\\t\\t\\t\\tthrow \\\"Missing closing bracket in filter expression\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif(operator.regexp) {\\n\\t\\t\\t\\toperand.text = \\\"\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\toperand.text = filterString.substring(p,nextBracketPos);\\n\\t\\t\\t}\\n\\t\\t\\toperator.operands.push(operand);\\n\\t\\t\\tp = nextBracketPos + 1;\\n\\t\\t}\\n\\n\\t\\tp = nextBracketPos + 1;\\n\\t\\tparseOperand(bracket);\\n\\n\\t\\t// Check for multiple operands\\n\\t\\twhile(filterString.charAt(p) === \\\",\\\") {\\n\\t\\t\\tp++;\\n\\t\\t\\tif(/^[\\\\[\\\\{\u003C\\\\/]/.test(filterString.substring(p))) {\\n\\t\\t\\t\\tnextBracketPos = p;\\n\\t\\t\\t\\tp++;\\n\\t\\t\\t\\tparseOperand(filterString.charAt(nextBracketPos));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthrow \\\"Missing [ in filter expression\\\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Push this operator\\n\\t\\toperators.push(operator);\\n\\t} while(filterString.charAt(p) !== \\\"]\\\");\\n\\t// Skip the ending square bracket\\n\\tif(filterString.charAt(p++) !== \\\"]\\\") {\\n\\t\\tthrow \\\"Missing ] in filter expression\\\";\\n\\t}\\n\\t// Return the parsing position\\n\\treturn p;\\n}\\n\\n/*\\nParse a filter string\\n*/\\nexports.parseFilter = function(filterString) {\\n\\tfilterString = filterString || \\\"\\\";\\n\\tvar results = [], // Array of arrays of operator nodes {operator:,operand:}\\n\\t\\tp = 0, // Current position in the filter string\\n\\t\\tmatch;\\n\\tvar whitespaceRegExp = /(\\\\s+)/mg,\\n\\t\\toperandRegExp = /((?:\\\\+|\\\\-|~|=|\\\\:(\\\\w+)(?:\\\\:([\\\\w\\\\:, ]*))?)?)(?:(\\\\[)|(?:\\\"([^\\\"]*)\\\")|(?:'([^']*)')|([^\\\\s\\\\[\\\\]]+))/mg;\\n\\twhile(p \u003C filterString.length) {\\n\\t\\t// Skip any whitespace\\n\\t\\twhitespaceRegExp.lastIndex = p;\\n\\t\\tmatch = whitespaceRegExp.exec(filterString);\\n\\t\\tif(match && match.index === p) {\\n\\t\\t\\tp = p + match[0].length;\\n\\t\\t}\\n\\t\\t// Match the start of the operation\\n\\t\\tif(p \u003C filterString.length) {\\n\\t\\t\\toperandRegExp.lastIndex = p;\\n\\t\\t\\tmatch = operandRegExp.exec(filterString);\\n\\t\\t\\tif(!match || match.index !== p) {\\n\\t\\t\\t\\tthrow $tw.language.getString(\\\"Error/FilterSyntax\\\");\\n\\t\\t\\t}\\n\\t\\t\\tvar operation = {\\n\\t\\t\\t\\tprefix: \\\"\\\",\\n\\t\\t\\t\\toperators: []\\n\\t\\t\\t};\\n\\t\\t\\tif(match[1]) {\\n\\t\\t\\t\\toperation.prefix = match[1];\\n\\t\\t\\t\\tp = p + operation.prefix.length;\\n\\t\\t\\t\\tif(match[2]) {\\n\\t\\t\\t\\t\\toperation.namedPrefix = match[2];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(match[3]) {\\n\\t\\t\\t\\t\\toperation.suffixes = [];\\n\\t\\t\\t\\t\\t $tw.utils.each(match[3].split(\\\":\\\"),function(subsuffix) {\\n\\t\\t\\t\\t\\t\\toperation.suffixes.push([]);\\n\\t\\t\\t\\t\\t\\t$tw.utils.each(subsuffix.split(\\\",\\\"),function(entry) {\\n\\t\\t\\t\\t\\t\\t\\tentry = $tw.utils.trim(entry);\\n\\t\\t\\t\\t\\t\\t\\tif(entry) {\\n\\t\\t\\t\\t\\t\\t\\t\\toperation.suffixes[operation.suffixes.length -1].push(entry);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t });\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(match[4]) { // Opening square bracket\\n\\t\\t\\t\\tp = parseFilterOperation(operation.operators,filterString,p);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tp = match.index + match[0].length;\\n\\t\\t\\t}\\n\\t\\t\\tif(match[5] || match[6] || match[7]) { // Double quoted string, single quoted string or unquoted title\\n\\t\\t\\t\\toperation.operators.push(\\n\\t\\t\\t\\t\\t{operator: \\\"title\\\", operands: [{text: match[5] || match[6] || match[7]}]}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tresults.push(operation);\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\nexports.getFilterOperators = function() {\\n\\tif(!this.filterOperators) {\\n\\t\\t$tw.Wiki.prototype.filterOperators = {};\\n\\t\\t$tw.modules.applyMethods(\\\"filteroperator\\\",this.filterOperators);\\n\\t}\\n\\treturn this.filterOperators;\\n};\\n\\nexports.getFilterRunPrefixes = function() {\\n\\tif(!this.filterRunPrefixes) {\\n\\t\\t$tw.Wiki.prototype.filterRunPrefixes = {};\\n\\t\\t$tw.modules.applyMethods(\\\"filterrunprefix\\\",this.filterRunPrefixes);\\n\\t}\\n\\treturn this.filterRunPrefixes;\\n}\\n\\nexports.filterTiddlers = function(filterString,widget,source) {\\n\\tvar fn = this.compileFilter(filterString);\\n\\treturn fn.call(this,source,widget);\\n};\\n\\n/*\\nCompile a filter into a function with the signature fn(source,widget) where:\\nsource: an iterator function for the source tiddlers, called source(iterator), where iterator is called as iterator(tiddler,title)\\nwidget: an optional widget node for retrieving the current tiddler etc.\\n*/\\nexports.compileFilter = function(filterString) {\\n\\tvar filterParseTree;\\n\\ttry {\\n\\t\\tfilterParseTree = this.parseFilter(filterString);\\n\\t} catch(e) {\\n\\t\\treturn function(source,widget) {\\n\\t\\t\\treturn [$tw.language.getString(\\\"Error/Filter\\\") + \\\": \\\" + e];\\n\\t\\t};\\n\\t}\\n\\t// Get the hashmap of filter operator functions\\n\\tvar filterOperators = this.getFilterOperators();\\n\\t// Assemble array of functions, one for each operation\\n\\tvar operationFunctions = [];\\n\\t// Step through the operations\\n\\tvar self = this;\\n\\t$tw.utils.each(filterParseTree,function(operation) {\\n\\t\\t// Create a function for the chain of operators in the operation\\n\\t\\tvar operationSubFunction = function(source,widget) {\\n\\t\\t\\tvar accumulator = source,\\n\\t\\t\\t\\tresults = [],\\n\\t\\t\\t\\tcurrTiddlerTitle = widget && widget.getVariable(\\\"currentTiddler\\\");\\n\\t\\t\\t$tw.utils.each(operation.operators,function(operator) {\\n\\t\\t\\t\\tvar operands = [],\\n\\t\\t\\t\\t\\toperatorFunction;\\n\\t\\t\\t\\tif(!operator.operator) {\\n\\t\\t\\t\\t\\toperatorFunction = filterOperators.title;\\n\\t\\t\\t\\t} else if(!filterOperators[operator.operator]) {\\n\\t\\t\\t\\t\\toperatorFunction = filterOperators.field;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\toperatorFunction = filterOperators[operator.operator];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t$tw.utils.each(operator.operands,function(operand) {\\n\\t\\t\\t\\t\\tif(operand.indirect) {\\n\\t\\t\\t\\t\\t\\toperand.value = self.getTextReference(operand.text,\\\"\\\",currTiddlerTitle);\\n\\t\\t\\t\\t\\t} else if(operand.variable) {\\n\\t\\t\\t\\t\\t\\tvar varTree = $tw.utils.parseFilterVariable(operand.text);\\n\\t\\t\\t\\t\\t\\toperand.value = widget.getVariable(varTree.name,{params:varTree.params,defaultValue: \\\"\\\"});\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\toperand.value = operand.text;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\toperands.push(operand.value);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// Invoke the appropriate filteroperator module\\n\\t\\t\\t\\tresults = operatorFunction(accumulator,{\\n\\t\\t\\t\\t\\t\\t\\toperator: operator.operator,\\n\\t\\t\\t\\t\\t\\t\\toperand: operands.length > 0 ? operands[0] : undefined,\\n\\t\\t\\t\\t\\t\\t\\toperands: operands,\\n\\t\\t\\t\\t\\t\\t\\tprefix: operator.prefix,\\n\\t\\t\\t\\t\\t\\t\\tsuffix: operator.suffix,\\n\\t\\t\\t\\t\\t\\t\\tsuffixes: operator.suffixes,\\n\\t\\t\\t\\t\\t\\t\\tregexp: operator.regexp\\n\\t\\t\\t\\t\\t\\t},{\\n\\t\\t\\t\\t\\t\\t\\twiki: self,\\n\\t\\t\\t\\t\\t\\t\\twidget: widget\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\tif($tw.utils.isArray(results)) {\\n\\t\\t\\t\\t\\taccumulator = self.makeTiddlerIterator(results);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\taccumulator = results;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tif($tw.utils.isArray(results)) {\\n\\t\\t\\t\\treturn results;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar resultArray = [];\\n\\t\\t\\t\\tresults(function(tiddler,title) {\\n\\t\\t\\t\\t\\tresultArray.push(title);\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\treturn resultArray;\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tvar filterRunPrefixes = self.getFilterRunPrefixes();\\n\\t\\t// Wrap the operator functions in a wrapper function that depends on the prefix\\n\\t\\toperationFunctions.push((function() {\\n\\t\\t\\tvar options = {wiki: self, suffixes: operation.suffixes || []};\\n\\t\\t\\tswitch(operation.prefix || \\\"\\\") {\\n\\t\\t\\t\\tcase \\\"\\\": // No prefix means that the operation is unioned into the result\\n\\t\\t\\t\\t\\treturn filterRunPrefixes[\\\"or\\\"](operationSubFunction, options);\\n\\t\\t\\t\\tcase \\\"=\\\": // The results of the operation are pushed into the result without deduplication\\n\\t\\t\\t\\t\\treturn filterRunPrefixes[\\\"all\\\"](operationSubFunction, options);\\n\\t\\t\\t\\tcase \\\"-\\\": // The results of this operation are removed from the main result\\n\\t\\t\\t\\t\\treturn filterRunPrefixes[\\\"except\\\"](operationSubFunction, options);\\n\\t\\t\\t\\tcase \\\"+\\\": // This operation is applied to the main results so far\\n\\t\\t\\t\\t\\treturn filterRunPrefixes[\\\"and\\\"](operationSubFunction, options);\\n\\t\\t\\t\\tcase \\\"~\\\": // This operation is unioned into the result only if the main result so far is empty\\n\\t\\t\\t\\t\\treturn filterRunPrefixes[\\\"else\\\"](operationSubFunction, options);\\n\\t\\t\\t\\tdefault: \\n\\t\\t\\t\\t\\tif(operation.namedPrefix && filterRunPrefixes[operation.namedPrefix]) {\\n\\t\\t\\t\\t\\t\\treturn filterRunPrefixes[operation.namedPrefix](operationSubFunction, options);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn function(results,source,widget) {\\n\\t\\t\\t\\t\\t\\t\\tresults.clear();\\n\\t\\t\\t\\t\\t\\t\\tresults.push($tw.language.getString(\\\"Error/FilterRunPrefix\\\"));\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t})());\\n\\t});\\n\\t// Return a function that applies the operations to a source iterator of tiddler titles\\n\\treturn $tw.perf.measure(\\\"filter: \\\" + filterString,function filterFunction(source,widget) {\\n\\t\\tif(!source) {\\n\\t\\t\\tsource = self.each;\\n\\t\\t} else if(typeof source === \\\"object\\\") { // Array or hashmap\\n\\t\\t\\tsource = self.makeTiddlerIterator(source);\\n\\t\\t}\\n\\t\\tif(!widget) {\\n\\t\\t\\twidget = $tw.rootWidget;\\n\\t\\t}\\n\\t\\tvar results = new $tw.utils.LinkedList();\\n\\t\\t$tw.utils.each(operationFunctions,function(operationFunction) {\\n\\t\\t\\toperationFunction(results,source,widget);\\n\\t\\t});\\n\\t\\treturn results.toArray();\\n\\t});\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikimethod\"},\"$:/core/modules/indexers/backlinks-indexer.js\":{\"title\":\"$:/core/modules/indexers/backlinks-indexer.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/indexers/backlinks-indexer.js\\ntype: application/javascript\\nmodule-type: indexer\\n\\nIndexes the tiddlers' backlinks\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global modules: false */\\n\\\"use strict\\\";\\n\\n\\nfunction BacklinksIndexer(wiki) {\\n\\tthis.wiki = wiki;\\n}\\n\\nBacklinksIndexer.prototype.init = function() {\\n\\tthis.index = null;\\n}\\n\\nBacklinksIndexer.prototype.rebuild = function() {\\n\\tthis.index = null;\\n}\\n\\nBacklinksIndexer.prototype._getLinks = function(tiddler) {\\n\\tvar parser =  this.wiki.parseText(tiddler.fields.type, tiddler.fields.text, {});\\n\\tif(parser) {\\n\\t\\treturn this.wiki.extractLinks(parser.tree);\\n\\t}\\n\\treturn [];\\n}\\n\\nBacklinksIndexer.prototype.update = function(updateDescriptor) {\\n\\tif(!this.index) {\\n\\t\\treturn;\\n\\t}\\n\\tvar newLinks = [],\\n\\t    oldLinks = [],\\n\\t    self = this;\\n\\tif(updateDescriptor.old.exists) {\\n\\t\\toldLinks = this._getLinks(updateDescriptor.old.tiddler);\\n\\t}\\n\\tif(updateDescriptor.new.exists) {\\n\\t\\tnewLinks = this._getLinks(updateDescriptor.new.tiddler);\\n\\t}\\n\\n\\t$tw.utils.each(oldLinks,function(link) {\\n\\t\\tif(self.index[link]) {\\n\\t\\t\\tdelete self.index[link][updateDescriptor.old.tiddler.fields.title];\\n\\t\\t}\\n\\t});\\n\\t$tw.utils.each(newLinks,function(link) {\\n\\t\\tif(!self.index[link]) {\\n\\t\\t\\tself.index[link] = Object.create(null);\\n\\t\\t}\\n\\t\\tself.index[link][updateDescriptor.new.tiddler.fields.title] = true;\\n\\t});\\n}\\n\\nBacklinksIndexer.prototype.lookup = function(title) {\\n\\tif(!this.index) {\\n\\t\\tthis.index = Object.create(null);\\n\\t\\tvar self = this;\\n\\t\\tthis.wiki.forEachTiddler(function(title,tiddler) {\\n\\t\\t\\tvar links = self._getLinks(tiddler);\\n\\t\\t\\t$tw.utils.each(links, function(link) {\\n\\t\\t\\t\\tif(!self.index[link]) {\\n\\t\\t\\t\\t\\tself.index[link] = Object.create(null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tself.index[link][title] = true;\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}\\n\\tif(this.index[title]) {\\n\\t\\treturn Object.keys(this.index[title]);\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n}\\n\\nexports.BacklinksIndexer = BacklinksIndexer;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"indexer\"},\"$:/core/modules/indexers/field-indexer.js\":{\"title\":\"$:/core/modules/indexers/field-indexer.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/indexers/field-indexer.js\\ntype: application/javascript\\nmodule-type: indexer\\n\\nIndexes the tiddlers with each field value\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global modules: false */\\n\\\"use strict\\\";\\n\\nvar DEFAULT_MAXIMUM_INDEXED_VALUE_LENGTH = 128;\\n\\nfunction FieldIndexer(wiki) {\\n\\tthis.wiki = wiki;\\n}\\n\\nFieldIndexer.prototype.init = function() {\\n\\tthis.index = null;\\n\\tthis.maxIndexedValueLength = DEFAULT_MAXIMUM_INDEXED_VALUE_LENGTH;\\n\\tthis.addIndexMethods();\\n}\\n\\n// Provided for testing\\nFieldIndexer.prototype.setMaxIndexedValueLength = function(length) {\\n\\tthis.index = null;\\n\\tthis.maxIndexedValueLength = length;\\n};\\n\\nFieldIndexer.prototype.addIndexMethods = function() {\\n\\tvar self = this;\\n\\tthis.wiki.each.byField = function(name,value) {\\n\\t\\tvar titles = self.wiki.allTitles(),\\n\\t\\t\\tlookup = self.lookup(name,value);\\n\\t\\treturn lookup && lookup.filter(function(title) {\\n\\t\\t\\treturn titles.indexOf(title) !== -1;\\n\\t\\t});\\n\\t};\\n\\tthis.wiki.eachShadow.byField = function(name,value) {\\n\\t\\tvar titles = self.wiki.allShadowTitles(),\\n\\t\\t\\tlookup = self.lookup(name,value);\\n\\t\\treturn lookup && lookup.filter(function(title) {\\n\\t\\t\\treturn titles.indexOf(title) !== -1;\\n\\t\\t});\\n\\t};\\n\\tthis.wiki.eachTiddlerPlusShadows.byField = function(name,value) {\\n\\t\\tvar lookup = self.lookup(name,value);\\n\\t\\treturn lookup ? lookup.slice(0) : null;\\n\\t};\\n\\tthis.wiki.eachShadowPlusTiddlers.byField = function(name,value) {\\n\\t\\tvar lookup = self.lookup(name,value);\\n\\t\\treturn lookup ? lookup.slice(0) : null;\\n\\t};\\n};\\n\\n/*\\nTear down and then rebuild the index as if all tiddlers have changed\\n*/\\nFieldIndexer.prototype.rebuild = function() {\\n\\t// Invalidate the index so that it will be rebuilt when it is next used\\n\\tthis.index = null;\\n};\\n\\n/*\\nBuild the index for a particular field\\n*/\\nFieldIndexer.prototype.buildIndexForField = function(name) {\\n\\tvar self = this;\\n\\t// Hashmap by field name of hashmap by field value of array of tiddler titles\\n\\tthis.index = this.index || Object.create(null);\\n\\tthis.index[name] = Object.create(null);\\n\\tvar baseIndex = this.index[name];\\n\\t// Update the index for each tiddler\\n\\tthis.wiki.eachTiddlerPlusShadows(function(tiddler,title) {\\n\\t\\tif(name in tiddler.fields) {\\n\\t\\t\\tvar value = tiddler.getFieldString(name);\\n\\t\\t\\t// Skip any values above the maximum length\\n\\t\\t\\tif(value.length \u003C self.maxIndexedValueLength) {\\n\\t\\t\\t\\tbaseIndex[value] = baseIndex[value] || [];\\n\\t\\t\\t\\tbaseIndex[value].push(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nUpdate the index in the light of a tiddler value changing; note that the title must be identical. (Renames are handled as a separate delete and create)\\nupdateDescriptor: {old: {tiddler: \u003Ctiddler>, shadow: \u003Cboolean>, exists: \u003Cboolean>},new: {tiddler: \u003Ctiddler>, shadow: \u003Cboolean>, exists: \u003Cboolean>}}\\n*/\\nFieldIndexer.prototype.update = function(updateDescriptor) {\\n\\tvar self = this;\\n\\t// Don't do anything if the index hasn't been built yet\\n\\tif(this.index === null) {\\n\\t\\treturn;\\n\\t}\\n\\t// Remove the old tiddler from the index\\n\\tif(updateDescriptor.old.tiddler) {\\n\\t\\t$tw.utils.each(this.index,function(indexEntry,name) {\\n\\t\\t\\tif(name in updateDescriptor.old.tiddler.fields) {\\n\\t\\t\\t\\tvar value = updateDescriptor.old.tiddler.getFieldString(name),\\n\\t\\t\\t\\t\\ttiddlerList = indexEntry[value];\\n\\t\\t\\t\\tif(tiddlerList) {\\n\\t\\t\\t\\t\\tvar index = tiddlerList.indexOf(updateDescriptor.old.tiddler.fields.title);\\n\\t\\t\\t\\t\\tif(index !== -1) {\\n\\t\\t\\t\\t\\t\\ttiddlerList.splice(index,1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t// Add the new tiddler to the index\\n\\tif(updateDescriptor[\\\"new\\\"].tiddler) {\\n\\t\\t$tw.utils.each(this.index,function(indexEntry,name) {\\n\\t\\t\\tif(name in updateDescriptor[\\\"new\\\"].tiddler.fields) {\\n\\t\\t\\t\\tvar value = updateDescriptor[\\\"new\\\"].tiddler.getFieldString(name);\\n\\t\\t\\t\\tif(value.length \u003C self.maxIndexedValueLength) {\\n\\t\\t\\t\\t\\tindexEntry[value] = indexEntry[value] || [];\\n\\t\\t\\t\\t\\tindexEntry[value].push(updateDescriptor[\\\"new\\\"].tiddler.fields.title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\n// Lookup the given field returning a list of tiddler titles\\nFieldIndexer.prototype.lookup = function(name,value) {\\n\\t// Fail the lookup if the value is too long\\n\\tif(value.length >= this.maxIndexedValueLength) {\\n\\t\\treturn null;\\n\\t}\\n\\t// Update the index if it has yet to be built\\n\\tif(this.index === null || !this.index[name]) {\\n\\t\\tthis.buildIndexForField(name);\\n\\t}\\n\\treturn this.index[name][value] || [];\\n};\\n\\nexports.FieldIndexer = FieldIndexer;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"indexer\"},\"$:/core/modules/indexers/tag-indexer.js\":{\"title\":\"$:/core/modules/indexers/tag-indexer.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/indexers/tag-indexer.js\\ntype: application/javascript\\nmodule-type: indexer\\n\\nIndexes the tiddlers with each tag\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global modules: false */\\n\\\"use strict\\\";\\n\\nfunction TagIndexer(wiki) {\\n\\tthis.wiki = wiki;\\n}\\n\\nTagIndexer.prototype.init = function() {\\n\\tthis.subIndexers = [\\n\\t\\tnew TagSubIndexer(this,\\\"each\\\"),\\n\\t\\tnew TagSubIndexer(this,\\\"eachShadow\\\"),\\n\\t\\tnew TagSubIndexer(this,\\\"eachTiddlerPlusShadows\\\"),\\n\\t\\tnew TagSubIndexer(this,\\\"eachShadowPlusTiddlers\\\")\\n\\t];\\n\\t$tw.utils.each(this.subIndexers,function(subIndexer) {\\n\\t\\tsubIndexer.addIndexMethod();\\n\\t});\\n};\\n\\nTagIndexer.prototype.rebuild = function() {\\n\\t$tw.utils.each(this.subIndexers,function(subIndexer) {\\n\\t\\tsubIndexer.rebuild();\\n\\t});\\n};\\n\\nTagIndexer.prototype.update = function(updateDescriptor) {\\n\\t$tw.utils.each(this.subIndexers,function(subIndexer) {\\n\\t\\tsubIndexer.update(updateDescriptor);\\n\\t});\\n};\\n\\nfunction TagSubIndexer(indexer,iteratorMethod) {\\n\\tthis.indexer = indexer;\\n\\tthis.iteratorMethod = iteratorMethod;\\n\\tthis.index = null; // Hashmap of tag title to {isSorted: bool, titles: [array]} or null if not yet initialised\\n}\\n\\nTagSubIndexer.prototype.addIndexMethod = function() {\\n\\tvar self = this;\\n\\tthis.indexer.wiki[this.iteratorMethod].byTag = function(tag) {\\n\\t\\treturn self.lookup(tag).slice(0);\\n\\t};\\n};\\n\\nTagSubIndexer.prototype.rebuild = function() {\\n\\tvar self = this;\\n\\t// Hashmap by tag of array of {isSorted:, titles:[]}\\n\\tthis.index = Object.create(null);\\n\\t// Add all the tags\\n\\tthis.indexer.wiki[this.iteratorMethod](function(tiddler,title) {\\n\\t\\t$tw.utils.each(tiddler.fields.tags,function(tag) {\\n\\t\\t\\tif(!self.index[tag]) {\\n\\t\\t\\t\\tself.index[tag] = {isSorted: false, titles: [title]};\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.index[tag].titles.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n};\\n\\nTagSubIndexer.prototype.update = function(updateDescriptor) {\\n\\tthis.index = null;\\n};\\n\\nTagSubIndexer.prototype.lookup = function(tag) {\\n\\t// Update the index if it has yet to be built\\n\\tif(this.index === null) {\\n\\t\\tthis.rebuild();\\n\\t}\\n\\tvar indexRecord = this.index[tag];\\n\\tif(indexRecord) {\\n\\t\\tif(!indexRecord.isSorted) {\\n\\t\\t\\tif(this.indexer.wiki.sortByList) {\\n\\t\\t\\t\\tindexRecord.titles = this.indexer.wiki.sortByList(indexRecord.titles,tag);\\n\\t\\t\\t}\\n\\t\\t\\tindexRecord.isSorted = true;\\n\\t\\t}\\n\\t\\treturn indexRecord.titles;\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n};\\n\\n\\nexports.TagIndexer = TagIndexer;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"indexer\"},\"$:/core/modules/info/platform.js\":{\"title\":\"$:/core/modules/info/platform.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/info/platform.js\\ntype: application/javascript\\nmodule-type: info\\n\\nInitialise basic platform $:/info/ tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.getInfoTiddlerFields = function(updateInfoTiddlersCallback) {\\n\\tvar mapBoolean = function(value) {return value ? \\\"yes\\\" : \\\"no\\\";},\\n\\t\\tinfoTiddlerFields = [];\\n\\t// Basics\\n\\tinfoTiddlerFields.push({title: \\\"$:/info/browser\\\", text: mapBoolean(!!$tw.browser)});\\n\\tinfoTiddlerFields.push({title: \\\"$:/info/node\\\", text: mapBoolean(!!$tw.node)});\\n\\tinfoTiddlerFields.push({title: \\\"$:/info/startup-timestamp\\\", text: $tw.utils.stringifyDate(new Date())});\\n\\tif($tw.browser) {\\n\\t\\t// Document location\\n\\t\\tvar setLocationProperty = function(name,value) {\\n\\t\\t\\t\\tinfoTiddlerFields.push({title: \\\"$:/info/url/\\\" + name, text: value});\\n\\t\\t\\t},\\n\\t\\t\\tlocation = document.location;\\n\\t\\tsetLocationProperty(\\\"full\\\", (location.toString()).split(\\\"#\\\")[0]);\\n\\t\\tsetLocationProperty(\\\"host\\\", location.host);\\n\\t\\tsetLocationProperty(\\\"hostname\\\", location.hostname);\\n\\t\\tsetLocationProperty(\\\"protocol\\\", location.protocol);\\n\\t\\tsetLocationProperty(\\\"port\\\", location.port);\\n\\t\\tsetLocationProperty(\\\"pathname\\\", location.pathname);\\n\\t\\tsetLocationProperty(\\\"search\\\", location.search);\\n\\t\\tsetLocationProperty(\\\"origin\\\", location.origin);\\n\\t\\t// Screen size\\n\\t\\tinfoTiddlerFields.push({title: \\\"$:/info/browser/screen/width\\\", text: window.screen.width.toString()});\\n\\t\\tinfoTiddlerFields.push({title: \\\"$:/info/browser/screen/height\\\", text: window.screen.height.toString()});\\n \\t\\t// Dark mode through event listener on MediaQueryList\\n \\t\\tvar mqList = window.matchMedia(\\\"(prefers-color-scheme: dark)\\\"),\\n \\t\\t\\tgetDarkModeTiddler = function() {return {title: \\\"$:/info/darkmode\\\", text: mqList.matches ? \\\"yes\\\" : \\\"no\\\"};};\\n \\t\\tinfoTiddlerFields.push(getDarkModeTiddler());\\n \\t\\tmqList.addListener(function(event) {\\n \\t\\t\\tupdateInfoTiddlersCallback([getDarkModeTiddler()]);\\n \\t\\t});\\n\\t\\t// Language\\n\\t\\tinfoTiddlerFields.push({title: \\\"$:/info/browser/language\\\", text: navigator.language || \\\"\\\"});\\n\\t}\\n\\treturn infoTiddlerFields;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"info\"},\"$:/core/modules/keyboard.js\":{\"title\":\"$:/core/modules/keyboard.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/keyboard.js\\ntype: application/javascript\\nmodule-type: global\\n\\nKeyboard handling utilities\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar namedKeys = {\\n\\t\\\"cancel\\\": 3,\\n\\t\\\"help\\\": 6,\\n\\t\\\"backspace\\\": 8,\\n\\t\\\"tab\\\": 9,\\n\\t\\\"clear\\\": 12,\\n\\t\\\"return\\\": 13,\\n\\t\\\"enter\\\": 13,\\n\\t\\\"pause\\\": 19,\\n\\t\\\"escape\\\": 27,\\n\\t\\\"space\\\": 32,\\n\\t\\\"page_up\\\": 33,\\n\\t\\\"page_down\\\": 34,\\n\\t\\\"end\\\": 35,\\n\\t\\\"home\\\": 36,\\n\\t\\\"left\\\": 37,\\n\\t\\\"up\\\": 38,\\n\\t\\\"right\\\": 39,\\n\\t\\\"down\\\": 40,\\n\\t\\\"printscreen\\\": 44,\\n\\t\\\"insert\\\": 45,\\n\\t\\\"delete\\\": 46,\\n\\t\\\"0\\\": 48,\\n\\t\\\"1\\\": 49,\\n\\t\\\"2\\\": 50,\\n\\t\\\"3\\\": 51,\\n\\t\\\"4\\\": 52,\\n\\t\\\"5\\\": 53,\\n\\t\\\"6\\\": 54,\\n\\t\\\"7\\\": 55,\\n\\t\\\"8\\\": 56,\\n\\t\\\"9\\\": 57,\\n\\t\\\"firefoxsemicolon\\\": 59,\\n\\t\\\"firefoxequals\\\": 61,\\n\\t\\\"a\\\": 65,\\n\\t\\\"b\\\": 66,\\n\\t\\\"c\\\": 67,\\n\\t\\\"d\\\": 68,\\n\\t\\\"e\\\": 69,\\n\\t\\\"f\\\": 70,\\n\\t\\\"g\\\": 71,\\n\\t\\\"h\\\": 72,\\n\\t\\\"i\\\": 73,\\n\\t\\\"j\\\": 74,\\n\\t\\\"k\\\": 75,\\n\\t\\\"l\\\": 76,\\n\\t\\\"m\\\": 77,\\n\\t\\\"n\\\": 78,\\n\\t\\\"o\\\": 79,\\n\\t\\\"p\\\": 80,\\n\\t\\\"q\\\": 81,\\n\\t\\\"r\\\": 82,\\n\\t\\\"s\\\": 83,\\n\\t\\\"t\\\": 84,\\n\\t\\\"u\\\": 85,\\n\\t\\\"v\\\": 86,\\n\\t\\\"w\\\": 87,\\n\\t\\\"x\\\": 88,\\n\\t\\\"y\\\": 89,\\n\\t\\\"z\\\": 90,\\n\\t\\\"numpad0\\\": 96,\\n\\t\\\"numpad1\\\": 97,\\n\\t\\\"numpad2\\\": 98,\\n\\t\\\"numpad3\\\": 99,\\n\\t\\\"numpad4\\\": 100,\\n\\t\\\"numpad5\\\": 101,\\n\\t\\\"numpad6\\\": 102,\\n\\t\\\"numpad7\\\": 103,\\n\\t\\\"numpad8\\\": 104,\\n\\t\\\"numpad9\\\": 105,\\n\\t\\\"multiply\\\": 106,\\n\\t\\\"add\\\": 107,\\n\\t\\\"separator\\\": 108,\\n\\t\\\"subtract\\\": 109,\\n\\t\\\"decimal\\\": 110,\\n\\t\\\"divide\\\": 111,\\n\\t\\\"f1\\\": 112,\\n\\t\\\"f2\\\": 113,\\n\\t\\\"f3\\\": 114,\\n\\t\\\"f4\\\": 115,\\n\\t\\\"f5\\\": 116,\\n\\t\\\"f6\\\": 117,\\n\\t\\\"f7\\\": 118,\\n\\t\\\"f8\\\": 119,\\n\\t\\\"f9\\\": 120,\\n\\t\\\"f10\\\": 121,\\n\\t\\\"f11\\\": 122,\\n\\t\\\"f12\\\": 123,\\n\\t\\\"f13\\\": 124,\\n\\t\\\"f14\\\": 125,\\n\\t\\\"f15\\\": 126,\\n\\t\\\"f16\\\": 127,\\n\\t\\\"f17\\\": 128,\\n\\t\\\"f18\\\": 129,\\n\\t\\\"f19\\\": 130,\\n\\t\\\"f20\\\": 131,\\n\\t\\\"f21\\\": 132,\\n\\t\\\"f22\\\": 133,\\n\\t\\\"f23\\\": 134,\\n\\t\\\"f24\\\": 135,\\n\\t\\\"firefoxminus\\\": 173,\\n\\t\\\"semicolon\\\": 186,\\n\\t\\\"equals\\\": 187,\\n\\t\\\"comma\\\": 188,\\n\\t\\\"dash\\\": 189,\\n\\t\\\"period\\\": 190,\\n\\t\\\"slash\\\": 191,\\n\\t\\\"backquote\\\": 192,\\n\\t\\\"openbracket\\\": 219,\\n\\t\\\"backslash\\\": 220,\\n\\t\\\"closebracket\\\": 221,\\n\\t\\\"quote\\\": 222\\n};\\n\\nfunction KeyboardManager(options) {\\n\\tvar self = this;\\n\\toptions = options || \\\"\\\";\\n\\t// Save the named key hashmap\\n\\tthis.namedKeys = namedKeys;\\n\\t// Create a reverse mapping of code to keyname\\n\\tthis.keyNames = [];\\n\\t$tw.utils.each(namedKeys,function(keyCode,name) {\\n\\t\\tself.keyNames[keyCode] = name.substr(0,1).toUpperCase() + name.substr(1);\\n\\t});\\n\\t// Save the platform-specific name of the \\\"meta\\\" key\\n\\tthis.metaKeyName = $tw.platform.isMac ? \\\"cmd-\\\" : \\\"win-\\\";\\n\\tthis.shortcutKeysList = [], // Stores the shortcut-key descriptors\\n\\tthis.shortcutActionList = [], // Stores the corresponding action strings\\n\\tthis.shortcutParsedList = []; // Stores the parsed key descriptors\\n\\tthis.lookupNames = [\\\"shortcuts\\\"];\\n\\tthis.lookupNames.push($tw.platform.isMac ? \\\"shortcuts-mac\\\" : \\\"shortcuts-not-mac\\\")\\n\\tthis.lookupNames.push($tw.platform.isWindows ? \\\"shortcuts-windows\\\" : \\\"shortcuts-not-windows\\\");\\n\\tthis.lookupNames.push($tw.platform.isLinux ? \\\"shortcuts-linux\\\" : \\\"shortcuts-not-linux\\\");\\n\\tthis.updateShortcutLists(this.getShortcutTiddlerList());\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\tself.handleShortcutChanges(changes);\\n\\t});\\n}\\n\\n/*\\nReturn an array of keycodes for the modifier keys ctrl, shift, alt, meta\\n*/\\nKeyboardManager.prototype.getModifierKeys = function() {\\n\\treturn [\\n\\t\\t16, // Shift\\n\\t\\t17, // Ctrl\\n\\t\\t18, // Alt\\n\\t\\t20, // CAPS LOCK\\n\\t\\t91, // Meta (left)\\n\\t\\t93, // Meta (right)\\n\\t\\t224 // Meta (Firefox)\\n\\t]\\n};\\n\\n/*\\nParses a key descriptor into the structure:\\n{\\n\\tkeyCode: numeric keycode\\n\\tshiftKey: boolean\\n\\taltKey: boolean\\n\\tctrlKey: boolean\\n\\tmetaKey: boolean\\n}\\nKey descriptors have the following format:\\n\\tctrl+enter\\n\\tctrl+shift+alt+A\\n*/\\nKeyboardManager.prototype.parseKeyDescriptor = function(keyDescriptor,options) {\\n\\tvar components = keyDescriptor.split(/\\\\+|\\\\-/),\\n\\t\\tinfo = {\\n\\t\\t\\tkeyCode: 0,\\n\\t\\t\\tshiftKey: false,\\n\\t\\t\\taltKey: false,\\n\\t\\t\\tctrlKey: false,\\n\\t\\t\\tmetaKey: false\\n\\t\\t};\\n\\tfor(var t=0; t\u003Ccomponents.length; t++) {\\n\\t\\tvar s = components[t].toLowerCase(),\\n\\t\\t\\tc = s.charCodeAt(0);\\n\\t\\t// Look for modifier keys\\n\\t\\tif(s === \\\"ctrl\\\") {\\n\\t\\t\\tinfo.ctrlKey = true;\\n\\t\\t} else if(s === \\\"shift\\\") {\\n\\t\\t\\tinfo.shiftKey = true;\\n\\t\\t} else if(s === \\\"alt\\\") {\\n\\t\\t\\tinfo.altKey = true;\\n\\t\\t} else if(s === \\\"meta\\\" || s === \\\"cmd\\\" || s === \\\"win\\\") {\\n\\t\\t\\tinfo.metaKey = true;\\n\\t\\t}\\n\\t\\t// Replace named keys with their code\\n\\t\\tif(this.namedKeys[s]) {\\n\\t\\t\\tinfo.keyCode = this.namedKeys[s];\\n\\t\\t}\\n\\t}\\n\\tif(options.keyDescriptor) {\\n\\t\\tinfo.keyDescriptor = options.keyDescriptor;\\n\\t}\\n\\tif(info.keyCode) {\\n\\t\\treturn info;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\n/*\\nParse a list of key descriptors into an array of keyInfo objects. The key descriptors can be passed as an array of strings or a space separated string\\n*/\\nKeyboardManager.prototype.parseKeyDescriptors = function(keyDescriptors,options) {\\n\\tvar self = this;\\n\\toptions = options || {};\\n\\toptions.stack = options.stack || [];\\n\\tvar wiki = options.wiki || $tw.wiki;\\n\\tif(typeof keyDescriptors === \\\"string\\\" && keyDescriptors === \\\"\\\") {\\n\\t\\treturn [];\\n\\t}\\n\\tif(!$tw.utils.isArray(keyDescriptors)) {\\n\\t\\tkeyDescriptors = keyDescriptors.split(\\\" \\\");\\n\\t}\\n\\tvar result = [];\\n\\t$tw.utils.each(keyDescriptors,function(keyDescriptor) {\\n\\t\\t// Look for a named shortcut\\n\\t\\tif(keyDescriptor.substr(0,2) === \\\"((\\\" && keyDescriptor.substr(-2,2) === \\\"))\\\") {\\n\\t\\t\\tif(options.stack.indexOf(keyDescriptor) === -1) {\\n\\t\\t\\t\\toptions.stack.push(keyDescriptor);\\n\\t\\t\\t\\tvar name = keyDescriptor.substring(2,keyDescriptor.length - 2),\\n\\t\\t\\t\\t\\tlookupName = function(configName) {\\n\\t\\t\\t\\t\\t\\tvar keyDescriptors = wiki.getTiddlerText(\\\"$:/config/\\\" + configName + \\\"/\\\" + name);\\n\\t\\t\\t\\t\\t\\tif(keyDescriptors) {\\n\\t\\t\\t\\t\\t\\t\\toptions.keyDescriptor = keyDescriptor;\\n\\t\\t\\t\\t\\t\\t\\tresult.push.apply(result,self.parseKeyDescriptors(keyDescriptors,options));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t$tw.utils.each(self.lookupNames,function(platformDescriptor) {\\n\\t\\t\\t\\t\\tlookupName(platformDescriptor);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tresult.push(self.parseKeyDescriptor(keyDescriptor,options));\\n\\t\\t}\\n\\t});\\n\\treturn result;\\n};\\n\\nKeyboardManager.prototype.getPrintableShortcuts = function(keyInfoArray) {\\n\\tvar self = this,\\n\\t\\tresult = [];\\n\\t$tw.utils.each(keyInfoArray,function(keyInfo) {\\n\\t\\tif(keyInfo) {\\n\\t\\t\\tresult.push((keyInfo.ctrlKey ? \\\"ctrl-\\\" : \\\"\\\") + \\n\\t\\t\\t\\t   (keyInfo.shiftKey ? \\\"shift-\\\" : \\\"\\\") + \\n\\t\\t\\t\\t   (keyInfo.altKey ? \\\"alt-\\\" : \\\"\\\") + \\n\\t\\t\\t\\t   (keyInfo.metaKey ? self.metaKeyName : \\\"\\\") + \\n\\t\\t\\t\\t   (self.keyNames[keyInfo.keyCode]));\\n\\t\\t}\\n\\t});\\n\\treturn result;\\n}\\n\\nKeyboardManager.prototype.checkKeyDescriptor = function(event,keyInfo) {\\n\\treturn keyInfo &&\\n\\t\\t\\tevent.keyCode === keyInfo.keyCode && \\n\\t\\t\\tevent.shiftKey === keyInfo.shiftKey && \\n\\t\\t\\tevent.altKey === keyInfo.altKey && \\n\\t\\t\\tevent.ctrlKey === keyInfo.ctrlKey && \\n\\t\\t\\tevent.metaKey === keyInfo.metaKey;\\n};\\n\\nKeyboardManager.prototype.checkKeyDescriptors = function(event,keyInfoArray) {\\n\\treturn (this.getMatchingKeyDescriptor(event,keyInfoArray) !== null);\\n};\\n\\nKeyboardManager.prototype.getMatchingKeyDescriptor = function(event,keyInfoArray) {\\n\\tfor(var t=0; t\u003CkeyInfoArray.length; t++) {\\n\\t\\tif(this.checkKeyDescriptor(event,keyInfoArray[t])) {\\n\\t\\t\\treturn keyInfoArray[t];\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\nKeyboardManager.prototype.getEventModifierKeyDescriptor = function(event) {\\n\\treturn event.ctrlKey && !event.shiftKey\\t&& !event.altKey && !event.metaKey ? \\\"ctrl\\\" : \\n\\t\\tevent.shiftKey && !event.ctrlKey && !event.altKey && !event.metaKey ? \\\"shift\\\" : \\n\\t\\tevent.ctrlKey && event.shiftKey && !event.altKey && !event.metaKey ? \\\"ctrl-shift\\\" : \\n\\t\\tevent.altKey && !event.shiftKey && !event.ctrlKey && !event.metaKey ? \\\"alt\\\" : \\n\\t\\tevent.altKey && event.shiftKey && !event.ctrlKey && !event.metaKey ? \\\"alt-shift\\\" : \\n\\t\\tevent.altKey && event.ctrlKey && !event.shiftKey && !event.metaKey ? \\\"ctrl-alt\\\" : \\n\\t\\tevent.altKey && event.shiftKey && event.ctrlKey && !event.metaKey ? \\\"ctrl-alt-shift\\\" : \\n\\t\\tevent.metaKey && !event.ctrlKey && !event.shiftKey && !event.altKey ? \\\"meta\\\" : \\n\\t\\tevent.metaKey && event.ctrlKey && !event.shiftKey && !event.altKey ? \\\"meta-ctrl\\\" :\\n\\t\\tevent.metaKey && event.ctrlKey && event.shiftKey && !event.altKey ? \\\"meta-ctrl-shift\\\" :\\n\\t\\tevent.metaKey && event.ctrlKey && event.shiftKey && event.altKey ? \\\"meta-ctrl-alt-shift\\\" : \\\"normal\\\";\\n};\\n\\nKeyboardManager.prototype.getShortcutTiddlerList = function() {\\n\\treturn $tw.wiki.getTiddlersWithTag(\\\"$:/tags/KeyboardShortcut\\\");\\n};\\n\\nKeyboardManager.prototype.updateShortcutLists = function(tiddlerList) {\\n\\tthis.shortcutTiddlers = tiddlerList;\\n\\tfor(var i=0; i\u003CtiddlerList.length; i++) {\\n\\t\\tvar title = tiddlerList[i],\\n\\t\\t\\ttiddlerFields = $tw.wiki.getTiddler(title).fields;\\n\\t\\tthis.shortcutKeysList[i] = tiddlerFields.key !== undefined ? tiddlerFields.key : undefined;\\n\\t\\tthis.shortcutActionList[i] = tiddlerFields.text;\\n\\t\\tthis.shortcutParsedList[i] = this.shortcutKeysList[i] !== undefined ? this.parseKeyDescriptors(this.shortcutKeysList[i]) : undefined;\\n\\t}\\n};\\n\\nKeyboardManager.prototype.handleKeydownEvent = function(event) {\\n\\tvar key, action;\\n\\tfor(var i=0; i\u003Cthis.shortcutTiddlers.length; i++) {\\n\\t\\tif(this.shortcutParsedList[i] !== undefined && this.checkKeyDescriptors(event,this.shortcutParsedList[i])) {\\n\\t\\t\\tkey = this.shortcutParsedList[i];\\n\\t\\t\\taction = this.shortcutActionList[i];\\n\\t\\t}\\n\\t}\\n\\tif(key !== undefined) {\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\t\\t$tw.rootWidget.invokeActionString(action,$tw.rootWidget,event);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\\n\\nKeyboardManager.prototype.detectNewShortcuts = function(changedTiddlers) {\\n\\tvar shortcutConfigTiddlers = [],\\n\\t\\thandled = false;\\n\\t$tw.utils.each(this.lookupNames,function(platformDescriptor) {\\n\\t\\tvar descriptorString = \\\"$:/config/\\\" + platformDescriptor + \\\"/\\\";\\n\\t\\tObject.keys(changedTiddlers).forEach(function(configTiddler) {\\n\\t\\t\\tvar configString = configTiddler.substr(0, configTiddler.lastIndexOf(\\\"/\\\") + 1);\\n\\t\\t\\tif(configString === descriptorString) {\\n\\t\\t\\t\\tshortcutConfigTiddlers.push(configTiddler);\\n\\t\\t\\t\\thandled = true;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\tif(handled) {\\n\\t\\treturn $tw.utils.hopArray(changedTiddlers,shortcutConfigTiddlers);\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nKeyboardManager.prototype.handleShortcutChanges = function(changedTiddlers) {\\n\\tvar newList = this.getShortcutTiddlerList();\\n\\tvar hasChanged = $tw.utils.hopArray(changedTiddlers,this.shortcutTiddlers) ? true :\\n\\t\\t($tw.utils.hopArray(changedTiddlers,newList) ? true :\\n\\t\\t(this.detectNewShortcuts(changedTiddlers))\\n\\t);\\n\\t// Re-cache shortcuts if something changed\\n\\tif(hasChanged) {\\n\\t\\tthis.updateShortcutLists(newList);\\n\\t}\\n};\\n\\nexports.KeyboardManager = KeyboardManager;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/language.js\":{\"title\":\"$:/core/modules/language.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/language.js\\ntype: application/javascript\\nmodule-type: global\\n\\nThe $tw.Language() manages translateable strings\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nCreate an instance of the language manager. Options include:\\nwiki: wiki from which to retrieve translation tiddlers\\n*/\\nfunction Language(options) {\\n\\toptions = options || \\\"\\\";\\n\\tthis.wiki = options.wiki || $tw.wiki;\\n}\\n\\n/*\\nReturn a wikified translateable string. The title is automatically prefixed with \\\"$:/language/\\\"\\nOptions include:\\nvariables: optional hashmap of variables to supply to the language wikification\\n*/\\nLanguage.prototype.getString = function(title,options) {\\n\\toptions = options || {};\\n\\ttitle = \\\"$:/language/\\\" + title;\\n\\treturn this.wiki.renderTiddler(\\\"text/plain\\\",title,{variables: options.variables});\\n};\\n\\n/*\\nReturn a raw, unwikified translateable string. The title is automatically prefixed with \\\"$:/language/\\\"\\n*/\\nLanguage.prototype.getRawString = function(title) {\\n\\ttitle = \\\"$:/language/\\\" + title;\\n\\treturn this.wiki.getTiddlerText(title);\\n};\\n\\nexports.Language = Language;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/macros/changecount.js\":{\"title\":\"$:/core/modules/macros/changecount.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/changecount.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to return the changecount for the current tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"changecount\\\";\\n\\nexports.params = [];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function() {\\n\\treturn this.wiki.getChangeCount(this.getVariable(\\\"currentTiddler\\\")) + \\\"\\\";\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/contrastcolour.js\":{\"title\":\"$:/core/modules/macros/contrastcolour.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/contrastcolour.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to choose which of two colours has the highest contrast with a base colour\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"contrastcolour\\\";\\n\\nexports.params = [\\n\\t{name: \\\"target\\\"},\\n\\t{name: \\\"fallbackTarget\\\"},\\n\\t{name: \\\"colourA\\\"},\\n\\t{name: \\\"colourB\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(target,fallbackTarget,colourA,colourB) {\\n\\tvar rgbTarget = $tw.utils.parseCSSColor(target) || $tw.utils.parseCSSColor(fallbackTarget);\\n\\tif(!rgbTarget) {\\n\\t\\treturn colourA;\\n\\t}\\n\\tvar rgbColourA = $tw.utils.parseCSSColor(colourA),\\n\\t\\trgbColourB = $tw.utils.parseCSSColor(colourB);\\n\\tif(rgbColourA && !rgbColourB) {\\n\\t\\treturn rgbColourA;\\n\\t}\\n\\tif(rgbColourB && !rgbColourA) {\\n\\t\\treturn rgbColourB;\\n\\t}\\n\\tif(!rgbColourA && !rgbColourB) {\\n\\t\\t// If neither colour is readable, return a crude inverse of the target\\n\\t\\treturn [255 - rgbTarget[0],255 - rgbTarget[1],255 - rgbTarget[2],rgbTarget[3]];\\n\\t}\\n\\t// Colour brightness formula derived from http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\\n\\tvar brightnessTarget = rgbTarget[0] * 0.299 + rgbTarget[1] * 0.587 + rgbTarget[2] * 0.114,\\n\\t\\tbrightnessA = rgbColourA[0] * 0.299 + rgbColourA[1] * 0.587 + rgbColourA[2] * 0.114,\\n\\t\\tbrightnessB = rgbColourB[0] * 0.299 + rgbColourB[1] * 0.587 + rgbColourB[2] * 0.114;\\n\\treturn Math.abs(brightnessTarget - brightnessA) > Math.abs(brightnessTarget - brightnessB) ? colourA : colourB;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/csvtiddlers.js\":{\"title\":\"$:/core/modules/macros/csvtiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/csvtiddlers.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to output tiddlers matching a filter to CSV\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"csvtiddlers\\\";\\n\\nexports.params = [\\n\\t{name: \\\"filter\\\"},\\n\\t{name: \\\"format\\\"},\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(filter,format) {\\n\\tvar self = this,\\n\\t\\ttiddlers = this.wiki.filterTiddlers(filter),\\n\\t\\ttiddler,\\n\\t\\tfields = [],\\n\\t\\tt,f;\\n\\t// Collect all the fields\\n\\tfor(t=0;t\u003Ctiddlers.length; t++) {\\n\\t\\ttiddler = this.wiki.getTiddler(tiddlers[t]);\\n\\t\\tfor(f in tiddler.fields) {\\n\\t\\t\\tif(fields.indexOf(f) === -1) {\\n\\t\\t\\t\\tfields.push(f);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Sort the fields and bring the standard ones to the front\\n\\tfields.sort();\\n\\t\\\"title text modified modifier created creator\\\".split(\\\" \\\").reverse().forEach(function(value,index) {\\n\\t\\tvar p = fields.indexOf(value);\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tfields.splice(p,1);\\n\\t\\t\\tfields.unshift(value)\\n\\t\\t}\\n\\t});\\n\\t// Output the column headings\\n\\tvar output = [], row = [];\\n\\tfields.forEach(function(value) {\\n\\t\\trow.push(quoteAndEscape(value))\\n\\t});\\n\\toutput.push(row.join(\\\",\\\"));\\n\\t// Output each tiddler\\n\\tfor(var t=0;t\u003Ctiddlers.length; t++) {\\n\\t\\trow = [];\\n\\t\\ttiddler = this.wiki.getTiddler(tiddlers[t]);\\n\\t\\t\\tfor(f=0; f\u003Cfields.length; f++) {\\n\\t\\t\\t\\trow.push(quoteAndEscape(tiddler ? tiddler.getFieldString(fields[f]) || \\\"\\\" : \\\"\\\"));\\n\\t\\t\\t}\\n\\t\\toutput.push(row.join(\\\",\\\"));\\n\\t}\\n\\treturn output.join(\\\"\\\\n\\\");\\n};\\n\\nfunction quoteAndEscape(value) {\\n\\treturn \\\"\\\\\\\"\\\" + value.replace(/\\\"/mg,\\\"\\\\\\\"\\\\\\\"\\\") + \\\"\\\\\\\"\\\";\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/displayshortcuts.js\":{\"title\":\"$:/core/modules/macros/displayshortcuts.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/displayshortcuts.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to display a list of keyboard shortcuts in human readable form. Notably, it resolves named shortcuts like `((bold))` to the underlying keystrokes.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"displayshortcuts\\\";\\n\\nexports.params = [\\n\\t{name: \\\"shortcuts\\\"},\\n\\t{name: \\\"prefix\\\"},\\n\\t{name: \\\"separator\\\"},\\n\\t{name: \\\"suffix\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(shortcuts,prefix,separator,suffix) {\\n\\tvar shortcutArray = $tw.keyboardManager.getPrintableShortcuts($tw.keyboardManager.parseKeyDescriptors(shortcuts,{\\n\\t\\twiki: this.wiki\\n\\t}));\\n\\tif(shortcutArray.length > 0) {\\n\\t\\tshortcutArray.sort(function(a,b) {\\n\\t\\t    return a.toLowerCase().localeCompare(b.toLowerCase());\\n\\t\\t})\\n\\t\\treturn prefix + shortcutArray.join(separator) + suffix;\\n\\t} else {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/jsontiddler.js\":{\"title\":\"$:/core/modules/macros/jsontiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/jsontiddler.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to output a single tiddler to JSON\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"jsontiddler\\\";\\n\\nexports.params = [\\n\\t{name: \\\"title\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(title) {\\n\\ttitle = title || this.getVariable(\\\"currentTiddler\\\");\\n\\tvar tiddler = !!title && this.wiki.getTiddler(title),\\n\\t\\tfields = new Object();\\n\\tif(tiddler) {\\n\\t\\tfor(var field in tiddler.fields) {\\n\\t\\t\\tfields[field] = tiddler.getFieldString(field);\\n\\t\\t}\\n\\t}\\n\\treturn JSON.stringify(fields,null,$tw.config.preferences.jsonSpaces);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/jsontiddlers.js\":{\"title\":\"$:/core/modules/macros/jsontiddlers.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/jsontiddlers.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to output tiddlers matching a filter to JSON\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"jsontiddlers\\\";\\n\\nexports.params = [\\n\\t{name: \\\"filter\\\"},\\n\\t{name: \\\"spaces\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(filter,spaces) {\\n\\treturn this.wiki.getTiddlersAsJson(filter,$tw.utils.parseInt(spaces));\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/makedatauri.js\":{\"title\":\"$:/core/modules/macros/makedatauri.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/makedatauri.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to convert a string of text to a data URI\\n\\n\u003C\u003Cmakedatauri text:\\\"Text to be converted\\\" type:\\\"text/vnd.tiddlywiki\\\">>\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"makedatauri\\\";\\n\\nexports.params = [\\n\\t{name: \\\"text\\\"},\\n\\t{name: \\\"type\\\"},\\n\\t{name: \\\"_canonical_uri\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(text,type,_canonical_uri) {\\n\\treturn $tw.utils.makeDataUri(text,type,_canonical_uri);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/now.js\":{\"title\":\"$:/core/modules/macros/now.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/now.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to return a formatted version of the current time\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"now\\\";\\n\\nexports.params = [\\n\\t{name: \\\"format\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(format) {\\n\\treturn $tw.utils.formatDateString(new Date(),format || \\\"0hh:0mm, DDth MMM YYYY\\\");\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/qualify.js\":{\"title\":\"$:/core/modules/macros/qualify.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/qualify.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to qualify a state tiddler title according\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"qualify\\\";\\n\\nexports.params = [\\n\\t{name: \\\"title\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(title) {\\n\\treturn title + \\\"-\\\" + this.getStateQualifier();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/resolvepath.js\":{\"title\":\"$:/core/modules/macros/resolvepath.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/resolvepath.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nResolves a relative path for an absolute rootpath.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"resolvepath\\\";\\n\\nexports.params = [\\n\\t{name: \\\"source\\\"},\\n\\t{name: \\\"root\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(source, root) {\\n\\treturn $tw.utils.resolvePath(source, root);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/unusedtitle.js\":{\"title\":\"$:/core/modules/macros/unusedtitle.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/unusedtitle.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to return a new title that is unused in the wiki. It can be given a name as a base.\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"unusedtitle\\\";\\n\\nexports.params = [\\n\\t{name: \\\"baseName\\\"},\\n\\t{name: \\\"separator\\\"},\\n\\t{name: \\\"template\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(baseName,separator,template) {\\n\\tseparator = separator || \\\" \\\";\\n\\tif(!baseName) {\\n\\t\\tbaseName = $tw.language.getString(\\\"DefaultNewTiddlerTitle\\\");\\n\\t}\\n\\t// $tw.wiki.generateNewTitle = function(baseTitle,options)\\n\\t// options.prefix must be a string! \\n\\treturn this.wiki.generateNewTitle(baseName, {\\\"prefix\\\": separator, \\\"template\\\": template});\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/macros/version.js\":{\"title\":\"$:/core/modules/macros/version.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/macros/version.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nMacro to return the TiddlyWiki core version number\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"version\\\";\\n\\nexports.params = [];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function() {\\n\\treturn $tw.version;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/core/modules/parsers/audioparser.js\":{\"title\":\"$:/core/modules/parsers/audioparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/audioparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe audio parser parses an audio tiddler into an embeddable HTML element\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar AudioParser = function(type,text,options) {\\n\\tvar element = {\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"audio\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tcontrols: {type: \\\"string\\\", value: \\\"controls\\\"},\\n\\t\\t\\t\\tstyle: {type: \\\"string\\\", value: \\\"width: 100%; object-fit: contain\\\"}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tsrc;\\n\\tif(options._canonical_uri) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: options._canonical_uri};\\n\\t} else if(text) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: \\\"data:\\\" + type + \\\";base64,\\\" + text};\\n\\t}\\n\\tthis.tree = [element];\\n};\\n\\nexports[\\\"audio/ogg\\\"] = AudioParser;\\nexports[\\\"audio/mpeg\\\"] = AudioParser;\\nexports[\\\"audio/mp3\\\"] = AudioParser;\\nexports[\\\"audio/mp4\\\"] = AudioParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/binaryparser.js\":{\"title\":\"$:/core/modules/parsers/binaryparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/binaryparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe binary parser parses a binary tiddler into a warning message and download link\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar BINARY_WARNING_MESSAGE = \\\"$:/core/ui/BinaryWarning\\\";\\nvar EXPORT_BUTTON_IMAGE = \\\"$:/core/images/export-button\\\";\\n\\nvar BinaryParser = function(type,text,options) {\\n\\t// Transclude the binary data tiddler warning message\\n\\tvar warn = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"p\\\",\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: BINARY_WARNING_MESSAGE}\\n\\t\\t\\t}\\n\\t\\t}]\\n\\t};\\n\\t// Create download link based on binary tiddler title\\n\\tvar link = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"a\\\",\\n\\t\\tattributes: {\\n\\t\\t\\ttitle: {type: \\\"indirect\\\", textReference: \\\"!!title\\\"},\\n\\t\\t\\tdownload: {type: \\\"indirect\\\", textReference: \\\"!!title\\\"}\\n\\t\\t},\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: EXPORT_BUTTON_IMAGE}\\n\\t\\t\\t}\\n\\t\\t}]\\n\\t};\\n\\t// Set the link href to external or internal data URI\\n\\tif(options._canonical_uri) {\\n\\t\\tlink.attributes.href = {\\n\\t\\t\\ttype: \\\"string\\\", \\n\\t\\t\\tvalue: options._canonical_uri\\n\\t\\t};\\n\\t} else if(text) {\\n\\t\\tlink.attributes.href = {\\n\\t\\t\\ttype: \\\"string\\\", \\n\\t\\t\\tvalue: \\\"data:\\\" + type + \\\";base64,\\\" + text\\n\\t\\t};\\n\\t}\\n\\t// Combine warning message and download link in a div\\n\\tvar element = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"div\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tclass: {type: \\\"string\\\", value: \\\"tc-binary-warning\\\"}\\n\\t\\t},\\n\\t\\tchildren: [warn, link]\\n\\t}\\n\\tthis.tree = [element];\\n};\\n\\nexports[\\\"application/octet-stream\\\"] = BinaryParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/csvparser.js\":{\"title\":\"$:/core/modules/parsers/csvparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/csvparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe CSV text parser processes CSV files into a table wrapped in a scrollable widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar CsvParser = function(type,text,options) {\\n\\t// Table framework\\n\\tthis.tree = [{\\n\\t\\t\\\"type\\\": \\\"scrollable\\\", \\\"children\\\": [{\\n\\t\\t\\t\\\"type\\\": \\\"element\\\", \\\"tag\\\": \\\"table\\\", \\\"children\\\": [{\\n\\t\\t\\t\\t\\\"type\\\": \\\"element\\\", \\\"tag\\\": \\\"tbody\\\", \\\"children\\\": []\\n\\t\\t\\t}], \\\"attributes\\\": {\\n\\t\\t\\t\\t\\\"class\\\": {\\\"type\\\": \\\"string\\\", \\\"value\\\": \\\"tc-csv-table\\\"}\\n\\t\\t\\t}\\n\\t\\t}]\\n\\t}];\\n\\t// Split the text into lines\\n\\tvar lines = text.split(/\\\\r?\\\\n/mg),\\n\\t\\ttag = \\\"th\\\";\\n\\tfor(var line=0; line\u003Clines.length; line++) {\\n\\t\\tvar lineText = lines[line];\\n\\t\\tif(lineText) {\\n\\t\\t\\tvar row = {\\n\\t\\t\\t\\t\\t\\\"type\\\": \\\"element\\\", \\\"tag\\\": \\\"tr\\\", \\\"children\\\": []\\n\\t\\t\\t\\t};\\n\\t\\t\\tvar columns = lineText.split(\\\",\\\");\\n\\t\\t\\tfor(var column=0; column\u003Ccolumns.length; column++) {\\n\\t\\t\\t\\trow.children.push({\\n\\t\\t\\t\\t\\t\\t\\\"type\\\": \\\"element\\\", \\\"tag\\\": tag, \\\"children\\\": [{\\n\\t\\t\\t\\t\\t\\t\\t\\\"type\\\": \\\"text\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"text\\\": columns[column]\\n\\t\\t\\t\\t\\t\\t}]\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\\ttag = \\\"td\\\";\\n\\t\\t\\tthis.tree[0].children[0].children[0].children.push(row);\\n\\t\\t}\\n\\t}\\n};\\n\\nexports[\\\"text/csv\\\"] = CsvParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/htmlparser.js\":{\"title\":\"$:/core/modules/parsers/htmlparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/htmlparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe HTML parser displays text as raw HTML\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar HtmlParser = function(type,text,options) {\\n\\tvar src;\\n\\tif(options._canonical_uri) {\\n\\t\\tsrc = options._canonical_uri;\\n\\t} else if(text) {\\n\\t\\tsrc = \\\"data:text/html;charset=utf-8,\\\" + encodeURIComponent(text);\\n\\t}\\n\\tthis.tree = [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"iframe\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tsrc: {type: \\\"string\\\", value: src}\\n\\t\\t}\\n\\t}];\\n\\tif($tw.wiki.getTiddlerText(\\\"$:/config/HtmlParser/DisableSandbox\\\",\\\"no\\\") !== \\\"yes\\\") {\\n\\t\\tthis.tree[0].attributes.sandbox = {type: \\\"string\\\", value: $tw.wiki.getTiddlerText(\\\"$:/config/HtmlParser/SandboxTokens\\\",\\\"\\\")};\\n\\t}\\n};\\n\\nexports[\\\"text/html\\\"] = HtmlParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/imageparser.js\":{\"title\":\"$:/core/modules/parsers/imageparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/imageparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe image parser parses an image into an embeddable HTML element\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar ImageParser = function(type,text,options) {\\n\\tvar element = {\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"img\\\",\\n\\t\\t\\tattributes: {}\\n\\t\\t};\\n\\tif(options._canonical_uri) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: options._canonical_uri};\\n\\t} else if(text) {\\n\\t\\tif(type === \\\"image/svg+xml\\\" || type === \\\".svg\\\") {\\n\\t\\t\\telement.attributes.src = {type: \\\"string\\\", value: \\\"data:image/svg+xml,\\\" + encodeURIComponent(text)};\\n\\t\\t} else {\\n\\t\\t\\telement.attributes.src = {type: \\\"string\\\", value: \\\"data:\\\" + type + \\\";base64,\\\" + text};\\n\\t\\t}\\n\\t}\\n\\tthis.tree = [element];\\n};\\n\\nexports[\\\"image/svg+xml\\\"] = ImageParser;\\nexports[\\\"image/jpg\\\"] = ImageParser;\\nexports[\\\"image/jpeg\\\"] = ImageParser;\\nexports[\\\"image/png\\\"] = ImageParser;\\nexports[\\\"image/gif\\\"] = ImageParser;\\nexports[\\\"image/webp\\\"] = ImageParser;\\nexports[\\\"image/heic\\\"] = ImageParser;\\nexports[\\\"image/heif\\\"] = ImageParser;\\nexports[\\\"image/x-icon\\\"] = ImageParser;\\nexports[\\\"image/vnd.microsoft.icon\\\"] = ImageParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/utils/parseutils.js\":{\"title\":\"$:/core/modules/utils/parseutils.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/parseutils.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nUtility functions concerned with parsing text into tokens.\\n\\nMost functions have the following pattern:\\n\\n* The parameters are:\\n** `source`: the source string being parsed\\n** `pos`: the current parse position within the string\\n** Any further parameters are used to identify the token that is being parsed\\n* The return value is:\\n** null if the token was not found at the specified position\\n** an object representing the token with the following standard fields:\\n*** `type`: string indicating the type of the token\\n*** `start`: start position of the token in the source string\\n*** `end`: end position of the token in the source string\\n*** Any further fields required to describe the token\\n\\nThe exception is `skipWhiteSpace`, which just returns the position after the whitespace.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nLook for a whitespace token. Returns null if not found, otherwise returns {type: \\\"whitespace\\\", start:, end:,}\\n*/\\nexports.parseWhiteSpace = function(source,pos) {\\n\\tvar p = pos,c;\\n\\twhile(true) {\\n\\t\\tc = source.charAt(p);\\n\\t\\tif((c === \\\" \\\") || (c === \\\"\\\\f\\\") || (c === \\\"\\\\n\\\") || (c === \\\"\\\\r\\\") || (c === \\\"\\\\t\\\") || (c === \\\"\\\\v\\\") || (c === \\\"\\\\u00a0\\\")) { // Ignores some obscure unicode spaces\\n\\t\\t\\tp++;\\n\\t\\t} else {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\tif(p === pos) {\\n\\t\\treturn null;\\n\\t} else {\\n\\t\\treturn {\\n\\t\\t\\ttype: \\\"whitespace\\\",\\n\\t\\t\\tstart: pos,\\n\\t\\t\\tend: p\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nConvenience wrapper for parseWhiteSpace. Returns the position after the whitespace\\n*/\\nexports.skipWhiteSpace = function(source,pos) {\\n\\tvar c;\\n\\twhile(true) {\\n\\t\\tc = source.charAt(pos);\\n\\t\\tif((c === \\\" \\\") || (c === \\\"\\\\f\\\") || (c === \\\"\\\\n\\\") || (c === \\\"\\\\r\\\") || (c === \\\"\\\\t\\\") || (c === \\\"\\\\v\\\") || (c === \\\"\\\\u00a0\\\")) { // Ignores some obscure unicode spaces\\n\\t\\t\\tpos++;\\n\\t\\t} else {\\n\\t\\t\\treturn pos;\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nLook for a given string token. Returns null if not found, otherwise returns {type: \\\"token\\\", value:, start:, end:,}\\n*/\\nexports.parseTokenString = function(source,pos,token) {\\n\\tvar match = source.indexOf(token,pos) === pos;\\n\\tif(match) {\\n\\t\\treturn {\\n\\t\\t\\ttype: \\\"token\\\",\\n\\t\\t\\tvalue: token,\\n\\t\\t\\tstart: pos,\\n\\t\\t\\tend: pos + token.length\\n\\t\\t};\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nLook for a token matching a regex. Returns null if not found, otherwise returns {type: \\\"regexp\\\", match:, start:, end:,}\\n*/\\nexports.parseTokenRegExp = function(source,pos,reToken) {\\n\\tvar node = {\\n\\t\\ttype: \\\"regexp\\\",\\n\\t\\tstart: pos\\n\\t};\\n\\treToken.lastIndex = pos;\\n\\tnode.match = reToken.exec(source);\\n\\tif(node.match && node.match.index === pos) {\\n\\t\\tnode.end = pos + node.match[0].length;\\n\\t\\treturn node;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\n/*\\nLook for a string literal. Returns null if not found, otherwise returns {type: \\\"string\\\", value:, start:, end:,}\\n*/\\nexports.parseStringLiteral = function(source,pos) {\\n\\tvar node = {\\n\\t\\ttype: \\\"string\\\",\\n\\t\\tstart: pos\\n\\t};\\n\\tvar reString = /(?:\\\"\\\"\\\"([\\\\s\\\\S]*?)\\\"\\\"\\\"|\\\"([^\\\"]*)\\\")|(?:'([^']*)')/g;\\n\\treString.lastIndex = pos;\\n\\tvar match = reString.exec(source);\\n\\tif(match && match.index === pos) {\\n\\t\\tnode.value = match[1] !== undefined ? match[1] :(\\n\\t\\t\\tmatch[2] !== undefined ? match[2] : match[3] \\n\\t\\t\\t\\t\\t);\\n\\t\\tnode.end = pos + match[0].length;\\n\\t\\treturn node;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\nexports.parseMacroParameters = function(node,source,pos) {\\n\\t// Process parameters\\n\\tvar parameter = $tw.utils.parseMacroParameter(source,pos);\\n\\twhile(parameter) {\\n\\t\\tnode.params.push(parameter);\\n\\t\\tpos = parameter.end;\\n\\t\\t// Get the next parameter\\n\\t\\tparameter = $tw.utils.parseMacroParameter(source,pos);\\n\\t}\\n\\tnode.end = pos;\\n\\treturn node;\\n}\\n\\n/*\\nLook for a macro invocation parameter. Returns null if not found, or {type: \\\"macro-parameter\\\", name:, value:, start:, end:}\\n*/\\nexports.parseMacroParameter = function(source,pos) {\\n\\tvar node = {\\n\\t\\ttype: \\\"macro-parameter\\\",\\n\\t\\tstart: pos\\n\\t};\\n\\t// Define our regexp\\n\\tvar reMacroParameter = /(?:([A-Za-z0-9\\\\-_]+)\\\\s*:)?(?:\\\\s*(?:\\\"\\\"\\\"([\\\\s\\\\S]*?)\\\"\\\"\\\"|\\\"([^\\\"]*)\\\"|'([^']*)'|\\\\[\\\\[([^\\\\]]*)\\\\]\\\\]|((?:(?:>(?!>))|[^\\\\s>\\\"'])+)))/g;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for the parameter\\n\\tvar token = $tw.utils.parseTokenRegExp(source,pos,reMacroParameter);\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Get the parameter details\\n\\tnode.value = token.match[2] !== undefined ? token.match[2] : (\\n\\t\\t\\t\\t\\ttoken.match[3] !== undefined ? token.match[3] : (\\n\\t\\t\\t\\t\\t\\ttoken.match[4] !== undefined ? token.match[4] : (\\n\\t\\t\\t\\t\\t\\t\\ttoken.match[5] !== undefined ? token.match[5] : (\\n\\t\\t\\t\\t\\t\\t\\t\\ttoken.match[6] !== undefined ? token.match[6] : (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\tif(token.match[1]) {\\n\\t\\tnode.name = token.match[1];\\n\\t}\\n\\t// Update the end position\\n\\tnode.end = pos;\\n\\treturn node;\\n};\\n\\n/*\\nLook for a macro invocation. Returns null if not found, or {type: \\\"macrocall\\\", name:, parameters:, start:, end:}\\n*/\\nexports.parseMacroInvocation = function(source,pos) {\\n\\tvar node = {\\n\\t\\ttype: \\\"macrocall\\\",\\n\\t\\tstart: pos,\\n\\t\\tparams: []\\n\\t};\\n\\t// Define our regexps\\n\\tvar reMacroName = /([^\\\\s>\\\"'=]+)/g;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for a double less than sign\\n\\tvar token = $tw.utils.parseTokenString(source,pos,\\\"\u003C\u003C\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Get the macro name\\n\\tvar name = $tw.utils.parseTokenRegExp(source,pos,reMacroName);\\n\\tif(!name) {\\n\\t\\treturn null;\\n\\t}\\n\\tnode.name = name.match[1];\\n\\tpos = name.end;\\n\\tnode = $tw.utils.parseMacroParameters(node,source,pos);\\n\\tpos = node.end;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for a double greater than sign\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\">>\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Update the end position\\n\\tnode.end = pos;\\n\\treturn node;\\n};\\n\\nexports.parseFilterVariable = function(source) {\\n\\tvar node = {\\n\\t\\t\\tname: \\\"\\\",\\n\\t\\t\\tparams: [],\\n\\t\\t},\\n\\t\\tpos = 0,\\n\\t\\treName = /([^\\\\s\\\"']+)/g;\\n\\t// If there is no whitespace or it is an empty string then there are no macro parameters\\n\\tif(/^\\\\S*$/.test(source)) {\\n\\t\\tnode.name = source;\\n\\t\\treturn node;\\n\\t}\\n\\t// Get the variable name\\n\\tvar nameMatch = $tw.utils.parseTokenRegExp(source,pos,reName);\\n\\tif(nameMatch) {\\n\\t\\tnode.name = nameMatch.match[1];\\n\\t\\tpos = nameMatch.end;\\n\\t\\tnode = $tw.utils.parseMacroParameters(node,source,pos);\\n\\t\\tdelete node.end;\\n\\t}\\n\\treturn node;\\n};\\n\\n/*\\nLook for an HTML attribute definition. Returns null if not found, otherwise returns {type: \\\"attribute\\\", name:, type: \\\"filtered|string|indirect|macro\\\", value|filter|textReference:, start:, end:,}\\n*/\\nexports.parseAttribute = function(source,pos) {\\n\\tvar node = {\\n\\t\\tstart: pos\\n\\t};\\n\\t// Define our regexps\\n\\tvar reAttributeName = /([^\\\\/\\\\s>\\\"'=]+)/g,\\n\\t\\treUnquotedAttribute = /([^\\\\/\\\\s\u003C>\\\"'=]+)/g,\\n\\t\\treFilteredValue = /\\\\{\\\\{\\\\{([\\\\S\\\\s]+?)\\\\}\\\\}\\\\}/g,\\n\\t\\treIndirectValue = /\\\\{\\\\{([^\\\\}]+)\\\\}\\\\}/g;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Get the attribute name\\n\\tvar name = $tw.utils.parseTokenRegExp(source,pos,reAttributeName);\\n\\tif(!name) {\\n\\t\\treturn null;\\n\\t}\\n\\tnode.name = name.match[1];\\n\\tpos = name.end;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for an equals sign\\n\\tvar token = $tw.utils.parseTokenString(source,pos,\\\"=\\\");\\n\\tif(token) {\\n\\t\\tpos = token.end;\\n\\t\\t// Skip whitespace\\n\\t\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t\\t// Look for a string literal\\n\\t\\tvar stringLiteral = $tw.utils.parseStringLiteral(source,pos);\\n\\t\\tif(stringLiteral) {\\n\\t\\t\\tpos = stringLiteral.end;\\n\\t\\t\\tnode.type = \\\"string\\\";\\n\\t\\t\\tnode.value = stringLiteral.value;\\n\\t\\t} else {\\n\\t\\t\\t// Look for a filtered value\\n\\t\\t\\tvar filteredValue = $tw.utils.parseTokenRegExp(source,pos,reFilteredValue);\\n\\t\\t\\tif(filteredValue) {\\n\\t\\t\\t\\tpos = filteredValue.end;\\n\\t\\t\\t\\tnode.type = \\\"filtered\\\";\\n\\t\\t\\t\\tnode.filter = filteredValue.match[1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Look for an indirect value\\n\\t\\t\\t\\tvar indirectValue = $tw.utils.parseTokenRegExp(source,pos,reIndirectValue);\\n\\t\\t\\t\\tif(indirectValue) {\\n\\t\\t\\t\\t\\tpos = indirectValue.end;\\n\\t\\t\\t\\t\\tnode.type = \\\"indirect\\\";\\n\\t\\t\\t\\t\\tnode.textReference = indirectValue.match[1];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Look for a unquoted value\\n\\t\\t\\t\\t\\tvar unquotedValue = $tw.utils.parseTokenRegExp(source,pos,reUnquotedAttribute);\\n\\t\\t\\t\\t\\tif(unquotedValue) {\\n\\t\\t\\t\\t\\t\\tpos = unquotedValue.end;\\n\\t\\t\\t\\t\\t\\tnode.type = \\\"string\\\";\\n\\t\\t\\t\\t\\t\\tnode.value = unquotedValue.match[1];\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// Look for a macro invocation value\\n\\t\\t\\t\\t\\t\\tvar macroInvocation = $tw.utils.parseMacroInvocation(source,pos);\\n\\t\\t\\t\\t\\t\\tif(macroInvocation) {\\n\\t\\t\\t\\t\\t\\t\\tpos = macroInvocation.end;\\n\\t\\t\\t\\t\\t\\t\\tnode.type = \\\"macro\\\";\\n\\t\\t\\t\\t\\t\\t\\tnode.value = macroInvocation;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tnode.type = \\\"string\\\";\\n\\t\\t\\t\\t\\t\\t\\tnode.value = \\\"true\\\";\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tnode.type = \\\"string\\\";\\n\\t\\tnode.value = \\\"true\\\";\\n\\t}\\n\\t// Update the end position\\n\\tnode.end = pos;\\n\\treturn node;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/parsers/pdfparser.js\":{\"title\":\"$:/core/modules/parsers/pdfparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/pdfparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe PDF parser embeds a PDF viewer\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar ImageParser = function(type,text,options) {\\n\\tvar element = {\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"embed\\\",\\n\\t\\t\\tattributes: {}\\n\\t\\t},\\n\\t\\tsrc;\\n\\tif(options._canonical_uri) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: options._canonical_uri};\\n\\t} else if(text) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: \\\"data:application/pdf;base64,\\\" + text};\\n\\t}\\n\\tthis.tree = [element];\\n};\\n\\nexports[\\\"application/pdf\\\"] = ImageParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/textparser.js\":{\"title\":\"$:/core/modules/parsers/textparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/textparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe plain text parser processes blocks of source text into a degenerate parse tree consisting of a single text node\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar TextParser = function(type,text,options) {\\n\\tthis.tree = [{\\n\\t\\ttype: \\\"codeblock\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tcode: {type: \\\"string\\\", value: text},\\n\\t\\t\\tlanguage: {type: \\\"string\\\", value: type}\\n\\t\\t}\\n\\t}];\\n};\\n\\nexports[\\\"text/plain\\\"] = TextParser;\\nexports[\\\"text/x-tiddlywiki\\\"] = TextParser;\\nexports[\\\"application/javascript\\\"] = TextParser;\\nexports[\\\"application/json\\\"] = TextParser;\\nexports[\\\"text/css\\\"] = TextParser;\\nexports[\\\"application/x-tiddler-dictionary\\\"] = TextParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/videoparser.js\":{\"title\":\"$:/core/modules/parsers/videoparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/videoparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe video parser parses a video tiddler into an embeddable HTML element\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar VideoParser = function(type,text,options) {\\n\\tvar element = {\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"video\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tcontrols: {type: \\\"string\\\", value: \\\"controls\\\"},\\n\\t\\t\\t\\tstyle: {type: \\\"string\\\", value: \\\"width: 100%; object-fit: contain\\\"}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tsrc;\\n\\tif(options._canonical_uri) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: options._canonical_uri};\\n\\t} else if(text) {\\n\\t\\telement.attributes.src = {type: \\\"string\\\", value: \\\"data:\\\" + type + \\\";base64,\\\" + text};\\n\\t}\\n\\tthis.tree = [element];\\n};\\n\\nexports[\\\"video/ogg\\\"] = VideoParser;\\nexports[\\\"video/webm\\\"] = VideoParser;\\nexports[\\\"video/mp4\\\"] = VideoParser;\\nexports[\\\"video/quicktime\\\"] = VideoParser;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/wikiparser/rules/codeblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/codeblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/codeblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for code blocks. For example:\\n\\n```\\n\\t```\\n\\tThis text will not be //wikified//\\n\\t```\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"codeblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match and get language if defined\\n\\tthis.matchRegExp = /```([\\\\w-]*)\\\\r?\\\\n/mg;\\n};\\n\\nexports.parse = function() {\\n\\tvar reEnd = /(\\\\r?\\\\n```$)/mg;\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Look for the end of the block\\n\\treEnd.lastIndex = this.parser.pos;\\n\\tvar match = reEnd.exec(this.parser.source),\\n\\t\\ttext;\\n\\t// Process the block\\n\\tif(match) {\\n\\t\\ttext = this.parser.source.substring(this.parser.pos,match.index);\\n\\t\\tthis.parser.pos = match.index + match[0].length;\\n\\t} else {\\n\\t\\ttext = this.parser.source.substr(this.parser.pos);\\n\\t\\tthis.parser.pos = this.parser.sourceLength;\\n\\t}\\n\\t// Return the $codeblock widget\\n\\treturn [{\\n\\t\\t\\ttype: \\\"codeblock\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\tcode: {type: \\\"string\\\", value: text},\\n\\t\\t\\t\\t\\tlanguage: {type: \\\"string\\\", value: this.match[1]}\\n\\t\\t\\t}\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/codeinline.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/codeinline.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/codeinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for code runs. For example:\\n\\n```\\n\\tThis is a `code run`.\\n\\tThis is another ``code run``\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"codeinline\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /(``?)/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tvar reEnd = new RegExp(this.match[1], \\\"mg\\\");\\n\\t// Look for the end marker\\n\\treEnd.lastIndex = this.parser.pos;\\n\\tvar match = reEnd.exec(this.parser.source),\\n\\t\\ttext;\\n\\t// Process the text\\n\\tif(match) {\\n\\t\\ttext = this.parser.source.substring(this.parser.pos,match.index);\\n\\t\\tthis.parser.pos = match.index + match[0].length;\\n\\t} else {\\n\\t\\ttext = this.parser.source.substr(this.parser.pos);\\n\\t\\tthis.parser.pos = this.parser.sourceLength;\\n\\t}\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"code\\\",\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\ttext: text\\n\\t\\t}]\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/commentblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/commentblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/commentblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for HTML comments. For example:\\n\\n```\\n\u003C!-- This is a comment -->\\n\\\\define macroX()\\n\u003C!-- This is a comment -->\\nxxxx\\n\\\\end\\n\u003C!-- This is a comment -->\\n\\n```\\n\\nNote that the syntax for comments is simplified to an opening \\\"\u003C!--\\\" sequence and a closing \\\"-->\\\" sequence -- HTML itself implements a more complex format (see http://ostermiller.org/findhtmlcomment.html)\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"commentblock\\\";\\nexports.types = {block:true, pragma:true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\tthis.matchRegExp = /\u003C!--/mg;\\n\\tthis.endMatchRegExp = /-->/mg;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\tthis.matchRegExp.lastIndex = startPos;\\n\\tthis.match = this.matchRegExp.exec(this.parser.source);\\n\\tif(this.match) {\\n\\t\\tthis.endMatchRegExp.lastIndex = this.match.index + this.match[0].length;\\n\\t\\tthis.endMatch = this.endMatchRegExp.exec(this.parser.source);\\n\\t\\tif(this.endMatch) {\\n\\t\\t\\treturn this.match.index;\\n\\t\\t}\\n\\t}\\n\\treturn undefined;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.endMatchRegExp.lastIndex;\\n\\t// Don't return any elements\\n\\treturn [];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/commentinline.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/commentinline.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/commentinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for HTML comments. For example:\\n\\n```\\n\u003C!-- This is a comment -->\\n```\\n\\nNote that the syntax for comments is simplified to an opening \\\"\u003C!--\\\" sequence and a closing \\\"-->\\\" sequence -- HTML itself implements a more complex format (see http://ostermiller.org/findhtmlcomment.html)\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"commentinline\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\tthis.matchRegExp = /\u003C!--/mg;\\n\\tthis.endMatchRegExp = /-->/mg;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\tthis.matchRegExp.lastIndex = startPos;\\n\\tthis.match = this.matchRegExp.exec(this.parser.source);\\n\\tif(this.match) {\\n\\t\\tthis.endMatchRegExp.lastIndex = this.match.index + this.match[0].length;\\n\\t\\tthis.endMatch = this.endMatchRegExp.exec(this.parser.source);\\n\\t\\tif(this.endMatch) {\\n\\t\\t\\treturn this.match.index;\\n\\t\\t}\\n\\t}\\n\\treturn undefined;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.endMatchRegExp.lastIndex;\\n\\t// Don't return any elements\\n\\treturn [];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/dash.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/dash.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/dash.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for dashes. For example:\\n\\n```\\nThis is an en-dash: --\\n\\nThis is an em-dash: ---\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"dash\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /-{2,3}(?!-)/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tvar dash = this.match[0].length === 2 ? \\\"&ndash;\\\" : \\\"&mdash;\\\";\\n\\treturn [{\\n\\t\\ttype: \\\"entity\\\",\\n\\t\\tentity: dash\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/emphasis/bold.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/emphasis/bold.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/emphasis/bold.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for emphasis - bold. For example:\\n\\n```\\n\\tThis is ''bold'' text\\n```\\n\\nThis wikiparser can be modified using the rules eg:\\n\\n```\\n\\\\rules except bold \\n\\\\rules only bold \\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"bold\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /''/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Parse the run including the terminator\\n\\tvar tree = this.parser.parseInlineRun(/''/mg,{eatTerminator: true});\\n\\n\\t// Return the classed span\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"strong\\\",\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/emphasis/italic.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/emphasis/italic.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/emphasis/italic.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for emphasis - italic. For example:\\n\\n```\\n\\tThis is //italic// text\\n```\\n\\nThis wikiparser can be modified using the rules eg:\\n\\n```\\n\\\\rules except italic\\n\\\\rules only italic\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"italic\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\/\\\\//mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Parse the run including the terminator\\n\\tvar tree = this.parser.parseInlineRun(/\\\\/\\\\//mg,{eatTerminator: true});\\n\\n\\t// Return the classed span\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"em\\\",\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/emphasis/strikethrough.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/emphasis/strikethrough.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/emphasis/strikethrough.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for emphasis - strikethrough. For example:\\n\\n```\\n\\tThis is ~~strikethrough~~ text\\n```\\n\\nThis wikiparser can be modified using the rules eg:\\n\\n```\\n\\\\rules except strikethrough \\n\\\\rules only strikethrough \\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"strikethrough\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /~~/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Parse the run including the terminator\\n\\tvar tree = this.parser.parseInlineRun(/~~/mg,{eatTerminator: true});\\n\\n\\t// Return the classed span\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"strike\\\",\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/emphasis/subscript.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/emphasis/subscript.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/emphasis/subscript.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for emphasis - subscript. For example:\\n\\n```\\n\\tThis is ,,subscript,, text\\n```\\n\\nThis wikiparser can be modified using the rules eg:\\n\\n```\\n\\\\rules except subscript \\n\\\\rules only subscript \\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"subscript\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /,,/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Parse the run including the terminator\\n\\tvar tree = this.parser.parseInlineRun(/,,/mg,{eatTerminator: true});\\n\\n\\t// Return the classed span\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"sub\\\",\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/emphasis/superscript.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/emphasis/superscript.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/emphasis/superscript.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for emphasis - superscript. For example:\\n\\n```\\n\\tThis is ^^superscript^^ text\\n```\\n\\nThis wikiparser can be modified using the rules eg:\\n\\n```\\n\\\\rules except superscript \\n\\\\rules only superscript \\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"superscript\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\^\\\\^/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Parse the run including the terminator\\n\\tvar tree = this.parser.parseInlineRun(/\\\\^\\\\^/mg,{eatTerminator: true});\\n\\n\\t// Return the classed span\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"sup\\\",\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/emphasis/underscore.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/emphasis/underscore.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/emphasis/underscore.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for emphasis - underscore. For example:\\n\\n```\\n\\tThis is __underscore__ text\\n```\\n\\nThis wikiparser can be modified using the rules eg:\\n\\n```\\n\\\\rules except underscore \\n\\\\rules only underscore\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"underscore\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /__/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\n\\t// Parse the run including the terminator\\n\\tvar tree = this.parser.parseInlineRun(/__/mg,{eatTerminator: true});\\n\\n\\t// Return the classed span\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"u\\\",\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/entity.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/entity.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/entity.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for HTML entities. For example:\\n\\n```\\n\\tThis is a copyright symbol: &copy;\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"entity\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /(&#?[a-zA-Z0-9]{2,8};)/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Get all the details of the match\\n\\tvar entityString = this.match[1];\\n\\t// Move past the macro call\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Return the entity\\n\\treturn [{type: \\\"entity\\\", entity: this.match[0]}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/extlink.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/extlink.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/extlink.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for external links. For example:\\n\\n```\\nAn external link: https://www.tiddlywiki.com/\\n\\nA suppressed external link: ~http://www.tiddlyspace.com/\\n```\\n\\nExternal links can be suppressed by preceding them with `~`.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"extlink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /~?(?:file|http|https|mailto|ftp|irc|news|data|skype):[^\\\\s\u003C>{}\\\\[\\\\]`|\\\"\\\\\\\\^]+(?:\\\\/|\\\\b)/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Create the link unless it is suppressed\\n\\tif(this.match[0].substr(0,1) === \\\"~\\\") {\\n\\t\\treturn [{type: \\\"text\\\", text: this.match[0].substr(1)}];\\n\\t} else {\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"a\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\thref: {type: \\\"string\\\", value: this.match[0]},\\n\\t\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"tc-tiddlylink-external\\\"},\\n\\t\\t\\t\\ttarget: {type: \\\"string\\\", value: \\\"_blank\\\"},\\n\\t\\t\\t\\trel: {type: \\\"string\\\", value: \\\"noopener noreferrer\\\"}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\", text: this.match[0]\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/filteredtranscludeblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/filteredtranscludeblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/filteredtranscludeblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for block-level filtered transclusion. For example:\\n\\n```\\n{{{ [tag[docs]] }}}\\n{{{ [tag[docs]] |tooltip}}}\\n{{{ [tag[docs]] ||TemplateTitle}}}\\n{{{ [tag[docs]] |tooltip||TemplateTitle}}}\\n{{{ [tag[docs]] }}width:40;height:50;}.class.class\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"filteredtranscludeblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\{\\\\{\\\\{([^\\\\|]+?)(?:\\\\|([^\\\\|\\\\{\\\\}]+))?(?:\\\\|\\\\|([^\\\\|\\\\{\\\\}]+))?\\\\}\\\\}([^\\\\}]*)\\\\}(?:\\\\.(\\\\S+))?(?:\\\\r?\\\\n|$)/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Get the match details\\n\\tvar filter = this.match[1],\\n\\t\\ttooltip = this.match[2],\\n\\t\\ttemplate = $tw.utils.trim(this.match[3]),\\n\\t\\tstyle = this.match[4],\\n\\t\\tclasses = this.match[5];\\n\\t// Return the list widget\\n\\tvar node = {\\n\\t\\ttype: \\\"list\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tfilter: {type: \\\"string\\\", value: filter}\\n\\t\\t},\\n\\t\\tisBlock: true\\n\\t};\\n\\tif(tooltip) {\\n\\t\\tnode.attributes.tooltip = {type: \\\"string\\\", value: tooltip};\\n\\t}\\n\\tif(template) {\\n\\t\\tnode.attributes.template = {type: \\\"string\\\", value: template};\\n\\t}\\n\\tif(style) {\\n\\t\\tnode.attributes.style = {type: \\\"string\\\", value: style};\\n\\t}\\n\\tif(classes) {\\n\\t\\tnode.attributes.itemClass = {type: \\\"string\\\", value: classes.split(\\\".\\\").join(\\\" \\\")};\\n\\t}\\n\\treturn [node];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/filteredtranscludeinline.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/filteredtranscludeinline.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/filteredtranscludeinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for inline filtered transclusion. For example:\\n\\n```\\n{{{ [tag[docs]] }}}\\n{{{ [tag[docs]] |tooltip}}}\\n{{{ [tag[docs]] ||TemplateTitle}}}\\n{{{ [tag[docs]] |tooltip||TemplateTitle}}}\\n{{{ [tag[docs]] }}width:40;height:50;}.class.class\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"filteredtranscludeinline\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\{\\\\{\\\\{([^\\\\|]+?)(?:\\\\|([^\\\\|\\\\{\\\\}]+))?(?:\\\\|\\\\|([^\\\\|\\\\{\\\\}]+))?\\\\}\\\\}([^\\\\}]*)\\\\}(?:\\\\.(\\\\S+))?/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Get the match details\\n\\tvar filter = this.match[1],\\n\\t\\ttooltip = this.match[2],\\n\\t\\ttemplate = $tw.utils.trim(this.match[3]),\\n\\t\\tstyle = this.match[4],\\n\\t\\tclasses = this.match[5];\\n\\t// Return the list widget\\n\\tvar node = {\\n\\t\\ttype: \\\"list\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tfilter: {type: \\\"string\\\", value: filter}\\n\\t\\t}\\n\\t};\\n\\tif(tooltip) {\\n\\t\\tnode.attributes.tooltip = {type: \\\"string\\\", value: tooltip};\\n\\t}\\n\\tif(template) {\\n\\t\\tnode.attributes.template = {type: \\\"string\\\", value: template};\\n\\t}\\n\\tif(style) {\\n\\t\\tnode.attributes.style = {type: \\\"string\\\", value: style};\\n\\t}\\n\\tif(classes) {\\n\\t\\tnode.attributes.itemClass = {type: \\\"string\\\", value: classes.split(\\\".\\\").join(\\\" \\\")};\\n\\t}\\n\\treturn [node];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/hardlinebreaks.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/hardlinebreaks.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/hardlinebreaks.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for marking areas with hard line breaks. For example:\\n\\n```\\n\\\"\\\"\\\"\\nThis is some text\\nThat is set like\\nIt is a Poem\\nWhen it is\\nClearly\\nNot\\n\\\"\\\"\\\"\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"hardlinebreaks\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\"\\\"\\\"(?:\\\\r?\\\\n)?/mg;\\n};\\n\\nexports.parse = function() {\\n\\tvar reEnd = /(\\\"\\\"\\\")|(\\\\r?\\\\n)/mg,\\n\\t\\ttree = [],\\n\\t\\tmatch;\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tdo {\\n\\t\\t// Parse the run up to the terminator\\n\\t\\ttree.push.apply(tree,this.parser.parseInlineRun(reEnd,{eatTerminator: false}));\\n\\t\\t// Redo the terminator match\\n\\t\\treEnd.lastIndex = this.parser.pos;\\n\\t\\tmatch = reEnd.exec(this.parser.source);\\n\\t\\tif(match) {\\n\\t\\t\\tthis.parser.pos = reEnd.lastIndex;\\n\\t\\t\\t// Add a line break if the terminator was a line break\\n\\t\\t\\tif(match[2]) {\\n\\t\\t\\t\\ttree.push({type: \\\"element\\\", tag: \\\"br\\\"});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} while(match && !match[1]);\\n\\t// Return the nodes\\n\\treturn tree;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/heading.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/heading.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/heading.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for headings\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"heading\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /(!{1,6})/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Get all the details of the match\\n\\tvar headingLevel = this.match[1].length;\\n\\t// Move past the !s\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse any classes, whitespace and then the heading itself\\n\\tvar classes = this.parser.parseClasses();\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\tvar tree = this.parser.parseInlineRun(/(\\\\r?\\\\n)/mg);\\n\\t// Return the heading\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"h\\\" + headingLevel, \\n\\t\\tattributes: {\\n\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: classes.join(\\\" \\\")}\\n\\t\\t},\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/horizrule.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/horizrule.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/horizrule.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for rules. For example:\\n\\n```\\n---\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"horizrule\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /-{3,}\\\\r?(?:\\\\n|$)/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\treturn [{type: \\\"element\\\", tag: \\\"hr\\\"}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/html.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/html.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/html.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki rule for HTML elements and widgets. For example:\\n\\n{{{\\n\u003Caside>\\nThis is an HTML5 aside element\\n\u003C/aside>\\n\\n\u003C$slider target=\\\"MyTiddler\\\">\\nThis is a widget invocation\\n\u003C/$slider>\\n\\n}}}\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"html\\\";\\nexports.types = {inline: true, block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\t// Find the next tag\\n\\tthis.nextTag = this.findNextTag(this.parser.source,startPos,{\\n\\t\\trequireLineBreak: this.is.block\\n\\t});\\n\\treturn this.nextTag ? this.nextTag.start : undefined;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Retrieve the most recent match so that recursive calls don't overwrite it\\n\\tvar tag = this.nextTag;\\n\\tthis.nextTag = null;\\n\\t// Advance the parser position to past the tag\\n\\tthis.parser.pos = tag.end;\\n\\t// Check for an immediately following double linebreak\\n\\tvar hasLineBreak = !tag.isSelfClosing && !!$tw.utils.parseTokenRegExp(this.parser.source,this.parser.pos,/([^\\\\S\\\\n\\\\r]*\\\\r?\\\\n(?:[^\\\\S\\\\n\\\\r]*\\\\r?\\\\n|$))/g);\\n\\t// Set whether we're in block mode\\n\\ttag.isBlock = this.is.block || hasLineBreak;\\n\\t// Parse the body if we need to\\n\\tif(!tag.isSelfClosing && $tw.config.htmlVoidElements.indexOf(tag.tag) === -1) {\\n\\t\\tvar reEndString = \\\"\u003C/\\\" + $tw.utils.escapeRegExp(tag.tag) + \\\">\\\";\\n\\t\\tif(hasLineBreak) {\\n\\t\\t\\ttag.children = this.parser.parseBlocks(reEndString);\\n\\t\\t} else {\\n\\t\\t\\tvar reEnd = new RegExp(\\\"(\\\" + reEndString + \\\")\\\",\\\"mg\\\");\\n\\t\\t\\ttag.children = this.parser.parseInlineRun(reEnd,{eatTerminator: true});\\n\\t\\t}\\n\\t}\\n\\t// Return the tag\\n\\treturn [tag];\\n};\\n\\n/*\\nLook for an HTML tag. Returns null if not found, otherwise returns {type: \\\"element\\\", name:, attributes: {}, orderedAttributes: [], isSelfClosing:, start:, end:,}\\n*/\\nexports.parseTag = function(source,pos,options) {\\n\\toptions = options || {};\\n\\tvar token,\\n\\t\\tnode = {\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\tstart: pos,\\n\\t\\t\\tattributes: {},\\n\\t\\t\\torderedAttributes: []\\n\\t\\t};\\n\\t// Define our regexps\\n\\tvar reTagName = /([a-zA-Z0-9\\\\-\\\\$]+)/g;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for a less than sign\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\"\u003C\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Get the tag name\\n\\ttoken = $tw.utils.parseTokenRegExp(source,pos,reTagName);\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tnode.tag = token.match[1];\\n\\tif(node.tag.slice(1).indexOf(\\\"$\\\") !== -1) {\\n\\t\\treturn null;\\n\\t}\\n\\tif(node.tag.charAt(0) === \\\"$\\\") {\\n\\t\\tnode.type = node.tag.substr(1);\\n\\t}\\n\\tpos = token.end;\\n\\t// Check that the tag is terminated by a space, / or >\\n\\tif(!$tw.utils.parseWhiteSpace(source,pos) && !(source.charAt(pos) === \\\"/\\\") && !(source.charAt(pos) === \\\">\\\") ) {\\n\\t\\treturn null;\\n\\t}\\n\\t// Process attributes\\n\\tvar attribute = $tw.utils.parseAttribute(source,pos);\\n\\twhile(attribute) {\\n\\t\\tnode.orderedAttributes.push(attribute);\\n\\t\\tnode.attributes[attribute.name] = attribute;\\n\\t\\tpos = attribute.end;\\n\\t\\t// Get the next attribute\\n\\t\\tattribute = $tw.utils.parseAttribute(source,pos);\\n\\t}\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for a closing slash\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\"/\\\");\\n\\tif(token) {\\n\\t\\tpos = token.end;\\n\\t\\tnode.isSelfClosing = true;\\n\\t}\\n\\t// Look for a greater than sign\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\">\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Check for a required line break\\n\\tif(options.requireLineBreak) {\\n\\t\\ttoken = $tw.utils.parseTokenRegExp(source,pos,/([^\\\\S\\\\n\\\\r]*\\\\r?\\\\n(?:[^\\\\S\\\\n\\\\r]*\\\\r?\\\\n|$))/g);\\n\\t\\tif(!token) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\t// Update the end position\\n\\tnode.end = pos;\\n\\treturn node;\\n};\\n\\nexports.findNextTag = function(source,pos,options) {\\n\\t// A regexp for finding candidate HTML tags\\n\\tvar reLookahead = /\u003C([a-zA-Z\\\\-\\\\$]+)/g;\\n\\t// Find the next candidate\\n\\treLookahead.lastIndex = pos;\\n\\tvar match = reLookahead.exec(source);\\n\\twhile(match) {\\n\\t\\t// Try to parse the candidate as a tag\\n\\t\\tvar tag = this.parseTag(source,match.index,options);\\n\\t\\t// Return success\\n\\t\\tif(tag && this.isLegalTag(tag)) {\\n\\t\\t\\treturn tag;\\n\\t\\t}\\n\\t\\t// Look for the next match\\n\\t\\treLookahead.lastIndex = match.index + 1;\\n\\t\\tmatch = reLookahead.exec(source);\\n\\t}\\n\\t// Failed\\n\\treturn null;\\n};\\n\\nexports.isLegalTag = function(tag) {\\n\\t// Widgets are always OK\\n\\tif(tag.type !== \\\"element\\\") {\\n\\t\\treturn true;\\n\\t// If it's an HTML tag that starts with a dash then it's not legal\\n\\t} else if(tag.tag.charAt(0) === \\\"-\\\") {\\n\\t\\treturn false;\\n\\t} else {\\n\\t\\t// Otherwise it's OK\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/image.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/image.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/image.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for embedding images. For example:\\n\\n```\\n[img[https://tiddlywiki.com/fractalveg.jpg]]\\n[img width=23 height=24 [https://tiddlywiki.com/fractalveg.jpg]]\\n[img width={{!!width}} height={{!!height}} [https://tiddlywiki.com/fractalveg.jpg]]\\n[img[Description of image|https://tiddlywiki.com/fractalveg.jpg]]\\n[img[TiddlerTitle]]\\n[img[Description of image|TiddlerTitle]]\\n```\\n\\nGenerates the `\u003C$image>` widget.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"image\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\t// Find the next tag\\n\\tthis.nextImage = this.findNextImage(this.parser.source,startPos);\\n\\treturn this.nextImage ? this.nextImage.start : undefined;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.nextImage.end;\\n\\tvar node = {\\n\\t\\ttype: \\\"image\\\",\\n\\t\\tattributes: this.nextImage.attributes\\n\\t};\\n\\treturn [node];\\n};\\n\\n/*\\nFind the next image from the current position\\n*/\\nexports.findNextImage = function(source,pos) {\\n\\t// A regexp for finding candidate HTML tags\\n\\tvar reLookahead = /(\\\\[img)/g;\\n\\t// Find the next candidate\\n\\treLookahead.lastIndex = pos;\\n\\tvar match = reLookahead.exec(source);\\n\\twhile(match) {\\n\\t\\t// Try to parse the candidate as a tag\\n\\t\\tvar tag = this.parseImage(source,match.index);\\n\\t\\t// Return success\\n\\t\\tif(tag) {\\n\\t\\t\\treturn tag;\\n\\t\\t}\\n\\t\\t// Look for the next match\\n\\t\\treLookahead.lastIndex = match.index + 1;\\n\\t\\tmatch = reLookahead.exec(source);\\n\\t}\\n\\t// Failed\\n\\treturn null;\\n};\\n\\n/*\\nLook for an image at the specified position. Returns null if not found, otherwise returns {type: \\\"image\\\", attributes: [], isSelfClosing:, start:, end:,}\\n*/\\nexports.parseImage = function(source,pos) {\\n\\tvar token,\\n\\t\\tnode = {\\n\\t\\t\\ttype: \\\"image\\\",\\n\\t\\t\\tstart: pos,\\n\\t\\t\\tattributes: {}\\n\\t\\t};\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for the `[img`\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\"[img\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Process attributes\\n\\tif(source.charAt(pos) !== \\\"[\\\") {\\n\\t\\tvar attribute = $tw.utils.parseAttribute(source,pos);\\n\\t\\twhile(attribute) {\\n\\t\\t\\tnode.attributes[attribute.name] = attribute;\\n\\t\\t\\tpos = attribute.end;\\n\\t\\t\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t\\t\\tif(source.charAt(pos) !== \\\"[\\\") {\\n\\t\\t\\t\\t// Get the next attribute\\n\\t\\t\\t\\tattribute = $tw.utils.parseAttribute(source,pos);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tattribute = null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for the `[` after the attributes\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\"[\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Get the source up to the terminating `]]`\\n\\ttoken = $tw.utils.parseTokenRegExp(source,pos,/(?:([^|\\\\]]*?)\\\\|)?([^\\\\]]+?)\\\\]\\\\]/g);\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\tif(token.match[1]) {\\n\\t\\tnode.attributes.tooltip = {type: \\\"string\\\", value: token.match[1].trim()};\\n\\t}\\n\\tnode.attributes.source = {type: \\\"string\\\", value: (token.match[2] || \\\"\\\").trim()};\\n\\t// Update the end position\\n\\tnode.end = pos;\\n\\treturn node;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/import.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/import.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/import.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule for importing variable definitions\\n\\n```\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"import\\\";\\nexports.types = {pragma: true};\\n\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\import[^\\\\S\\\\n]/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\tvar self = this;\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse the filter terminated by a line break\\n\\tvar reMatch = /(.*)(?:$|\\\\r?\\\\n)/mg;\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\tthis.parser.pos = reMatch.lastIndex;\\n\\t// Parse tree nodes to return\\n\\treturn [{\\n\\t\\ttype: \\\"importvariables\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tfilter: {type: \\\"string\\\", value: match[1]}\\n\\t\\t},\\n\\t\\tchildren: []\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/list.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/list.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/list.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for lists. For example:\\n\\n```\\n* This is an unordered list\\n* It has two items\\n\\n# This is a numbered list\\n## With a subitem\\n# And a third item\\n\\n; This is a term that is being defined\\n: This is the definition of that term\\n```\\n\\nNote that lists can be nested arbitrarily:\\n\\n```\\n#** One\\n#* Two\\n#** Three\\n#**** Four\\n#**# Five\\n#**## Six\\n## Seven\\n### Eight\\n## Nine\\n```\\n\\nA CSS class can be applied to a list item as follows:\\n\\n```\\n* List item one\\n*.active List item two has the class `active`\\n* List item three\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"list\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /([\\\\*#;:>]+)/mg;\\n};\\n\\nvar listTypes = {\\n\\t\\\"*\\\": {listTag: \\\"ul\\\", itemTag: \\\"li\\\"},\\n\\t\\\"#\\\": {listTag: \\\"ol\\\", itemTag: \\\"li\\\"},\\n\\t\\\";\\\": {listTag: \\\"dl\\\", itemTag: \\\"dt\\\"},\\n\\t\\\":\\\": {listTag: \\\"dl\\\", itemTag: \\\"dd\\\"},\\n\\t\\\">\\\": {listTag: \\\"blockquote\\\", itemTag: \\\"div\\\"}\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Array of parse tree nodes for the previous row of the list\\n\\tvar listStack = [];\\n\\t// Cycle through the items in the list\\n\\twhile(true) {\\n\\t\\t// Match the list marker\\n\\t\\tvar reMatch = /([\\\\*#;:>]+)/mg;\\n\\t\\treMatch.lastIndex = this.parser.pos;\\n\\t\\tvar match = reMatch.exec(this.parser.source);\\n\\t\\tif(!match || match.index !== this.parser.pos) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Check whether the list type of the top level matches\\n\\t\\tvar listInfo = listTypes[match[0].charAt(0)];\\n\\t\\tif(listStack.length > 0 && listStack[0].tag !== listInfo.listTag) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Move past the list marker\\n\\t\\tthis.parser.pos = match.index + match[0].length;\\n\\t\\t// Walk through the list markers for the current row\\n\\t\\tfor(var t=0; t\u003Cmatch[0].length; t++) {\\n\\t\\t\\tlistInfo = listTypes[match[0].charAt(t)];\\n\\t\\t\\t// Remove any stacked up element if we can't re-use it because the list type doesn't match\\n\\t\\t\\tif(listStack.length > t && listStack[t].tag !== listInfo.listTag) {\\n\\t\\t\\t\\tlistStack.splice(t,listStack.length - t);\\n\\t\\t\\t}\\n\\t\\t\\t// Construct the list element or reuse the previous one at this level\\n\\t\\t\\tif(listStack.length \u003C= t) {\\n\\t\\t\\t\\tvar listElement = {type: \\\"element\\\", tag: listInfo.listTag, children: [\\n\\t\\t\\t\\t\\t{type: \\\"element\\\", tag: listInfo.itemTag, children: []}\\n\\t\\t\\t\\t]};\\n\\t\\t\\t\\t// Link this list element into the last child item of the parent list item\\n\\t\\t\\t\\tif(t) {\\n\\t\\t\\t\\t\\tvar prevListItem = listStack[t-1].children[listStack[t-1].children.length-1];\\n\\t\\t\\t\\t\\tprevListItem.children.push(listElement);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Save this element in the stack\\n\\t\\t\\t\\tlistStack[t] = listElement;\\n\\t\\t\\t} else if(t === (match[0].length - 1)) {\\n\\t\\t\\t\\tlistStack[t].children.push({type: \\\"element\\\", tag: listInfo.itemTag, children: []});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(listStack.length > match[0].length) {\\n\\t\\t\\tlistStack.splice(match[0].length,listStack.length - match[0].length);\\n\\t\\t}\\n\\t\\t// Process the body of the list item into the last list item\\n\\t\\tvar lastListChildren = listStack[listStack.length-1].children,\\n\\t\\t\\tlastListItem = lastListChildren[lastListChildren.length-1],\\n\\t\\t\\tclasses = this.parser.parseClasses();\\n\\t\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\t\\tvar tree = this.parser.parseInlineRun(/(\\\\r?\\\\n)/mg);\\n\\t\\tlastListItem.children.push.apply(lastListItem.children,tree);\\n\\t\\tif(classes.length > 0) {\\n\\t\\t\\t$tw.utils.addClassToParseTreeNode(lastListItem,classes.join(\\\" \\\"));\\n\\t\\t}\\n\\t\\t// Consume any whitespace following the list item\\n\\t\\tthis.parser.skipWhitespace();\\n\\t}\\n\\t// Return the root element of the list\\n\\treturn [listStack[0]];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/macrocallblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/macrocallblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/macrocallblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki rule for block macro calls\\n\\n```\\n\u003C\u003Cname value value2>>\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"macrocallblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\tvar nextStart = startPos;\\n\\t// Try parsing at all possible macrocall openers until we match\\n\\twhile((nextStart = this.parser.source.indexOf(\\\"\u003C\u003C\\\",nextStart)) >= 0) {\\n\\t\\tvar nextCall = $tw.utils.parseMacroInvocation(this.parser.source,nextStart);\\n\\t\\tif(nextCall) {\\n\\t\\t\\tvar c = this.parser.source.charAt(nextCall.end);\\n\\t\\t\\t// Ensure EOL after parsed macro\\n\\t\\t\\t// If we didn't need to support IE, we'd just use /(?:\\\\r?\\\\n|$)/ym\\n\\t\\t\\tif ((c === \\\"\\\") || (c === \\\"\\\\n\\\") || ((c === \\\"\\\\r\\\") && this.parser.source.charAt(nextCall.end+1) === \\\"\\\\n\\\")) {\\n\\t\\t\\t\\tthis.nextCall = nextCall;\\n\\t\\t\\t\\treturn nextStart;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tnextStart += 2;\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\tvar call = this.nextCall;\\n\\tcall.isBlock = true;\\n\\tthis.nextCall = null;\\n\\tthis.parser.pos = call.end;\\n\\treturn [call];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/macrocallinline.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/macrocallinline.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/macrocallinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki rule for macro calls\\n\\n```\\n\u003C\u003Cname value value2>>\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"macrocallinline\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\tvar nextStart = startPos;\\n\\t// Try parsing at all possible macrocall openers until we match\\n\\twhile((nextStart = this.parser.source.indexOf(\\\"\u003C\u003C\\\",nextStart)) >= 0) {\\n\\t\\tthis.nextCall = $tw.utils.parseMacroInvocation(this.parser.source,nextStart);\\n\\t\\tif(this.nextCall) {\\n\\t\\t\\treturn nextStart;\\n\\t\\t}\\n\\t\\tnextStart += 2;\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\tvar call = this.nextCall;\\n\\tthis.nextCall = null;\\n\\tthis.parser.pos = call.end;\\n\\treturn [call];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/macrodef.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/macrodef.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/macrodef.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule for macro definitions\\n\\n```\\n\\\\define name(param:defaultvalue,param2:defaultvalue)\\ndefinition text, including $param$ markers\\n\\\\end\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"macrodef\\\";\\nexports.types = {pragma: true};\\n\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\define\\\\s+([^(\\\\s]+)\\\\(\\\\s*([^)]*)\\\\)(\\\\s*\\\\r?\\\\n)?/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Move past the macro name and parameters\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse the parameters\\n\\tvar paramString = this.match[2],\\n\\t\\tparams = [];\\n\\tif(paramString !== \\\"\\\") {\\n\\t\\tvar reParam = /\\\\s*([A-Za-z0-9\\\\-_]+)(?:\\\\s*:\\\\s*(?:\\\"\\\"\\\"([\\\\s\\\\S]*?)\\\"\\\"\\\"|\\\"([^\\\"]*)\\\"|'([^']*)'|\\\\[\\\\[([^\\\\]]*)\\\\]\\\\]|([^\\\"'\\\\s]+)))?/mg,\\n\\t\\t\\tparamMatch = reParam.exec(paramString);\\n\\t\\twhile(paramMatch) {\\n\\t\\t\\t// Save the parameter details\\n\\t\\t\\tvar paramInfo = {name: paramMatch[1]},\\n\\t\\t\\t\\tdefaultValue = paramMatch[2] || paramMatch[3] || paramMatch[4] || paramMatch[5] || paramMatch[6];\\n\\t\\t\\tif(defaultValue) {\\n\\t\\t\\t\\tparamInfo[\\\"default\\\"] = defaultValue;\\n\\t\\t\\t}\\n\\t\\t\\tparams.push(paramInfo);\\n\\t\\t\\t// Look for the next parameter\\n\\t\\t\\tparamMatch = reParam.exec(paramString);\\n\\t\\t}\\n\\t}\\n\\t// Is this a multiline definition?\\n\\tvar reEnd;\\n\\tif(this.match[3]) {\\n\\t\\t// If so, the end of the body is marked with \\\\end\\n\\t\\treEnd = /(\\\\r?\\\\n\\\\\\\\end[^\\\\S\\\\n\\\\r]*(?:$|\\\\r?\\\\n))/mg;\\n\\t} else {\\n\\t\\t// Otherwise, the end of the definition is marked by the end of the line\\n\\t\\treEnd = /($|\\\\r?\\\\n)/mg;\\n\\t\\t// Move past any whitespace\\n\\t\\tthis.parser.pos = $tw.utils.skipWhiteSpace(this.parser.source,this.parser.pos);\\n\\t}\\n\\t// Find the end of the definition\\n\\treEnd.lastIndex = this.parser.pos;\\n\\tvar text,\\n\\t\\tendMatch = reEnd.exec(this.parser.source);\\n\\tif(endMatch) {\\n\\t\\ttext = this.parser.source.substring(this.parser.pos,endMatch.index);\\n\\t\\tthis.parser.pos = endMatch.index + endMatch[0].length;\\n\\t} else {\\n\\t\\t// We didn't find the end of the definition, so we'll make it blank\\n\\t\\ttext = \\\"\\\";\\n\\t}\\n\\t// Save the macro definition\\n\\treturn [{\\n\\t\\ttype: \\\"set\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tname: {type: \\\"string\\\", value: this.match[1]},\\n\\t\\t\\tvalue: {type: \\\"string\\\", value: text}\\n\\t\\t},\\n\\t\\tchildren: [],\\n\\t\\tparams: params,\\n\\t\\tisMacroDefinition: true\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/prettyextlink.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/prettyextlink.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/prettyextlink.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for external links. For example:\\n\\n```\\n[ext[https://tiddlywiki.com/fractalveg.jpg]]\\n[ext[Tooltip|https://tiddlywiki.com/fractalveg.jpg]]\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"prettyextlink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n};\\n\\nexports.findNextMatch = function(startPos) {\\n\\t// Find the next tag\\n\\tthis.nextLink = this.findNextLink(this.parser.source,startPos);\\n\\treturn this.nextLink ? this.nextLink.start : undefined;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.nextLink.end;\\n\\treturn [this.nextLink];\\n};\\n\\n/*\\nFind the next link from the current position\\n*/\\nexports.findNextLink = function(source,pos) {\\n\\t// A regexp for finding candidate links\\n\\tvar reLookahead = /(\\\\[ext\\\\[)/g;\\n\\t// Find the next candidate\\n\\treLookahead.lastIndex = pos;\\n\\tvar match = reLookahead.exec(source);\\n\\twhile(match) {\\n\\t\\t// Try to parse the candidate as a link\\n\\t\\tvar link = this.parseLink(source,match.index);\\n\\t\\t// Return success\\n\\t\\tif(link) {\\n\\t\\t\\treturn link;\\n\\t\\t}\\n\\t\\t// Look for the next match\\n\\t\\treLookahead.lastIndex = match.index + 1;\\n\\t\\tmatch = reLookahead.exec(source);\\n\\t}\\n\\t// Failed\\n\\treturn null;\\n};\\n\\n/*\\nLook for an link at the specified position. Returns null if not found, otherwise returns {type: \\\"element\\\", tag: \\\"a\\\", attributes: [], isSelfClosing:, start:, end:,}\\n*/\\nexports.parseLink = function(source,pos) {\\n\\tvar token,\\n\\t\\ttextNode = {\\n\\t\\t\\ttype: \\\"text\\\"\\n\\t\\t},\\n\\t\\tnode = {\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"a\\\",\\n\\t\\t\\tstart: pos,\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"tc-tiddlylink-external\\\"},\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [textNode]\\n\\t\\t};\\n\\t// Skip whitespace\\n\\tpos = $tw.utils.skipWhiteSpace(source,pos);\\n\\t// Look for the `[ext[`\\n\\ttoken = $tw.utils.parseTokenString(source,pos,\\\"[ext[\\\");\\n\\tif(!token) {\\n\\t\\treturn null;\\n\\t}\\n\\tpos = token.end;\\n\\t// Look ahead for the terminating `]]`\\n\\tvar closePos = source.indexOf(\\\"]]\\\",pos);\\n\\tif(closePos === -1) {\\n\\t\\treturn null;\\n\\t}\\n\\t// Look for a `|` separating the tooltip\\n\\tvar splitPos = source.indexOf(\\\"|\\\",pos);\\n\\tif(splitPos === -1 || splitPos > closePos) {\\n\\t\\tsplitPos = null;\\n\\t}\\n\\t// Pull out the tooltip and URL\\n\\tvar tooltip, URL;\\n\\tif(splitPos) {\\n\\t\\tURL = source.substring(splitPos + 1,closePos).trim();\\n\\t\\ttextNode.text = source.substring(pos,splitPos).trim();\\n\\t} else {\\n\\t\\tURL = source.substring(pos,closePos).trim();\\n\\t\\ttextNode.text = URL;\\n\\t}\\n\\tnode.attributes.href = {type: \\\"string\\\", value: URL};\\n\\tnode.attributes.target = {type: \\\"string\\\", value: \\\"_blank\\\"};\\n\\tnode.attributes.rel = {type: \\\"string\\\", value: \\\"noopener noreferrer\\\"};\\n\\t// Update the end position\\n\\tnode.end = closePos + 2;\\n\\treturn node;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/prettylink.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/prettylink.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/prettylink.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for pretty links. For example:\\n\\n```\\n[[Introduction]]\\n\\n[[Link description|TiddlerTitle]]\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"prettylink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\[\\\\[(.*?)(?:\\\\|(.*?))?\\\\]\\\\]/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Process the link\\n\\tvar text = this.match[1],\\n\\t\\tlink = this.match[2] || text;\\n\\tif($tw.utils.isLinkExternal(link)) {\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"a\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\thref: {type: \\\"string\\\", value: link},\\n\\t\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"tc-tiddlylink-external\\\"},\\n\\t\\t\\t\\ttarget: {type: \\\"string\\\", value: \\\"_blank\\\"},\\n\\t\\t\\t\\trel: {type: \\\"string\\\", value: \\\"noopener noreferrer\\\"}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\", text: text\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t} else {\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"link\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tto: {type: \\\"string\\\", value: link}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\", text: text\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/quoteblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/quoteblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/quoteblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for quote blocks. For example:\\n\\n```\\n\\t\u003C\u003C\u003C.optionalClass(es) optional cited from\\n\\ta quote\\n\\t\u003C\u003C\u003C\\n\\t\\n\\t\u003C\u003C\u003C.optionalClass(es)\\n\\ta quote\\n\\t\u003C\u003C\u003C optional cited from\\n```\\n\\nQuotes can be quoted by putting more \u003Cs\\n\\n```\\n\\t\u003C\u003C\u003C\\n\\tQuote Level 1\\n\\t\\n\\t\u003C\u003C\u003C\u003C\\n\\tQuoteLevel 2\\n\\t\u003C\u003C\u003C\u003C\\n\\t\\n\\t\u003C\u003C\u003C\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"quoteblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /(\u003C\u003C\u003C+)/mg;\\n};\\n\\nexports.parse = function() {\\n\\tvar classes = [\\\"tc-quote\\\"];\\n\\t// Get all the details of the match\\n\\tvar reEndString = \\\"^\\\" + this.match[1] + \\\"(?!\u003C)\\\";\\n\\t// Move past the \u003Cs\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t\\n\\t// Parse any classes, whitespace and then the optional cite itself\\n\\tclasses.push.apply(classes, this.parser.parseClasses());\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\tvar cite = this.parser.parseInlineRun(/(\\\\r?\\\\n)/mg);\\n\\t// before handling the cite, parse the body of the quote\\n\\tvar tree= this.parser.parseBlocks(reEndString);\\n\\t// If we got a cite, put it before the text\\n\\tif(cite.length > 0) {\\n\\t\\ttree.unshift({\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"cite\\\",\\n\\t\\t\\tchildren: cite\\n\\t\\t});\\n\\t}\\n\\t// Parse any optional cite\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\tcite = this.parser.parseInlineRun(/(\\\\r?\\\\n)/mg);\\n\\t// If we got a cite, push it\\n\\tif(cite.length > 0) {\\n\\t\\ttree.push({\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"cite\\\",\\n\\t\\t\\tchildren: cite\\n\\t\\t});\\n\\t}\\n\\t// Return the blockquote element\\n\\treturn [{\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"blockquote\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tclass: { type: \\\"string\\\", value: classes.join(\\\" \\\") },\\n\\t\\t},\\n\\t\\tchildren: tree\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/rules.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/rules.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/rules.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule for rules specifications\\n\\n```\\n\\\\rules except ruleone ruletwo rulethree\\n\\\\rules only ruleone ruletwo rulethree\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"rules\\\";\\nexports.types = {pragma: true};\\n\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\rules[^\\\\S\\\\n]/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse whitespace delimited tokens terminated by a line break\\n\\tvar reMatch = /[^\\\\S\\\\n]*(\\\\S+)|(\\\\r?\\\\n)/mg,\\n\\t\\ttokens = [];\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\twhile(match && match.index === this.parser.pos) {\\n\\t\\tthis.parser.pos = reMatch.lastIndex;\\n\\t\\t// Exit if we've got the line break\\n\\t\\tif(match[2]) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Process the token\\n\\t\\tif(match[1]) {\\n\\t\\t\\ttokens.push(match[1]);\\n\\t\\t}\\n\\t\\t// Match the next token\\n\\t\\tmatch = reMatch.exec(this.parser.source);\\n\\t}\\n\\t// Process the tokens\\n\\tif(tokens.length > 0) {\\n\\t\\tthis.parser.amendRules(tokens[0],tokens.slice(1));\\n\\t}\\n\\t// No parse tree nodes to return\\n\\treturn [];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/styleblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/styleblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/styleblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for assigning styles and classes to paragraphs and other blocks. For example:\\n\\n```\\n@@.myClass\\n@@background-color:red;\\nThis paragraph will have the CSS class `myClass`.\\n\\n* The `\u003Cul>` around this list will also have the class `myClass`\\n* List item 2\\n\\n@@\\n```\\n\\nNote that classes and styles can be mixed subject to the rule that styles must precede classes. For example\\n\\n```\\n@@.myFirstClass.mySecondClass\\n@@width:100px;.myThirdClass\\nThis is a paragraph\\n@@\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"styleblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /@@((?:[^\\\\.\\\\r\\\\n\\\\s:]+:[^\\\\r\\\\n;]+;)+)?(?:\\\\.([^\\\\r\\\\n\\\\s]+))?\\\\r?\\\\n/mg;\\n};\\n\\nexports.parse = function() {\\n\\tvar reEndString = \\\"^@@(?:\\\\\\\\r?\\\\\\\\n)?\\\";\\n\\tvar classes = [], styles = [];\\n\\tdo {\\n\\t\\t// Get the class and style\\n\\t\\tif(this.match[1]) {\\n\\t\\t\\tstyles.push(this.match[1]);\\n\\t\\t}\\n\\t\\tif(this.match[2]) {\\n\\t\\t\\tclasses.push(this.match[2].split(\\\".\\\").join(\\\" \\\"));\\n\\t\\t}\\n\\t\\t// Move past the match\\n\\t\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t\\t// Look for another line of classes and styles\\n\\t\\tthis.match = this.matchRegExp.exec(this.parser.source);\\n\\t} while(this.match && this.match.index === this.parser.pos);\\n\\t// Parse the body\\n\\tvar tree = this.parser.parseBlocks(reEndString);\\n\\tfor(var t=0; t\u003Ctree.length; t++) {\\n\\t\\tif(classes.length > 0) {\\n\\t\\t\\t$tw.utils.addClassToParseTreeNode(tree[t],classes.join(\\\" \\\"));\\n\\t\\t}\\n\\t\\tif(styles.length > 0) {\\n\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(tree[t],\\\"style\\\",styles.join(\\\"\\\"));\\n\\t\\t}\\n\\t}\\n\\treturn tree;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/styleinline.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/styleinline.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/styleinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for assigning styles and classes to inline runs. For example:\\n\\n```\\n@@.myClass This is some text with a class@@\\n@@background-color:red;This is some text with a background colour@@\\n@@width:100px;.myClass This is some text with a class and a width@@\\n```\\n\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"styleinline\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /@@((?:[^\\\\.\\\\r\\\\n\\\\s:]+:[^\\\\r\\\\n;]+;)+)?(\\\\.(?:[^\\\\r\\\\n\\\\s]+)\\\\s+)?/mg;\\n};\\n\\nexports.parse = function() {\\n\\tvar reEnd = /@@/g;\\n\\t// Get the styles and class\\n\\tvar stylesString = this.match[1],\\n\\t\\tclassString = this.match[2] ? this.match[2].split(\\\".\\\").join(\\\" \\\") : undefined;\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse the run up to the terminator\\n\\tvar tree = this.parser.parseInlineRun(reEnd,{eatTerminator: true});\\n\\t// Return the classed span\\n\\tvar node = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"span\\\",\\n\\t\\tattributes: {\\n\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"tc-inline-style\\\"}\\n\\t\\t},\\n\\t\\tchildren: tree\\n\\t};\\n\\tif(classString) {\\n\\t\\t$tw.utils.addClassToParseTreeNode(node,classString);\\n\\t}\\n\\tif(stylesString) {\\n\\t\\t$tw.utils.addAttributeToParseTreeNode(node,\\\"style\\\",stylesString);\\n\\t}\\n\\treturn [node];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/syslink.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/syslink.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/syslink.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for system tiddler links.\\nCan be suppressed preceding them with `~`.\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"syslink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = new RegExp(\\n\\t\\t\\\"~?\\\\\\\\$:\\\\\\\\/[\\\" +\\n\\t\\t$tw.config.textPrimitives.anyLetter.substr(1,$tw.config.textPrimitives.anyLetter.length - 2) +\\n\\t\\t\\\"\\\\/._-]+\\\",\\n\\t\\t\\\"mg\\\"\\n\\t);\\n};\\n\\nexports.parse = function() {\\n\\tvar match = this.match[0];\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Create the link unless it is suppressed\\n\\tif(match.substr(0,1) === \\\"~\\\") {\\n\\t\\treturn [{type: \\\"text\\\", text: match.substr(1)}];\\n\\t} else {\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"link\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tto: {type: \\\"string\\\", value: match}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\t\\ttext: match\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t}\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/table.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/table.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/table.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for tables.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"table\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\|(?:[^\\\\n]*)\\\\|(?:[fhck]?)\\\\r?(?:\\\\n|$)/mg;\\n};\\n\\nvar processRow = function(prevColumns) {\\n\\tvar cellRegExp = /(?:\\\\|([^\\\\n\\\\|]*)\\\\|)|(\\\\|[fhck]?\\\\r?(?:\\\\n|$))/mg,\\n\\t\\tcellTermRegExp = /((?:\\\\x20*)\\\\|)/mg,\\n\\t\\ttree = [],\\n\\t\\tcol = 0,\\n\\t\\tcolSpanCount = 1,\\n\\t\\tprevCell,\\n\\t\\tvAlign;\\n\\t// Match a single cell\\n\\tcellRegExp.lastIndex = this.parser.pos;\\n\\tvar cellMatch = cellRegExp.exec(this.parser.source);\\n\\twhile(cellMatch && cellMatch.index === this.parser.pos) {\\n\\t\\tif(cellMatch[1] === \\\"~\\\") {\\n\\t\\t\\t// Rowspan\\n\\t\\t\\tvar last = prevColumns[col];\\n\\t\\t\\tif(last) {\\n\\t\\t\\t\\tlast.rowSpanCount++;\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(last.element,\\\"rowspan\\\",last.rowSpanCount);\\n\\t\\t\\t\\tvAlign = $tw.utils.getAttributeValueFromParseTreeNode(last.element,\\\"valign\\\",\\\"center\\\");\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(last.element,\\\"valign\\\",vAlign);\\n\\t\\t\\t\\tif(colSpanCount > 1) {\\n\\t\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(last.element,\\\"colspan\\\",colSpanCount);\\n\\t\\t\\t\\t\\tcolSpanCount = 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Move to just before the `|` terminating the cell\\n\\t\\t\\tthis.parser.pos = cellRegExp.lastIndex - 1;\\n\\t\\t} else if(cellMatch[1] === \\\">\\\") {\\n\\t\\t\\t// Colspan\\n\\t\\t\\tcolSpanCount++;\\n\\t\\t\\t// Move to just before the `|` terminating the cell\\n\\t\\t\\tthis.parser.pos = cellRegExp.lastIndex - 1;\\n\\t\\t} else if(cellMatch[1] === \\\"\u003C\\\" && prevCell) {\\n\\t\\t\\tcolSpanCount = 1 + $tw.utils.getAttributeValueFromParseTreeNode(prevCell,\\\"colspan\\\",1);\\n\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(prevCell,\\\"colspan\\\",colSpanCount);\\n\\t\\t\\tcolSpanCount = 1;\\n\\t\\t\\t// Move to just before the `|` terminating the cell\\n\\t\\t\\tthis.parser.pos = cellRegExp.lastIndex - 1;\\n\\t\\t} else if(cellMatch[2]) {\\n\\t\\t\\t// End of row\\n\\t\\t\\tif(prevCell && colSpanCount > 1) {\\n\\t\\t\\t\\tif(prevCell.attributes && prevCell.attributes && prevCell.attributes.colspan) {\\n\\t\\t\\t\\t\\t\\tcolSpanCount += prevCell.attributes.colspan.value;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcolSpanCount -= 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(prevCell,\\\"colspan\\\",colSpanCount);\\n\\t\\t\\t}\\n\\t\\t\\tthis.parser.pos = cellRegExp.lastIndex - 1;\\n\\t\\t\\tbreak;\\n\\t\\t} else {\\n\\t\\t\\t// For ordinary cells, step beyond the opening `|`\\n\\t\\t\\tthis.parser.pos++;\\n\\t\\t\\t// Look for a space at the start of the cell\\n\\t\\t\\tvar spaceLeft = false;\\n\\t\\t\\tvAlign = null;\\n\\t\\t\\tif(this.parser.source.substr(this.parser.pos).search(/^\\\\^([^\\\\^]|\\\\^\\\\^)/) === 0) {\\n\\t\\t\\t\\tvAlign = \\\"top\\\";\\n\\t\\t\\t} else if(this.parser.source.substr(this.parser.pos).search(/^,([^,]|,,)/) === 0) {\\n\\t\\t\\t\\tvAlign = \\\"bottom\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif(vAlign) {\\n\\t\\t\\t\\tthis.parser.pos++;\\n\\t\\t\\t}\\n\\t\\t\\tvar chr = this.parser.source.substr(this.parser.pos,1);\\n\\t\\t\\twhile(chr === \\\" \\\") {\\n\\t\\t\\t\\tspaceLeft = true;\\n\\t\\t\\t\\tthis.parser.pos++;\\n\\t\\t\\t\\tchr = this.parser.source.substr(this.parser.pos,1);\\n\\t\\t\\t}\\n\\t\\t\\t// Check whether this is a heading cell\\n\\t\\t\\tvar cell;\\n\\t\\t\\tif(chr === \\\"!\\\") {\\n\\t\\t\\t\\tthis.parser.pos++;\\n\\t\\t\\t\\tcell = {type: \\\"element\\\", tag: \\\"th\\\", children: []};\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcell = {type: \\\"element\\\", tag: \\\"td\\\", children: []};\\n\\t\\t\\t}\\n\\t\\t\\ttree.push(cell);\\n\\t\\t\\t// Record information about this cell\\n\\t\\t\\tprevCell = cell;\\n\\t\\t\\tprevColumns[col] = {rowSpanCount:1,element:cell};\\n\\t\\t\\t// Check for a colspan\\n\\t\\t\\tif(colSpanCount > 1) {\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(cell,\\\"colspan\\\",colSpanCount);\\n\\t\\t\\t\\tcolSpanCount = 1;\\n\\t\\t\\t}\\n\\t\\t\\t// Parse the cell\\n\\t\\t\\tcell.children = this.parser.parseInlineRun(cellTermRegExp,{eatTerminator: true});\\n\\t\\t\\t// Set the alignment for the cell\\n\\t\\t\\tif(vAlign) {\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(cell,\\\"valign\\\",vAlign);\\n\\t\\t\\t}\\n\\t\\t\\tif(this.parser.source.substr(this.parser.pos - 2,1) === \\\" \\\") { // spaceRight\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(cell,\\\"align\\\",spaceLeft ? \\\"center\\\" : \\\"left\\\");\\n\\t\\t\\t} else if(spaceLeft) {\\n\\t\\t\\t\\t$tw.utils.addAttributeToParseTreeNode(cell,\\\"align\\\",\\\"right\\\");\\n\\t\\t\\t}\\n\\t\\t\\t// Move back to the closing `|`\\n\\t\\t\\tthis.parser.pos--;\\n\\t\\t}\\n\\t\\tcol++;\\n\\t\\tcellRegExp.lastIndex = this.parser.pos;\\n\\t\\tcellMatch = cellRegExp.exec(this.parser.source);\\n\\t}\\n\\treturn tree;\\n};\\n\\nexports.parse = function() {\\n\\tvar rowContainerTypes = {\\\"c\\\":\\\"caption\\\", \\\"h\\\":\\\"thead\\\", \\\"\\\":\\\"tbody\\\", \\\"f\\\":\\\"tfoot\\\"},\\n\\t\\ttable = {type: \\\"element\\\", tag: \\\"table\\\", children: []},\\n\\t\\trowRegExp = /^\\\\|([^\\\\n]*)\\\\|([fhck]?)\\\\r?(?:\\\\n|$)/mg,\\n\\t\\trowTermRegExp = /(\\\\|(?:[fhck]?)\\\\r?(?:\\\\n|$))/mg,\\n\\t\\tprevColumns = [],\\n\\t\\tcurrRowType,\\n\\t\\trowContainer,\\n\\t\\trowCount = 0;\\n\\t// Match the row\\n\\trowRegExp.lastIndex = this.parser.pos;\\n\\tvar rowMatch = rowRegExp.exec(this.parser.source);\\n\\twhile(rowMatch && rowMatch.index === this.parser.pos) {\\n\\t\\tvar rowType = rowMatch[2];\\n\\t\\t// Check if it is a class assignment\\n\\t\\tif(rowType === \\\"k\\\") {\\n\\t\\t\\t$tw.utils.addClassToParseTreeNode(table,rowMatch[1]);\\n\\t\\t\\tthis.parser.pos = rowMatch.index + rowMatch[0].length;\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, create a new row if this one is of a different type\\n\\t\\t\\tif(rowType !== currRowType) {\\n\\t\\t\\t\\trowContainer = {type: \\\"element\\\", tag: rowContainerTypes[rowType], children: []};\\n\\t\\t\\t\\ttable.children.push(rowContainer);\\n\\t\\t\\t\\tcurrRowType = rowType;\\n\\t\\t\\t}\\n\\t\\t\\t// Is this a caption row?\\n\\t\\t\\tif(currRowType === \\\"c\\\") {\\n\\t\\t\\t\\t// If so, move past the opening `|` of the row\\n\\t\\t\\t\\tthis.parser.pos++;\\n\\t\\t\\t\\t// Move the caption to the first row if it isn't already\\n\\t\\t\\t\\tif(table.children.length !== 1) {\\n\\t\\t\\t\\t\\ttable.children.pop(); // Take rowContainer out of the children array\\n\\t\\t\\t\\t\\ttable.children.splice(0,0,rowContainer); // Insert it at the bottom\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Set the alignment - TODO: figure out why TW did this\\n//\\t\\t\\t\\trowContainer.attributes.align = rowCount === 0 ? \\\"top\\\" : \\\"bottom\\\";\\n\\t\\t\\t\\t// Parse the caption\\n\\t\\t\\t\\trowContainer.children = this.parser.parseInlineRun(rowTermRegExp,{eatTerminator: true});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Create the row\\n\\t\\t\\t\\tvar theRow = {type: \\\"element\\\", tag: \\\"tr\\\", children: []};\\n\\t\\t\\t\\t$tw.utils.addClassToParseTreeNode(theRow,rowCount%2 ? \\\"oddRow\\\" : \\\"evenRow\\\");\\n\\t\\t\\t\\trowContainer.children.push(theRow);\\n\\t\\t\\t\\t// Process the row\\n\\t\\t\\t\\ttheRow.children = processRow.call(this,prevColumns);\\n\\t\\t\\t\\tthis.parser.pos = rowMatch.index + rowMatch[0].length;\\n\\t\\t\\t\\t// Increment the row count\\n\\t\\t\\t\\trowCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trowMatch = rowRegExp.exec(this.parser.source);\\n\\t}\\n\\treturn [table];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/transcludeblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/transcludeblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/transcludeblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for block-level transclusion. For example:\\n\\n```\\n{{MyTiddler}}\\n{{MyTiddler||TemplateTitle}}\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"transcludeblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\{\\\\{([^\\\\{\\\\}\\\\|]*)(?:\\\\|\\\\|([^\\\\|\\\\{\\\\}]+))?\\\\}\\\\}(?:\\\\r?\\\\n|$)/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Get the match details\\n\\tvar template = $tw.utils.trim(this.match[2]),\\n\\t\\ttextRef = $tw.utils.trim(this.match[1]);\\n\\t// Prepare the transclude widget\\n\\tvar transcludeNode = {\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {},\\n\\t\\t\\tisBlock: true\\n\\t\\t};\\n\\t// Prepare the tiddler widget\\n\\tvar tr, targetTitle, targetField, targetIndex, tiddlerNode;\\n\\tif(textRef) {\\n\\t\\ttr = $tw.utils.parseTextReference(textRef);\\n\\t\\ttargetTitle = tr.title;\\n\\t\\ttargetField = tr.field;\\n\\t\\ttargetIndex = tr.index;\\n\\t\\ttiddlerNode = {\\n\\t\\t\\ttype: \\\"tiddler\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: targetTitle}\\n\\t\\t\\t},\\n\\t\\t\\tisBlock: true,\\n\\t\\t\\tchildren: [transcludeNode]\\n\\t\\t};\\n\\t}\\n\\tif(template) {\\n\\t\\ttranscludeNode.attributes.tiddler = {type: \\\"string\\\", value: template};\\n\\t\\tif(textRef) {\\n\\t\\t\\treturn [tiddlerNode];\\n\\t\\t} else {\\n\\t\\t\\treturn [transcludeNode];\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(textRef) {\\n\\t\\t\\ttranscludeNode.attributes.tiddler = {type: \\\"string\\\", value: targetTitle};\\n\\t\\t\\tif(targetField) {\\n\\t\\t\\t\\ttranscludeNode.attributes.field = {type: \\\"string\\\", value: targetField};\\n\\t\\t\\t}\\n\\t\\t\\tif(targetIndex) {\\n\\t\\t\\t\\ttranscludeNode.attributes.index = {type: \\\"string\\\", value: targetIndex};\\n\\t\\t\\t}\\n\\t\\t\\treturn [tiddlerNode];\\n\\t\\t} else {\\n\\t\\t\\treturn [transcludeNode];\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/transcludeinline.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/transcludeinline.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/transcludeinline.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for inline-level transclusion. For example:\\n\\n```\\n{{MyTiddler}}\\n{{MyTiddler||TemplateTitle}}\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"transcludeinline\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\{\\\\{([^\\\\{\\\\}\\\\|]*)(?:\\\\|\\\\|([^\\\\|\\\\{\\\\}]+))?\\\\}\\\\}/mg;\\n};\\n\\nexports.parse = function() {\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Get the match details\\n\\tvar template = $tw.utils.trim(this.match[2]),\\n\\t\\ttextRef = $tw.utils.trim(this.match[1]);\\n\\t// Prepare the transclude widget\\n\\tvar transcludeNode = {\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {}\\n\\t\\t};\\n\\t// Prepare the tiddler widget\\n\\tvar tr, targetTitle, targetField, targetIndex, tiddlerNode;\\n\\tif(textRef) {\\n\\t\\ttr = $tw.utils.parseTextReference(textRef);\\n\\t\\ttargetTitle = tr.title;\\n\\t\\ttargetField = tr.field;\\n\\t\\ttargetIndex = tr.index;\\n\\t\\ttiddlerNode = {\\n\\t\\t\\ttype: \\\"tiddler\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: targetTitle}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [transcludeNode]\\n\\t\\t};\\n\\t}\\n\\tif(template) {\\n\\t\\ttranscludeNode.attributes.tiddler = {type: \\\"string\\\", value: template};\\n\\t\\tif(textRef) {\\n\\t\\t\\treturn [tiddlerNode];\\n\\t\\t} else {\\n\\t\\t\\treturn [transcludeNode];\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(textRef) {\\n\\t\\t\\ttranscludeNode.attributes.tiddler = {type: \\\"string\\\", value: targetTitle};\\n\\t\\t\\tif(targetField) {\\n\\t\\t\\t\\ttranscludeNode.attributes.field = {type: \\\"string\\\", value: targetField};\\n\\t\\t\\t}\\n\\t\\t\\tif(targetIndex) {\\n\\t\\t\\t\\ttranscludeNode.attributes.index = {type: \\\"string\\\", value: targetIndex};\\n\\t\\t\\t}\\n\\t\\t\\treturn [tiddlerNode];\\n\\t\\t} else {\\n\\t\\t\\treturn [transcludeNode];\\n\\t\\t}\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/typedblock.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/typedblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/typedblock.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text rule for typed blocks. For example:\\n\\n```\\n$$$.js\\nThis will be rendered as JavaScript\\n$$$\\n\\n$$$.svg\\n\u003Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"150\\\" height=\\\"100\\\">\\n  \u003Ccircle cx=\\\"100\\\" cy=\\\"50\\\" r=\\\"40\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\" fill=\\\"red\\\" />\\n\u003C/svg>\\n$$$\\n\\n$$$text/vnd.tiddlywiki>text/html\\nThis will be rendered as an //HTML representation// of WikiText\\n$$$\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nexports.name = \\\"typedblock\\\";\\nexports.types = {block: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /\\\\$\\\\$\\\\$([^ >\\\\r\\\\n]*)(?: *> *([^ \\\\r\\\\n]+))?\\\\r?\\\\n/mg;\\n};\\n\\nexports.parse = function() {\\n\\tvar reEnd = /\\\\r?\\\\n\\\\$\\\\$\\\\$\\\\r?(?:\\\\n|$)/mg;\\n\\t// Save the type\\n\\tvar parseType = this.match[1],\\n\\t\\trenderType = this.match[2];\\n\\t// Move past the match\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Look for the end of the block\\n\\treEnd.lastIndex = this.parser.pos;\\n\\tvar match = reEnd.exec(this.parser.source),\\n\\t\\ttext;\\n\\t// Process the block\\n\\tif(match) {\\n\\t\\ttext = this.parser.source.substring(this.parser.pos,match.index);\\n\\t\\tthis.parser.pos = match.index + match[0].length;\\n\\t} else {\\n\\t\\ttext = this.parser.source.substr(this.parser.pos);\\n\\t\\tthis.parser.pos = this.parser.sourceLength;\\n\\t}\\n\\t// Parse the block according to the specified type\\n\\tvar parser = this.parser.wiki.parseText(parseType,text,{defaultType: \\\"text/plain\\\"});\\n\\t// If there's no render type, just return the parse tree\\n\\tif(!renderType) {\\n\\t\\treturn parser.tree;\\n\\t} else {\\n\\t\\t// Otherwise, render to the rendertype and return in a \u003CPRE> tag\\n\\t\\tvar widgetNode = this.parser.wiki.makeWidget(parser),\\n\\t\\t\\tcontainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\twidgetNode.render(container,null);\\n\\t\\ttext = renderType === \\\"text/html\\\" ? container.innerHTML : container.textContent;\\n\\t\\treturn [{\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"pre\\\",\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\t\\ttext: text\\n\\t\\t\\t}]\\n\\t\\t}];\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/whitespace.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/whitespace.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/whitespace.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki pragma rule for whitespace specifications\\n\\n```\\n\\\\whitespace trim\\n\\\\whitespace notrim\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"whitespace\\\";\\nexports.types = {pragma: true};\\n\\n/*\\nInstantiate parse rule\\n*/\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = /^\\\\\\\\whitespace[^\\\\S\\\\n]/mg;\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\tvar self = this;\\n\\t// Move past the pragma invocation\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// Parse whitespace delimited tokens terminated by a line break\\n\\tvar reMatch = /[^\\\\S\\\\n]*(\\\\S+)|(\\\\r?\\\\n)/mg,\\n\\t\\ttokens = [];\\n\\treMatch.lastIndex = this.parser.pos;\\n\\tvar match = reMatch.exec(this.parser.source);\\n\\twhile(match && match.index === this.parser.pos) {\\n\\t\\tthis.parser.pos = reMatch.lastIndex;\\n\\t\\t// Exit if we've got the line break\\n\\t\\tif(match[2]) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Process the token\\n\\t\\tif(match[1]) {\\n\\t\\t\\ttokens.push(match[1]);\\n\\t\\t}\\n\\t\\t// Match the next token\\n\\t\\tmatch = reMatch.exec(this.parser.source);\\n\\t}\\n\\t// Process the tokens\\n\\t$tw.utils.each(tokens,function(token) {\\n\\t\\tswitch(token) {\\n\\t\\t\\tcase \\\"trim\\\":\\n\\t\\t\\t\\tself.parser.configTrimWhiteSpace = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"notrim\\\":\\n\\t\\t\\t\\tself.parser.configTrimWhiteSpace = false;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t});\\n\\t// No parse tree nodes to return\\n\\treturn [];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/rules/wikilink.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/wikilink.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/wikilink.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text inline rule for wiki links. For example:\\n\\n```\\nAWikiLink\\nAnotherLink\\n~SuppressedLink\\n```\\n\\nPrecede a camel case word with `~` to prevent it from being recognised as a link.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = \\\"wikilink\\\";\\nexports.types = {inline: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\t// Regexp to match\\n\\tthis.matchRegExp = new RegExp($tw.config.textPrimitives.unWikiLink + \\\"?\\\" + $tw.config.textPrimitives.wikiLink,\\\"mg\\\");\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t// Get the details of the match\\n\\tvar linkText = this.match[0];\\n\\t// Move past the macro call\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// If the link starts with the unwikilink character then just output it as plain text\\n\\tif(linkText.substr(0,1) === $tw.config.textPrimitives.unWikiLink) {\\n\\t\\treturn [{type: \\\"text\\\", text: linkText.substr(1)}];\\n\\t}\\n\\t// If the link has been preceded with a blocked letter then don't treat it as a link\\n\\tif(this.match.index > 0) {\\n\\t\\tvar preRegExp = new RegExp($tw.config.textPrimitives.blockPrefixLetters,\\\"mg\\\");\\n\\t\\tpreRegExp.lastIndex = this.match.index-1;\\n\\t\\tvar preMatch = preRegExp.exec(this.parser.source);\\n\\t\\tif(preMatch && preMatch.index === this.match.index-1) {\\n\\t\\t\\treturn [{type: \\\"text\\\", text: linkText}];\\n\\t\\t}\\n\\t}\\n\\treturn [{\\n\\t\\ttype: \\\"link\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tto: {type: \\\"string\\\", value: linkText}\\n\\t\\t},\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\ttext: linkText\\n\\t\\t}]\\n\\t}];\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikirule\"},\"$:/core/modules/parsers/wikiparser/wikiparser.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/wikiparser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/wikiparser.js\\ntype: application/javascript\\nmodule-type: parser\\n\\nThe wiki text parser processes blocks of source text into a parse tree.\\n\\nThe parse tree is made up of nested arrays of these JavaScript objects:\\n\\n\\t{type: \\\"element\\\", tag: \u003Cstring>, attributes: {}, children: []} - an HTML element\\n\\t{type: \\\"text\\\", text: \u003Cstring>} - a text node\\n\\t{type: \\\"entity\\\", value: \u003Cstring>} - an entity\\n\\t{type: \\\"raw\\\", html: \u003Cstring>} - raw HTML\\n\\nAttributes are stored as hashmaps of the following objects:\\n\\n\\t{type: \\\"string\\\", value: \u003Cstring>} - literal string\\n\\t{type: \\\"indirect\\\", textReference: \u003CtextReference>} - indirect through a text reference\\n\\t{type: \\\"macro\\\", macro: \u003CTBD>} - indirect through a macro invocation\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\ntype: content type of text\\ntext: text to be parsed\\noptions: see below:\\n\\tparseAsInline: true to parse text as inline instead of block\\n\\twiki: reference to wiki to use\\n\\t_canonical_uri: optional URI of content if text is missing or empty\\n*/\\nvar WikiParser = function(type,text,options) {\\n\\tthis.wiki = options.wiki;\\n\\tvar self = this;\\n\\t// Check for an externally linked tiddler\\n\\tif($tw.browser && (text || \\\"\\\") === \\\"\\\" && options._canonical_uri) {\\n\\t\\tthis.loadRemoteTiddler(options._canonical_uri);\\n\\t\\ttext = $tw.language.getRawString(\\\"LazyLoadingWarning\\\");\\n\\t}\\n\\t// Save the parse text\\n\\tthis.type = type || \\\"text/vnd.tiddlywiki\\\";\\n\\tthis.source = text || \\\"\\\";\\n\\tthis.sourceLength = this.source.length;\\n\\t// Flag for ignoring whitespace\\n\\tthis.configTrimWhiteSpace = false;\\n\\t// Set current parse position\\n\\tthis.pos = 0;\\n\\t// Start with empty output\\n\\tthis.tree = [];\\n\\t// Assemble the rule classes we're going to use\\n\\tvar pragmaRuleClasses, blockRuleClasses, inlineRuleClasses;\\n\\tif(options.rules) {\\n\\t\\tpragmaRuleClasses = options.rules.pragma;\\n\\t\\tblockRuleClasses = options.rules.block;\\n\\t\\tinlineRuleClasses = options.rules.inline;\\n\\t} else {\\n\\t\\t// Setup the rule classes if we don't have them already\\n\\t\\tif(!this.pragmaRuleClasses) {\\n\\t\\t\\tWikiParser.prototype.pragmaRuleClasses = $tw.modules.createClassesFromModules(\\\"wikirule\\\",\\\"pragma\\\",$tw.WikiRuleBase);\\n\\t\\t\\tthis.setupRules(WikiParser.prototype.pragmaRuleClasses,\\\"$:/config/WikiParserRules/Pragmas/\\\");\\n\\t\\t}\\n\\t\\tpragmaRuleClasses = this.pragmaRuleClasses;\\n\\t\\tif(!this.blockRuleClasses) {\\n\\t\\t\\tWikiParser.prototype.blockRuleClasses = $tw.modules.createClassesFromModules(\\\"wikirule\\\",\\\"block\\\",$tw.WikiRuleBase);\\n\\t\\t\\tthis.setupRules(WikiParser.prototype.blockRuleClasses,\\\"$:/config/WikiParserRules/Block/\\\");\\n\\t\\t}\\n\\t\\tblockRuleClasses = this.blockRuleClasses;\\n\\t\\tif(!this.inlineRuleClasses) {\\n\\t\\t\\tWikiParser.prototype.inlineRuleClasses = $tw.modules.createClassesFromModules(\\\"wikirule\\\",\\\"inline\\\",$tw.WikiRuleBase);\\n\\t\\t\\tthis.setupRules(WikiParser.prototype.inlineRuleClasses,\\\"$:/config/WikiParserRules/Inline/\\\");\\n\\t\\t}\\n\\t\\tinlineRuleClasses = this.inlineRuleClasses;\\n\\t}\\n\\t// Instantiate the pragma parse rules\\n\\tthis.pragmaRules = this.instantiateRules(pragmaRuleClasses,\\\"pragma\\\",0);\\n\\t// Instantiate the parser block and inline rules\\n\\tthis.blockRules = this.instantiateRules(blockRuleClasses,\\\"block\\\",0);\\n\\tthis.inlineRules = this.instantiateRules(inlineRuleClasses,\\\"inline\\\",0);\\n\\t// Parse any pragmas\\n\\tvar topBranch = this.parsePragmas();\\n\\t// Parse the text into inline runs or blocks\\n\\tif(options.parseAsInline) {\\n\\t\\ttopBranch.push.apply(topBranch,this.parseInlineRun());\\n\\t} else {\\n\\t\\ttopBranch.push.apply(topBranch,this.parseBlocks());\\n\\t}\\n\\t// Return the parse tree\\n};\\n\\n/*\\n*/\\nWikiParser.prototype.loadRemoteTiddler = function(url) {\\n\\tvar self = this;\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: url,\\n\\t\\ttype: \\\"GET\\\",\\n\\t\\tcallback: function(err,data) {\\n\\t\\t\\tif(!err) {\\n\\t\\t\\t\\tvar tiddlers = self.wiki.deserializeTiddlers(\\\".tid\\\",data,self.wiki.getCreationFields());\\n\\t\\t\\t\\t$tw.utils.each(tiddlers,function(tiddler) {\\n\\t\\t\\t\\t\\ttiddler[\\\"_canonical_uri\\\"] = url;\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tif(tiddlers) {\\n\\t\\t\\t\\t\\tself.wiki.addTiddlers(tiddlers);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\n*/\\nWikiParser.prototype.setupRules = function(proto,configPrefix) {\\n\\tvar self = this;\\n\\tif(!$tw.safemode) {\\n\\t\\t$tw.utils.each(proto,function(object,name) {\\n\\t\\t\\tif(self.wiki.getTiddlerText(configPrefix + name,\\\"enable\\\") !== \\\"enable\\\") {\\n\\t\\t\\t\\tdelete proto[name];\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nInstantiate an array of parse rules\\n*/\\nWikiParser.prototype.instantiateRules = function(classes,type,startPos) {\\n\\tvar rulesInfo = [],\\n\\t\\tself = this;\\n\\t$tw.utils.each(classes,function(RuleClass) {\\n\\t\\t// Instantiate the rule\\n\\t\\tvar rule = new RuleClass(self);\\n\\t\\trule.is = {};\\n\\t\\trule.is[type] = true;\\n\\t\\trule.init(self);\\n\\t\\tvar matchIndex = rule.findNextMatch(startPos);\\n\\t\\tif(matchIndex !== undefined) {\\n\\t\\t\\trulesInfo.push({\\n\\t\\t\\t\\trule: rule,\\n\\t\\t\\t\\tmatchIndex: matchIndex\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\treturn rulesInfo;\\n};\\n\\n/*\\nSkip any whitespace at the current position. Options are:\\n\\ttreatNewlinesAsNonWhitespace: true if newlines are NOT to be treated as whitespace\\n*/\\nWikiParser.prototype.skipWhitespace = function(options) {\\n\\toptions = options || {};\\n\\tvar whitespaceRegExp = options.treatNewlinesAsNonWhitespace ? /([^\\\\S\\\\n]+)/mg : /(\\\\s+)/mg;\\n\\twhitespaceRegExp.lastIndex = this.pos;\\n\\tvar whitespaceMatch = whitespaceRegExp.exec(this.source);\\n\\tif(whitespaceMatch && whitespaceMatch.index === this.pos) {\\n\\t\\tthis.pos = whitespaceRegExp.lastIndex;\\n\\t}\\n};\\n\\n/*\\nGet the next match out of an array of parse rule instances\\n*/\\nWikiParser.prototype.findNextMatch = function(rules,startPos) {\\n\\t// Find the best matching rule by finding the closest match position\\n\\tvar matchingRule,\\n\\t\\tmatchingRulePos = this.sourceLength;\\n\\t// Step through each rule\\n\\tfor(var t=0; t\u003Crules.length; t++) {\\n\\t\\tvar ruleInfo = rules[t];\\n\\t\\t// Ask the rule to get the next match if we've moved past the current one\\n\\t\\tif(ruleInfo.matchIndex !== undefined  && ruleInfo.matchIndex \u003C startPos) {\\n\\t\\t\\truleInfo.matchIndex = ruleInfo.rule.findNextMatch(startPos);\\n\\t\\t}\\n\\t\\t// Adopt this match if it's closer than the current best match\\n\\t\\tif(ruleInfo.matchIndex !== undefined && ruleInfo.matchIndex \u003C= matchingRulePos) {\\n\\t\\t\\tmatchingRule = ruleInfo;\\n\\t\\t\\tmatchingRulePos = ruleInfo.matchIndex;\\n\\t\\t}\\n\\t}\\n\\treturn matchingRule;\\n};\\n\\n/*\\nParse any pragmas at the beginning of a block of parse text\\n*/\\nWikiParser.prototype.parsePragmas = function() {\\n\\tvar currentTreeBranch = this.tree;\\n\\twhile(true) {\\n\\t\\t// Skip whitespace\\n\\t\\tthis.skipWhitespace();\\n\\t\\t// Check for the end of the text\\n\\t\\tif(this.pos >= this.sourceLength) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Check if we've arrived at a pragma rule match\\n\\t\\tvar nextMatch = this.findNextMatch(this.pragmaRules,this.pos);\\n\\t\\t// If not, just exit\\n\\t\\tif(!nextMatch || nextMatch.matchIndex !== this.pos) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t// Process the pragma rule\\n\\t\\tvar subTree = nextMatch.rule.parse();\\n\\t\\tif(subTree.length > 0) {\\n\\t\\t\\t// Quick hack; we only cope with a single parse tree node being returned, which is true at the moment\\n\\t\\t\\tcurrentTreeBranch.push.apply(currentTreeBranch,subTree);\\n\\t\\t\\tsubTree[0].children = [];\\n\\t\\t\\tcurrentTreeBranch = subTree[0].children;\\n\\t\\t}\\n\\t}\\n\\treturn currentTreeBranch;\\n};\\n\\n/*\\nParse a block from the current position\\n\\tterminatorRegExpString: optional regular expression string that identifies the end of plain paragraphs. Must not include capturing parenthesis\\n*/\\nWikiParser.prototype.parseBlock = function(terminatorRegExpString) {\\n\\tvar terminatorRegExp = terminatorRegExpString ? new RegExp(\\\"(\\\" + terminatorRegExpString + \\\"|\\\\\\\\r?\\\\\\\\n\\\\\\\\r?\\\\\\\\n)\\\",\\\"mg\\\") : /(\\\\r?\\\\n\\\\r?\\\\n)/mg;\\n\\tthis.skipWhitespace();\\n\\tif(this.pos >= this.sourceLength) {\\n\\t\\treturn [];\\n\\t}\\n\\t// Look for a block rule that applies at the current position\\n\\tvar nextMatch = this.findNextMatch(this.blockRules,this.pos);\\n\\tif(nextMatch && nextMatch.matchIndex === this.pos) {\\n\\t\\treturn nextMatch.rule.parse();\\n\\t}\\n\\t// Treat it as a paragraph if we didn't find a block rule\\n\\tvar start = this.pos;\\n\\tvar children = this.parseInlineRun(terminatorRegExp);\\n\\tvar end = this.pos;\\n\\treturn [{type: \\\"element\\\", tag: \\\"p\\\", children: children, start: start, end: end }];\\n};\\n\\n/*\\nParse a series of blocks of text until a terminating regexp is encountered or the end of the text\\n\\tterminatorRegExpString: terminating regular expression\\n*/\\nWikiParser.prototype.parseBlocks = function(terminatorRegExpString) {\\n\\tif(terminatorRegExpString) {\\n\\t\\treturn this.parseBlocksTerminated(terminatorRegExpString);\\n\\t} else {\\n\\t\\treturn this.parseBlocksUnterminated();\\n\\t}\\n};\\n\\n/*\\nParse a block from the current position to the end of the text\\n*/\\nWikiParser.prototype.parseBlocksUnterminated = function() {\\n\\tvar tree = [];\\n\\twhile(this.pos \u003C this.sourceLength) {\\n\\t\\ttree.push.apply(tree,this.parseBlock());\\n\\t}\\n\\treturn tree;\\n};\\n\\n/*\\nParse blocks of text until a terminating regexp is encountered\\n*/\\nWikiParser.prototype.parseBlocksTerminated = function(terminatorRegExpString) {\\n\\tvar terminatorRegExp = new RegExp(\\\"(\\\" + terminatorRegExpString + \\\")\\\",\\\"mg\\\"),\\n\\t\\ttree = [];\\n\\t// Skip any whitespace\\n\\tthis.skipWhitespace();\\n\\t//  Check if we've got the end marker\\n\\tterminatorRegExp.lastIndex = this.pos;\\n\\tvar match = terminatorRegExp.exec(this.source);\\n\\t// Parse the text into blocks\\n\\twhile(this.pos \u003C this.sourceLength && !(match && match.index === this.pos)) {\\n\\t\\tvar blocks = this.parseBlock(terminatorRegExpString);\\n\\t\\ttree.push.apply(tree,blocks);\\n\\t\\t// Skip any whitespace\\n\\t\\tthis.skipWhitespace();\\n\\t\\t//  Check if we've got the end marker\\n\\t\\tterminatorRegExp.lastIndex = this.pos;\\n\\t\\tmatch = terminatorRegExp.exec(this.source);\\n\\t}\\n\\tif(match && match.index === this.pos) {\\n\\t\\tthis.pos = match.index + match[0].length;\\n\\t}\\n\\treturn tree;\\n};\\n\\n/*\\nParse a run of text at the current position\\n\\tterminatorRegExp: a regexp at which to stop the run\\n\\toptions: see below\\nOptions available:\\n\\teatTerminator: move the parse position past any encountered terminator (default false)\\n*/\\nWikiParser.prototype.parseInlineRun = function(terminatorRegExp,options) {\\n\\tif(terminatorRegExp) {\\n\\t\\treturn this.parseInlineRunTerminated(terminatorRegExp,options);\\n\\t} else {\\n\\t\\treturn this.parseInlineRunUnterminated(options);\\n\\t}\\n};\\n\\nWikiParser.prototype.parseInlineRunUnterminated = function(options) {\\n\\tvar tree = [];\\n\\t// Find the next occurrence of an inline rule\\n\\tvar nextMatch = this.findNextMatch(this.inlineRules,this.pos);\\n\\t// Loop around the matches until we've reached the end of the text\\n\\twhile(this.pos \u003C this.sourceLength && nextMatch) {\\n\\t\\t// Process the text preceding the run rule\\n\\t\\tif(nextMatch.matchIndex > this.pos) {\\n\\t\\t\\tthis.pushTextWidget(tree,this.source.substring(this.pos,nextMatch.matchIndex),this.pos,nextMatch.matchIndex);\\n\\t\\t\\tthis.pos = nextMatch.matchIndex;\\n\\t\\t}\\n\\t\\t// Process the run rule\\n\\t\\ttree.push.apply(tree,nextMatch.rule.parse());\\n\\t\\t// Look for the next run rule\\n\\t\\tnextMatch = this.findNextMatch(this.inlineRules,this.pos);\\n\\t}\\n\\t// Process the remaining text\\n\\tif(this.pos \u003C this.sourceLength) {\\n\\t\\tthis.pushTextWidget(tree,this.source.substr(this.pos),this.pos,this.sourceLength);\\n\\t}\\n\\tthis.pos = this.sourceLength;\\n\\treturn tree;\\n};\\n\\nWikiParser.prototype.parseInlineRunTerminated = function(terminatorRegExp,options) {\\n\\toptions = options || {};\\n\\tvar tree = [];\\n\\t// Find the next occurrence of the terminator\\n\\tterminatorRegExp.lastIndex = this.pos;\\n\\tvar terminatorMatch = terminatorRegExp.exec(this.source);\\n\\t// Find the next occurrence of a inlinerule\\n\\tvar inlineRuleMatch = this.findNextMatch(this.inlineRules,this.pos);\\n\\t// Loop around until we've reached the end of the text\\n\\twhile(this.pos \u003C this.sourceLength && (terminatorMatch || inlineRuleMatch)) {\\n\\t\\t// Return if we've found the terminator, and it precedes any inline rule match\\n\\t\\tif(terminatorMatch) {\\n\\t\\t\\tif(!inlineRuleMatch || inlineRuleMatch.matchIndex >= terminatorMatch.index) {\\n\\t\\t\\t\\tif(terminatorMatch.index > this.pos) {\\n\\t\\t\\t\\t\\tthis.pushTextWidget(tree,this.source.substring(this.pos,terminatorMatch.index),this.pos,terminatorMatch.index);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.pos = terminatorMatch.index;\\n\\t\\t\\t\\tif(options.eatTerminator) {\\n\\t\\t\\t\\t\\tthis.pos += terminatorMatch[0].length;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn tree;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Process any inline rule, along with the text preceding it\\n\\t\\tif(inlineRuleMatch) {\\n\\t\\t\\t// Preceding text\\n\\t\\t\\tif(inlineRuleMatch.matchIndex > this.pos) {\\n\\t\\t\\t\\tthis.pushTextWidget(tree,this.source.substring(this.pos,inlineRuleMatch.matchIndex),this.pos,inlineRuleMatch.matchIndex);\\n\\t\\t\\t\\tthis.pos = inlineRuleMatch.matchIndex;\\n\\t\\t\\t}\\n\\t\\t\\t// Process the inline rule\\n\\t\\t\\ttree.push.apply(tree,inlineRuleMatch.rule.parse());\\n\\t\\t\\t// Look for the next inline rule\\n\\t\\t\\tinlineRuleMatch = this.findNextMatch(this.inlineRules,this.pos);\\n\\t\\t\\t// Look for the next terminator match\\n\\t\\t\\tterminatorRegExp.lastIndex = this.pos;\\n\\t\\t\\tterminatorMatch = terminatorRegExp.exec(this.source);\\n\\t\\t}\\n\\t}\\n\\t// Process the remaining text\\n\\tif(this.pos \u003C this.sourceLength) {\\n\\t\\tthis.pushTextWidget(tree,this.source.substr(this.pos),this.pos,this.sourceLength);\\n\\t}\\n\\tthis.pos = this.sourceLength;\\n\\treturn tree;\\n};\\n\\n/*\\nPush a text widget onto an array, respecting the configTrimWhiteSpace setting\\n*/\\nWikiParser.prototype.pushTextWidget = function(array,text,start,end) {\\n\\tif(this.configTrimWhiteSpace) {\\n\\t\\ttext = $tw.utils.trim(text);\\n\\t}\\n\\tif(text) {\\n\\t\\tarray.push({type: \\\"text\\\", text: text, start: start, end: end});\\t\\t\\n\\t}\\n};\\n\\n/*\\nParse zero or more class specifiers `.classname`\\n*/\\nWikiParser.prototype.parseClasses = function() {\\n\\tvar classRegExp = /\\\\.([^\\\\s\\\\.]+)/mg,\\n\\t\\tclassNames = [];\\n\\tclassRegExp.lastIndex = this.pos;\\n\\tvar match = classRegExp.exec(this.source);\\n\\twhile(match && match.index === this.pos) {\\n\\t\\tthis.pos = match.index + match[0].length;\\n\\t\\tclassNames.push(match[1]);\\n\\t\\tmatch = classRegExp.exec(this.source);\\n\\t}\\n\\treturn classNames;\\n};\\n\\n/*\\nAmend the rules used by this instance of the parser\\n\\ttype: `only` keeps just the named rules, `except` keeps all but the named rules\\n\\tnames: array of rule names\\n*/\\nWikiParser.prototype.amendRules = function(type,names) {\\n\\tnames = names || [];\\n\\t// Define the filter function\\n\\tvar target;\\n\\tif(type === \\\"only\\\") {\\n\\t\\ttarget = true;\\n\\t} else if(type === \\\"except\\\") {\\n\\t\\ttarget = false;\\n\\t} else {\\n\\t\\treturn;\\n\\t}\\n\\t// Define a function to process each of our rule arrays\\n\\tvar processRuleArray = function(ruleArray) {\\n\\t\\tfor(var t=ruleArray.length-1; t>=0; t--) {\\n\\t\\t\\tif((names.indexOf(ruleArray[t].rule.name) === -1) === target) {\\n\\t\\t\\t\\truleArray.splice(t,1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\t// Process each rule array\\n\\tprocessRuleArray(this.pragmaRules);\\n\\tprocessRuleArray(this.blockRules);\\n\\tprocessRuleArray(this.inlineRules);\\n};\\n\\nexports[\\\"text/vnd.tiddlywiki\\\"] = WikiParser;\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"parser\"},\"$:/core/modules/parsers/wikiparser/rules/wikirulebase.js\":{\"title\":\"$:/core/modules/parsers/wikiparser/rules/wikirulebase.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/parsers/wikiparser/rules/wikirulebase.js\\ntype: application/javascript\\nmodule-type: global\\n\\nBase class for wiki parser rules\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nThis constructor is always overridden with a blank constructor, and so shouldn't be used\\n*/\\nvar WikiRuleBase = function() {\\n};\\n\\n/*\\nTo be overridden by individual rules\\n*/\\nWikiRuleBase.prototype.init = function(parser) {\\n\\tthis.parser = parser;\\n};\\n\\n/*\\nDefault implementation of findNextMatch uses RegExp matching\\n*/\\nWikiRuleBase.prototype.findNextMatch = function(startPos) {\\n\\tthis.matchRegExp.lastIndex = startPos;\\n\\tthis.match = this.matchRegExp.exec(this.parser.source);\\n\\treturn this.match ? this.match.index : undefined;\\n};\\n\\nexports.WikiRuleBase = WikiRuleBase;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/pluginswitcher.js\":{\"title\":\"$:/core/modules/pluginswitcher.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/pluginswitcher.js\\ntype: application/javascript\\nmodule-type: global\\n\\nManages switching plugins for themes and languages.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\noptions:\\nwiki: wiki store to be used\\npluginType: type of plugin to be switched\\ncontrollerTitle: title of tiddler used to control switching of this resource\\ndefaultPlugins: array of default plugins to be used if nominated plugin isn't found\\nonSwitch: callback when plugin is switched (single parameter is array of plugin titles)\\n*/\\nfunction PluginSwitcher(options) {\\n\\tthis.wiki = options.wiki;\\n\\tthis.pluginType = options.pluginType;\\n\\tthis.controllerTitle = options.controllerTitle;\\n\\tthis.defaultPlugins = options.defaultPlugins || [];\\n\\tthis.onSwitch = options.onSwitch;\\n\\t// Switch to the current plugin\\n\\tthis.switchPlugins();\\n\\t// Listen for changes to the selected plugin\\n\\tvar self = this;\\n\\tthis.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\tif($tw.utils.hop(changes,self.controllerTitle)) {\\n\\t\\t\\tself.switchPlugins();\\n\\t\\t}\\n\\t});\\n}\\n\\nPluginSwitcher.prototype.switchPlugins = function() {\\n\\t// Get the name of the current theme\\n\\tvar selectedPluginTitle = this.wiki.getTiddlerText(this.controllerTitle);\\n\\t// If it doesn't exist, then fallback to one of the default themes\\n\\tvar index = 0;\\n\\twhile(!this.wiki.getTiddler(selectedPluginTitle) && index \u003C this.defaultPlugins.length) {\\n\\t\\tselectedPluginTitle = this.defaultPlugins[index++];\\n\\t}\\n\\t// Accumulate the titles of the plugins that we need to load\\n\\tvar plugins = [],\\n\\t\\tself = this,\\n\\t\\taccumulatePlugin = function(title) {\\n\\t\\t\\tvar tiddler = self.wiki.getTiddler(title);\\n\\t\\t\\tif(tiddler && tiddler.isPlugin() && plugins.indexOf(title) === -1) {\\n\\t\\t\\t\\tplugins.push(title);\\n\\t\\t\\t\\tvar pluginInfo = $tw.utils.parseJSONSafe(self.wiki.getTiddlerText(title)),\\n\\t\\t\\t\\t\\tdependents = $tw.utils.parseStringArray(tiddler.fields.dependents || \\\"\\\");\\n\\t\\t\\t\\t$tw.utils.each(dependents,function(title) {\\n\\t\\t\\t\\t\\taccumulatePlugin(title);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t};\\n\\taccumulatePlugin(selectedPluginTitle);\\n\\t// Read the plugin info for the incoming plugins\\n\\tvar changes = $tw.wiki.readPluginInfo(plugins);\\n\\t// Unregister any existing theme tiddlers\\n\\tvar unregisteredTiddlers = $tw.wiki.unregisterPluginTiddlers(this.pluginType);\\n\\t// Register any new theme tiddlers\\n\\tvar registeredTiddlers = $tw.wiki.registerPluginTiddlers(this.pluginType,plugins);\\n\\t// Unpack the current theme tiddlers\\n\\t$tw.wiki.unpackPluginTiddlers();\\n\\t// Call the switch handler\\n\\tif(this.onSwitch) {\\n\\t\\tthis.onSwitch(plugins);\\n\\t}\\n};\\n\\nexports.PluginSwitcher = PluginSwitcher;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/saver-handler.js\":{\"title\":\"$:/core/modules/saver-handler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/saver-handler.js\\ntype: application/javascript\\nmodule-type: global\\n\\nThe saver handler tracks changes to the store and handles saving the entire wiki via saver modules.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInstantiate the saver handler with the following options:\\nwiki: wiki to be synced\\ndirtyTracking: true if dirty tracking should be performed\\n*/\\nfunction SaverHandler(options) {\\n\\tvar self = this;\\n\\tthis.wiki = options.wiki;\\n\\tthis.dirtyTracking = options.dirtyTracking;\\n\\tthis.preloadDirty = options.preloadDirty || [];\\n\\tthis.pendingAutoSave = false;\\n\\t// Make a logger\\n\\tthis.logger = new $tw.utils.Logger(\\\"saver-handler\\\");\\n\\t// Initialise our savers\\n\\tif($tw.browser) {\\n\\t\\tthis.initSavers();\\n\\t}\\n\\t// Only do dirty tracking if required\\n\\tif($tw.browser && this.dirtyTracking) {\\n\\t\\t// Compile the dirty tiddler filter\\n\\t\\tthis.filterFn = this.wiki.compileFilter(this.wiki.getTiddlerText(this.titleSyncFilter));\\n\\t\\t// Count of changes that have not yet been saved\\n\\t\\tvar filteredChanges = self.filterFn.call(self.wiki,function(iterator) {\\n\\t\\t\\t\\t$tw.utils.each(self.preloadDirty,function(title) {\\n\\t\\t\\t\\t\\tvar tiddler = self.wiki.getTiddler(title);\\n\\t\\t\\t\\t\\titerator(tiddler,title);\\n\\t\\t\\t\\t});\\n\\t\\t});\\n\\t\\tthis.numChanges = filteredChanges.length;\\n\\t\\t// Listen out for changes to tiddlers\\n\\t\\tthis.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t\\t// Filter the changes so that we only count changes to tiddlers that we care about\\n\\t\\t\\tvar filteredChanges = self.filterFn.call(self.wiki,function(iterator) {\\n\\t\\t\\t\\t$tw.utils.each(changes,function(change,title) {\\n\\t\\t\\t\\t\\tvar tiddler = self.wiki.getTiddler(title);\\n\\t\\t\\t\\t\\titerator(tiddler,title);\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t\\t// Adjust the number of changes\\n\\t\\t\\tself.numChanges += filteredChanges.length;\\n\\t\\t\\tself.updateDirtyStatus();\\n\\t\\t\\t// Do any autosave if one is pending and there's no more change events\\n\\t\\t\\tif(self.pendingAutoSave && self.wiki.getSizeOfTiddlerEventQueue() === 0) {\\n\\t\\t\\t\\t// Check if we're dirty\\n\\t\\t\\t\\tif(self.numChanges > 0) {\\n\\t\\t\\t\\t\\tself.saveWiki({\\n\\t\\t\\t\\t\\t\\tmethod: \\\"autosave\\\",\\n\\t\\t\\t\\t\\t\\tdownloadType: \\\"text/plain\\\"\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tself.pendingAutoSave = false;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Listen for the autosave event\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-auto-save-wiki\\\",function(event) {\\n\\t\\t\\t// Do the autosave unless there are outstanding tiddler change events\\n\\t\\t\\tif(self.wiki.getSizeOfTiddlerEventQueue() === 0) {\\n\\t\\t\\t\\t// Check if we're dirty\\n\\t\\t\\t\\tif(self.numChanges > 0) {\\n\\t\\t\\t\\t\\tself.saveWiki({\\n\\t\\t\\t\\t\\t\\tmethod: \\\"autosave\\\",\\n\\t\\t\\t\\t\\t\\tdownloadType: \\\"text/plain\\\"\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Otherwise put ourselves in the \\\"pending autosave\\\" state and wait for the change event before we do the autosave\\n\\t\\t\\t\\tself.pendingAutoSave = true;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Set up our beforeunload handler\\n\\t\\t$tw.addUnloadTask(function(event) {\\n\\t\\t\\tvar confirmationMessage;\\n\\t\\t\\tif(self.isDirty()) {\\n\\t\\t\\t\\tconfirmationMessage = $tw.language.getString(\\\"UnsavedChangesWarning\\\");\\n\\t\\t\\t\\tevent.returnValue = confirmationMessage; // Gecko\\n\\t\\t\\t}\\n\\t\\t\\treturn confirmationMessage;\\n\\t\\t});\\n\\t}\\n\\t// Install the save action handlers\\n\\tif($tw.browser) {\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-save-wiki\\\",function(event) {\\n\\t\\t\\tself.saveWiki({\\n\\t\\t\\t\\ttemplate: event.param,\\n\\t\\t\\t\\tdownloadType: \\\"text/plain\\\",\\n\\t\\t\\t\\tvariables: event.paramObject\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-download-file\\\",function(event) {\\n\\t\\t\\tself.saveWiki({\\n\\t\\t\\t\\tmethod: \\\"download\\\",\\n\\t\\t\\t\\ttemplate: event.param,\\n\\t\\t\\t\\tdownloadType: \\\"text/plain\\\",\\n\\t\\t\\t\\tvariables: event.paramObject\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}\\n}\\n\\nSaverHandler.prototype.titleSyncFilter = \\\"$:/config/SaverFilter\\\";\\nSaverHandler.prototype.titleAutoSave = \\\"$:/config/AutoSave\\\";\\nSaverHandler.prototype.titleSavedNotification = \\\"$:/language/Notifications/Save/Done\\\";\\n\\n/*\\nSelect the appropriate saver modules and set them up\\n*/\\nSaverHandler.prototype.initSavers = function(moduleType) {\\n\\tmoduleType = moduleType || \\\"saver\\\";\\n\\t// Instantiate the available savers\\n\\tthis.savers = [];\\n\\tvar self = this;\\n\\t$tw.modules.forEachModuleOfType(moduleType,function(title,module) {\\n\\t\\tif(module.canSave(self)) {\\n\\t\\t\\tself.savers.push(module.create(self.wiki));\\n\\t\\t}\\n\\t});\\n\\t// Sort the savers into priority order\\n\\tthis.savers.sort(function(a,b) {\\n\\t\\tif(a.info.priority \u003C b.info.priority) {\\n\\t\\t\\treturn -1;\\n\\t\\t} else {\\n\\t\\t\\tif(a.info.priority > b.info.priority) {\\n\\t\\t\\t\\treturn +1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nSave the wiki contents. Options are:\\n\\tmethod: \\\"save\\\", \\\"autosave\\\" or \\\"download\\\"\\n\\ttemplate: the tiddler containing the template to save\\n\\tdownloadType: the content type for the saved file\\n*/\\nSaverHandler.prototype.saveWiki = function(options) {\\n\\toptions = options || {};\\n\\tvar self = this,\\n\\t\\tmethod = options.method || \\\"save\\\";\\n\\t// Ignore autosave if disabled\\n\\tif(method === \\\"autosave\\\" && ($tw.config.disableAutoSave || this.wiki.getTiddlerText(this.titleAutoSave,\\\"yes\\\") !== \\\"yes\\\")) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar\\tvariables = options.variables || {},\\n\\t\\ttemplate = (options.template || \\n\\t\\t           this.wiki.getTiddlerText(\\\"$:/config/SaveWikiButton/Template\\\",\\\"$:/core/save/all\\\")).trim(),\\n\\t\\tdownloadType = options.downloadType || \\\"text/plain\\\",\\n\\t\\ttext = this.wiki.renderTiddler(downloadType,template,options),\\n\\t\\tcallback = function(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\talert($tw.language.getString(\\\"Error/WhileSaving\\\") + \\\":\\\\n\\\\n\\\" + err);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Clear the task queue if we're saving (rather than downloading)\\n\\t\\t\\t\\tif(method !== \\\"download\\\") {\\n\\t\\t\\t\\t\\tself.numChanges = 0;\\n\\t\\t\\t\\t\\tself.updateDirtyStatus();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t$tw.notifier.display(self.titleSavedNotification);\\n\\t\\t\\t\\tif(options.callback) {\\n\\t\\t\\t\\t\\toptions.callback();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t// Call the highest priority saver that supports this method\\n\\tfor(var t=this.savers.length-1; t>=0; t--) {\\n\\t\\tvar saver = this.savers[t];\\n\\t\\tif(saver.info.capabilities.indexOf(method) !== -1 && saver.save(text,method,callback,{variables: {filename: variables.filename}})) {\\n\\t\\t\\tthis.logger.log(\\\"Saving wiki with method\\\",method,\\\"through saver\\\",saver.info.name);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\n/*\\nChecks whether the wiki is dirty (ie the window shouldn't be closed)\\n*/\\nSaverHandler.prototype.isDirty = function() {\\n\\treturn this.numChanges > 0;\\n};\\n\\n/*\\nUpdate the document body with the class \\\"tc-dirty\\\" if the wiki has unsaved/unsynced changes\\n*/\\nSaverHandler.prototype.updateDirtyStatus = function() {\\n\\tvar self = this;\\n\\tif($tw.browser) {\\n\\t\\t$tw.utils.toggleClass(document.body,\\\"tc-dirty\\\",this.isDirty());\\n\\t\\t$tw.utils.each($tw.windows,function(win) {\\n\\t\\t\\t$tw.utils.toggleClass(win.document.body,\\\"tc-dirty\\\",self.isDirty());\\n\\t\\t});\\n\\t}\\n};\\n\\nexports.SaverHandler = SaverHandler;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/savers/andtidwiki.js\":{\"title\":\"$:/core/modules/savers/andtidwiki.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/andtidwiki.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via the AndTidWiki Android app\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false, netscape: false, Components: false */\\n\\\"use strict\\\";\\n\\nvar AndTidWiki = function(wiki) {\\n};\\n\\nAndTidWiki.prototype.save = function(text,method,callback,options) {\\n\\tvar filename = options && options.variables ? options.variables.filename : null;\\n\\tif (method === \\\"download\\\") {\\n\\t\\t// Support download\\n\\t\\tif (window.twi.saveDownload) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twindow.twi.saveDownload(text,filename);\\n\\t\\t\\t} catch(err) {\\n\\t\\t\\t\\tif (err.message === \\\"Method not found\\\") {\\n\\t\\t\\t\\t\\twindow.twi.saveDownload(text);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tvar link = document.createElement(\\\"a\\\");\\n\\t\\t\\tlink.setAttribute(\\\"href\\\",\\\"data:text/plain,\\\" + encodeURIComponent(text));\\n\\t\\t\\tif (filename) {\\n\\t\\t\\t    link.setAttribute(\\\"download\\\",filename);\\n\\t\\t\\t}\\n\\t\\t\\tdocument.body.appendChild(link);\\n\\t\\t\\tlink.click();\\n\\t\\t\\tdocument.body.removeChild(link);\\n\\t\\t}\\n\\t} else if (window.twi.saveWiki) {\\n\\t\\t// Direct save in Tiddloid\\n\\t\\twindow.twi.saveWiki(text);\\n\\t} else {\\n\\t\\t// Get the pathname of this document\\n\\t\\tvar pathname = $tw.utils.decodeURIComponentSafe(document.location.toString().split(\\\"#\\\")[0]);\\n\\t\\t// Strip the file://\\n\\t\\tif(pathname.indexOf(\\\"file://\\\") === 0) {\\n\\t\\t\\tpathname = pathname.substr(7);\\n\\t\\t}\\n\\t\\t// Strip any query or location part\\n\\t\\tvar p = pathname.indexOf(\\\"?\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tpathname = pathname.substr(0,p);\\n\\t\\t}\\n\\t\\tp = pathname.indexOf(\\\"#\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tpathname = pathname.substr(0,p);\\n\\t\\t}\\n\\t\\t// Save the file\\n\\t\\twindow.twi.saveFile(pathname,text);\\n\\t}\\n\\t// Call the callback\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nAndTidWiki.prototype.info = {\\n\\tname: \\\"andtidwiki\\\",\\n\\tpriority: 1600,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\", \\\"download\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn !!window.twi && !!window.twi.saveFile;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new AndTidWiki(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/beaker.js\":{\"title\":\"$:/core/modules/savers/beaker.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/beaker.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves files using the Beaker browser's (https://beakerbrowser.com) Dat protocol (https://datproject.org/)\\nCompatible with beaker >= V0.7.2\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSet up the saver\\n*/\\nvar BeakerSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nBeakerSaver.prototype.save = function(text,method,callback) {\\n\\tvar dat = new DatArchive(\\\"\\\" + window.location),\\n\\t\\tpathname = (\\\"\\\" + window.location.pathname).split(\\\"#\\\")[0];\\n\\tdat.stat(pathname).then(function(value) {\\n\\t\\tif(value.isDirectory()) {\\n\\t\\t\\tpathname = pathname + \\\"/index.html\\\";\\n\\t\\t}\\n\\t\\tdat.writeFile(pathname,text,\\\"utf8\\\").then(function(value) {\\n\\t\\t\\tcallback(null);\\n\\t\\t},function(reason) {\\n\\t\\t\\tcallback(\\\"Beaker Saver Write Error: \\\" + reason);\\n\\t\\t});\\n\\t},function(reason) {\\n\\t\\tcallback(\\\"Beaker Saver Stat Error: \\\" + reason);\\n\\t});\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nBeakerSaver.prototype.info = {\\n\\tname: \\\"beaker\\\",\\n\\tpriority: 3000,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn !!window.DatArchive && location.protocol===\\\"dat:\\\";\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new BeakerSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/custom.js\":{\"title\":\"$:/core/modules/savers/custom.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/custom.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nLooks for `window.$tw.customSaver` first on the current window, then\\non the parent window (of an iframe). If present, the saver must define\\n\\tsave: function(text,method,callback) { ... }\\nand the saver may define\\n\\tpriority: number\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar findSaver = function(window) {\\n\\ttry {\\n\\t\\treturn window && window.$tw && window.$tw.customSaver;\\n\\t} catch (err) {\\n\\t\\t// Catching the exception is the most reliable way to detect cross-origin iframe errors.\\n\\t\\t// For example, instead of saying that `window.parent.$tw` is undefined, Firefox will throw\\n\\t\\t//   Uncaught DOMException: Permission denied to access property \\\"$tw\\\" on cross-origin object\\n\\t\\tconsole.log({ msg: \\\"custom saver is disabled\\\", reason: err });\\n\\t\\treturn null;\\n\\t}\\n}\\nvar saver = findSaver(window) || findSaver(window.parent) || {};\\n\\nvar CustomSaver = function(wiki) {\\n};\\n\\nCustomSaver.prototype.save = function(text,method,callback) {\\n\\treturn saver.save(text, method, callback);\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nCustomSaver.prototype.info = {\\n\\tname: \\\"custom\\\",\\n\\tpriority: saver.priority || 4000,\\n\\tcapabilities: [\\\"save\\\",\\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn !!(saver.save);\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new CustomSaver(wiki);\\n};\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/download.js\":{\"title\":\"$:/core/modules/savers/download.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/download.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via HTML5's download APIs\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar DownloadSaver = function(wiki) {\\n};\\n\\nDownloadSaver.prototype.save = function(text,method,callback,options) {\\n\\toptions = options || {};\\n\\t// Get the current filename\\n\\tvar filename = options.variables.filename;\\n\\tif(!filename) {\\n\\t\\tvar p = document.location.pathname.lastIndexOf(\\\"/\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\t// We decode the pathname because document.location is URL encoded by the browser\\n\\t\\t\\tfilename = $tw.utils.decodeURIComponentSafe(document.location.pathname.substr(p+1));\\n\\t\\t}\\n\\t}\\n\\tif(!filename) {\\n\\t\\tfilename = \\\"tiddlywiki.html\\\";\\n\\t}\\n\\t// Set up the link\\n\\tvar link = document.createElement(\\\"a\\\");\\n\\tif(Blob !== undefined) {\\n\\t\\tvar blob = new Blob([text], {type: \\\"text/html\\\"});\\n\\t\\tlink.setAttribute(\\\"href\\\", URL.createObjectURL(blob));\\n\\t} else {\\n\\t\\tlink.setAttribute(\\\"href\\\",\\\"data:text/html,\\\" + encodeURIComponent(text));\\n\\t}\\n\\tlink.setAttribute(\\\"download\\\",filename);\\n\\tdocument.body.appendChild(link);\\n\\tlink.click();\\n\\tdocument.body.removeChild(link);\\n\\t// Callback that we succeeded\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nDownloadSaver.prototype.info = {\\n\\tname: \\\"download\\\",\\n\\tpriority: 100\\n};\\n\\nObject.defineProperty(DownloadSaver.prototype.info, \\\"capabilities\\\", {\\n\\tget: function() {\\n\\t\\tvar capabilities = [\\\"save\\\", \\\"download\\\"];\\n\\t\\tif(($tw.wiki.getTextReference(\\\"$:/config/DownloadSaver/AutoSave\\\") || \\\"\\\").toLowerCase() === \\\"yes\\\") {\\n\\t\\t\\tcapabilities.push(\\\"autosave\\\");\\n\\t\\t}\\n\\t\\treturn capabilities;\\n\\t}\\n});\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn document.createElement(\\\"a\\\").download !== undefined;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new DownloadSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/fsosaver.js\":{\"title\":\"$:/core/modules/savers/fsosaver.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/fsosaver.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via MS FileSystemObject ActiveXObject\\n\\nNote: Since TiddlyWiki's markup contains the MOTW, the FileSystemObject normally won't be available. \\nHowever, if the wiki is loaded as an .HTA file (Windows HTML Applications) then the FSO can be used.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar FSOSaver = function(wiki) {\\n};\\n\\nFSOSaver.prototype.save = function(text,method,callback) {\\n\\t// Get the pathname of this document\\n\\tvar pathname = unescape(document.location.pathname);\\n\\t// Test for a Windows path of the form /x:\\\\blah...\\n\\tif(/^\\\\/[A-Z]\\\\:\\\\\\\\[^\\\\\\\\]+/i.test(pathname)) {\\t// ie: ^/[a-z]:/[^/]+\\n\\t\\t// Remove the leading slash\\n\\t\\tpathname = pathname.substr(1);\\n\\t} else if(document.location.hostname !== \\\"\\\" && /^\\\\/\\\\\\\\[^\\\\\\\\]+\\\\\\\\[^\\\\\\\\]+/i.test(pathname)) {\\t// test for \\\\\\\\server\\\\share\\\\blah... - ^/[^/]+/[^/]+\\n\\t\\t// Remove the leading slash\\n\\t\\tpathname = pathname.substr(1);\\n\\t\\t// reconstruct UNC path\\n\\t\\tpathname = \\\"\\\\\\\\\\\\\\\\\\\" + document.location.hostname + pathname;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n\\t// Save the file (as UTF-16)\\n\\tvar fso = new ActiveXObject(\\\"Scripting.FileSystemObject\\\");\\n\\tvar file = fso.OpenTextFile(pathname,2,-1,-1);\\n\\tfile.Write(text);\\n\\tfile.Close();\\n\\t// Callback that we succeeded\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nFSOSaver.prototype.info = {\\n\\tname: \\\"FSOSaver\\\",\\n\\tpriority: 120,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\ttry {\\n\\t\\treturn (window.location.protocol === \\\"file:\\\") && !!(new ActiveXObject(\\\"Scripting.FileSystemObject\\\"));\\n\\t} catch(e) { return false; }\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new FSOSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/gitea.js\":{\"title\":\"$:/core/modules/savers/gitea.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/gitea.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves wiki by pushing a commit to the gitea\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar GiteaSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nGiteaSaver.prototype.save = function(text,method,callback) {\\n\\tvar self = this,\\n\\t\\tusername = this.wiki.getTiddlerText(\\\"$:/Gitea/Username\\\"),\\n\\t\\tpassword = $tw.utils.getPassword(\\\"Gitea\\\"),\\n\\t\\trepo = this.wiki.getTiddlerText(\\\"$:/Gitea/Repo\\\"),\\n\\t\\tpath = this.wiki.getTiddlerText(\\\"$:/Gitea/Path\\\",\\\"\\\"),\\n\\t\\tfilename = this.wiki.getTiddlerText(\\\"$:/Gitea/Filename\\\"),\\n\\t\\tbranch = this.wiki.getTiddlerText(\\\"$:/Gitea/Branch\\\") || \\\"master\\\",\\n\\t\\tendpoint = this.wiki.getTiddlerText(\\\"$:/Gitea/ServerURL\\\") || \\\"https://gitea\\\",\\n\\t\\theaders = {\\n\\t\\t\\t\\\"Accept\\\": \\\"application/json\\\",\\n\\t\\t\\t\\\"Content-Type\\\": \\\"application/json;charset=UTF-8\\\",\\n\\t\\t\\t\\\"Authorization\\\": \\\"token \\\" + password\\n\\t\\t};\\n\\t// Bail if we don't have everything we need\\n\\tif(!username || !password || !repo || !filename) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Make sure the path start and ends with a slash\\n\\tif(path.substring(0,1) !== \\\"/\\\") {\\n\\t\\tpath = \\\"/\\\" + path;\\n\\t}\\n\\tif(path.substring(path.length - 1) !== \\\"/\\\") {\\n\\t\\tpath = path + \\\"/\\\";\\n\\t}\\n\\t// Compose the base URI\\n\\tvar uri = endpoint + \\\"/repos/\\\" + repo + \\\"/contents\\\" + path;\\n\\t// Perform a get request to get the details (inc shas) of files in the same path as our file\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: uri,\\n\\t\\ttype: \\\"GET\\\",\\n\\t\\theaders: headers,\\n\\t\\tdata: {\\n\\t\\t\\tref: branch\\n\\t\\t},\\n\\t\\tcallback: function(err,getResponseDataJson,xhr) {\\n\\t\\t\\tvar getResponseData,sha = \\\"\\\";\\n\\t\\t\\tif(err && xhr.status !== 404) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tvar use_put = true;\\n\\t\\t\\tif(xhr.status !== 404) {\\n\\t\\t\\t\\tgetResponseData = $tw.utils.parseJSONSafe(getResponseDataJson);\\n\\t\\t\\t\\t$tw.utils.each(getResponseData,function(details) {\\n\\t\\t\\t\\t\\tif(details.name === filename) {\\n\\t\\t\\t\\t\\t\\tsha = details.sha;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tif(sha === \\\"\\\"){\\n\\t\\t\\t\\t\\tuse_put = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tvar data = {\\n\\t\\t\\t\\tmessage: $tw.language.getString(\\\"ControlPanel/Saving/GitService/CommitMessage\\\"),\\n\\t\\t\\t\\tcontent: $tw.utils.base64Encode(text),\\n\\t\\t\\t\\tsha: sha\\n\\t\\t\\t};\\n\\t\\t\\t$tw.utils.httpRequest({\\n\\t\\t\\t\\turl: endpoint + \\\"/repos/\\\" + repo + \\\"/branches/\\\" + branch,\\n\\t\\t\\t\\ttype: \\\"GET\\\",\\n\\t\\t\\t\\theaders: headers,\\n\\t\\t\\t\\tcallback: function(err,getResponseDataJson,xhr) {\\n\\t\\t\\t\\t\\tif(xhr.status === 404) {\\n\\t\\t\\t\\t\\t\\tcallback(\\\"Please ensure the branch in the Gitea repo exists\\\");\\n\\t\\t\\t\\t\\t}else{\\n\\t\\t\\t\\t\\t\\tdata[\\\"branch\\\"] = branch;\\n\\t\\t\\t\\t\\t\\tself.upload(uri + filename, use_put?\\\"PUT\\\":\\\"POST\\\", headers, data, callback);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\treturn true;\\n};\\n\\nGiteaSaver.prototype.upload = function(uri,method,headers,data,callback) {\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: uri,\\n\\t\\ttype: method,\\n\\t\\theaders: headers,\\n\\t\\tdata: JSON.stringify(data),\\n\\t\\tcallback: function(err,putResponseDataJson,xhr) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tvar putResponseData = $tw.utils.parseJSONSafe(putResponseDataJson);\\n\\t\\t\\tcallback(null);\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nGiteaSaver.prototype.info = {\\n\\tname: \\\"Gitea\\\",\\n\\tpriority: 2000,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new GiteaSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/github.js\":{\"title\":\"$:/core/modules/savers/github.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/github.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves wiki by pushing a commit to the GitHub v3 REST API\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar GitHubSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nGitHubSaver.prototype.save = function(text,method,callback) {\\n\\tvar self = this,\\n\\t\\tusername = this.wiki.getTiddlerText(\\\"$:/GitHub/Username\\\"),\\n\\t\\tpassword = $tw.utils.getPassword(\\\"github\\\"),\\n\\t\\trepo = this.wiki.getTiddlerText(\\\"$:/GitHub/Repo\\\"),\\n\\t\\tpath = this.wiki.getTiddlerText(\\\"$:/GitHub/Path\\\",\\\"\\\"),\\n\\t\\tfilename = this.wiki.getTiddlerText(\\\"$:/GitHub/Filename\\\"),\\n\\t\\tbranch = this.wiki.getTiddlerText(\\\"$:/GitHub/Branch\\\") || \\\"main\\\",\\n\\t\\tendpoint = this.wiki.getTiddlerText(\\\"$:/GitHub/ServerURL\\\") || \\\"https://api.github.com\\\",\\n\\t\\theaders = {\\n\\t\\t\\t\\\"Accept\\\": \\\"application/vnd.github.v3+json\\\",\\n\\t\\t\\t\\\"Content-Type\\\": \\\"application/json;charset=UTF-8\\\",\\n\\t\\t\\t\\\"Authorization\\\": \\\"Basic \\\" + window.btoa(username + \\\":\\\" + password),\\n\\t\\t\\t\\\"If-None-Match\\\": \\\"\\\"\\n\\t\\t};\\n\\t// Bail if we don't have everything we need\\n\\tif(!username || !password || !repo || !filename) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Make sure the path start and ends with a slash\\n\\tif(path.substring(0,1) !== \\\"/\\\") {\\n\\t\\tpath = \\\"/\\\" + path;\\n\\t}\\n\\tif(path.substring(path.length - 1) !== \\\"/\\\") {\\n\\t\\tpath = path + \\\"/\\\";\\n\\t}\\n\\t// Compose the base URI\\n\\tvar uri = endpoint + \\\"/repos/\\\" + repo + \\\"/contents\\\" + path;\\n\\t// Perform a get request to get the details (inc shas) of files in the same path as our file\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: uri,\\n\\t\\ttype: \\\"GET\\\",\\n\\t\\theaders: headers,\\n\\t\\tdata: {\\n\\t\\t\\tref: branch\\n\\t\\t},\\n\\t\\tcallback: function(err,getResponseDataJson,xhr) {\\n\\t\\t\\tvar getResponseData,sha = \\\"\\\";\\n\\t\\t\\tif(err && xhr.status !== 404) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tif(xhr.status !== 404) {\\n\\t\\t\\t\\tgetResponseData = $tw.utils.parseJSONSafe(getResponseDataJson);\\n\\t\\t\\t\\t$tw.utils.each(getResponseData,function(details) {\\n\\t\\t\\t\\t\\tif(details.name === filename) {\\n\\t\\t\\t\\t\\t\\tsha = details.sha;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\\tvar data = {\\n\\t\\t\\t\\tmessage: $tw.language.getString(\\\"ControlPanel/Saving/GitService/CommitMessage\\\"),\\n\\t\\t\\t\\tcontent: $tw.utils.base64Encode(text),\\n\\t\\t\\t\\tbranch: branch,\\n\\t\\t\\t\\tsha: sha\\n\\t\\t\\t};\\n\\t\\t\\t// Perform a PUT request to save the file\\n\\t\\t\\t$tw.utils.httpRequest({\\n\\t\\t\\t\\turl: uri + filename,\\n\\t\\t\\t\\ttype: \\\"PUT\\\",\\n\\t\\t\\t\\theaders: headers,\\n\\t\\t\\t\\tdata: JSON.stringify(data),\\n\\t\\t\\t\\tcallback: function(err,putResponseDataJson,xhr) {\\n\\t\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvar putResponseData = $tw.utils.parseJSONSafe(putResponseDataJson);\\n\\t\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nGitHubSaver.prototype.info = {\\n\\tname: \\\"github\\\",\\n\\tpriority: 2000,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new GitHubSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/gitlab.js\":{\"title\":\"$:/core/modules/savers/gitlab.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/gitlab.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves wiki by pushing a commit to the GitLab REST API\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: true */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar GitLabSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nGitLabSaver.prototype.save = function(text,method,callback) {\\n\\t/* See https://docs.gitlab.com/ee/api/repository_files.html */\\n\\tvar self = this,\\n\\t\\tusername = this.wiki.getTiddlerText(\\\"$:/GitLab/Username\\\"),\\n\\t\\tpassword = $tw.utils.getPassword(\\\"gitlab\\\"),\\n\\t\\trepo = this.wiki.getTiddlerText(\\\"$:/GitLab/Repo\\\"),\\n\\t\\tpath = this.wiki.getTiddlerText(\\\"$:/GitLab/Path\\\",\\\"\\\"),\\n\\t\\tfilename = this.wiki.getTiddlerText(\\\"$:/GitLab/Filename\\\"),\\n\\t\\tbranch = this.wiki.getTiddlerText(\\\"$:/GitLab/Branch\\\") || \\\"master\\\",\\n\\t\\tendpoint = this.wiki.getTiddlerText(\\\"$:/GitLab/ServerURL\\\") || \\\"https://gitlab.com/api/v4\\\",\\n\\t\\theaders = {\\n\\t\\t\\t\\\"Content-Type\\\": \\\"application/json;charset=UTF-8\\\",\\n\\t\\t\\t\\\"Private-Token\\\": password\\n\\t\\t};\\n\\t// Bail if we don't have everything we need\\n\\tif(!username || !password || !repo || !filename) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Make sure the path start and ends with a slash\\n\\tif(path.substring(0,1) !== \\\"/\\\") {\\n\\t\\tpath = \\\"/\\\" + path;\\n\\t}\\n\\tif(path.substring(path.length - 1) !== \\\"/\\\") {\\n\\t\\tpath = path + \\\"/\\\";\\n\\t}\\n\\t// Compose the base URI\\n\\tvar uri = endpoint + \\\"/projects/\\\" + encodeURIComponent(repo) + \\\"/repository/\\\";\\n\\t// Perform a get request to get the details (inc shas) of files in the same path as our file\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: uri + \\\"tree/?path=\\\" + encodeURIComponent(path.replace(/^\\\\/+|\\\\/$/g, '')) + \\\"&branch=\\\" + encodeURIComponent(branch.replace(/^\\\\/+|\\\\/$/g, '')),\\n\\t\\ttype: \\\"GET\\\",\\n\\t\\theaders: headers,\\n\\t\\tcallback: function(err,getResponseDataJson,xhr) {\\n\\t\\t\\tvar getResponseData,sha = \\\"\\\";\\n\\t\\t\\tif(err && xhr.status !== 404) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tvar requestType = \\\"POST\\\";\\n\\t\\t\\tif(xhr.status !== 404) {\\n\\t\\t\\t\\tgetResponseData = $tw.utils.parseJSONSafe(getResponseDataJson);\\n\\t\\t\\t\\t$tw.utils.each(getResponseData,function(details) {\\n\\t\\t\\t\\t\\tif(details.name === filename) {\\n\\t\\t\\t\\t\\t\\trequestType = \\\"PUT\\\";\\n\\t\\t\\t\\t\\t\\tsha = details.sha;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\\tvar data = {\\n\\t\\t\\t\\tcommit_message: $tw.language.getString(\\\"ControlPanel/Saving/GitService/CommitMessage\\\"),\\n\\t\\t\\t\\tcontent: text,\\n\\t\\t\\t\\tbranch: branch,\\n\\t\\t\\t\\tsha: sha\\n\\t\\t\\t};\\n\\t\\t\\t// Perform a request to save the file\\n\\t\\t\\t$tw.utils.httpRequest({\\n\\t\\t\\t\\turl: uri + \\\"files/\\\" + encodeURIComponent(path.replace(/^\\\\/+/, '') + filename),\\n\\t\\t\\t\\ttype: requestType,\\n\\t\\t\\t\\theaders: headers,\\n\\t\\t\\t\\tdata: JSON.stringify(data),\\n\\t\\t\\t\\tcallback: function(err,putResponseDataJson,xhr) {\\n\\t\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvar putResponseData = $tw.utils.parseJSONSafe(putResponseDataJson);\\n\\t\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nGitLabSaver.prototype.info = {\\n\\tname: \\\"gitlab\\\",\\n\\tpriority: 2000,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new GitLabSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/hyperdrive.js\":{\"title\":\"$:/core/modules/savers/hyperdrive.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/hyperdrive.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves files using the Hyperdrive Protocol (https://hypercore-protocol.org/#hyperdrive) Beaker browser beta-1.0 and later (https://beakerbrowser.com)\\nCompatible with beaker >= V1.0.0\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSet up the saver\\n*/\\nvar HyperdriveSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nHyperdriveSaver.prototype.save = function(text,method,callback) {\\n\\tvar dat = beaker.hyperdrive.drive(\\\"\\\" + window.location),\\n\\t\\tpathname = (\\\"\\\" + window.location.pathname).split(\\\"#\\\")[0];\\n\\tdat.stat(pathname).then(function(value) {\\n\\t\\tif(value.isDirectory()) {\\n\\t\\t\\tpathname = pathname + \\\"/index.html\\\";\\n\\t\\t}\\n\\t\\tdat.writeFile(pathname,text,\\\"utf8\\\").then(function(value) {\\n\\t\\t\\tcallback(null);\\n\\t\\t},function(reason) {\\n\\t\\t\\tcallback(\\\"Hyperdrive Saver Write Error: \\\" + reason);\\n\\t\\t});\\n\\t},function(reason) {\\n\\t\\tcallback(\\\"Hyperdrive Saver Stat Error: \\\" + reason);\\n\\t});\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nHyperdriveSaver.prototype.info = {\\n\\tname: \\\"beaker-1.x\\\",\\n\\tpriority: 3000,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn !!window.beaker && !!beaker.hyperdrive && location.protocol===\\\"hyper:\\\";\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new HyperdriveSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/manualdownload.js\":{\"title\":\"$:/core/modules/savers/manualdownload.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/manualdownload.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via HTML5's download APIs\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Title of the tiddler containing the download message\\nvar downloadInstructionsTitle = \\\"$:/language/Modals/Download\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar ManualDownloadSaver = function(wiki) {\\n};\\n\\nManualDownloadSaver.prototype.save = function(text,method,callback) {\\n\\t$tw.modal.display(downloadInstructionsTitle,{\\n\\t\\tdownloadLink: \\\"data:text/html,\\\" + encodeURIComponent(text)\\n\\t});\\n\\t// Callback that we succeeded\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nManualDownloadSaver.prototype.info = {\\n\\tname: \\\"manualdownload\\\",\\n\\tpriority: 0,\\n\\tcapabilities: [\\\"save\\\", \\\"download\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new ManualDownloadSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/msdownload.js\":{\"title\":\"$:/core/modules/savers/msdownload.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/msdownload.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via window.navigator.msSaveBlob()\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar MsDownloadSaver = function(wiki) {\\n};\\n\\nMsDownloadSaver.prototype.save = function(text,method,callback) {\\n\\t// Get the current filename\\n\\tvar filename = \\\"tiddlywiki.html\\\",\\n\\t\\tp = document.location.pathname.lastIndexOf(\\\"/\\\");\\n\\tif(p !== -1) {\\n\\t\\tfilename = document.location.pathname.substr(p+1);\\n\\t}\\n\\t// Set up the link\\n\\tvar blob = new Blob([text], {type: \\\"text/html\\\"});\\n\\twindow.navigator.msSaveBlob(blob,filename);\\n\\t// Callback that we succeeded\\n\\tcallback(null);\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nMsDownloadSaver.prototype.info = {\\n\\tname: \\\"msdownload\\\",\\n\\tpriority: 110,\\n\\tcapabilities: [\\\"save\\\", \\\"download\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn !!window.navigator.msSaveBlob;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new MsDownloadSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/put.js\":{\"title\":\"$:/core/modules/savers/put.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/put.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nSaves wiki by performing a PUT request to the server\\n\\nWorks with any server which accepts a PUT request\\nto the current URL, such as a WebDAV server.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nRetrieve ETag if available\\n*/\\nvar retrieveETag = function(self) {\\n\\tvar headers = {\\n\\t\\tAccept: \\\"*/*;charset=UTF-8\\\"\\n\\t};\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: self.uri(),\\n\\t\\ttype: \\\"HEAD\\\",\\n\\t\\theaders: headers,\\n\\t\\tcallback: function(err,data,xhr) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tvar etag = xhr.getResponseHeader(\\\"ETag\\\");\\n\\t\\t\\tif(!etag) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tself.etag = etag.replace(/^W\\\\//,\\\"\\\");\\n\\t\\t}\\n\\t});\\n};\\n\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar PutSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n\\tvar self = this;\\n\\tvar uri = this.uri();\\n\\t// Async server probe. Until probe finishes, save will fail fast\\n\\t// See also https://github.com/Jermolene/TiddlyWiki5/issues/2276\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: uri,\\n\\t\\ttype: \\\"OPTIONS\\\",\\n\\t\\tcallback: function(err,data,xhr) {\\n\\t\\t\\t// Check DAV header http://www.webdav.org/specs/rfc2518.html#rfc.section.9.1\\n\\t\\t\\tif(!err) {\\n\\t\\t\\t\\tself.serverAcceptsPuts = xhr.status === 200 && !!xhr.getResponseHeader(\\\"dav\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\tretrieveETag(this);\\n};\\n\\nPutSaver.prototype.uri = function() {\\n\\treturn document.location.toString().split(\\\"#\\\")[0];\\n};\\n\\n// TODO: in case of edit conflict\\n// Prompt: Do you want to save over this? Y/N\\n// Merging would be ideal, and may be possible using future generic merge flow\\nPutSaver.prototype.save = function(text,method,callback) {\\n\\tif(!this.serverAcceptsPuts) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar self = this;\\n\\tvar headers = {\\n\\t\\t\\\"Content-Type\\\": \\\"text/html;charset=UTF-8\\\"\\n\\t};\\n\\tif(this.etag) {\\n\\t\\theaders[\\\"If-Match\\\"] = this.etag;\\n\\t}\\n\\t$tw.utils.httpRequest({\\n\\t\\turl: this.uri(),\\n\\t\\ttype: \\\"PUT\\\",\\n\\t\\theaders: headers,\\n\\t\\tdata: text,\\n\\t\\tcallback: function(err,data,xhr) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\t// response is textual: \\\"XMLHttpRequest error code: 412\\\"\\n\\t\\t\\t\\tvar status = Number(err.substring(err.indexOf(':') + 2, err.length))\\n\\t\\t\\t\\tif(status === 412) { // file changed on server\\n\\t\\t\\t\\t\\tcallback($tw.language.getString(\\\"Error/PutEditConflict\\\"));\\n\\t\\t\\t\\t} else if(status === 401) { // authentication required\\n\\t\\t\\t\\t\\tcallback($tw.language.getString(\\\"Error/PutUnauthorized\\\"));\\n\\t\\t\\t\\t} else if(status === 403) { // permission denied\\n\\t\\t\\t\\t\\tcallback($tw.language.getString(\\\"Error/PutForbidden\\\"));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcallback(err); // fail\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.etag = xhr.getResponseHeader(\\\"ETag\\\");\\n\\t\\t\\t\\tif(self.etag == null) {\\n\\t\\t\\t\\t\\tretrieveETag(self);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcallback(null); // success\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nPutSaver.prototype.info = {\\n\\tname: \\\"put\\\",\\n\\tpriority: 2000,\\n\\tcapabilities: [\\\"save\\\",\\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn /^https?:/.test(location.protocol);\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new PutSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/tiddlyfox.js\":{\"title\":\"$:/core/modules/savers/tiddlyfox.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/tiddlyfox.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via the TiddlyFox file extension\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false, netscape: false, Components: false */\\n\\\"use strict\\\";\\n\\nvar TiddlyFoxSaver = function(wiki) {\\n};\\n\\nTiddlyFoxSaver.prototype.save = function(text,method,callback) {\\n\\tvar messageBox = document.getElementById(\\\"tiddlyfox-message-box\\\");\\n\\tif(messageBox) {\\n\\t\\t// Get the pathname of this document\\n\\t\\tvar pathname = document.location.toString().split(\\\"#\\\")[0];\\n\\t\\t// Replace file://localhost/ with file:///\\n\\t\\tif(pathname.indexOf(\\\"file://localhost/\\\") === 0) {\\n\\t\\t\\tpathname = \\\"file://\\\" + pathname.substr(16);\\n\\t\\t}\\n\\t\\t// Windows path file:///x:/blah/blah --> x:\\\\blah\\\\blah\\n\\t\\tif(/^file\\\\:\\\\/\\\\/\\\\/[A-Z]\\\\:\\\\//i.test(pathname)) {\\n\\t\\t\\t// Remove the leading slash and convert slashes to backslashes\\n\\t\\t\\tpathname = pathname.substr(8).replace(/\\\\//g,\\\"\\\\\\\\\\\");\\n\\t\\t// Firefox Windows network path file://///server/share/blah/blah --> //server/share/blah/blah\\n\\t\\t} else if(pathname.indexOf(\\\"file://///\\\") === 0) {\\n\\t\\t\\tpathname = \\\"\\\\\\\\\\\\\\\\\\\" + unescape(pathname.substr(10)).replace(/\\\\//g,\\\"\\\\\\\\\\\");\\n\\t\\t// Mac/Unix local path file:///path/path --> /path/path\\n\\t\\t} else if(pathname.indexOf(\\\"file:///\\\") === 0) {\\n\\t\\t\\tpathname = unescape(pathname.substr(7));\\n\\t\\t// Mac/Unix local path file:/path/path --> /path/path\\n\\t\\t} else if(pathname.indexOf(\\\"file:/\\\") === 0) {\\n\\t\\t\\tpathname = unescape(pathname.substr(5));\\n\\t\\t// Otherwise Windows networth path file://server/share/path/path --> \\\\\\\\server\\\\share\\\\path\\\\path\\n\\t\\t} else {\\n\\t\\t\\tpathname = \\\"\\\\\\\\\\\\\\\\\\\" + unescape(pathname.substr(7)).replace(new RegExp(\\\"/\\\",\\\"g\\\"),\\\"\\\\\\\\\\\");\\n\\t\\t}\\n\\t\\t// Create the message element and put it in the message box\\n\\t\\tvar message = document.createElement(\\\"div\\\");\\n\\t\\tmessage.setAttribute(\\\"data-tiddlyfox-path\\\",$tw.utils.decodeURIComponentSafe(pathname));\\n\\t\\tmessage.setAttribute(\\\"data-tiddlyfox-content\\\",text);\\n\\t\\tmessageBox.appendChild(message);\\n\\t\\t// Add an event handler for when the file has been saved\\n\\t\\tmessage.addEventListener(\\\"tiddlyfox-have-saved-file\\\",function(event) {\\n\\t\\t\\tcallback(null);\\n\\t\\t}, false);\\n\\t\\t// Create and dispatch the custom event to the extension\\n\\t\\tvar event = document.createEvent(\\\"Events\\\");\\n\\t\\tevent.initEvent(\\\"tiddlyfox-save-file\\\",true,false);\\n\\t\\tmessage.dispatchEvent(event);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nTiddlyFoxSaver.prototype.info = {\\n\\tname: \\\"tiddlyfox\\\",\\n\\tpriority: 1500,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new TiddlyFoxSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/tiddlyie.js\":{\"title\":\"$:/core/modules/savers/tiddlyie.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/tiddlyie.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via Internet Explorer BHO extenion (TiddlyIE)\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar TiddlyIESaver = function(wiki) {\\n};\\n\\nTiddlyIESaver.prototype.save = function(text,method,callback) {\\n\\t// Check existence of TiddlyIE BHO extension (note: only works after document is complete)\\n\\tif(typeof(window.TiddlyIE) != \\\"undefined\\\") {\\n\\t\\t// Get the pathname of this document\\n\\t\\tvar pathname = unescape(document.location.pathname);\\n\\t\\t// Test for a Windows path of the form /x:/blah...\\n\\t\\tif(/^\\\\/[A-Z]\\\\:\\\\/[^\\\\/]+/i.test(pathname)) {\\t// ie: ^/[a-z]:/[^/]+ (is this better?: ^/[a-z]:/[^/]+(/[^/]+)*\\\\.[^/]+ )\\n\\t\\t\\t// Remove the leading slash\\n\\t\\t\\tpathname = pathname.substr(1);\\n\\t\\t\\t// Convert slashes to backslashes\\n\\t\\t\\tpathname = pathname.replace(/\\\\//g,\\\"\\\\\\\\\\\");\\n\\t\\t} else if(document.hostname !== \\\"\\\" && /^\\\\/[^\\\\/]+\\\\/[^\\\\/]+/i.test(pathname)) {\\t// test for \\\\\\\\server\\\\share\\\\blah... - ^/[^/]+/[^/]+\\n\\t\\t\\t// Convert slashes to backslashes\\n\\t\\t\\tpathname = pathname.replace(/\\\\//g,\\\"\\\\\\\\\\\");\\n\\t\\t\\t// reconstruct UNC path\\n\\t\\t\\tpathname = \\\"\\\\\\\\\\\\\\\\\\\" + document.location.hostname + pathname;\\n\\t\\t} else return false;\\n\\t\\t// Prompt the user to save the file\\n\\t\\twindow.TiddlyIE.save(pathname, text);\\n\\t\\t// Callback that we succeeded\\n\\t\\tcallback(null);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nTiddlyIESaver.prototype.info = {\\n\\tname: \\\"tiddlyiesaver\\\",\\n\\tpriority: 1500,\\n\\tcapabilities: [\\\"save\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn (window.location.protocol === \\\"file:\\\");\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new TiddlyIESaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/twedit.js\":{\"title\":\"$:/core/modules/savers/twedit.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/twedit.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via the TWEdit iOS app\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false, netscape: false, Components: false */\\n\\\"use strict\\\";\\n\\nvar TWEditSaver = function(wiki) {\\n};\\n\\nTWEditSaver.prototype.save = function(text,method,callback) {\\n\\t// Bail if we're not running under TWEdit\\n\\tif(typeof DeviceInfo !== \\\"object\\\") {\\n\\t\\treturn false;\\n\\t}\\n\\t// Get the pathname of this document\\n\\tvar pathname = $tw.utils.decodeURIComponentSafe(document.location.pathname);\\n\\t// Strip any query or location part\\n\\tvar p = pathname.indexOf(\\\"?\\\");\\n\\tif(p !== -1) {\\n\\t\\tpathname = pathname.substr(0,p);\\n\\t}\\n\\tp = pathname.indexOf(\\\"#\\\");\\n\\tif(p !== -1) {\\n\\t\\tpathname = pathname.substr(0,p);\\n\\t}\\n\\t// Remove the leading \\\"/Documents\\\" from path\\n\\tvar prefix = \\\"/Documents\\\";\\n\\tif(pathname.indexOf(prefix) === 0) {\\n\\t\\tpathname = pathname.substr(prefix.length);\\n\\t}\\n\\t// Error handler\\n\\tvar errorHandler = function(event) {\\n\\t\\t// Error\\n\\t\\tcallback($tw.language.getString(\\\"Error/SavingToTWEdit\\\") + \\\": \\\" + event.target.error.code);\\n\\t};\\n\\t// Get the file system\\n\\twindow.requestFileSystem(LocalFileSystem.PERSISTENT,0,function(fileSystem) {\\n\\t\\t// Now we've got the filesystem, get the fileEntry\\n\\t\\tfileSystem.root.getFile(pathname, {create: true}, function(fileEntry) {\\n\\t\\t\\t// Now we've got the fileEntry, create the writer\\n\\t\\t\\tfileEntry.createWriter(function(writer) {\\n\\t\\t\\t\\twriter.onerror = errorHandler;\\n\\t\\t\\t\\twriter.onwrite = function() {\\n\\t\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\twriter.position = 0;\\n\\t\\t\\t\\twriter.write(text);\\n\\t\\t\\t},errorHandler);\\n\\t\\t}, errorHandler);\\n\\t}, errorHandler);\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nTWEditSaver.prototype.info = {\\n\\tname: \\\"twedit\\\",\\n\\tpriority: 1600,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new TWEditSaver(wiki);\\n};\\n\\n/////////////////////////// Hack\\n// HACK: This ensures that TWEdit recognises us as a TiddlyWiki document\\nif($tw.browser) {\\n\\twindow.version = {title: \\\"TiddlyWiki\\\"};\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/savers/upload.js\":{\"title\":\"$:/core/modules/savers/upload.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/savers/upload.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nHandles saving changes via upload to a server.\\n\\nDesigned to be compatible with BidiX's UploadPlugin at http://tiddlywiki.bidix.info/#UploadPlugin\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSelect the appropriate saver module and set it up\\n*/\\nvar UploadSaver = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nUploadSaver.prototype.save = function(text,method,callback) {\\n\\t// Get the various parameters we need\\n\\tvar backupDir = this.wiki.getTextReference(\\\"$:/UploadBackupDir\\\") || \\\".\\\",\\n\\t\\tusername = this.wiki.getTextReference(\\\"$:/UploadName\\\"),\\n\\t\\tpassword = $tw.utils.getPassword(\\\"upload\\\"),\\n\\t\\tuploadDir = this.wiki.getTextReference(\\\"$:/UploadDir\\\") || \\\".\\\",\\n\\t\\tuploadFilename = this.wiki.getTextReference(\\\"$:/UploadFilename\\\") || \\\"index.html\\\",\\n\\t\\tuploadWithUrlOnly = this.wiki.getTextReference(\\\"$:/UploadWithUrlOnly\\\") || \\\"no\\\",\\n\\t\\turl = this.wiki.getTextReference(\\\"$:/UploadURL\\\");\\n\\t// Bail out if we don't have the bits we need\\n\\tif (uploadWithUrlOnly === \\\"yes\\\") {\\n\\t\\t// The url is good enough. No need for a username and password.\\n\\t\\t// Assume the server uses some other kind of auth mechanism.\\n\\t\\tif(!url || url.toString().trim() === \\\"\\\") {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\t// Require username and password to be present.\\n\\t\\t// Assume the server uses the standard UploadPlugin username/password.\\n\\t\\tif(!username || username.toString().trim() === \\\"\\\" || !password || password.toString().trim() === \\\"\\\") {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\t// Construct the url if not provided\\n\\tif(!url) {\\n\\t\\turl = \\\"http://\\\" + username + \\\".tiddlyspot.com/store.cgi\\\";\\n\\t}\\n\\t// Assemble the header\\n\\tvar boundary = \\\"---------------------------\\\" + \\\"AaB03x\\\";\\n\\tvar uploadFormName = \\\"UploadPlugin\\\";\\n\\tvar head = [];\\n\\thead.push(\\\"--\\\" + boundary + \\\"\\\\r\\\\nContent-disposition: form-data; name=\\\\\\\"UploadPlugin\\\\\\\"\\\\r\\\\n\\\");\\n\\thead.push(\\\"backupDir=\\\" + backupDir + \\\";user=\\\" + username + \\\";password=\\\" + password + \\\";uploaddir=\\\" + uploadDir + \\\";;\\\"); \\n\\thead.push(\\\"\\\\r\\\\n\\\" + \\\"--\\\" + boundary);\\n\\thead.push(\\\"Content-disposition: form-data; name=\\\\\\\"userfile\\\\\\\"; filename=\\\\\\\"\\\" + uploadFilename + \\\"\\\\\\\"\\\");\\n\\thead.push(\\\"Content-Type: text/html;charset=UTF-8\\\");\\n\\thead.push(\\\"Content-Length: \\\" + text.length + \\\"\\\\r\\\\n\\\");\\n\\thead.push(\\\"\\\");\\n\\t// Assemble the tail and the data itself\\n\\tvar tail = \\\"\\\\r\\\\n--\\\" + boundary + \\\"--\\\\r\\\\n\\\",\\n\\t\\tdata = head.join(\\\"\\\\r\\\\n\\\") + text + tail;\\n\\t// Do the HTTP post\\n\\tvar http = new XMLHttpRequest();\\n\\thttp.open(\\\"POST\\\",url,true,username,password);\\n\\thttp.setRequestHeader(\\\"Content-Type\\\",\\\"multipart/form-data; charset=UTF-8; boundary=\\\" + boundary);\\n\\thttp.onreadystatechange = function() {\\n\\t\\tif(http.readyState == 4 && http.status == 200) {\\n\\t\\t\\tif(http.responseText.substr(0,4) === \\\"0 - \\\") {\\n\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcallback(http.responseText);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\ttry {\\n\\t\\thttp.send(data);\\n\\t} catch(ex) {\\n\\t\\treturn callback($tw.language.getString(\\\"Error/Caption\\\") + \\\":\\\" + ex);\\n\\t}\\n\\t$tw.notifier.display(\\\"$:/language/Notifications/Save/Starting\\\");\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nUploadSaver.prototype.info = {\\n\\tname: \\\"upload\\\",\\n\\tpriority: 2000,\\n\\tcapabilities: [\\\"save\\\", \\\"autosave\\\"]\\n};\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn true;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new UploadSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/core/modules/server/authenticators/basic.js\":{\"title\":\"$:/core/modules/server/authenticators/basic.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/authenticators/basic.js\\ntype: application/javascript\\nmodule-type: authenticator\\n\\nAuthenticator for WWW basic authentication\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nif($tw.node) {\\n\\tvar util = require(\\\"util\\\"),\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\turl = require(\\\"url\\\"),\\n\\t\\tpath = require(\\\"path\\\");\\n}\\n\\nfunction BasicAuthenticator(server) {\\n\\tthis.server = server;\\n\\tthis.credentialsData = [];\\n}\\n\\n/*\\nReturns true if the authenticator is active, false if it is inactive, or a string if there is an error\\n*/\\nBasicAuthenticator.prototype.init = function() {\\n\\t// Read the credentials data\\n\\tthis.credentialsFilepath = this.server.get(\\\"credentials\\\");\\n\\tif(this.credentialsFilepath) {\\n\\t\\tvar resolveCredentialsFilepath = path.resolve(this.server.boot.wikiPath,this.credentialsFilepath);\\n\\t\\tif(fs.existsSync(resolveCredentialsFilepath) && !fs.statSync(resolveCredentialsFilepath).isDirectory()) {\\n\\t\\t\\tvar credentialsText = fs.readFileSync(resolveCredentialsFilepath,\\\"utf8\\\"),\\n\\t\\t\\t\\tcredentialsData = $tw.utils.parseCsvStringWithHeader(credentialsText);\\n\\t\\t\\tif(typeof credentialsData === \\\"string\\\") {\\n\\t\\t\\t\\treturn \\\"Error: \\\" + credentialsData + \\\" reading credentials from '\\\" + resolveCredentialsFilepath + \\\"'\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.credentialsData = credentialsData;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"Error: Unable to load user credentials from '\\\" + resolveCredentialsFilepath + \\\"'\\\";\\n\\t\\t}\\n\\t}\\n\\t// Add the hardcoded username and password if specified\\n\\tif(this.server.get(\\\"username\\\") && this.server.get(\\\"password\\\")) {\\n\\t\\tthis.credentialsData = this.credentialsData || [];\\n\\t\\tthis.credentialsData.push({\\n\\t\\t\\tusername: this.server.get(\\\"username\\\"),\\n\\t\\t\\tpassword: this.server.get(\\\"password\\\")\\n\\t\\t});\\n\\t}\\n\\treturn this.credentialsData.length > 0;\\n};\\n\\n/*\\nReturns true if the request is authenticated and assigns the \\\"authenticatedUsername\\\" state variable.\\nReturns false if the request couldn't be authenticated having sent an appropriate response to the browser\\n*/\\nBasicAuthenticator.prototype.authenticateRequest = function(request,response,state) {\\n\\t// Extract the incoming username and password from the request\\n\\tvar header = request.headers.authorization || \\\"\\\";\\n\\tif(!header && state.allowAnon) {\\n\\t\\t// If there's no header and anonymous access is allowed then we don't set authenticatedUsername\\n\\t\\treturn true;\\n\\t}\\n\\tvar token = header.split(/\\\\s+/).pop() || \\\"\\\",\\n\\t\\tauth = $tw.utils.base64Decode(token),\\n\\t\\tparts = auth.split(/:/),\\n\\t\\tincomingUsername = parts[0],\\n\\t\\tincomingPassword = parts[1];\\n\\t// Check that at least one of the credentials matches\\n\\tvar matchingCredentials = this.credentialsData.find(function(credential) {\\n\\t\\treturn credential.username === incomingUsername && credential.password === incomingPassword;\\n\\t});\\n\\tif(matchingCredentials) {\\n\\t\\t// If so, add the authenticated username to the request state\\n\\t\\tstate.authenticatedUsername = incomingUsername;\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\t// If not, return an authentication challenge\\n\\t\\tresponse.writeHead(401,\\\"Authentication required\\\",{\\n\\t\\t\\t\\\"WWW-Authenticate\\\": 'Basic realm=\\\"Please provide your username and password to login to ' + state.server.servername + '\\\"'\\n\\t\\t});\\n\\t\\tresponse.end();\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.AuthenticatorClass = BasicAuthenticator;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"authenticator\"},\"$:/core/modules/server/authenticators/header.js\":{\"title\":\"$:/core/modules/server/authenticators/header.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/authenticators/header.js\\ntype: application/javascript\\nmodule-type: authenticator\\n\\nAuthenticator for trusted header authentication\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nfunction HeaderAuthenticator(server) {\\n\\tthis.server = server;\\n\\tthis.header = server.get(\\\"authenticated-user-header\\\") ? server.get(\\\"authenticated-user-header\\\").toLowerCase() : undefined;\\n}\\n\\n/*\\nReturns true if the authenticator is active, false if it is inactive, or a string if there is an error\\n*/\\nHeaderAuthenticator.prototype.init = function() {\\n\\treturn !!this.header;\\n};\\n\\n/*\\nReturns true if the request is authenticated and assigns the \\\"authenticatedUsername\\\" state variable.\\nReturns false if the request couldn't be authenticated having sent an appropriate response to the browser\\n*/\\nHeaderAuthenticator.prototype.authenticateRequest = function(request,response,state) {\\n\\t// Otherwise, authenticate as the username in the specified header\\n\\tvar username = request.headers[this.header];\\n\\tif(!username && !state.allowAnon) {\\n\\t\\tresponse.writeHead(401,\\\"Authorization header required to login to '\\\" + state.server.servername + \\\"'\\\");\\n\\t\\tresponse.end();\\n\\t\\treturn false;\\n\\t} else {\\n\\t\\t// authenticatedUsername will be undefined for anonymous users\\n\\t\\tstate.authenticatedUsername = username;\\n\\t\\treturn true;\\n\\t}\\n};\\n\\nexports.AuthenticatorClass = HeaderAuthenticator;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"authenticator\"},\"$:/core/modules/server/routes/delete-tiddler.js\":{\"title\":\"$:/core/modules/server/routes/delete-tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/delete-tiddler.js\\ntype: application/javascript\\nmodule-type: route\\n\\nDELETE /recipes/default/tiddlers/:title\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"DELETE\\\";\\n\\nexports.path = /^\\\\/bags\\\\/default\\\\/tiddlers\\\\/(.+)$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar title = $tw.utils.decodeURIComponentSafe(state.params[0]);\\n\\tstate.wiki.deleteTiddler(title);\\n\\tresponse.writeHead(204, \\\"OK\\\", {\\n\\t\\t\\\"Content-Type\\\": \\\"text/plain\\\"\\n\\t});\\n\\tresponse.end();\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-favicon.js\":{\"title\":\"$:/core/modules/server/routes/get-favicon.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-favicon.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /favicon.ico\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/favicon.ico$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar buffer = state.wiki.getTiddlerText(\\\"$:/favicon.ico\\\",\\\"\\\");\\n\\tstate.sendResponse(200,{\\\"Content-Type\\\": \\\"image/x-icon\\\"},buffer,\\\"base64\\\");\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-file.js\":{\"title\":\"$:/core/modules/server/routes/get-file.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-file.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /files/:filepath\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/files\\\\/(.+)$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar path = require(\\\"path\\\"),\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\tutil = require(\\\"util\\\"),\\n\\t\\tsuppliedFilename = $tw.utils.decodeURIComponentSafe(state.params[0]),\\n\\t\\tbaseFilename = path.resolve(state.boot.wikiPath,\\\"files\\\"),\\n\\t\\tfilename = path.resolve(baseFilename,suppliedFilename),\\n\\t\\textension = path.extname(filename);\\n\\t// Check that the filename is inside the wiki files folder\\n\\tif(path.relative(baseFilename,filename).indexOf(\\\"..\\\") !== 0) {\\n\\t\\t// Send the file\\n\\t\\tfs.readFile(filename,function(err,content) {\\n\\t\\t\\tvar status,content,type = \\\"text/plain\\\";\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\tconsole.log(\\\"Error accessing file \\\" + filename + \\\": \\\" + err.toString());\\n\\t\\t\\t\\tstatus = 404;\\n\\t\\t\\t\\tcontent = \\\"File '\\\" + suppliedFilename + \\\"' not found\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tstatus = 200;\\n\\t\\t\\t\\tcontent = content;\\n\\t\\t\\t\\ttype = ($tw.config.fileExtensionInfo[extension] ? $tw.config.fileExtensionInfo[extension].type : \\\"application/octet-stream\\\");\\n\\t\\t\\t}\\n\\t\\t\\tstate.sendResponse(status,{\\\"Content-Type\\\": type},content);\\n\\t\\t});\\n\\t} else {\\n\\t\\tstate.sendResponse(404,{\\\"Content-Type\\\": \\\"text/plain\\\"},\\\"File '\\\" + suppliedFilename + \\\"' not found\\\");\\n\\t}\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-index.js\":{\"title\":\"$:/core/modules/server/routes/get-index.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-index.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar text = state.wiki.renderTiddler(state.server.get(\\\"root-render-type\\\"),state.server.get(\\\"root-tiddler\\\")),\\n\\t\\tresponseHeaders = {\\n\\t\\t\\\"Content-Type\\\": state.server.get(\\\"root-serve-type\\\")\\n\\t};\\n\\tstate.sendResponse(200,responseHeaders,text);\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-login-basic.js\":{\"title\":\"$:/core/modules/server/routes/get-login-basic.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-login-basic.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /login-basic -- force a Basic Authentication challenge\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/login-basic$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tif(!state.authenticatedUsername) {\\n\\t\\t// Challenge if there's no username\\n\\t\\tresponse.writeHead(401,{\\n\\t\\t\\t\\\"WWW-Authenticate\\\": 'Basic realm=\\\"Please provide your username and password to login to ' + state.server.servername + '\\\"'\\n\\t\\t});\\n\\t\\tresponse.end();\\n\\t} else {\\n\\t\\t// Redirect to the root wiki if login worked\\n\\t\\tvar location = ($tw.syncadaptor && $tw.syncadaptor.host)? $tw.syncadaptor.host: \\\"/\\\";\\n\\t\\tresponse.writeHead(302,{\\n\\t\\t\\tLocation: location\\n\\t\\t});\\n\\t\\tresponse.end();\\n\\t}\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-status.js\":{\"title\":\"$:/core/modules/server/routes/get-status.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-status.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /status\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/status$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar text = JSON.stringify({\\n\\t\\tusername: state.authenticatedUsername || state.server.get(\\\"anon-username\\\") || \\\"\\\",\\n\\t\\tanonymous: !state.authenticatedUsername,\\n\\t\\tread_only: !state.server.isAuthorized(\\\"writers\\\",state.authenticatedUsername),\\n\\t\\tspace: {\\n\\t\\t\\trecipe: \\\"default\\\"\\n\\t\\t},\\n\\t\\ttiddlywiki_version: $tw.version\\n\\t});\\n\\tstate.sendResponse(200,{\\\"Content-Type\\\": \\\"application/json\\\"},text,\\\"utf8\\\");\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-tiddler-html.js\":{\"title\":\"$:/core/modules/server/routes/get-tiddler-html.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-tiddler-html.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /:title\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/([^\\\\/]+)$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar title = $tw.utils.decodeURIComponentSafe(state.params[0]),\\n\\t\\ttiddler = state.wiki.getTiddler(title);\\n\\tif(tiddler) {\\n\\t\\tvar renderType = tiddler.getFieldString(\\\"_render_type\\\"),\\n\\t\\t\\trenderTemplate = tiddler.getFieldString(\\\"_render_template\\\");\\n\\t\\t// Tiddler fields '_render_type' and '_render_template' overwrite\\n\\t\\t// system wide settings for render type and template\\n\\t\\tif(state.wiki.isSystemTiddler(title)) {\\n\\t\\t\\trenderType = renderType || state.server.get(\\\"system-tiddler-render-type\\\");\\n\\t\\t\\trenderTemplate = renderTemplate || state.server.get(\\\"system-tiddler-render-template\\\");\\n\\t\\t} else {\\n\\t\\t\\trenderType = renderType || state.server.get(\\\"tiddler-render-type\\\");\\n\\t\\t\\trenderTemplate = renderTemplate || state.server.get(\\\"tiddler-render-template\\\");\\n\\t\\t}\\n\\t\\tvar text = state.wiki.renderTiddler(renderType,renderTemplate,{parseAsInline: true, variables: {currentTiddler: title}});\\n\\n\\t\\t// Naughty not to set a content-type, but it's the easiest way to ensure the browser will see HTML pages as HTML, and accept plain text tiddlers as CSS or JS\\n\\t\\tstate.sendResponse(200,{},text,\\\"utf8\\\");\\n\\t} else {\\n\\t\\tresponse.writeHead(404);\\n\\t\\tresponse.end();\\n\\t}\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-tiddler.js\":{\"title\":\"$:/core/modules/server/routes/get-tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-tiddler.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /recipes/default/tiddlers/:title\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/recipes\\\\/default\\\\/tiddlers\\\\/(.+)$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar title = $tw.utils.decodeURIComponentSafe(state.params[0]),\\n\\t\\ttiddler = state.wiki.getTiddler(title),\\n\\t\\ttiddlerFields = {},\\n\\t\\tknownFields = [\\n\\t\\t\\t\\\"bag\\\", \\\"created\\\", \\\"creator\\\", \\\"modified\\\", \\\"modifier\\\", \\\"permissions\\\", \\\"recipe\\\", \\\"revision\\\", \\\"tags\\\", \\\"text\\\", \\\"title\\\", \\\"type\\\", \\\"uri\\\"\\n\\t\\t];\\n\\tif(tiddler) {\\n\\t\\t$tw.utils.each(tiddler.fields,function(field,name) {\\n\\t\\t\\tvar value = tiddler.getFieldString(name);\\n\\t\\t\\tif(knownFields.indexOf(name) !== -1) {\\n\\t\\t\\t\\ttiddlerFields[name] = value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttiddlerFields.fields = tiddlerFields.fields || {};\\n\\t\\t\\t\\ttiddlerFields.fields[name] = value;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\ttiddlerFields.revision = state.wiki.getChangeCount(title);\\n\\t\\ttiddlerFields.bag = \\\"default\\\";\\n\\t\\ttiddlerFields.type = tiddlerFields.type || \\\"text/vnd.tiddlywiki\\\";\\n\\t\\tstate.sendResponse(200,{\\\"Content-Type\\\": \\\"application/json\\\"},JSON.stringify(tiddlerFields),\\\"utf8\\\");\\n\\t} else {\\n\\t\\tresponse.writeHead(404);\\n\\t\\tresponse.end();\\n\\t}\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/get-tiddlers-json.js\":{\"title\":\"$:/core/modules/server/routes/get-tiddlers-json.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/get-tiddlers-json.js\\ntype: application/javascript\\nmodule-type: route\\n\\nGET /recipes/default/tiddlers.json?filter=\u003Cfilter>\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar DEFAULT_FILTER = \\\"[all[tiddlers]!is[system]sort[title]]\\\";\\n\\nexports.method = \\\"GET\\\";\\n\\nexports.path = /^\\\\/recipes\\\\/default\\\\/tiddlers.json$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar filter = state.queryParameters.filter || DEFAULT_FILTER;\\n\\tif(state.wiki.getTiddlerText(\\\"$:/config/Server/AllowAllExternalFilters\\\") !== \\\"yes\\\") {\\n\\t\\tif(state.wiki.getTiddlerText(\\\"$:/config/Server/ExternalFilters/\\\" + filter) !== \\\"yes\\\") {\\n\\t\\t\\tconsole.log(\\\"Blocked attempt to GET /recipes/default/tiddlers.json with filter: \\\" + filter);\\n\\t\\t\\tresponse.writeHead(403);\\n\\t\\t\\tresponse.end();\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\tif(state.wiki.getTiddlerText(\\\"$:/config/SyncSystemTiddlersFromServer\\\") === \\\"no\\\") {\\n\\t\\tfilter += \\\"+[!is[system]]\\\";\\n\\t}\\n\\tvar excludeFields = (state.queryParameters.exclude || \\\"text\\\").split(\\\",\\\"),\\n\\t\\ttitles = state.wiki.filterTiddlers(filter);\\n\\tvar tiddlers = [];\\n\\t$tw.utils.each(titles,function(title) {\\n\\t\\tvar tiddler = state.wiki.getTiddler(title);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tvar tiddlerFields = tiddler.getFieldStrings({exclude: excludeFields});\\n\\t\\t\\ttiddlerFields.revision = state.wiki.getChangeCount(title);\\n\\t\\t\\ttiddlerFields.type = tiddlerFields.type || \\\"text/vnd.tiddlywiki\\\";\\n\\t\\t\\ttiddlers.push(tiddlerFields);\\n\\t\\t}\\n\\t});\\n\\tvar text = JSON.stringify(tiddlers);\\n\\tstate.sendResponse(200,{\\\"Content-Type\\\": \\\"application/json\\\"},text,\\\"utf8\\\");\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/routes/put-tiddler.js\":{\"title\":\"$:/core/modules/server/routes/put-tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/routes/put-tiddler.js\\ntype: application/javascript\\nmodule-type: route\\n\\nPUT /recipes/default/tiddlers/:title\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.method = \\\"PUT\\\";\\n\\nexports.path = /^\\\\/recipes\\\\/default\\\\/tiddlers\\\\/(.+)$/;\\n\\nexports.handler = function(request,response,state) {\\n\\tvar title = $tw.utils.decodeURIComponentSafe(state.params[0]),\\n\\tfields = $tw.utils.parseJSONSafe(state.data);\\n\\t// Pull up any subfields in the `fields` object\\n\\tif(fields.fields) {\\n\\t\\t$tw.utils.each(fields.fields,function(field,name) {\\n\\t\\t\\tfields[name] = field;\\n\\t\\t});\\n\\t\\tdelete fields.fields;\\n\\t}\\n\\t// Remove any revision field\\n\\tif(fields.revision) {\\n\\t\\tdelete fields.revision;\\n\\t}\\n\\tstate.wiki.addTiddler(new $tw.Tiddler(fields,{title: title}));\\n\\tvar changeCount = state.wiki.getChangeCount(title).toString();\\n\\tresponse.writeHead(204, \\\"OK\\\",{\\n\\t\\tEtag: \\\"\\\\\\\"default/\\\" + encodeURIComponent(title) + \\\"/\\\" + changeCount + \\\":\\\\\\\"\\\",\\n\\t\\t\\\"Content-Type\\\": \\\"text/plain\\\"\\n\\t});\\n\\tresponse.end();\\n};\\n\\n}());\\n\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/core/modules/server/server.js\":{\"title\":\"$:/core/modules/server/server.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/server/server.js\\ntype: application/javascript\\nmodule-type: library\\n\\nServe tiddlers over http\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nif($tw.node) {\\n\\tvar util = require(\\\"util\\\"),\\n\\t\\tfs = require(\\\"fs\\\"),\\n\\t\\turl = require(\\\"url\\\"),\\n\\t\\tpath = require(\\\"path\\\"),\\n\\t\\tquerystring = require(\\\"querystring\\\"),\\n\\t\\tcrypto = require(\\\"crypto\\\"),\\n\\t\\tzlib = require(\\\"zlib\\\");\\n}\\n\\n/*\\nA simple HTTP server with regexp-based routes\\noptions: variables - optional hashmap of variables to set (a misnomer - they are really constant parameters)\\n\\t\\t routes - optional array of routes to use\\n\\t\\t wiki - reference to wiki object\\n*/\\nfunction Server(options) {\\n\\tvar self = this;\\n\\tthis.routes = options.routes || [];\\n\\tthis.authenticators = options.authenticators || [];\\n\\tthis.wiki = options.wiki;\\n\\tthis.boot = options.boot || $tw.boot;\\n\\t// Initialise the variables\\n\\tthis.variables = $tw.utils.extend({},this.defaultVariables);\\n\\tif(options.variables) {\\n\\t\\tfor(var variable in options.variables) {\\n\\t\\t\\tif(options.variables[variable]) {\\n\\t\\t\\t\\tthis.variables[variable] = options.variables[variable];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Setup the default required plugins\\n\\tthis.requiredPlugins = this.get(\\\"required-plugins\\\").split(',');\\n\\t// Initialise CSRF\\n\\tthis.csrfDisable = this.get(\\\"csrf-disable\\\") === \\\"yes\\\";\\n\\t// Initialize Gzip compression\\n\\tthis.enableGzip = this.get(\\\"gzip\\\") === \\\"yes\\\";\\n\\t// Initialize browser-caching\\n\\tthis.enableBrowserCache = this.get(\\\"use-browser-cache\\\") === \\\"yes\\\";\\n\\t// Initialise authorization\\n\\tvar authorizedUserName;\\n\\tif(this.get(\\\"username\\\") && this.get(\\\"password\\\")) {\\n\\t\\tauthorizedUserName = this.get(\\\"username\\\");\\n\\t} else if(this.get(\\\"credentials\\\")) {\\n\\t\\tauthorizedUserName = \\\"(authenticated)\\\";\\n\\t} else {\\n\\t\\tauthorizedUserName = \\\"(anon)\\\";\\n\\t}\\n\\tthis.authorizationPrincipals = {\\n\\t\\treaders: (this.get(\\\"readers\\\") || authorizedUserName).split(\\\",\\\").map($tw.utils.trim),\\n\\t\\twriters: (this.get(\\\"writers\\\") || authorizedUserName).split(\\\",\\\").map($tw.utils.trim)\\n\\t}\\n\\tif(this.get(\\\"admin\\\") || authorizedUserName !== \\\"(anon)\\\") {\\n\\t\\tthis.authorizationPrincipals[\\\"admin\\\"] = (this.get(\\\"admin\\\") || authorizedUserName).split(',').map($tw.utils.trim)\\n\\t}\\n\\t// Load and initialise authenticators\\n\\t$tw.modules.forEachModuleOfType(\\\"authenticator\\\", function(title,authenticatorDefinition) {\\n\\t\\t// console.log(\\\"Loading authenticator \\\" + title);\\n\\t\\tself.addAuthenticator(authenticatorDefinition.AuthenticatorClass);\\n\\t});\\n\\t// Load route handlers\\n\\t$tw.modules.forEachModuleOfType(\\\"route\\\", function(title,routeDefinition) {\\n\\t\\t// console.log(\\\"Loading server route \\\" + title);\\n\\t\\tself.addRoute(routeDefinition);\\n\\t});\\n\\t// Initialise the http vs https\\n\\tthis.listenOptions = null;\\n\\tthis.protocol = \\\"http\\\";\\n\\tvar tlsKeyFilepath = this.get(\\\"tls-key\\\"),\\n\\t\\ttlsCertFilepath = this.get(\\\"tls-cert\\\"),\\n\\t\\ttlsPassphrase = this.get(\\\"tls-passphrase\\\");\\n\\tif(tlsCertFilepath && tlsKeyFilepath) {\\n\\t\\tthis.listenOptions = {\\n\\t\\t\\tkey: fs.readFileSync(path.resolve(this.boot.wikiPath,tlsKeyFilepath),\\\"utf8\\\"),\\n\\t\\t\\tcert: fs.readFileSync(path.resolve(this.boot.wikiPath,tlsCertFilepath),\\\"utf8\\\"),\\n\\t\\t\\tpassphrase: tlsPassphrase || ''\\n\\t\\t};\\n\\t\\tthis.protocol = \\\"https\\\";\\n\\t}\\n\\tthis.transport = require(this.protocol);\\n\\t// Name the server and init the boot state\\n\\tthis.servername = $tw.utils.transliterateToSafeASCII(this.get(\\\"server-name\\\") || this.wiki.getTiddlerText(\\\"$:/SiteTitle\\\") || \\\"TiddlyWiki5\\\");\\n\\tthis.boot.origin = this.get(\\\"origin\\\")? this.get(\\\"origin\\\"): this.protocol+\\\"://\\\"+this.get(\\\"host\\\")+\\\":\\\"+this.get(\\\"port\\\");\\n\\tthis.boot.pathPrefix = this.get(\\\"path-prefix\\\") || \\\"\\\";\\n}\\n\\n/*\\nSend a response to the client. This method checks if the response must be sent\\nor if the client alrady has the data cached. If that's the case only a 304\\nresponse will be transmitted and the browser will use the cached data.\\nOnly requests with status code 200 are considdered for caching.\\nrequest: request instance passed to the handler\\nresponse: response instance passed to the handler\\nstatusCode: stauts code to send to the browser\\nheaders: response headers (they will be augmented with an `Etag` header)\\ndata: the data to send (passed to the end method of the response instance)\\nencoding: the encoding of the data to send (passed to the end method of the response instance)\\n*/\\nfunction sendResponse(request,response,statusCode,headers,data,encoding) {\\n\\tif(this.enableBrowserCache && (statusCode == 200)) {\\n\\t\\tvar hash = crypto.createHash('md5');\\n\\t\\t// Put everything into the hash that could change and invalidate the data that\\n\\t\\t// the browser already stored. The headers the data and the encoding.\\n\\t\\thash.update(data);\\n\\t\\thash.update(JSON.stringify(headers));\\n\\t\\tif(encoding) {\\n\\t\\t\\thash.update(encoding);\\n\\t\\t}\\n\\t\\tvar contentDigest = hash.digest(\\\"hex\\\");\\n\\t\\t// RFC 7232 section 2.3 mandates for the etag to be enclosed in quotes\\n\\t\\theaders[\\\"Etag\\\"] = '\\\"' + contentDigest + '\\\"';\\n\\t\\theaders[\\\"Cache-Control\\\"] = \\\"max-age=0, must-revalidate\\\";\\n\\t\\t// Check if any of the hashes contained within the if-none-match header\\n\\t\\t// matches the current hash.\\n\\t\\t// If one matches, do not send the data but tell the browser to use the\\n\\t\\t// cached data.\\n\\t\\t// We do not implement \\\"*\\\" as it makes no sense here.\\n\\t\\tvar ifNoneMatch = request.headers[\\\"if-none-match\\\"];\\n\\t\\tif(ifNoneMatch) {\\n\\t\\t\\tvar matchParts = ifNoneMatch.split(\\\",\\\").map(function(etag) {\\n\\t\\t\\t\\treturn etag.replace(/^[ \\\"]+|[ \\\"]+$/g, \\\"\\\");\\n\\t\\t\\t});\\n\\t\\t\\tif(matchParts.indexOf(contentDigest) != -1) {\\n\\t\\t\\t\\tresponse.writeHead(304,headers);\\n\\t\\t\\t\\tresponse.end();\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t/*\\n\\tIf the gzip=yes is set, check if the user agent permits compression. If so,\\n\\tcompress our response if the raw data is bigger than 2k. Compressing less\\n\\tdata is inefficient. Note that we use the synchronous functions from zlib\\n\\tto stay in the imperative style. The current `Server` doesn't depend on\\n\\tthis, and we may just as well use the async versions.\\n\\t*/\\n\\tif(this.enableGzip && (data.length > 2048)) {\\n\\t\\tvar acceptEncoding = request.headers[\\\"accept-encoding\\\"] || \\\"\\\";\\n\\t\\tif(/\\\\bdeflate\\\\b/.test(acceptEncoding)) {\\n\\t\\t\\theaders[\\\"Content-Encoding\\\"] = \\\"deflate\\\";\\n\\t\\t\\tdata = zlib.deflateSync(data);\\n\\t\\t} else if(/\\\\bgzip\\\\b/.test(acceptEncoding)) {\\n\\t\\t\\theaders[\\\"Content-Encoding\\\"] = \\\"gzip\\\";\\n\\t\\t\\tdata = zlib.gzipSync(data);\\n\\t\\t}\\n\\t}\\n\\n\\tresponse.writeHead(statusCode,headers);\\n\\tresponse.end(data,encoding);\\n}\\n\\nServer.prototype.defaultVariables = {\\n\\tport: \\\"8080\\\",\\n\\thost: \\\"127.0.0.1\\\",\\n\\t\\\"required-plugins\\\": \\\"$:/plugins/tiddlywiki/filesystem,$:/plugins/tiddlywiki/tiddlyweb\\\",\\n\\t\\\"root-tiddler\\\": \\\"$:/core/save/all\\\",\\n\\t\\\"root-render-type\\\": \\\"text/plain\\\",\\n\\t\\\"root-serve-type\\\": \\\"text/html\\\",\\n\\t\\\"tiddler-render-type\\\": \\\"text/html\\\",\\n\\t\\\"tiddler-render-template\\\": \\\"$:/core/templates/server/static.tiddler.html\\\",\\n\\t\\\"system-tiddler-render-type\\\": \\\"text/plain\\\",\\n\\t\\\"system-tiddler-render-template\\\": \\\"$:/core/templates/wikified-tiddler\\\",\\n\\t\\\"debug-level\\\": \\\"none\\\",\\n\\t\\\"gzip\\\": \\\"no\\\",\\n\\t\\\"use-browser-cache\\\": \\\"no\\\"\\n};\\n\\nServer.prototype.get = function(name) {\\n\\treturn this.variables[name];\\n};\\n\\nServer.prototype.addRoute = function(route) {\\n\\tthis.routes.push(route);\\n};\\n\\nServer.prototype.addAuthenticator = function(AuthenticatorClass) {\\n\\t// Instantiate and initialise the authenticator\\n\\tvar authenticator = new AuthenticatorClass(this),\\n\\t\\tresult = authenticator.init();\\n\\tif(typeof result === \\\"string\\\") {\\n\\t\\t$tw.utils.error(\\\"Error: \\\" + result);\\n\\t} else if(result) {\\n\\t\\t// Only use the authenticator if it initialised successfully\\n\\t\\tthis.authenticators.push(authenticator);\\n\\t}\\n};\\n\\nServer.prototype.findMatchingRoute = function(request,state) {\\n\\tfor(var t=0; t\u003Cthis.routes.length; t++) {\\n\\t\\tvar potentialRoute = this.routes[t],\\n\\t\\t\\tpathRegExp = potentialRoute.path,\\n\\t\\t\\tpathname = state.urlInfo.pathname,\\n\\t\\t\\tmatch;\\n\\t\\tif(state.pathPrefix) {\\n\\t\\t\\tif(pathname.substr(0,state.pathPrefix.length) === state.pathPrefix) {\\n\\t\\t\\t\\tpathname = pathname.substr(state.pathPrefix.length) || \\\"/\\\";\\n\\t\\t\\t\\tmatch = potentialRoute.path.exec(pathname);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmatch = false;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tmatch = potentialRoute.path.exec(pathname);\\n\\t\\t}\\n\\t\\tif(match && request.method === potentialRoute.method) {\\n\\t\\t\\tstate.params = [];\\n\\t\\t\\tfor(var p=1; p\u003Cmatch.length; p++) {\\n\\t\\t\\t\\tstate.params.push(match[p]);\\n\\t\\t\\t}\\n\\t\\t\\treturn potentialRoute;\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\nServer.prototype.methodMappings = {\\n\\t\\\"GET\\\": \\\"readers\\\",\\n\\t\\\"OPTIONS\\\": \\\"readers\\\",\\n\\t\\\"HEAD\\\": \\\"readers\\\",\\n\\t\\\"PUT\\\": \\\"writers\\\",\\n\\t\\\"POST\\\": \\\"writers\\\",\\n\\t\\\"DELETE\\\": \\\"writers\\\"\\n};\\n\\n/*\\nCheck whether a given user is authorized for the specified authorizationType (\\\"readers\\\" or \\\"writers\\\"). Pass null or undefined as the username to check for anonymous access\\n*/\\nServer.prototype.isAuthorized = function(authorizationType,username) {\\n\\tvar principals = this.authorizationPrincipals[authorizationType] || [];\\n\\treturn principals.indexOf(\\\"(anon)\\\") !== -1 || (username && (principals.indexOf(\\\"(authenticated)\\\") !== -1 || principals.indexOf(username) !== -1));\\n}\\n\\nServer.prototype.requestHandler = function(request,response,options) {\\n\\toptions = options || {};\\n\\t// Compose the state object\\n\\tvar self = this;\\n\\tvar state = {};\\n\\tstate.wiki = options.wiki || self.wiki;\\n\\tstate.boot = options.boot || self.boot;\\n\\tstate.server = self;\\n\\tstate.urlInfo = url.parse(request.url);\\n\\tstate.queryParameters = querystring.parse(state.urlInfo.query);\\n\\tstate.pathPrefix = options.pathPrefix || this.get(\\\"path-prefix\\\") || \\\"\\\";\\n\\tstate.sendResponse = sendResponse.bind(self,request,response);\\n\\t// Get the principals authorized to access this resource\\n\\tstate.authorizationType = options.authorizationType || this.methodMappings[request.method] || \\\"readers\\\";\\n\\t// Check for the CSRF header if this is a write\\n\\tif(!this.csrfDisable && state.authorizationType === \\\"writers\\\" && request.headers[\\\"x-requested-with\\\"] !== \\\"TiddlyWiki\\\") {\\n\\t\\tresponse.writeHead(403,\\\"'X-Requested-With' header required to login to '\\\" + this.servername + \\\"'\\\");\\n\\t\\tresponse.end();\\n\\t\\treturn;\\n\\t}\\n\\t// Check whether anonymous access is granted\\n\\tstate.allowAnon = this.isAuthorized(state.authorizationType,null);\\n\\t// Authenticate with the first active authenticator\\n\\tif(this.authenticators.length > 0) {\\n\\t\\tif(!this.authenticators[0].authenticateRequest(request,response,state)) {\\n\\t\\t\\t// Bail if we failed (the authenticator will have sent the response)\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\t// Authorize with the authenticated username\\n\\tif(!this.isAuthorized(state.authorizationType,state.authenticatedUsername)) {\\n\\t\\tresponse.writeHead(401,\\\"'\\\" + state.authenticatedUsername + \\\"' is not authorized to access '\\\" + this.servername + \\\"'\\\");\\n\\t\\tresponse.end();\\n\\t\\treturn;\\n\\t}\\n\\t// Find the route that matches this path\\n\\tvar route = self.findMatchingRoute(request,state);\\n\\t// Optionally output debug info\\n\\tif(self.get(\\\"debug-level\\\") !== \\\"none\\\") {\\n\\t\\tconsole.log(\\\"Request path:\\\",JSON.stringify(state.urlInfo));\\n\\t\\tconsole.log(\\\"Request headers:\\\",JSON.stringify(request.headers));\\n\\t\\tconsole.log(\\\"authenticatedUsername:\\\",state.authenticatedUsername);\\n\\t}\\n\\t// Return a 404 if we didn't find a route\\n\\tif(!route) {\\n\\t\\tresponse.writeHead(404);\\n\\t\\tresponse.end();\\n\\t\\treturn;\\n\\t}\\n\\t// Receive the request body if necessary and hand off to the route handler\\n\\tif(route.bodyFormat === \\\"stream\\\" || request.method === \\\"GET\\\" || request.method === \\\"HEAD\\\") {\\n\\t\\t// Let the route handle the request stream itself\\n\\t\\troute.handler(request,response,state);\\n\\t} else if(route.bodyFormat === \\\"string\\\" || !route.bodyFormat) {\\n\\t\\t// Set the encoding for the incoming request\\n\\t\\trequest.setEncoding(\\\"utf8\\\");\\n\\t\\tvar data = \\\"\\\";\\n\\t\\trequest.on(\\\"data\\\",function(chunk) {\\n\\t\\t\\tdata += chunk.toString();\\n\\t\\t});\\n\\t\\trequest.on(\\\"end\\\",function() {\\n\\t\\t\\tstate.data = data;\\n\\t\\t\\troute.handler(request,response,state);\\n\\t\\t});\\n\\t} else if(route.bodyFormat === \\\"buffer\\\") {\\n\\t\\tvar data = [];\\n\\t\\trequest.on(\\\"data\\\",function(chunk) {\\n\\t\\t\\tdata.push(chunk);\\n\\t\\t});\\n\\t\\trequest.on(\\\"end\\\",function() {\\n\\t\\t\\tstate.data = Buffer.concat(data);\\n\\t\\t\\troute.handler(request,response,state);\\n\\t\\t})\\n\\t} else {\\n\\t\\tresponse.writeHead(400,\\\"Invalid bodyFormat \\\" + route.bodyFormat + \\\" in route \\\" + route.method + \\\" \\\" + route.path.source);\\n\\t\\tresponse.end();\\n\\t}\\n};\\n\\n/*\\nListen for requests\\nport: optional port number (falls back to value of \\\"port\\\" variable)\\nhost: optional host address (falls back to value of \\\"host\\\" variable)\\nprefix: optional prefix (falls back to value of \\\"path-prefix\\\" variable)\\n*/\\nServer.prototype.listen = function(port,host,prefix) {\\n\\tvar self = this;\\n\\t// Handle defaults for port and host\\n\\tport = port || this.get(\\\"port\\\");\\n\\thost = host || this.get(\\\"host\\\");\\n\\tprefix = prefix || this.get(\\\"path-prefix\\\") || \\\"\\\";\\n\\t// Check for the port being a string and look it up as an environment variable\\n\\tif(parseInt(port,10).toString() !== port) {\\n\\t\\tport = process.env[port] || 8080;\\n\\t}\\n\\t// Warn if required plugins are missing\\n\\tvar missing = [];\\n\\tfor (var index=0; index\u003Cthis.requiredPlugins.length; index++) {\\n\\t\\tif (!this.wiki.getTiddler(this.requiredPlugins[index])) {\\n\\t\\t\\tmissing.push(this.requiredPlugins[index]);\\n\\t\\t}\\n\\t}\\n\\tif(missing.length > 0) {\\n\\t\\tvar error = \\\"Warning: Plugin(s) required for client-server operation are missing.\\\\n\\\"+\\n\\t\\t\\t\\\"\\\\\\\"\\\"+ missing.join(\\\"\\\\\\\", \\\\\\\"\\\")+\\\"\\\\\\\"\\\";\\n\\t\\t$tw.utils.warning(error);\\n\\t}\\n\\t// Create the server\\n\\tvar server;\\n\\tif(this.listenOptions) {\\n\\t\\tserver = this.transport.createServer(this.listenOptions,this.requestHandler.bind(this));\\n\\t} else {\\n\\t\\tserver = this.transport.createServer(this.requestHandler.bind(this));\\n\\t}\\n\\t// Display the port number after we've started listening (the port number might have been specified as zero, in which case we will get an assigned port)\\n\\tserver.on(\\\"listening\\\",function() {\\n\\t\\tvar address = server.address();\\n\\t\\t$tw.utils.log(\\\"Serving on \\\" + self.protocol + \\\"://\\\" + address.address + \\\":\\\" + address.port + prefix,\\\"brown/orange\\\");\\n\\t\\t$tw.utils.log(\\\"(press ctrl-C to exit)\\\",\\\"red\\\");\\n\\t});\\n\\t// Listen\\n\\treturn server.listen(port,host);\\n};\\n\\nexports.Server = Server;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/core/modules/browser-messaging.js\":{\"title\":\"$:/core/modules/browser-messaging.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/browser-messaging.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nBrowser message handling\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"browser-messaging\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n/*\\nLoad a specified url as an iframe and call the callback when it is loaded. If the url is already loaded then the existing iframe instance is used\\n*/\\nfunction loadIFrame(url,callback) {\\n\\t// Check if iframe already exists\\n\\tvar iframeInfo = $tw.browserMessaging.iframeInfoMap[url];\\n\\tif(iframeInfo) {\\n\\t\\t// We've already got the iframe\\n\\t\\tcallback(null,iframeInfo);\\n\\t} else {\\n\\t\\t// Create the iframe and save it in the list\\n\\t\\tvar iframe = document.createElement(\\\"iframe\\\");\\n\\t\\tiframeInfo = {\\n\\t\\t\\turl: url,\\n\\t\\t\\tstatus: \\\"loading\\\",\\n\\t\\t\\tdomNode: iframe\\n\\t\\t};\\n\\t\\t$tw.browserMessaging.iframeInfoMap[url] = iframeInfo;\\n\\t\\tsaveIFrameInfoTiddler(iframeInfo);\\n\\t\\t// Add the iframe to the DOM and hide it\\n\\t\\tiframe.style.display = \\\"none\\\";\\n\\t\\tiframe.setAttribute(\\\"library\\\",\\\"true\\\");\\n\\t\\tdocument.body.appendChild(iframe);\\n\\t\\t// Set up onload\\n\\t\\tiframe.onload = function() {\\n\\t\\t\\tiframeInfo.status = \\\"loaded\\\";\\n\\t\\t\\tsaveIFrameInfoTiddler(iframeInfo);\\n\\t\\t\\tcallback(null,iframeInfo);\\n\\t\\t};\\n\\t\\tiframe.onerror = function() {\\n\\t\\t\\tcallback(\\\"Cannot load iframe\\\");\\n\\t\\t};\\n\\t\\ttry {\\n\\t\\t\\tiframe.src = url;\\n\\t\\t} catch(ex) {\\n\\t\\t\\tcallback(ex);\\n\\t\\t}\\n\\t}\\n}\\n\\n/*\\nUnload library iframe for given url\\n*/\\nfunction unloadIFrame(url){\\n\\t$tw.utils.each(document.getElementsByTagName('iframe'), function(iframe) {\\n\\t\\tif(iframe.getAttribute(\\\"library\\\") === \\\"true\\\" &&\\n\\t\\t  iframe.getAttribute(\\\"src\\\") === url) {\\n\\t\\t\\tiframe.parentNode.removeChild(iframe);\\n\\t\\t}\\n\\t});\\n}\\n\\nfunction saveIFrameInfoTiddler(iframeInfo) {\\n\\t$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getCreationFields(),{\\n\\t\\ttitle: \\\"$:/temp/ServerConnection/\\\" + iframeInfo.url,\\n\\t\\ttext: iframeInfo.status,\\n\\t\\ttags: [\\\"$:/tags/ServerConnection\\\"],\\n\\t\\turl: iframeInfo.url\\n\\t},$tw.wiki.getModificationFields()));\\n}\\n\\nexports.startup = function() {\\n\\t// Initialise the store of iframes we've created\\n\\t$tw.browserMessaging = {\\n\\t\\tiframeInfoMap: {} // Hashmap by URL of {url:,status:\\\"loading/loaded\\\",domNode:}\\n\\t};\\n\\t// Listen for widget messages to control loading the plugin library\\n\\t$tw.rootWidget.addEventListener(\\\"tm-load-plugin-library\\\",function(event) {\\n\\t\\tvar paramObject = event.paramObject || {},\\n\\t\\t\\turl = paramObject.url;\\n\\t\\tif(url) {\\n\\t\\t\\tloadIFrame(url,function(err,iframeInfo) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\talert($tw.language.getString(\\\"Error/LoadingPluginLibrary\\\") + \\\": \\\" + url);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tiframeInfo.domNode.contentWindow.postMessage({\\n\\t\\t\\t\\t\\t\\tverb: \\\"GET\\\",\\n\\t\\t\\t\\t\\t\\turl: \\\"recipes/library/tiddlers.json\\\",\\n\\t\\t\\t\\t\\t\\tcookies: {\\n\\t\\t\\t\\t\\t\\t\\ttype: \\\"save-info\\\",\\n\\t\\t\\t\\t\\t\\t\\tinfoTitlePrefix: paramObject.infoTitlePrefix || \\\"$:/temp/RemoteAssetInfo/\\\",\\n\\t\\t\\t\\t\\t\\t\\turl: url\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t},\\\"*\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t// Listen for widget messages to control unloading the plugin library\\n\\t$tw.rootWidget.addEventListener(\\\"tm-unload-plugin-library\\\",function(event) {\\n\\t\\tvar paramObject = event.paramObject || {},\\n\\t\\t\\turl = paramObject.url;\\n\\t\\t$tw.browserMessaging.iframeInfoMap[url] = undefined;\\n\\t\\tif(url) {\\n\\t\\t\\tunloadIFrame(url);\\n\\t\\t\\t$tw.utils.each(\\n\\t\\t\\t\\t$tw.wiki.filterTiddlers(\\\"[[$:/temp/ServerConnection/\\\" + url + \\\"]] [prefix[$:/temp/RemoteAssetInfo/\\\" + url + \\\"/]]\\\"),\\n\\t\\t\\t\\tfunction(title) {\\n\\t\\t\\t\\t\\t$tw.wiki.deleteTiddler(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t);\\n\\t\\t}\\n\\t});\\n\\t$tw.rootWidget.addEventListener(\\\"tm-load-plugin-from-library\\\",function(event) {\\n\\t\\tvar paramObject = event.paramObject || {},\\n\\t\\t\\turl = paramObject.url,\\n\\t\\t\\ttitle = paramObject.title;\\n\\t\\tif(url && title) {\\n\\t\\t\\tloadIFrame(url,function(err,iframeInfo) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\talert($tw.language.getString(\\\"Error/LoadingPluginLibrary\\\") + \\\": \\\" + url);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tiframeInfo.domNode.contentWindow.postMessage({\\n\\t\\t\\t\\t\\t\\tverb: \\\"GET\\\",\\n\\t\\t\\t\\t\\t\\turl: \\\"recipes/library/tiddlers/\\\" + encodeURIComponent(title) + \\\".json\\\",\\n\\t\\t\\t\\t\\t\\tcookies: {\\n\\t\\t\\t\\t\\t\\t\\ttype: \\\"save-tiddler\\\",\\n\\t\\t\\t\\t\\t\\t\\turl: url\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t},\\\"*\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t// Listen for window messages from other windows\\n\\twindow.addEventListener(\\\"message\\\",function listener(event){\\n\\t\\t// console.log(\\\"browser-messaging: \\\",document.location.toString())\\n\\t\\t// console.log(\\\"browser-messaging: Received message from\\\",event.origin);\\n\\t\\t// console.log(\\\"browser-messaging: Message content\\\",event.data);\\n\\t\\tswitch(event.data.verb) {\\n\\t\\t\\tcase \\\"GET-RESPONSE\\\":\\n\\t\\t\\t\\tif(event.data.status.charAt(0) === \\\"2\\\") {\\n\\t\\t\\t\\t\\tif(event.data.cookies) {\\n\\t\\t\\t\\t\\t\\tif(event.data.cookies.type === \\\"save-info\\\") {\\n\\t\\t\\t\\t\\t\\t\\tvar tiddlers = $tw.utils.parseJSONSafe(event.data.body);\\n\\t\\t\\t\\t\\t\\t\\t$tw.utils.each(tiddlers,function(tiddler) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getCreationFields(),tiddler,{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle: event.data.cookies.infoTitlePrefix + event.data.cookies.url + \\\"/\\\" + tiddler.title,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"original-title\\\": tiddler.title,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttext: \\\"\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype: \\\"text/vnd.tiddlywiki\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"original-type\\\": tiddler.type,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"plugin-type\\\": undefined,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"original-plugin-type\\\": tiddler[\\\"plugin-type\\\"],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"module-type\\\": undefined,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"original-module-type\\\": tiddler[\\\"module-type\\\"],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttags: [\\\"$:/tags/RemoteAssetInfo\\\"],\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"original-tags\\\": $tw.utils.stringifyList(tiddler.tags || []),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\"server-url\\\": event.data.cookies.url\\n\\t\\t\\t\\t\\t\\t\\t\\t},$tw.wiki.getModificationFields()));\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t} else if(event.data.cookies.type === \\\"save-tiddler\\\") {\\n\\t\\t\\t\\t\\t\\t\\tvar tiddler = $tw.utils.parseJSONSafe(event.data.body);\\n\\t\\t\\t\\t\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler(tiddler));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t},false);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/commands.js\":{\"title\":\"$:/core/modules/startup/commands.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/commands.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nCommand processing\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"commands\\\";\\nexports.platforms = [\\\"node\\\"];\\nexports.after = [\\\"story\\\"];\\nexports.synchronous = false;\\n\\nexports.startup = function(callback) {\\n\\t// On the server, start a commander with the command line arguments\\n\\tvar commander = new $tw.Commander(\\n\\t\\t$tw.boot.argv,\\n\\t\\tfunction(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn $tw.utils.error(\\\"Error: \\\" + err);\\n\\t\\t\\t}\\n\\t\\t\\tcallback();\\n\\t\\t},\\n\\t\\t$tw.wiki,\\n\\t\\t{output: process.stdout, error: process.stderr}\\n\\t);\\n\\tcommander.execute();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/favicon.js\":{\"title\":\"$:/core/modules/startup/favicon.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/favicon.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nFavicon handling\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"favicon\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// Favicon tiddler\\nvar FAVICON_TITLE = \\\"$:/favicon.ico\\\";\\n\\nexports.startup = function() {\\n\\t// Set up the favicon\\n\\tsetFavicon();\\n\\t// Reset the favicon when the tiddler changes\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\tif($tw.utils.hop(changes,FAVICON_TITLE)) {\\n\\t\\t\\tsetFavicon();\\n\\t\\t}\\n\\t});\\n};\\n\\nfunction setFavicon() {\\n\\tvar tiddler = $tw.wiki.getTiddler(FAVICON_TITLE);\\n\\tif(tiddler) {\\n\\t\\tvar faviconLink = document.getElementById(\\\"faviconLink\\\");\\n\\t\\tfaviconLink.setAttribute(\\\"href\\\",$tw.utils.makeDataUri(tiddler.fields.text,tiddler.fields.type,tiddler.fields._canonical_uri));\\n\\t}\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/info.js\":{\"title\":\"$:/core/modules/startup/info.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/info.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nInitialise $:/info tiddlers via $:/temp/info-plugin pseudo-plugin\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"info\\\";\\nexports.before = [\\\"startup\\\"];\\nexports.after = [\\\"load-modules\\\"];\\nexports.synchronous = true;\\n\\nvar TITLE_INFO_PLUGIN = \\\"$:/temp/info-plugin\\\";\\n\\nexports.startup = function() {\\n\\t// Function to bake the info plugin with new tiddlers\\n\\tvar updateInfoPlugin = function(tiddlerFieldsArray) {\\n\\t\\t// Get the existing tiddlers\\n\\t\\tvar json = $tw.wiki.getTiddlerData(TITLE_INFO_PLUGIN,{tiddlers: {}});\\n\\t\\t// Add the new ones\\n\\t\\t$tw.utils.each(tiddlerFieldsArray,function(fields) {\\n\\t\\t\\tif(fields && fields.title) {\\n\\t\\t\\t\\tjson.tiddlers[fields.title] = fields;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Bake the info tiddlers into a plugin. We use the non-standard plugin-type \\\"info\\\" because ordinary plugins are only registered asynchronously after being loaded dynamically\\n\\t\\tvar fields = {\\n\\t\\t\\ttitle: TITLE_INFO_PLUGIN,\\n\\t\\t\\ttype: \\\"application/json\\\",\\n\\t\\t\\t\\\"plugin-type\\\": \\\"info\\\",\\n\\t\\t\\ttext: JSON.stringify(json,null,$tw.config.preferences.jsonSpaces)\\n\\t\\t};\\n\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler(fields));\\n\\n\\t};\\n\\t// Collect up the info tiddlers\\n\\tvar tiddlerFieldsArray = [];\\n\\t// Give each info module a chance to provide as many info tiddlers as they want as an array, and give them a callback for dynamically updating them\\n\\t$tw.modules.forEachModuleOfType(\\\"info\\\",function(title,moduleExports) {\\n\\t\\tif(moduleExports && moduleExports.getInfoTiddlerFields) {\\n\\t\\t\\tArray.prototype.push.apply(tiddlerFieldsArray,moduleExports.getInfoTiddlerFields(updateInfoPlugin));\\n\\t\\t}\\n\\t});\\n\\tupdateInfoPlugin(tiddlerFieldsArray);\\n\\tvar changes = $tw.wiki.readPluginInfo([TITLE_INFO_PLUGIN]);\\n\\t$tw.wiki.registerPluginTiddlers(\\\"info\\\",[TITLE_INFO_PLUGIN]);\\n\\t$tw.wiki.unpackPluginTiddlers();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/load-modules.js\":{\"title\":\"$:/core/modules/startup/load-modules.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/load-modules.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nLoad core modules\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"load-modules\\\";\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n\\t// Load modules\\n\\t$tw.modules.applyMethods(\\\"utils\\\",$tw.utils);\\n\\tif($tw.node) {\\n\\t\\t$tw.modules.applyMethods(\\\"utils-node\\\",$tw.utils);\\n\\t}\\n\\tif($tw.browser) {\\n\\t\\t$tw.modules.applyMethods(\\\"utils-browser\\\",$tw.utils);\\n\\t}\\n\\t$tw.modules.applyMethods(\\\"global\\\",$tw);\\n\\t$tw.modules.applyMethods(\\\"config\\\",$tw.config);\\n\\t$tw.Tiddler.fieldModules = $tw.modules.getModulesByTypeAsHashmap(\\\"tiddlerfield\\\");\\n\\t$tw.modules.applyMethods(\\\"tiddlermethod\\\",$tw.Tiddler.prototype);\\n\\t$tw.modules.applyMethods(\\\"wikimethod\\\",$tw.Wiki.prototype);\\n\\t$tw.wiki.addIndexersToWiki();\\n\\t$tw.modules.applyMethods(\\\"tiddlerdeserializer\\\",$tw.Wiki.tiddlerDeserializerModules);\\n\\t$tw.macros = $tw.modules.getModulesByTypeAsHashmap(\\\"macro\\\");\\n\\t$tw.wiki.initParsers();\\n\\t$tw.Commander.initCommands();\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/password.js\":{\"title\":\"$:/core/modules/startup/password.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/password.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nPassword handling\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"password\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n\\t$tw.rootWidget.addEventListener(\\\"tm-set-password\\\",function(event) {\\n\\t\\t$tw.passwordPrompt.createPrompt({\\n\\t\\t\\tserviceName: $tw.language.getString(\\\"Encryption/PromptSetPassword\\\"),\\n\\t\\t\\tnoUserName: true,\\n\\t\\t\\tsubmitText: $tw.language.getString(\\\"Encryption/SetPassword\\\"),\\n\\t\\t\\tcanCancel: true,\\n\\t\\t\\trepeatPassword: true,\\n\\t\\t\\tcallback: function(data) {\\n\\t\\t\\t\\tif(data) {\\n\\t\\t\\t\\t\\t$tw.crypto.setPassword(data.password);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn true; // Get rid of the password prompt\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\t$tw.rootWidget.addEventListener(\\\"tm-clear-password\\\",function(event) {\\n\\t\\tif($tw.browser) {\\n\\t\\t\\tif(!confirm($tw.language.getString(\\\"Encryption/ConfirmClearPassword\\\"))) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t$tw.crypto.setPassword(null);\\n\\t});\\n\\t// Ensure that $:/isEncrypted is maintained properly\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\tif($tw.utils.hop(changes,\\\"$:/isEncrypted\\\")) {\\n\\t\\t\\t$tw.crypto.updateCryptoStateTiddler();\\n\\t\\t}\\n\\t});\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/plugins.js\":{\"title\":\"$:/core/modules/startup/plugins.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/plugins.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nStartup logic concerned with managing plugins\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"plugins\\\";\\nexports.after = [\\\"load-modules\\\"];\\nexports.synchronous = true;\\n\\nvar TITLE_REQUIRE_RELOAD_DUE_TO_PLUGIN_CHANGE = \\\"$:/status/RequireReloadDueToPluginChange\\\";\\n\\nvar PREFIX_CONFIG_REGISTER_PLUGIN_TYPE = \\\"$:/config/RegisterPluginType/\\\";\\n\\nexports.startup = function() {\\n\\t$tw.wiki.addTiddler({title: TITLE_REQUIRE_RELOAD_DUE_TO_PLUGIN_CHANGE,text: \\\"no\\\"});\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t// Work out which of the changed tiddlers are plugins that we need to reregister\\n\\t\\tvar changesToProcess = [],\\n\\t\\t\\trequireReloadDueToPluginChange = false;\\n\\t\\t$tw.utils.each(Object.keys(changes),function(title) {\\n\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title),\\n\\t\\t\\t\\trequiresReload = $tw.wiki.doesPluginRequireReload(title);\\n\\t\\t\\tif(requiresReload) {\\n\\t\\t\\t\\trequireReloadDueToPluginChange = true;\\n\\t\\t\\t} else if(tiddler) {\\n\\t\\t\\t\\tvar pluginType = tiddler.fields[\\\"plugin-type\\\"];\\n\\t\\t\\t\\tif($tw.wiki.getTiddlerText(PREFIX_CONFIG_REGISTER_PLUGIN_TYPE + (tiddler.fields[\\\"plugin-type\\\"] || \\\"\\\"),\\\"no\\\") === \\\"yes\\\") {\\n\\t\\t\\t\\t\\tchangesToProcess.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Issue warning if any of the tiddlers require a reload\\n\\t\\tif(requireReloadDueToPluginChange) {\\n\\t\\t\\t$tw.wiki.addTiddler({title: TITLE_REQUIRE_RELOAD_DUE_TO_PLUGIN_CHANGE,text: \\\"yes\\\"});\\n\\t\\t}\\n\\t\\t// Read or delete the plugin info of the changed tiddlers\\n\\t\\tif(changesToProcess.length > 0) {\\n\\t\\t\\tvar changes = $tw.wiki.readPluginInfo(changesToProcess);\\n\\t\\t\\tif(changes.modifiedPlugins.length > 0 || changes.deletedPlugins.length > 0) {\\n\\t\\t\\t\\tvar changedShadowTiddlers = {};\\n\\t\\t\\t\\t// Collect the shadow tiddlers of any deleted plugins\\n\\t\\t\\t\\t$tw.utils.each(changes.deletedPlugins,function(pluginTitle) {\\n\\t\\t\\t\\t\\tvar pluginInfo = $tw.wiki.getPluginInfo(pluginTitle);\\n\\t\\t\\t\\t\\tif(pluginInfo) {\\n\\t\\t\\t\\t\\t\\t$tw.utils.each(Object.keys(pluginInfo.tiddlers),function(title) {\\n\\t\\t\\t\\t\\t\\t\\tchangedShadowTiddlers[title] = true;\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\t// Collect the shadow tiddlers of any modified plugins\\n\\t\\t\\t\\t$tw.utils.each(changes.modifiedPlugins,function(pluginTitle) {\\n\\t\\t\\t\\t\\tvar pluginInfo = $tw.wiki.getPluginInfo(pluginTitle);\\n\\t\\t\\t\\t\\tif(pluginInfo) {\\n\\t\\t\\t\\t\\t\\t$tw.utils.each(Object.keys(pluginInfo.tiddlers),function(title) {\\n\\t\\t\\t\\t\\t\\t\\tchangedShadowTiddlers[title] = false;\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\t// (Re-)register any modified plugins\\n\\t\\t\\t\\t$tw.wiki.registerPluginTiddlers(null,changes.modifiedPlugins);\\n\\t\\t\\t\\t// Unregister any deleted plugins\\n\\t\\t\\t\\t$tw.wiki.unregisterPluginTiddlers(null,changes.deletedPlugins);\\n\\t\\t\\t\\t// Unpack the shadow tiddlers\\n\\t\\t\\t\\t$tw.wiki.unpackPluginTiddlers();\\n\\t\\t\\t\\t// Queue change events for the changed shadow tiddlers\\n\\t\\t\\t\\t$tw.utils.each(Object.keys(changedShadowTiddlers),function(title) {\\n\\t\\t\\t\\t\\t$tw.wiki.enqueueTiddlerEvent(title,changedShadowTiddlers[title]);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/render.js\":{\"title\":\"$:/core/modules/startup/render.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/render.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nTitle, stylesheet and page rendering\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"render\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"story\\\"];\\nexports.synchronous = true;\\n\\n// Default story and history lists\\nvar PAGE_TITLE_TITLE = \\\"$:/core/wiki/title\\\";\\nvar PAGE_STYLESHEET_TITLE = \\\"$:/core/ui/PageStylesheet\\\";\\nvar PAGE_TEMPLATE_TITLE = \\\"$:/core/ui/RootTemplate\\\";\\n\\n// Time (in ms) that we defer refreshing changes to draft tiddlers\\nvar DRAFT_TIDDLER_TIMEOUT_TITLE = \\\"$:/config/Drafts/TypingTimeout\\\";\\nvar THROTTLE_REFRESH_TIMEOUT = 400;\\n\\nexports.startup = function() {\\n\\t// Set up the title\\n\\t$tw.titleWidgetNode = $tw.wiki.makeTranscludeWidget(PAGE_TITLE_TITLE,{document: $tw.fakeDocument, parseAsInline: true});\\n\\t$tw.titleContainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t$tw.titleWidgetNode.render($tw.titleContainer,null);\\n\\tdocument.title = $tw.titleContainer.textContent;\\n\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\tif($tw.titleWidgetNode.refresh(changes,$tw.titleContainer,null)) {\\n\\t\\t\\tdocument.title = $tw.titleContainer.textContent;\\n\\t\\t}\\n\\t});\\n\\t// Set up the styles\\n\\t$tw.styleWidgetNode = $tw.wiki.makeTranscludeWidget(PAGE_STYLESHEET_TITLE,{document: $tw.fakeDocument});\\n\\t$tw.styleContainer = $tw.fakeDocument.createElement(\\\"style\\\");\\n\\t$tw.styleWidgetNode.render($tw.styleContainer,null);\\n\\t$tw.styleWidgetNode.assignedStyles = $tw.styleContainer.textContent;\\n\\t$tw.styleElement = document.createElement(\\\"style\\\");\\n\\t$tw.styleElement.innerHTML = $tw.styleWidgetNode.assignedStyles;\\n\\tdocument.head.insertBefore($tw.styleElement,document.head.firstChild);\\n\\t$tw.wiki.addEventListener(\\\"change\\\",$tw.perf.report(\\\"styleRefresh\\\",function(changes) {\\n\\t\\tif($tw.styleWidgetNode.refresh(changes,$tw.styleContainer,null)) {\\n\\t\\t\\tvar newStyles = $tw.styleContainer.textContent;\\n\\t\\t\\tif(newStyles !== $tw.styleWidgetNode.assignedStyles) {\\n\\t\\t\\t\\t$tw.styleWidgetNode.assignedStyles = newStyles;\\n\\t\\t\\t\\t$tw.styleElement.innerHTML = $tw.styleWidgetNode.assignedStyles;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}));\\n\\t// Display the $:/core/ui/PageTemplate tiddler to kick off the display\\n\\t$tw.perf.report(\\\"mainRender\\\",function() {\\n\\t\\t$tw.pageWidgetNode = $tw.wiki.makeTranscludeWidget(PAGE_TEMPLATE_TITLE,{document: document, parentWidget: $tw.rootWidget, recursionMarker: \\\"no\\\"});\\n\\t\\t$tw.pageContainer = document.createElement(\\\"div\\\");\\n\\t\\t$tw.utils.addClass($tw.pageContainer,\\\"tc-page-container-wrapper\\\");\\n\\t\\tdocument.body.insertBefore($tw.pageContainer,document.body.firstChild);\\n\\t\\t$tw.pageWidgetNode.render($tw.pageContainer,null);\\n   \\t\\t$tw.hooks.invokeHook(\\\"th-page-refreshed\\\");\\n\\t})();\\n\\t// Remove any splash screen elements\\n\\tvar removeList = document.querySelectorAll(\\\".tc-remove-when-wiki-loaded\\\");\\n\\t$tw.utils.each(removeList,function(removeItem) {\\n\\t\\tif(removeItem.parentNode) {\\n\\t\\t\\tremoveItem.parentNode.removeChild(removeItem);\\n\\t\\t}\\n\\t});\\n\\t// Prepare refresh mechanism\\n\\tvar deferredChanges = Object.create(null),\\n\\t\\ttimerId;\\n\\tfunction refresh() {\\n\\t\\t// Process the refresh\\n\\t\\t$tw.hooks.invokeHook(\\\"th-page-refreshing\\\");\\n\\t\\t$tw.pageWidgetNode.refresh(deferredChanges);\\n\\t\\tdeferredChanges = Object.create(null);\\n\\t\\t$tw.hooks.invokeHook(\\\"th-page-refreshed\\\");\\n\\t}\\n\\t// Add the change event handler\\n\\t$tw.wiki.addEventListener(\\\"change\\\",$tw.perf.report(\\\"mainRefresh\\\",function(changes) {\\n\\t\\t// Check if only tiddlers that are throttled have changed\\n\\t\\tvar onlyThrottledTiddlersHaveChanged = true;\\n\\t\\tfor(var title in changes) {\\n\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\tif(!$tw.wiki.isVolatileTiddler(title) && (!tiddler || !(tiddler.hasField(\\\"draft.of\\\") || tiddler.hasField(\\\"throttle.refresh\\\")))) {\\n\\t\\t\\t\\tonlyThrottledTiddlersHaveChanged = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Defer the change if only drafts have changed\\n\\t\\tif(timerId) {\\n\\t\\t\\tclearTimeout(timerId);\\n\\t\\t}\\n\\t\\ttimerId = null;\\n\\t\\tif(onlyThrottledTiddlersHaveChanged) {\\n\\t\\t\\tvar timeout = parseInt($tw.wiki.getTiddlerText(DRAFT_TIDDLER_TIMEOUT_TITLE,\\\"\\\"),10);\\n\\t\\t\\tif(isNaN(timeout)) {\\n\\t\\t\\t\\ttimeout = THROTTLE_REFRESH_TIMEOUT;\\n\\t\\t\\t}\\n\\t\\t\\ttimerId = setTimeout(refresh,timeout);\\n\\t\\t\\t$tw.utils.extend(deferredChanges,changes);\\n\\t\\t} else {\\n\\t\\t\\t$tw.utils.extend(deferredChanges,changes);\\n\\t\\t\\trefresh();\\n\\t\\t}\\n\\t}));\\n\\t// Fix up the link between the root widget and the page container\\n\\t$tw.rootWidget.domNodes = [$tw.pageContainer];\\n\\t$tw.rootWidget.children = [$tw.pageWidgetNode];\\n\\t// Run any post-render startup actions\\n\\t$tw.rootWidget.invokeActionsByTag(\\\"$:/tags/StartupAction/PostRender\\\");\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/rootwidget.js\":{\"title\":\"$:/core/modules/startup/rootwidget.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/rootwidget.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nSetup the root widget and the core root widget handlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"rootwidget\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.before = [\\\"story\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n\\t// Install the modal message mechanism\\n\\t$tw.modal = new $tw.utils.Modal($tw.wiki);\\n\\t$tw.rootWidget.addEventListener(\\\"tm-modal\\\",function(event) {\\n\\t\\t$tw.modal.display(event.param,{variables: event.paramObject, event: event});\\n\\t});\\n\\t$tw.rootWidget.addEventListener(\\\"tm-show-switcher\\\",function(event) {\\n\\t\\t$tw.modal.display(\\\"$:/core/ui/SwitcherModal\\\",{variables: event.paramObject, event: event});\\n\\t});\\n\\t// Install the notification  mechanism\\n\\t$tw.notifier = new $tw.utils.Notifier($tw.wiki);\\n\\t$tw.rootWidget.addEventListener(\\\"tm-notify\\\",function(event) {\\n\\t\\t$tw.notifier.display(event.param,{variables: event.paramObject});\\n\\t});\\n\\t// Install the copy-to-clipboard  mechanism\\n\\t$tw.rootWidget.addEventListener(\\\"tm-copy-to-clipboard\\\",function(event) {\\n\\t\\t$tw.utils.copyToClipboard(event.param);\\n\\t});\\n\\t// Install the tm-focus-selector message\\n\\t$tw.rootWidget.addEventListener(\\\"tm-focus-selector\\\",function(event) {\\n\\t\\tvar selector = event.param || \\\"\\\",\\n\\t\\t\\telement,\\n\\t\\t    \\tdoc = event.event && event.event.target ? event.event.target.ownerDocument : document;\\n\\t\\ttry {\\n\\t\\t\\telement = doc.querySelector(selector);\\n\\t\\t} catch(e) {\\n\\t\\t\\tconsole.log(\\\"Error in selector: \\\",selector)\\n\\t\\t}\\n\\t\\tif(element && element.focus) {\\n\\t\\t\\telement.focus(event.paramObject);\\n\\t\\t}\\n\\t});\\n\\t// Install the tm-rename-tiddler and tm-relink-tiddler messages\\n\\tvar makeRenameHandler = function(method) {\\n\\t\\treturn function(event) {\\n\\t\\t\\tvar options = {},\\n\\t\\t\\t\\tparamObject = event.paramObject || {},\\n\\t\\t\\t\\tfrom = paramObject.from || event.tiddlerTitle,\\n\\t\\t\\t\\tto = paramObject.to;\\n\\t\\t\\toptions.dontRenameInTags = (paramObject.renameInTags === \\\"false\\\" || paramObject.renameInTags === \\\"no\\\") ? true : false;\\n\\t\\t\\toptions.dontRenameInLists = (paramObject.renameInLists === \\\"false\\\" || paramObject.renameInLists === \\\"no\\\") ? true : false;\\n\\t\\t\\t$tw.wiki[method](from,to,options);\\n\\t\\t};\\n\\t};\\n\\t$tw.rootWidget.addEventListener(\\\"tm-rename-tiddler\\\",makeRenameHandler(\\\"renameTiddler\\\"));\\n\\t$tw.rootWidget.addEventListener(\\\"tm-relink-tiddler\\\",makeRenameHandler(\\\"relinkTiddler\\\"));\\n\\t// Install the scroller\\n\\t$tw.pageScroller = new $tw.utils.PageScroller();\\n\\t$tw.rootWidget.addEventListener(\\\"tm-scroll\\\",function(event) {\\n\\t\\t$tw.pageScroller.handleEvent(event);\\n\\t});\\n\\tvar fullscreen = $tw.utils.getFullScreenApis();\\n\\tif(fullscreen) {\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-full-screen\\\",function(event) {\\n\\t\\t\\tvar fullScreenDocument = event.event ? event.event.target.ownerDocument : document;\\n\\t\\t\\tif(event.param === \\\"enter\\\") {\\n\\t\\t\\t\\tfullScreenDocument.documentElement[fullscreen._requestFullscreen](Element.ALLOW_KEYBOARD_INPUT);\\n\\t\\t\\t} else if(event.param === \\\"exit\\\") {\\n\\t\\t\\t\\tfullScreenDocument[fullscreen._exitFullscreen]();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif(fullScreenDocument[fullscreen._fullscreenElement]) {\\n\\t\\t\\t\\t\\tfullScreenDocument[fullscreen._exitFullscreen]();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfullScreenDocument.documentElement[fullscreen._requestFullscreen](Element.ALLOW_KEYBOARD_INPUT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t// If we're being viewed on a data: URI then give instructions for how to save\\n\\tif(document.location.protocol === \\\"data:\\\") {\\n\\t\\t$tw.rootWidget.dispatchEvent({\\n\\t\\t\\ttype: \\\"tm-modal\\\",\\n\\t\\t\\tparam: \\\"$:/language/Modals/SaveInstructions\\\"\\n\\t\\t});\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup.js\":{\"title\":\"$:/core/modules/startup.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nMiscellaneous startup logic for both the client and server.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"startup\\\";\\nexports.after = [\\\"load-modules\\\"];\\nexports.synchronous = true;\\n\\n// Set to `true` to enable performance instrumentation\\nvar PERFORMANCE_INSTRUMENTATION_CONFIG_TITLE = \\\"$:/config/Performance/Instrumentation\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nexports.startup = function() {\\n\\t// Minimal browser detection\\n\\tif($tw.browser) {\\n\\t\\t$tw.browser.isIE = (/msie|trident/i.test(navigator.userAgent));\\n\\t\\t$tw.browser.isFirefox = !!document.mozFullScreenEnabled;\\n\\t}\\n\\t// Platform detection\\n\\t$tw.platform = {};\\n\\tif($tw.browser) {\\n\\t\\t$tw.platform.isMac = /Mac/.test(navigator.platform);\\n\\t\\t$tw.platform.isWindows = /win/i.test(navigator.platform);\\n\\t\\t$tw.platform.isLinux = /Linux/i.test(navigator.platform);\\n\\t} else {\\n\\t\\tswitch(require(\\\"os\\\").platform()) {\\n\\t\\t\\tcase \\\"darwin\\\":\\n\\t\\t\\t\\t$tw.platform.isMac = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"win32\\\":\\n\\t\\t\\t\\t$tw.platform.isWindows = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"freebsd\\\":\\n\\t\\t\\t\\t$tw.platform.isLinux = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"linux\\\":\\n\\t\\t\\t\\t$tw.platform.isLinux = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\t// Initialise version\\n\\t$tw.version = $tw.utils.extractVersionInfo();\\n\\t// Set up the performance framework\\n\\t$tw.perf = new $tw.Performance($tw.wiki.getTiddlerText(PERFORMANCE_INSTRUMENTATION_CONFIG_TITLE,\\\"no\\\") === \\\"yes\\\");\\n\\t// Create a root widget for attaching event handlers. By using it as the parentWidget for another widget tree, one can reuse the event handlers\\n\\t$tw.rootWidget = new widget.widget({\\n\\t\\ttype: \\\"widget\\\",\\n\\t\\tchildren: []\\n\\t},{\\n\\t\\twiki: $tw.wiki,\\n\\t\\tdocument: $tw.browser ? document : $tw.fakeDocument\\n\\t});\\n\\t// Execute any startup actions\\n\\t$tw.rootWidget.invokeActionsByTag(\\\"$:/tags/StartupAction\\\");\\n\\tif($tw.browser) {\\n\\t\\t$tw.rootWidget.invokeActionsByTag(\\\"$:/tags/StartupAction/Browser\\\");\\n\\t}\\n\\tif($tw.node) {\\n\\t\\t$tw.rootWidget.invokeActionsByTag(\\\"$:/tags/StartupAction/Node\\\");\\n\\t}\\n\\t// Kick off the language manager and switcher\\n\\t$tw.language = new $tw.Language();\\n\\t$tw.languageSwitcher = new $tw.PluginSwitcher({\\n\\t\\twiki: $tw.wiki,\\n\\t\\tpluginType: \\\"language\\\",\\n\\t\\tcontrollerTitle: \\\"$:/language\\\",\\n\\t\\tdefaultPlugins: [\\n\\t\\t\\t\\\"$:/languages/en-GB\\\"\\n\\t\\t],\\n\\t\\tonSwitch: function(plugins) {\\n\\t\\t\\tif($tw.browser) {\\n\\t\\t\\t\\tvar pluginTiddler = $tw.wiki.getTiddler(plugins[0]);\\n\\t\\t\\t\\tif(pluginTiddler) {\\n\\t\\t\\t\\t\\tdocument.documentElement.setAttribute(\\\"dir\\\",pluginTiddler.getFieldString(\\\"text-direction\\\") || \\\"auto\\\");\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdocument.documentElement.removeAttribute(\\\"dir\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\t// Kick off the theme manager\\n\\t$tw.themeManager = new $tw.PluginSwitcher({\\n\\t\\twiki: $tw.wiki,\\n\\t\\tpluginType: \\\"theme\\\",\\n\\t\\tcontrollerTitle: \\\"$:/theme\\\",\\n\\t\\tdefaultPlugins: [\\n\\t\\t\\t\\\"$:/themes/tiddlywiki/snowwhite\\\",\\n\\t\\t\\t\\\"$:/themes/tiddlywiki/vanilla\\\"\\n\\t\\t]\\n\\t});\\n\\t// Kick off the keyboard manager\\n\\t$tw.keyboardManager = new $tw.KeyboardManager();\\n\\t// Listen for shortcuts\\n\\tif($tw.browser) {\\n\\t\\t$tw.utils.addEventListeners(document,[{\\n\\t\\t\\tname: \\\"keydown\\\",\\n\\t\\t\\thandlerObject: $tw.keyboardManager,\\n\\t\\t\\thandlerMethod: \\\"handleKeydownEvent\\\"\\n\\t\\t}]);\\n\\t}\\n\\t// Clear outstanding tiddler store change events to avoid an unnecessary refresh cycle at startup\\n\\t$tw.wiki.clearTiddlerEventQueue();\\n\\t// Find a working syncadaptor\\n\\t$tw.syncadaptor = undefined;\\n\\t$tw.modules.forEachModuleOfType(\\\"syncadaptor\\\",function(title,module) {\\n\\t\\tif(!$tw.syncadaptor && module.adaptorClass) {\\n\\t\\t\\t$tw.syncadaptor = new module.adaptorClass({wiki: $tw.wiki});\\n\\t\\t}\\n\\t});\\n\\t// Set up the syncer object if we've got a syncadaptor\\n\\tif($tw.syncadaptor) {\\n\\t\\t$tw.syncer = new $tw.Syncer({wiki: $tw.wiki, syncadaptor: $tw.syncadaptor});\\n\\t}\\n\\t// Setup the saver handler\\n\\t$tw.saverHandler = new $tw.SaverHandler({\\n\\t\\twiki: $tw.wiki,\\n\\t\\tdirtyTracking: !$tw.syncadaptor,\\n\\t\\tpreloadDirty: $tw.boot.preloadDirty || []\\n\\t});\\n\\t// Host-specific startup\\n\\tif($tw.browser) {\\n\\t\\t// Install the popup manager\\n\\t\\t$tw.popup = new $tw.utils.Popup();\\n\\t\\t// Install the animator\\n\\t\\t$tw.anim = new $tw.utils.Animator();\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/story.js\":{\"title\":\"$:/core/modules/startup/story.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/story.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nLoad core modules\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"story\\\";\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// Default story and history lists\\nvar DEFAULT_STORY_TITLE = \\\"$:/StoryList\\\";\\nvar DEFAULT_HISTORY_TITLE = \\\"$:/HistoryList\\\";\\n\\n// Default tiddlers\\nvar DEFAULT_TIDDLERS_TITLE = \\\"$:/DefaultTiddlers\\\";\\n\\n// Config\\nvar CONFIG_UPDATE_ADDRESS_BAR = \\\"$:/config/Navigation/UpdateAddressBar\\\"; // Can be \\\"no\\\", \\\"permalink\\\", \\\"permaview\\\"\\nvar CONFIG_UPDATE_HISTORY = \\\"$:/config/Navigation/UpdateHistory\\\"; // Can be \\\"yes\\\" or \\\"no\\\"\\nvar CONFIG_PERMALINKVIEW_COPY_TO_CLIPBOARD = \\\"$:/config/Navigation/Permalinkview/CopyToClipboard\\\"; // Can be \\\"yes\\\" (default) or \\\"no\\\"\\nvar CONFIG_PERMALINKVIEW_UPDATE_ADDRESS_BAR = \\\"$:/config/Navigation/Permalinkview/UpdateAddressBar\\\"; // Can be \\\"yes\\\" (default) or \\\"no\\\"\\n\\n\\n// Links to help, if there is no param\\nvar HELP_OPEN_EXTERNAL_WINDOW = \\\"http://tiddlywiki.com/#WidgetMessage%3A%20tm-open-external-window\\\";\\n\\nexports.startup = function() {\\n\\t// Open startup tiddlers\\n\\topenStartupTiddlers({\\n\\t\\tdisableHistory: $tw.boot.disableStartupNavigation\\n\\t});\\n\\tif($tw.browser) {\\n\\t\\t// Set up location hash update\\n\\t\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t\\tif($tw.utils.hop(changes,DEFAULT_STORY_TITLE) || $tw.utils.hop(changes,DEFAULT_HISTORY_TITLE)) {\\n\\t\\t\\t\\tupdateLocationHash({\\n\\t\\t\\t\\t\\tupdateAddressBar: $tw.wiki.getTiddlerText(CONFIG_UPDATE_ADDRESS_BAR,\\\"permaview\\\").trim(),\\n\\t\\t\\t\\t\\tupdateHistory: $tw.wiki.getTiddlerText(CONFIG_UPDATE_HISTORY,\\\"no\\\").trim()\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Listen for changes to the browser location hash\\n\\t\\twindow.addEventListener(\\\"hashchange\\\",function() {\\n\\t\\t\\tvar hash = $tw.utils.getLocationHash();\\n\\t\\t\\tif(hash !== $tw.locationHash) {\\n\\t\\t\\t\\t$tw.locationHash = hash;\\n\\t\\t\\t\\topenStartupTiddlers({defaultToCurrentStory: true});\\n\\t\\t\\t}\\n\\t\\t},false);\\n\\t\\t// Listen for the tm-browser-refresh message\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-browser-refresh\\\",function(event) {\\n\\t\\t\\twindow.location.reload(true);\\n\\t\\t});\\n\\t\\t// Listen for tm-open-external-window message\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-open-external-window\\\",function(event) {\\n\\t\\t\\tvar paramObject = event.paramObject || {},\\n\\t\\t\\t\\tstrUrl = event.param || HELP_OPEN_EXTERNAL_WINDOW,\\n\\t\\t\\t\\tstrWindowName = paramObject.windowName,\\n\\t\\t\\t\\tstrWindowFeatures = paramObject.windowFeatures;\\n\\t\\t\\twindow.open(strUrl, strWindowName, strWindowFeatures);\\n\\t\\t});\\n\\t\\t// Listen for the tm-print message\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-print\\\",function(event) {\\n\\t\\t\\t(event.event.view || window).print();\\n\\t\\t});\\n\\t\\t// Listen for the tm-home message\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-home\\\",function(event) {\\n\\t\\t\\twindow.location.hash = \\\"\\\";\\n\\t\\t\\tvar storyFilter = $tw.wiki.getTiddlerText(DEFAULT_TIDDLERS_TITLE),\\n\\t\\t\\t\\tstoryList = $tw.wiki.filterTiddlers(storyFilter);\\n\\t\\t\\t//invoke any hooks that might change the default story list\\n\\t\\t\\tstoryList = $tw.hooks.invokeHook(\\\"th-opening-default-tiddlers-list\\\",storyList);\\n\\t\\t\\t$tw.wiki.addTiddler({title: DEFAULT_STORY_TITLE, text: \\\"\\\", list: storyList},$tw.wiki.getModificationFields());\\n\\t\\t\\tif(storyList[0]) {\\n\\t\\t\\t\\t$tw.wiki.addToHistory(storyList[0]);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// Listen for the tm-permalink message\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-permalink\\\",function(event) {\\n\\t\\t\\tupdateLocationHash({\\n\\t\\t\\t\\tupdateAddressBar: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_UPDATE_ADDRESS_BAR,\\\"yes\\\").trim() === \\\"yes\\\" ? \\\"permalink\\\" : \\\"none\\\",\\n\\t\\t\\t\\tupdateHistory: $tw.wiki.getTiddlerText(CONFIG_UPDATE_HISTORY,\\\"no\\\").trim(),\\n\\t\\t\\t\\ttargetTiddler: event.param || event.tiddlerTitle,\\n\\t\\t\\t\\tcopyToClipboard: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_COPY_TO_CLIPBOARD,\\\"yes\\\").trim() === \\\"yes\\\" ? \\\"permalink\\\" : \\\"none\\\"\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\t// Listen for the tm-permaview message\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-permaview\\\",function(event) {\\n\\t\\t\\tupdateLocationHash({\\n\\t\\t\\t\\tupdateAddressBar: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_UPDATE_ADDRESS_BAR,\\\"yes\\\").trim() === \\\"yes\\\" ? \\\"permaview\\\" : \\\"none\\\",\\n\\t\\t\\t\\tupdateHistory: $tw.wiki.getTiddlerText(CONFIG_UPDATE_HISTORY,\\\"no\\\").trim(),\\n\\t\\t\\t\\ttargetTiddler: event.param || event.tiddlerTitle,\\n\\t\\t\\t\\tcopyToClipboard: $tw.wiki.getTiddlerText(CONFIG_PERMALINKVIEW_COPY_TO_CLIPBOARD,\\\"yes\\\").trim() === \\\"yes\\\" ? \\\"permaview\\\" : \\\"none\\\"\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nProcess the location hash to open the specified tiddlers. Options:\\ndisableHistory: if true $:/History is NOT updated\\ndefaultToCurrentStory: If true, the current story is retained as the default, instead of opening the default tiddlers\\n*/\\nfunction openStartupTiddlers(options) {\\n\\toptions = options || {};\\n\\t// Work out the target tiddler and the story filter. \\\"null\\\" means \\\"unspecified\\\"\\n\\tvar target = null,\\n\\t\\tstoryFilter = null;\\n\\tif($tw.locationHash.length > 1) {\\n\\t\\tvar hash = $tw.locationHash.substr(1),\\n\\t\\t\\tsplit = hash.indexOf(\\\":\\\");\\n\\t\\tif(split === -1) {\\n\\t\\t\\ttarget = $tw.utils.decodeURIComponentSafe(hash.trim());\\n\\t\\t} else {\\n\\t\\t\\ttarget = $tw.utils.decodeURIComponentSafe(hash.substr(0,split).trim());\\n\\t\\t\\tstoryFilter = $tw.utils.decodeURIComponentSafe(hash.substr(split + 1).trim());\\n\\t\\t}\\n\\t}\\n\\t// If the story wasn't specified use the current tiddlers or a blank story\\n\\tif(storyFilter === null) {\\n\\t\\tif(options.defaultToCurrentStory) {\\n\\t\\t\\tvar currStoryList = $tw.wiki.getTiddlerList(DEFAULT_STORY_TITLE);\\n\\t\\t\\tstoryFilter = $tw.utils.stringifyList(currStoryList);\\n\\t\\t} else {\\n\\t\\t\\tif(target && target !== \\\"\\\") {\\n\\t\\t\\t\\tstoryFilter = \\\"\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tstoryFilter = $tw.wiki.getTiddlerText(DEFAULT_TIDDLERS_TITLE);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Process the story filter to get the story list\\n\\tvar storyList = $tw.wiki.filterTiddlers(storyFilter);\\n\\t// Invoke any hooks that want to change the default story list\\n\\tstoryList = $tw.hooks.invokeHook(\\\"th-opening-default-tiddlers-list\\\",storyList);\\n\\t// If the target tiddler isn't included then splice it in at the top\\n\\tif(target && storyList.indexOf(target) === -1) {\\n\\t\\tstoryList.unshift(target);\\n\\t}\\n\\t// Save the story list\\n\\t$tw.wiki.addTiddler({title: DEFAULT_STORY_TITLE, text: \\\"\\\", list: storyList},$tw.wiki.getModificationFields());\\n\\t// Update history\\n\\tvar story = new $tw.Story({\\n\\t\\twiki: $tw.wiki,\\n\\t\\tstoryTitle: DEFAULT_STORY_TITLE,\\n\\t\\thistoryTitle: DEFAULT_HISTORY_TITLE\\n\\t});\\n\\tif(!options.disableHistory) {\\n\\t\\t// If a target tiddler was specified add it to the history stack\\n\\t\\tif(target && target !== \\\"\\\") {\\n\\t\\t\\t// The target tiddler doesn't need double square brackets, but we'll silently remove them if they're present\\n\\t\\t\\tif(target.indexOf(\\\"[[\\\") === 0 && target.substr(-2) === \\\"]]\\\") {\\n\\t\\t\\t\\ttarget = target.substr(2,target.length - 4);\\n\\t\\t\\t}\\n\\t\\t\\tstory.addToHistory(target);\\n\\t\\t} else if(storyList.length > 0) {\\n\\t\\t\\tstory.addToHistory(storyList[0]);\\n\\t\\t}\\n\\t}\\n}\\n\\n/*\\noptions: See below\\noptions.updateAddressBar: \\\"permalink\\\", \\\"permaview\\\" or \\\"no\\\" (defaults to \\\"permaview\\\")\\noptions.updateHistory: \\\"yes\\\" or \\\"no\\\" (defaults to \\\"no\\\")\\noptions.copyToClipboard: \\\"permalink\\\", \\\"permaview\\\" or \\\"no\\\" (defaults to \\\"no\\\")\\noptions.targetTiddler: optional title of target tiddler for permalink\\n*/\\nfunction updateLocationHash(options) {\\n\\t// Get the story and the history stack\\n\\tvar storyList = $tw.wiki.getTiddlerList(DEFAULT_STORY_TITLE),\\n\\t\\thistoryList = $tw.wiki.getTiddlerData(DEFAULT_HISTORY_TITLE,[]),\\n\\t\\ttargetTiddler = \\\"\\\";\\n\\tif(options.targetTiddler) {\\n\\t\\ttargetTiddler = options.targetTiddler;\\n\\t} else {\\n\\t\\t// The target tiddler is the one at the top of the stack\\n\\t\\tif(historyList.length > 0) {\\n\\t\\t\\ttargetTiddler = historyList[historyList.length-1].title;\\n\\t\\t}\\n\\t\\t// Blank the target tiddler if it isn't present in the story\\n\\t\\tif(storyList.indexOf(targetTiddler) === -1) {\\n\\t\\t\\ttargetTiddler = \\\"\\\";\\n\\t\\t}\\n\\t}\\n\\t// Assemble the location hash\\n\\tswitch(options.updateAddressBar) {\\n\\t\\tcase \\\"permalink\\\":\\n\\t\\t\\t$tw.locationHash = \\\"#\\\" + encodeURIComponent(targetTiddler);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"permaview\\\":\\n\\t\\t\\t$tw.locationHash = \\\"#\\\" + encodeURIComponent(targetTiddler) + \\\":\\\" + encodeURIComponent($tw.utils.stringifyList(storyList));\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// Copy URL to the clipboard\\n\\tswitch(options.copyToClipboard) {\\n\\t\\tcase \\\"permalink\\\":\\n\\t\\t\\t$tw.utils.copyToClipboard($tw.utils.getLocationPath() + \\\"#\\\" + encodeURIComponent(targetTiddler));\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"permaview\\\":\\n\\t\\t\\t$tw.utils.copyToClipboard($tw.utils.getLocationPath() + \\\"#\\\" + encodeURIComponent(targetTiddler) + \\\":\\\" + encodeURIComponent($tw.utils.stringifyList(storyList)));\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// Only change the location hash if we must, thus avoiding unnecessary onhashchange events\\n\\tif($tw.utils.getLocationHash() !== $tw.locationHash) {\\n\\t\\tif(options.updateHistory === \\\"yes\\\") {\\n\\t\\t\\t// Assign the location hash so that history is updated\\n\\t\\t\\twindow.location.hash = $tw.locationHash;\\n\\t\\t} else {\\n\\t\\t\\t// We use replace so that browser history isn't affected\\n\\t\\t\\twindow.location.replace(window.location.toString().split(\\\"#\\\")[0] + $tw.locationHash);\\n\\t\\t}\\n\\t}\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/startup/windows.js\":{\"title\":\"$:/core/modules/startup/windows.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/startup/windows.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nSetup root widget handlers for the messages concerned with opening external browser windows\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"windows\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"startup\\\"];\\nexports.synchronous = true;\\n\\n// Global to keep track of open windows (hashmap by title)\\n$tw.windows = {};\\n// Default template to use for new windows\\nvar DEFAULT_WINDOW_TEMPLATE = \\\"$:/core/templates/single.tiddler.window\\\";\\n\\nexports.startup = function() {\\n\\t// Handle open window message\\n\\t$tw.rootWidget.addEventListener(\\\"tm-open-window\\\",function(event) {\\n\\t\\t// Get the parameters\\n\\t\\tvar refreshHandler,\\n\\t\\t\\ttitle = event.param || event.tiddlerTitle,\\n\\t\\t\\tparamObject = event.paramObject || {},\\n\\t\\t\\twindowTitle = paramObject.windowTitle || title,\\n\\t\\t\\twindowID = paramObject.windowID || title,\\n\\t\\t\\ttemplate = paramObject.template || DEFAULT_WINDOW_TEMPLATE,\\n\\t\\t\\twidth = paramObject.width || \\\"700\\\",\\n\\t\\t\\theight = paramObject.height || \\\"600\\\",\\n\\t\\t\\ttop = paramObject.top,\\n\\t\\t\\tleft = paramObject.left,\\n\\t\\t\\tvariables = $tw.utils.extend({},paramObject,{currentTiddler: title, \\\"tv-window-id\\\": windowID});\\n\\t\\t// Open the window\\n\\t\\tvar srcWindow,\\n\\t\\t    srcDocument;\\n\\t\\t// In case that popup blockers deny opening a new window\\n\\t\\ttry {\\n\\t\\t\\tsrcWindow = window.open(\\\"\\\",\\\"external-\\\" + windowID,\\\"scrollbars,width=\\\" + width + \\\",height=\\\" + height + (top ? \\\",top=\\\" + top : \\\"\\\" ) + (left ? \\\",left=\\\" + left : \\\"\\\" )),\\n\\t\\t\\tsrcDocument = srcWindow.document;\\n\\t\\t}\\n\\t\\tcatch(e) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t$tw.windows[windowID] = srcWindow;\\n\\t\\t// Check for reopening the same window\\n\\t\\tif(srcWindow.haveInitialisedWindow) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// Initialise the document\\n\\t\\tsrcDocument.write(\\\"\u003Chtml>\u003Chead>\u003C/head>\u003Cbody class='tc-body tc-single-tiddler-window'>\u003C/body>\u003C/html>\\\");\\n\\t\\tsrcDocument.close();\\n\\t\\tsrcDocument.title = windowTitle;\\n\\t\\tsrcWindow.addEventListener(\\\"beforeunload\\\",function(event) {\\n\\t\\t\\tdelete $tw.windows[windowID];\\n\\t\\t\\t$tw.wiki.removeEventListener(\\\"change\\\",refreshHandler);\\n\\t\\t},false);\\n\\t\\t// Set up the styles\\n\\t\\tvar styleWidgetNode = $tw.wiki.makeTranscludeWidget(\\\"$:/core/ui/PageStylesheet\\\",{\\n\\t\\t\\t\\tdocument: $tw.fakeDocument,\\n\\t\\t\\t\\tvariables: variables,\\n\\t\\t\\t\\timportPageMacros: true}),\\n\\t\\t\\tstyleContainer = $tw.fakeDocument.createElement(\\\"style\\\");\\n\\t\\tstyleWidgetNode.render(styleContainer,null);\\n\\t\\tvar styleElement = srcDocument.createElement(\\\"style\\\");\\n\\t\\tstyleElement.innerHTML = styleContainer.textContent;\\n\\t\\tsrcDocument.head.insertBefore(styleElement,srcDocument.head.firstChild);\\n\\t\\t// Render the text of the tiddler\\n\\t\\tvar parser = $tw.wiki.parseTiddler(template),\\n\\t\\t\\twidgetNode = $tw.wiki.makeWidget(parser,{document: srcDocument, parentWidget: $tw.rootWidget, variables: variables});\\n\\t\\twidgetNode.render(srcDocument.body,srcDocument.body.firstChild);\\n\\t\\t// Function to handle refreshes\\n\\t\\trefreshHandler = function(changes) {\\n\\t\\t\\tif(styleWidgetNode.refresh(changes,styleContainer,null)) {\\n\\t\\t\\t\\tstyleElement.innerHTML = styleContainer.textContent;\\n\\t\\t\\t}\\n\\t\\t\\twidgetNode.refresh(changes);\\n\\t\\t};\\n\\t\\t$tw.wiki.addEventListener(\\\"change\\\",refreshHandler);\\n\\t\\t// Listen for keyboard shortcuts\\n\\t\\t$tw.utils.addEventListeners(srcDocument,[{\\n\\t\\t\\tname: \\\"keydown\\\",\\n\\t\\t\\thandlerObject: $tw.keyboardManager,\\n\\t\\t\\thandlerMethod: \\\"handleKeydownEvent\\\"\\n\\t\\t}]);\\n\\t\\tsrcWindow.document.documentElement.addEventListener(\\\"click\\\",$tw.popup,true);\\n\\t\\tsrcWindow.haveInitialisedWindow = true;\\n\\t});\\n\\t$tw.rootWidget.addEventListener(\\\"tm-close-window\\\",function(event) {\\n\\t\\tvar windowID = event.param,\\n\\t\\t\\twin = $tw.windows[windowID];\\n\\t\\t\\tif(win) {\\n\\t\\t\\t\\twin.close();\\n\\t\\t\\t}\\n\\t});\\n\\tvar closeAllWindows = function() {\\n\\t\\t$tw.utils.each($tw.windows,function(win) {\\n\\t\\t\\twin.close();\\n\\t\\t});\\n\\t}\\n\\t$tw.rootWidget.addEventListener(\\\"tm-close-all-windows\\\",closeAllWindows);\\n\\t// Close open windows when unloading main window\\n\\t$tw.addUnloadTask(closeAllWindows);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/core/modules/story.js\":{\"title\":\"$:/core/modules/story.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/story.js\\ntype: application/javascript\\nmodule-type: global\\n\\nLightweight object for managing interactions with the story and history lists.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nConstruct Story object with options:\\nwiki: reference to wiki object to use to resolve tiddler titles\\nstoryTitle: title of story list tiddler\\nhistoryTitle: title of history list tiddler\\n*/\\nfunction Story(options) {\\n\\toptions = options || {};\\n\\tthis.wiki = options.wiki || $tw.wiki;\\n\\tthis.storyTitle = options.storyTitle || \\\"$:/StoryList\\\";\\n\\tthis.historyTitle = options.historyTitle || \\\"$:/HistoryList\\\";\\n};\\n\\nStory.prototype.navigateTiddler = function(navigateTo,navigateFromTitle,navigateFromClientRect) {\\n\\tthis.addToStory(navigateTo,navigateFromTitle);\\n\\tthis.addToHistory(navigateTo,navigateFromClientRect);\\n};\\n\\nStory.prototype.getStoryList = function() {\\n\\treturn this.wiki.getTiddlerList(this.storyTitle) || [];\\n};\\n\\nStory.prototype.addToStory = function(navigateTo,navigateFromTitle,options) {\\n\\toptions = options || {};\\n\\tvar storyList = this.getStoryList();\\n\\t// See if the tiddler is already there\\n\\tvar slot = storyList.indexOf(navigateTo);\\n\\t// Quit if it already exists in the story river\\n\\tif(slot >= 0) {\\n\\t\\treturn;\\n\\t}\\n\\t// First we try to find the position of the story element we navigated from\\n\\tvar fromIndex = storyList.indexOf(navigateFromTitle);\\n\\tif(fromIndex >= 0) {\\n\\t\\t// The tiddler is added from inside the river\\n\\t\\t// Determine where to insert the tiddler; Fallback is \\\"below\\\"\\n\\t\\tswitch(options.openLinkFromInsideRiver) {\\n\\t\\t\\tcase \\\"top\\\":\\n\\t\\t\\t\\tslot = 0;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"bottom\\\":\\n\\t\\t\\t\\tslot = storyList.length;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"above\\\":\\n\\t\\t\\t\\tslot = fromIndex;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"below\\\": // Intentional fall-through\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tslot = fromIndex + 1;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t} else {\\n\\t\\t// The tiddler is opened from outside the river. Determine where to insert the tiddler; default is \\\"top\\\"\\n\\t\\tif(options.openLinkFromOutsideRiver === \\\"bottom\\\") {\\n\\t\\t\\t// Insert at bottom\\n\\t\\t\\tslot = storyList.length;\\n\\t\\t} else {\\n\\t\\t\\t// Insert at top\\n\\t\\t\\tslot = 0;\\n\\t\\t}\\n\\t}\\n\\t// Add the tiddler\\n\\tstoryList.splice(slot,0,navigateTo);\\n\\t// Save the story\\n\\tthis.saveStoryList(storyList);\\n};\\n\\nStory.prototype.saveStoryList = function(storyList) {\\n\\tvar storyTiddler = this.wiki.getTiddler(this.storyTitle);\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(\\n\\t\\tthis.wiki.getCreationFields(),\\n\\t\\t{title: this.storyTitle},\\n\\t\\tstoryTiddler,\\n\\t\\t{list: storyList},\\n\\t\\tthis.wiki.getModificationFields()\\n\\t));\\n};\\n\\nStory.prototype.addToHistory = function(navigateTo,navigateFromClientRect) {\\n\\tvar titles = $tw.utils.isArray(navigateTo) ? navigateTo : [navigateTo];\\n\\t// Add a new record to the top of the history stack\\n\\tvar historyList = this.wiki.getTiddlerData(this.historyTitle,[]);\\n\\t$tw.utils.each(titles,function(title) {\\n\\t\\thistoryList.push({title: title, fromPageRect: navigateFromClientRect});\\n\\t});\\n\\tthis.wiki.setTiddlerData(this.historyTitle,historyList,{\\\"current-tiddler\\\": titles[titles.length-1]});\\n};\\n\\nStory.prototype.storyCloseTiddler = function(targetTitle) {\\n// TBD\\n};\\n\\nStory.prototype.storyCloseAllTiddlers = function() {\\n// TBD\\n};\\n\\nStory.prototype.storyCloseOtherTiddlers = function(targetTitle) {\\n// TBD\\n};\\n\\nStory.prototype.storyEditTiddler = function(targetTitle) {\\n// TBD\\n};\\n\\nStory.prototype.storyDeleteTiddler = function(targetTitle) {\\n// TBD\\n};\\n\\nStory.prototype.storySaveTiddler = function(targetTitle) {\\n// TBD\\n};\\n\\nStory.prototype.storyCancelTiddler = function(targetTitle) {\\n// TBD\\n};\\n\\nStory.prototype.storyNewTiddler = function(targetTitle) {\\n// TBD\\n};\\n\\nexports.Story = Story;\\n\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/storyviews/classic.js\":{\"title\":\"$:/core/modules/storyviews/classic.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/storyviews/classic.js\\ntype: application/javascript\\nmodule-type: storyview\\n\\nViews the story as a linear sequence\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar easing = \\\"cubic-bezier(0.645, 0.045, 0.355, 1)\\\"; // From http://easings.net/#easeInOutCubic\\n\\nvar ClassicStoryView = function(listWidget) {\\n\\tthis.listWidget = listWidget;\\n};\\n\\nClassicStoryView.prototype.navigateTo = function(historyInfo) {\\n\\tvar duration = $tw.utils.getAnimationDuration()\\n\\tvar listElementIndex = this.listWidget.findListItem(0,historyInfo.title);\\n\\tif(listElementIndex === undefined) {\\n\\t\\treturn;\\n\\t}\\n\\tvar listItemWidget = this.listWidget.children[listElementIndex],\\n\\t\\ttargetElement = listItemWidget.findFirstDomNode();\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\treturn;\\n\\t}\\n\\tif(duration) {\\n\\t\\t// Scroll the node into view\\n\\t\\tthis.listWidget.dispatchEvent({type: \\\"tm-scroll\\\", target: targetElement});\\n\\t} else {\\n\\t\\ttargetElement.scrollIntoView();\\n\\t}\\n};\\n\\nClassicStoryView.prototype.insert = function(widget) {\\n\\tvar duration = $tw.utils.getAnimationDuration();\\n\\tif(duration) {\\n\\t\\tvar targetElement = widget.findFirstDomNode();\\n\\t\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\t\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// Get the current height of the tiddler\\n\\t\\tvar computedStyle = window.getComputedStyle(targetElement),\\n\\t\\t\\tcurrMarginBottom = parseInt(computedStyle.marginBottom,10),\\n\\t\\t\\tcurrMarginTop = parseInt(computedStyle.marginTop,10),\\n\\t\\t\\tcurrHeight = targetElement.offsetHeight + currMarginTop;\\n\\t\\t// Reset the margin once the transition is over\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t\\t\\t{transition: \\\"none\\\"},\\n\\t\\t\\t\\t{marginBottom: \\\"\\\"}\\n\\t\\t\\t]);\\n\\t\\t},duration);\\n\\t\\t// Set up the initial position of the element\\n\\t\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t\\t{transition: \\\"none\\\"},\\n\\t\\t\\t{marginBottom: (-currHeight) + \\\"px\\\"},\\n\\t\\t\\t{opacity: \\\"0.0\\\"}\\n\\t\\t]);\\n\\t\\t$tw.utils.forceLayout(targetElement);\\n\\t\\t// Transition to the final position\\n\\t\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t\\t{transition: \\\"opacity \\\" + duration + \\\"ms \\\" + easing + \\\", \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"margin-bottom \\\" + duration + \\\"ms \\\" + easing},\\n\\t\\t\\t{marginBottom: currMarginBottom + \\\"px\\\"},\\n\\t\\t\\t{opacity: \\\"1.0\\\"}\\n\\t]);\\n\\t}\\n};\\n\\nClassicStoryView.prototype.remove = function(widget) {\\n\\tvar duration = $tw.utils.getAnimationDuration();\\n\\tif(duration) {\\n\\t\\tvar targetElement = widget.findFirstDomNode(),\\n\\t\\t\\tremoveElement = function() {\\n\\t\\t\\t\\twidget.removeChildDomNodes();\\n\\t\\t\\t};\\n\\t\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\t\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\t\\tremoveElement();\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// Get the current height of the tiddler\\n\\t\\tvar currWidth = targetElement.offsetWidth,\\n\\t\\t\\tcomputedStyle = window.getComputedStyle(targetElement),\\n\\t\\t\\tcurrMarginBottom = parseInt(computedStyle.marginBottom,10),\\n\\t\\t\\tcurrMarginTop = parseInt(computedStyle.marginTop,10),\\n\\t\\t\\tcurrHeight = targetElement.offsetHeight + currMarginTop;\\n\\t\\t// Remove the dom nodes of the widget at the end of the transition\\n\\t\\tsetTimeout(removeElement,duration);\\n\\t\\t// Animate the closure\\n\\t\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t\\t{transition: \\\"none\\\"},\\n\\t\\t\\t{transform: \\\"translateX(0px)\\\"},\\n\\t\\t\\t{marginBottom:  currMarginBottom + \\\"px\\\"},\\n\\t\\t\\t{opacity: \\\"1.0\\\"}\\n\\t\\t]);\\n\\t\\t$tw.utils.forceLayout(targetElement);\\n\\t\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms \\\" + easing + \\\", \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"opacity \\\" + duration + \\\"ms \\\" + easing + \\\", \\\" +\\n\\t\\t\\t\\t\\t\\t\\\"margin-bottom \\\" + duration + \\\"ms \\\" + easing},\\n\\t\\t\\t{transform: \\\"translateX(-\\\" + currWidth + \\\"px)\\\"},\\n\\t\\t\\t{marginBottom: (-currHeight) + \\\"px\\\"},\\n\\t\\t\\t{opacity: \\\"0.0\\\"}\\n\\t\\t]);\\n\\t} else {\\n\\t\\twidget.removeChildDomNodes();\\n\\t}\\n};\\n\\nexports.classic = ClassicStoryView;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"storyview\"},\"$:/core/modules/storyviews/pop.js\":{\"title\":\"$:/core/modules/storyviews/pop.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/storyviews/pop.js\\ntype: application/javascript\\nmodule-type: storyview\\n\\nAnimates list insertions and removals\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar PopStoryView = function(listWidget) {\\n\\tthis.listWidget = listWidget;\\n};\\n\\nPopStoryView.prototype.navigateTo = function(historyInfo) {\\n\\tvar listElementIndex = this.listWidget.findListItem(0,historyInfo.title);\\n\\tif(listElementIndex === undefined) {\\n\\t\\treturn;\\n\\t}\\n\\tvar listItemWidget = this.listWidget.children[listElementIndex],\\n\\t\\ttargetElement = listItemWidget.findFirstDomNode();\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\treturn;\\n\\t}\\n\\t// Scroll the node into view\\n\\tthis.listWidget.dispatchEvent({type: \\\"tm-scroll\\\", target: targetElement});\\n};\\n\\nPopStoryView.prototype.insert = function(widget) {\\n\\tvar targetElement = widget.findFirstDomNode(),\\n\\t\\tduration = $tw.utils.getAnimationDuration();\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\treturn;\\n\\t}\\n\\t// Reset once the transition is over\\n\\tsetTimeout(function() {\\n\\t\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t\\t{transition: \\\"none\\\"},\\n\\t\\t\\t{transform: \\\"none\\\"}\\n\\t\\t]);\\n\\t\\t$tw.utils.setStyle(widget.document.body,[\\n\\t\\t\\t{\\\"overflow-x\\\": \\\"\\\"}\\n\\t\\t]);\\n\\t},duration);\\n\\t// Prevent the page from overscrolling due to the zoom factor\\n\\t$tw.utils.setStyle(widget.document.body,[\\n\\t\\t{\\\"overflow-x\\\": \\\"hidden\\\"}\\n\\t]);\\n\\t// Set up the initial position of the element\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transition: \\\"none\\\"},\\n\\t\\t{transform: \\\"scale(2)\\\"},\\n\\t\\t{opacity: \\\"0.0\\\"}\\n\\t]);\\n\\t$tw.utils.forceLayout(targetElement);\\n\\t// Transition to the final position\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"opacity \\\" + duration + \\\"ms ease-in-out\\\"},\\n\\t\\t{transform: \\\"scale(1)\\\"},\\n\\t\\t{opacity: \\\"1.0\\\"}\\n\\t]);\\n};\\n\\nPopStoryView.prototype.remove = function(widget) {\\n\\tvar targetElement = widget.findFirstDomNode(),\\n\\t\\tduration = $tw.utils.getAnimationDuration(),\\n\\t\\tremoveElement = function() {\\n\\t\\t\\tif(targetElement && targetElement.parentNode) {\\n\\t\\t\\t\\twidget.removeChildDomNodes();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\tremoveElement();\\n\\t\\treturn;\\n\\t}\\n\\t// Remove the element at the end of the transition\\n\\tsetTimeout(removeElement,duration);\\n\\t// Animate the closure\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transition: \\\"none\\\"},\\n\\t\\t{transform: \\\"scale(1)\\\"},\\n\\t\\t{opacity: \\\"1.0\\\"}\\n\\t]);\\n\\t$tw.utils.forceLayout(targetElement);\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"opacity \\\" + duration + \\\"ms ease-in-out\\\"},\\n\\t\\t{transform: \\\"scale(0.1)\\\"},\\n\\t\\t{opacity: \\\"0.0\\\"}\\n\\t]);\\n};\\n\\nexports.pop = PopStoryView;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"storyview\"},\"$:/core/modules/storyviews/zoomin.js\":{\"title\":\"$:/core/modules/storyviews/zoomin.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/storyviews/zoomin.js\\ntype: application/javascript\\nmodule-type: storyview\\n\\nZooms between individual tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar easing = \\\"cubic-bezier(0.645, 0.045, 0.355, 1)\\\"; // From http://easings.net/#easeInOutCubic\\n\\nvar ZoominListView = function(listWidget) {\\n\\tvar self = this;\\n\\tthis.listWidget = listWidget;\\n\\t// Get the index of the tiddler that is at the top of the history\\n\\tvar history = this.listWidget.wiki.getTiddlerDataCached(this.listWidget.historyTitle,[]),\\n\\t\\ttargetTiddler;\\n\\tif(history.length > 0) {\\n\\t\\ttargetTiddler = history[history.length-1].title;\\n\\t}\\n\\t// Make all the tiddlers position absolute, and hide all but the top (or first) one\\n\\t$tw.utils.each(this.listWidget.children,function(itemWidget,index) {\\n\\t\\tvar domNode = itemWidget.findFirstDomNode();\\n\\t\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\t\\tif(!(domNode instanceof Element)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif((targetTiddler && targetTiddler !== itemWidget.parseTreeNode.itemTitle) || (!targetTiddler && index)) {\\n\\t\\t\\tdomNode.style.display = \\\"none\\\";\\n\\t\\t} else {\\n\\t\\t\\tself.currentTiddlerDomNode = domNode;\\n\\t\\t}\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-storyview-zoomin-tiddler\\\");\\n\\t});\\n};\\n\\nZoominListView.prototype.navigateTo = function(historyInfo) {\\n\\tvar duration = $tw.utils.getAnimationDuration(),\\n\\t\\tlistElementIndex = this.listWidget.findListItem(0,historyInfo.title);\\n\\tif(listElementIndex === undefined) {\\n\\t\\treturn;\\n\\t}\\n\\tvar listItemWidget = this.listWidget.children[listElementIndex],\\n\\t\\ttargetElement = listItemWidget.findFirstDomNode();\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\treturn;\\n\\t}\\n\\t// Make the new tiddler be position absolute and visible so that we can measure it\\n\\t$tw.utils.addClass(targetElement,\\\"tc-storyview-zoomin-tiddler\\\");\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{display: \\\"block\\\"},\\n\\t\\t{transformOrigin: \\\"0 0\\\"},\\n\\t\\t{transform: \\\"translateX(0px) translateY(0px) scale(1)\\\"},\\n\\t\\t{transition: \\\"none\\\"},\\n\\t\\t{opacity: \\\"0.0\\\"}\\n\\t]);\\n\\t// Get the position of the source node, or use the centre of the window as the source position\\n\\tvar sourceBounds = historyInfo.fromPageRect || {\\n\\t\\t\\tleft: window.innerWidth/2 - 2,\\n\\t\\t\\ttop: window.innerHeight/2 - 2,\\n\\t\\t\\twidth: window.innerWidth/8,\\n\\t\\t\\theight: window.innerHeight/8\\n\\t\\t};\\n\\t// Try to find the title node in the target tiddler\\n\\tvar titleDomNode = findTitleDomNode(listItemWidget) || listItemWidget.findFirstDomNode(),\\n\\t\\tzoomBounds = titleDomNode.getBoundingClientRect();\\n\\t// Compute the transform for the target tiddler to make the title lie over the source rectange\\n\\tvar targetBounds = targetElement.getBoundingClientRect(),\\n\\t\\tscale = sourceBounds.width / zoomBounds.width,\\n\\t\\tx = sourceBounds.left - targetBounds.left - (zoomBounds.left - targetBounds.left) * scale,\\n\\t\\ty = sourceBounds.top - targetBounds.top - (zoomBounds.top - targetBounds.top) * scale;\\n\\t// Transform the target tiddler to its starting position\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transform: \\\"translateX(\\\" + x + \\\"px) translateY(\\\" + y + \\\"px) scale(\\\" + scale + \\\")\\\"}\\n\\t]);\\n\\t// Force layout\\n\\t$tw.utils.forceLayout(targetElement);\\n\\t// Apply the ending transitions with a timeout to ensure that the previously applied transformations are applied first\\n\\tvar self = this,\\n\\t\\tprevCurrentTiddler = this.currentTiddlerDomNode;\\n\\tthis.currentTiddlerDomNode = targetElement;\\n\\t// Transform the target tiddler to its natural size\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms \\\" + easing + \\\", opacity \\\" + duration + \\\"ms \\\" + easing},\\n\\t\\t{opacity: \\\"1.0\\\"},\\n\\t\\t{transform: \\\"translateX(0px) translateY(0px) scale(1)\\\"},\\n\\t\\t{zIndex: \\\"500\\\"},\\n\\t]);\\n\\t// Transform the previous tiddler out of the way and then hide it\\n\\tif(prevCurrentTiddler && prevCurrentTiddler !== targetElement) {\\n\\t\\tscale = zoomBounds.width / sourceBounds.width;\\n\\t\\tx =  zoomBounds.left - targetBounds.left - (sourceBounds.left - targetBounds.left) * scale;\\n\\t\\ty =  zoomBounds.top - targetBounds.top - (sourceBounds.top - targetBounds.top) * scale;\\n\\t\\t$tw.utils.setStyle(prevCurrentTiddler,[\\n\\t\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms \\\" + easing + \\\", opacity \\\" + duration + \\\"ms \\\" + easing},\\n\\t\\t\\t{opacity: \\\"0.0\\\"},\\n\\t\\t\\t{transformOrigin: \\\"0 0\\\"},\\n\\t\\t\\t{transform: \\\"translateX(\\\" + x + \\\"px) translateY(\\\" + y + \\\"px) scale(\\\" + scale + \\\")\\\"},\\n\\t\\t\\t{zIndex: \\\"0\\\"}\\n\\t\\t]);\\n\\t\\t// Hide the tiddler when the transition has finished\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tif(self.currentTiddlerDomNode !== prevCurrentTiddler) {\\n\\t\\t\\t\\tprevCurrentTiddler.style.display = \\\"none\\\";\\n\\t\\t\\t}\\n\\t\\t},duration);\\n\\t}\\n\\t// Scroll the target into view\\n//\\t$tw.pageScroller.scrollIntoView(targetElement);\\n};\\n\\n/*\\nFind the first child DOM node of a widget that has the class \\\"tc-title\\\"\\n*/\\nfunction findTitleDomNode(widget,targetClass) {\\n\\ttargetClass = targetClass || \\\"tc-title\\\";\\n\\tvar domNode = widget.findFirstDomNode();\\n\\tif(domNode && domNode.querySelector) {\\n\\t\\treturn domNode.querySelector(\\\".\\\" + targetClass);\\n\\t}\\n\\treturn null;\\n}\\n\\nZoominListView.prototype.insert = function(widget) {\\n\\tvar targetElement = widget.findFirstDomNode();\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\treturn;\\n\\t}\\n\\t// Make the newly inserted node position absolute and hidden\\n\\t$tw.utils.addClass(targetElement,\\\"tc-storyview-zoomin-tiddler\\\");\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{display: \\\"none\\\"}\\n\\t]);\\n};\\n\\nZoominListView.prototype.remove = function(widget) {\\n\\tvar targetElement = widget.findFirstDomNode(),\\n\\t\\tduration = $tw.utils.getAnimationDuration(),\\n\\t\\tremoveElement = function() {\\n\\t\\t\\twidget.removeChildDomNodes();\\n\\t\\t};\\n\\t// Abandon if the list entry isn't a DOM element (it might be a text node)\\n\\tif(!targetElement || targetElement.nodeType === Node.TEXT_NODE) {\\n\\t\\tremoveElement();\\n\\t\\treturn;\\n\\t}\\n\\t// Abandon if hidden\\n\\tif(targetElement.style.display != \\\"block\\\" ) {\\n\\t\\tremoveElement();\\n\\t\\treturn;\\n\\t}\\n\\t// Set up the tiddler that is being closed\\n\\t$tw.utils.addClass(targetElement,\\\"tc-storyview-zoomin-tiddler\\\");\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{display: \\\"block\\\"},\\n\\t\\t{transformOrigin: \\\"50% 50%\\\"},\\n\\t\\t{transform: \\\"translateX(0px) translateY(0px) scale(1)\\\"},\\n\\t\\t{transition: \\\"none\\\"},\\n\\t\\t{zIndex: \\\"0\\\"}\\n\\t]);\\n\\t// We'll move back to the previous or next element in the story\\n\\tvar toWidget = widget.previousSibling();\\n\\tif(!toWidget) {\\n\\t\\ttoWidget = widget.nextSibling();\\n\\t}\\n\\tvar toWidgetDomNode = toWidget && toWidget.findFirstDomNode();\\n\\t// Set up the tiddler we're moving back in\\n\\tif(toWidgetDomNode) {\\n\\t\\t$tw.utils.addClass(toWidgetDomNode,\\\"tc-storyview-zoomin-tiddler\\\");\\n\\t\\t$tw.utils.setStyle(toWidgetDomNode,[\\n\\t\\t\\t{display: \\\"block\\\"},\\n\\t\\t\\t{transformOrigin: \\\"50% 50%\\\"},\\n\\t\\t\\t{transform: \\\"translateX(0px) translateY(0px) scale(10)\\\"},\\n\\t\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms \\\" + easing + \\\", opacity \\\" + duration + \\\"ms \\\" + easing},\\n\\t\\t\\t{opacity: \\\"0\\\"},\\n\\t\\t\\t{zIndex: \\\"500\\\"}\\n\\t\\t]);\\n\\t\\tthis.currentTiddlerDomNode = toWidgetDomNode;\\n\\t}\\n\\t// Animate them both\\n\\t// Force layout\\n\\t$tw.utils.forceLayout(this.listWidget.parentDomNode);\\n\\t// First, the tiddler we're closing\\n\\t$tw.utils.setStyle(targetElement,[\\n\\t\\t{transformOrigin: \\\"50% 50%\\\"},\\n\\t\\t{transform: \\\"translateX(0px) translateY(0px) scale(0.1)\\\"},\\n\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms \\\" + easing + \\\", opacity \\\" + duration + \\\"ms \\\" + easing},\\n\\t\\t{opacity: \\\"0\\\"},\\n\\t\\t{zIndex: \\\"0\\\"}\\n\\t]);\\n\\tsetTimeout(removeElement,duration);\\n\\t// Now the tiddler we're going back to\\n\\tif(toWidgetDomNode) {\\n\\t\\t$tw.utils.setStyle(toWidgetDomNode,[\\n\\t\\t\\t{transform: \\\"translateX(0px) translateY(0px) scale(1)\\\"},\\n\\t\\t\\t{opacity: \\\"1\\\"}\\n\\t\\t]);\\n\\t}\\n\\treturn true; // Indicate that we'll delete the DOM node\\n};\\n\\nexports.zoomin = ZoominListView;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"storyview\"},\"$:/core/modules/syncer.js\":{\"title\":\"$:/core/modules/syncer.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/syncer.js\\ntype: application/javascript\\nmodule-type: global\\n\\nThe syncer tracks changes to the store and synchronises them to a remote data store represented as a \\\"sync adaptor\\\"\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nDefaults\\n*/\\nSyncer.prototype.titleIsLoggedIn = \\\"$:/status/IsLoggedIn\\\";\\nSyncer.prototype.titleIsAnonymous = \\\"$:/status/IsAnonymous\\\";\\nSyncer.prototype.titleIsReadOnly = \\\"$:/status/IsReadOnly\\\";\\nSyncer.prototype.titleUserName = \\\"$:/status/UserName\\\";\\nSyncer.prototype.titleSyncFilter = \\\"$:/config/SyncFilter\\\";\\nSyncer.prototype.titleSyncPollingInterval = \\\"$:/config/SyncPollingInterval\\\";\\nSyncer.prototype.titleSyncDisableLazyLoading = \\\"$:/config/SyncDisableLazyLoading\\\";\\nSyncer.prototype.titleSavedNotification = \\\"$:/language/Notifications/Save/Done\\\";\\nSyncer.prototype.titleSyncThrottleInterval = \\\"$:/config/SyncThrottleInterval\\\";\\nSyncer.prototype.taskTimerInterval = 1 * 1000; // Interval for sync timer\\nSyncer.prototype.throttleInterval = 1 * 1000; // Defer saving tiddlers if they've changed in the last 1s...\\nSyncer.prototype.errorRetryInterval = 5 * 1000; // Interval to retry after an error\\nSyncer.prototype.fallbackInterval = 10 * 1000; // Unless the task is older than 10s\\nSyncer.prototype.pollTimerInterval = 60 * 1000; // Interval for polling for changes from the adaptor\\n\\n/*\\nInstantiate the syncer with the following options:\\nsyncadaptor: reference to syncadaptor to be used\\nwiki: wiki to be synced\\n*/\\nfunction Syncer(options) {\\n\\tvar self = this;\\n\\tthis.wiki = options.wiki;\\n\\t// Save parameters\\n\\tthis.syncadaptor = options.syncadaptor;\\n\\tthis.disableUI = !!options.disableUI;\\n\\tthis.titleIsLoggedIn = options.titleIsLoggedIn || this.titleIsLoggedIn;\\n\\tthis.titleUserName = options.titleUserName || this.titleUserName;\\n\\tthis.titleSyncFilter = options.titleSyncFilter || this.titleSyncFilter;\\n\\tthis.titleSavedNotification = options.titleSavedNotification || this.titleSavedNotification;\\n\\tthis.taskTimerInterval = options.taskTimerInterval || this.taskTimerInterval;\\n\\tthis.throttleInterval = options.throttleInterval || parseInt(this.wiki.getTiddlerText(this.titleSyncThrottleInterval,\\\"\\\"),10) || this.throttleInterval;\\n\\tthis.errorRetryInterval = options.errorRetryInterval || this.errorRetryInterval;\\n\\tthis.fallbackInterval = options.fallbackInterval || this.fallbackInterval;\\n\\tthis.pollTimerInterval = options.pollTimerInterval || parseInt(this.wiki.getTiddlerText(this.titleSyncPollingInterval,\\\"\\\"),10) || this.pollTimerInterval;\\n\\tthis.logging = \\\"logging\\\" in options ? options.logging : true;\\n\\t// Make a logger\\n\\tthis.logger = new $tw.utils.Logger(\\\"syncer\\\" + ($tw.browser ? \\\"-browser\\\" : \\\"\\\") + ($tw.node ? \\\"-server\\\" : \\\"\\\")  + (this.syncadaptor.name ? (\\\"-\\\" + this.syncadaptor.name) : \\\"\\\"),{\\n\\t\\tcolour: \\\"cyan\\\",\\n\\t\\tenable: this.logging,\\n\\t\\tsaveHistory: true\\n\\t});\\n\\t// Make another logger for connection errors\\n\\tthis.loggerConnection = new $tw.utils.Logger(\\\"syncer\\\" + ($tw.browser ? \\\"-browser\\\" : \\\"\\\") + ($tw.node ? \\\"-server\\\" : \\\"\\\")  + (this.syncadaptor.name ? (\\\"-\\\" + this.syncadaptor.name) : \\\"\\\") + \\\"-connection\\\",{\\n\\t\\tcolour: \\\"cyan\\\",\\n\\t\\tenable: this.logging\\n\\t});\\n\\t// Ask the syncadaptor to use the main logger\\n\\tif(this.syncadaptor.setLoggerSaveBuffer) {\\n\\t\\tthis.syncadaptor.setLoggerSaveBuffer(this.logger);\\n\\t}\\n\\t// Compile the dirty tiddler filter\\n\\tthis.filterFn = this.wiki.compileFilter(this.wiki.getTiddlerText(this.titleSyncFilter));\\n\\t// Record information for known tiddlers\\n\\tthis.readTiddlerInfo();\\n\\tthis.titlesToBeLoaded = {}; // Hashmap of titles of tiddlers that need loading from the server\\n\\tthis.titlesHaveBeenLazyLoaded = {}; // Hashmap of titles of tiddlers that have already been lazily loaded from the server\\n\\t// Timers\\n\\tthis.taskTimerId = null; // Timer for task dispatch\\n\\tthis.pollTimerId = null; // Timer for polling server\\n\\t// Number of outstanding requests\\n\\tthis.numTasksInProgress = 0;\\n\\t// Listen out for changes to tiddlers\\n\\tthis.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t// Filter the changes to just include ones that are being synced\\n\\t\\tvar filteredChanges = self.getSyncedTiddlers(function(callback) {\\n\\t\\t\\t$tw.utils.each(changes,function(change,title) {\\n\\t\\t\\t\\tvar tiddler = self.wiki.tiddlerExists(title) && self.wiki.getTiddler(title);\\n\\t\\t\\t\\tcallback(tiddler,title);\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\tif(filteredChanges.length > 0) {\\n\\t\\t\\tself.processTaskQueue();\\n\\t\\t} else {\\n\\t\\t\\t// Look for deletions of tiddlers we're already syncing\\t\\n\\t\\t\\tvar outstandingDeletion = false\\n\\t\\t\\t$tw.utils.each(changes,function(change,title,object) {\\n\\t\\t\\t\\tif(change.deleted && $tw.utils.hop(self.tiddlerInfo,title)) {\\n\\t\\t\\t\\t\\toutstandingDeletion = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tif(outstandingDeletion) {\\n\\t\\t\\t\\tself.processTaskQueue();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\t// Browser event handlers\\n\\tif($tw.browser && !this.disableUI) {\\n\\t\\t// Set up our beforeunload handler\\n\\t\\t$tw.addUnloadTask(function(event) {\\n\\t\\t\\tvar confirmationMessage;\\n\\t\\t\\tif(self.isDirty()) {\\n\\t\\t\\t\\tconfirmationMessage = $tw.language.getString(\\\"UnsavedChangesWarning\\\");\\n\\t\\t\\t\\tevent.returnValue = confirmationMessage; // Gecko\\n\\t\\t\\t}\\n\\t\\t\\treturn confirmationMessage;\\n\\t\\t});\\n\\t\\t// Listen out for login/logout/refresh events in the browser\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-login\\\",function(event) {\\n\\t\\t\\tvar username = event && event.paramObject && event.paramObject.username,\\n\\t\\t\\t\\tpassword = event && event.paramObject && event.paramObject.password;\\n\\t\\t\\tif(username && password) {\\n\\t\\t\\t\\t// Login with username and password\\n\\t\\t\\t\\tself.login(username,password,function() {});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// No username and password, so we display a prompt\\n\\t\\t\\t\\tself.handleLoginEvent();\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-logout\\\",function() {\\n\\t\\t\\tself.handleLogoutEvent();\\n\\t\\t});\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-server-refresh\\\",function() {\\n\\t\\t\\tself.handleRefreshEvent();\\n\\t\\t});\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-copy-syncer-logs-to-clipboard\\\",function() {\\n\\t\\t\\t$tw.utils.copyToClipboard($tw.utils.getSystemInfo() + \\\"\\\\n\\\\nLog:\\\\n\\\" + self.logger.getBuffer());\\n\\t\\t});\\n\\t}\\n\\t// Listen out for lazyLoad events\\n\\tif(!this.disableUI && this.wiki.getTiddlerText(this.titleSyncDisableLazyLoading) !== \\\"yes\\\") {\\n\\t\\tthis.wiki.addEventListener(\\\"lazyLoad\\\",function(title) {\\n\\t\\t\\tself.handleLazyLoadEvent(title);\\n\\t\\t});\\t\\t\\n\\t}\\n\\t// Get the login status\\n\\tthis.getStatus(function(err,isLoggedIn) {\\n\\t\\t// Do a sync from the server\\n\\t\\tself.syncFromServer();\\n\\t});\\n}\\n\\n/*\\nShow a generic network error alert\\n*/\\nSyncer.prototype.displayError = function(msg,err) {\\n\\tif(err === ($tw.language.getString(\\\"Error/XMLHttpRequest\\\") + \\\": 0\\\")) {\\n\\t\\tthis.loggerConnection.alert($tw.language.getString(\\\"Error/NetworkErrorAlert\\\"));\\n\\t\\tthis.logger.log(msg + \\\":\\\",err);\\n\\t} else {\\n\\t\\tthis.logger.alert(msg + \\\":\\\",err);\\n\\t}\\n};\\n\\n/*\\nReturn an array of the tiddler titles that are subjected to syncing\\n*/\\nSyncer.prototype.getSyncedTiddlers = function(source) {\\n\\treturn this.filterFn.call(this.wiki,source);\\n};\\n\\n/*\\nReturn an array of the tiddler titles that are subjected to syncing\\n*/\\nSyncer.prototype.getTiddlerRevision = function(title) {\\n\\tif(this.syncadaptor && this.syncadaptor.getTiddlerRevision) {\\n\\t\\treturn this.syncadaptor.getTiddlerRevision(title);\\n\\t} else {\\n\\t\\treturn this.wiki.getTiddler(title).fields.revision;\\t\\n\\t} \\n};\\n\\n/*\\nRead (or re-read) the latest tiddler info from the store\\n*/\\nSyncer.prototype.readTiddlerInfo = function() {\\n\\t// Hashmap by title of {revision:,changeCount:,adaptorInfo:}\\n\\t// \\\"revision\\\" is the revision of the tiddler last seen on the server, and \\\"changecount\\\" is the corresponding local changecount\\n\\tthis.tiddlerInfo = {};\\n\\t// Record information for known tiddlers\\n\\tvar self = this,\\n\\t\\ttiddlers = this.getSyncedTiddlers();\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar tiddler = self.wiki.getTiddler(title);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tself.tiddlerInfo[title] = {\\n\\t\\t\\t\\trevision: self.getTiddlerRevision(title),\\n\\t\\t\\t\\tadaptorInfo: self.syncadaptor && self.syncadaptor.getTiddlerInfo(tiddler),\\n\\t\\t\\t\\tchangeCount: self.wiki.getChangeCount(title)\\n\\t\\t\\t};\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nChecks whether the wiki is dirty (ie the window shouldn't be closed)\\n*/\\nSyncer.prototype.isDirty = function() {\\n\\tthis.logger.log(\\\"Checking dirty status\\\");\\n\\t// Check tiddlers that are in the store and included in the filter function\\n\\tvar titles = this.getSyncedTiddlers();\\n\\tfor(var index=0; index\u003Ctitles.length; index++) {\\n\\t\\tvar title = titles[index],\\n\\t\\t\\ttiddlerInfo = this.tiddlerInfo[title];\\n\\t\\tif(this.wiki.tiddlerExists(title)) {\\n\\t\\t\\tif(tiddlerInfo) {\\n\\t\\t\\t\\t// If the tiddler is known on the server and has been modified locally then it needs to be saved to the server\\n\\t\\t\\t\\tif(this.wiki.getChangeCount(title) > tiddlerInfo.changeCount) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If the tiddler isn't known on the server then it needs to be saved to the server\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Check tiddlers that are known from the server but not currently in the store\\n\\ttitles = Object.keys(this.tiddlerInfo);\\n\\tfor(index=0; index\u003Ctitles.length; index++) {\\n\\t\\tif(!this.wiki.tiddlerExists(titles[index])) {\\n\\t\\t\\t// There must be a pending delete\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\n/*\\nUpdate the document body with the class \\\"tc-dirty\\\" if the wiki has unsaved/unsynced changes\\n*/\\nSyncer.prototype.updateDirtyStatus = function() {\\n\\tif($tw.browser && !this.disableUI) {\\n\\t\\tvar dirty = this.isDirty();\\n\\t\\t$tw.utils.toggleClass(document.body,\\\"tc-dirty\\\",dirty);\\n\\t\\tif(!dirty) {\\n\\t\\t\\tthis.loggerConnection.clearAlerts();\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nSave an incoming tiddler in the store, and updates the associated tiddlerInfo\\n*/\\nSyncer.prototype.storeTiddler = function(tiddlerFields) {\\n\\t// Save the tiddler\\n\\tvar tiddler = new $tw.Tiddler(tiddlerFields);\\n\\tthis.wiki.addTiddler(tiddler);\\n\\t// Save the tiddler revision and changeCount details\\n\\tthis.tiddlerInfo[tiddlerFields.title] = {\\n\\t\\trevision: this.getTiddlerRevision(tiddlerFields.title),\\n\\t\\tadaptorInfo: this.syncadaptor.getTiddlerInfo(tiddler),\\n\\t\\tchangeCount: this.wiki.getChangeCount(tiddlerFields.title)\\n\\t};\\n};\\n\\nSyncer.prototype.getStatus = function(callback) {\\n\\tvar self = this;\\n\\t// Check if the adaptor supports getStatus()\\n\\tif(this.syncadaptor && this.syncadaptor.getStatus) {\\n\\t\\t// Mark us as not logged in\\n\\t\\tthis.wiki.addTiddler({title: this.titleIsLoggedIn,text: \\\"no\\\"});\\n\\t\\t// Get login status\\n\\t\\tthis.syncadaptor.getStatus(function(err,isLoggedIn,username,isReadOnly,isAnonymous) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\tself.displayError(\\\"Get Status Error\\\",err);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Set the various status tiddlers\\n\\t\\t\\t\\tself.wiki.addTiddler({title: self.titleIsReadOnly,text: isReadOnly ? \\\"yes\\\" : \\\"no\\\"});\\n\\t\\t\\t\\tself.wiki.addTiddler({title: self.titleIsAnonymous,text: isAnonymous ? \\\"yes\\\" : \\\"no\\\"});\\n\\t\\t\\t\\tself.wiki.addTiddler({title: self.titleIsLoggedIn,text: isLoggedIn ? \\\"yes\\\" : \\\"no\\\"});\\n\\t\\t\\t\\tif(isLoggedIn) {\\n\\t\\t\\t\\t\\tself.wiki.addTiddler({title: self.titleUserName,text: username || \\\"\\\"});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Invoke the callback\\n\\t\\t\\tif(callback) {\\n\\t\\t\\t\\tcallback(err,isLoggedIn,username);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tcallback(null,true,\\\"UNAUTHENTICATED\\\");\\n\\t}\\n};\\n\\n/*\\nSynchronise from the server by reading the skinny tiddler list and queuing up loads for any tiddlers that we don't already have up to date\\n*/\\nSyncer.prototype.syncFromServer = function() {\\n\\tvar self = this,\\n\\t\\tcancelNextSync = function() {\\n\\t\\t\\tif(self.pollTimerId) {\\n\\t\\t\\t\\tclearTimeout(self.pollTimerId);\\n\\t\\t\\t\\tself.pollTimerId = null;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\ttriggerNextSync = function() {\\n\\t\\t\\tself.pollTimerId = setTimeout(function() {\\n\\t\\t\\t\\tself.pollTimerId = null;\\n\\t\\t\\t\\tself.syncFromServer.call(self);\\n\\t\\t\\t},self.pollTimerInterval);\\n\\t\\t},\\n\\t\\tsyncSystemFromServer = (self.wiki.getTiddlerText(\\\"$:/config/SyncSystemTiddlersFromServer\\\") === \\\"yes\\\" ? true : false);\\n\\tif(this.syncadaptor && this.syncadaptor.getUpdatedTiddlers) {\\n\\t\\tthis.logger.log(\\\"Retrieving updated tiddler list\\\");\\n\\t\\tcancelNextSync();\\n\\t\\tthis.syncadaptor.getUpdatedTiddlers(self,function(err,updates) {\\n\\t\\t\\ttriggerNextSync();\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\tself.displayError($tw.language.getString(\\\"Error/RetrievingSkinny\\\"),err);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tif(updates) {\\n\\t\\t\\t\\t$tw.utils.each(updates.modifications,function(title) {\\n\\t\\t\\t\\t\\tself.titlesToBeLoaded[title] = true;\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\t$tw.utils.each(updates.deletions,function(title) {\\n\\t\\t\\t\\t\\tif(syncSystemFromServer || !self.wiki.isSystemTiddler(title)) {\\n\\t\\t\\t\\t\\t\\tdelete self.tiddlerInfo[title];\\n\\t\\t\\t\\t\\t\\tself.logger.log(\\\"Deleting tiddler missing from server:\\\",title);\\n\\t\\t\\t\\t\\t\\tself.wiki.deleteTiddler(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tif(updates.modifications.length > 0 || updates.deletions.length > 0) {\\n\\t\\t\\t\\t\\tself.processTaskQueue();\\n\\t\\t\\t\\t}\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else if(this.syncadaptor && this.syncadaptor.getSkinnyTiddlers) {\\n\\t\\tthis.logger.log(\\\"Retrieving skinny tiddler list\\\");\\n\\t\\tcancelNextSync();\\n\\t\\tthis.syncadaptor.getSkinnyTiddlers(function(err,tiddlers) {\\n\\t\\t\\ttriggerNextSync();\\n\\t\\t\\t// Check for errors\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\tself.displayError($tw.language.getString(\\\"Error/RetrievingSkinny\\\"),err);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t// Keep track of which tiddlers we already know about have been reported this time\\n\\t\\t\\tvar previousTitles = Object.keys(self.tiddlerInfo);\\n\\t\\t\\t// Process each incoming tiddler\\n\\t\\t\\tfor(var t=0; t\u003Ctiddlers.length; t++) {\\n\\t\\t\\t\\t// Get the incoming tiddler fields, and the existing tiddler\\n\\t\\t\\t\\tvar tiddlerFields = tiddlers[t],\\n\\t\\t\\t\\t\\tincomingRevision = tiddlerFields.revision + \\\"\\\",\\n\\t\\t\\t\\t\\ttiddler = self.wiki.tiddlerExists(tiddlerFields.title) && self.wiki.getTiddler(tiddlerFields.title),\\n\\t\\t\\t\\t\\ttiddlerInfo = self.tiddlerInfo[tiddlerFields.title],\\n\\t\\t\\t\\t\\tcurrRevision = tiddlerInfo ? tiddlerInfo.revision : null,\\n\\t\\t\\t\\t\\tindexInPreviousTitles = previousTitles.indexOf(tiddlerFields.title);\\n\\t\\t\\t\\tif(indexInPreviousTitles !== -1) {\\n\\t\\t\\t\\t\\tpreviousTitles.splice(indexInPreviousTitles,1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Ignore the incoming tiddler if it's the same as the revision we've already got\\n\\t\\t\\t\\tif(currRevision !== incomingRevision) {\\n\\t\\t\\t\\t\\t// Only load the skinny version if we don't already have a fat version of the tiddler\\n\\t\\t\\t\\t\\tif(!tiddler || tiddler.fields.text === undefined) {\\n\\t\\t\\t\\t\\t\\tself.storeTiddler(tiddlerFields);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Do a full load of this tiddler\\n\\t\\t\\t\\t\\tself.titlesToBeLoaded[tiddlerFields.title] = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Delete any tiddlers that were previously reported but missing this time\\n\\t\\t\\t$tw.utils.each(previousTitles,function(title) {\\n\\t\\t\\t\\tif(syncSystemFromServer || !self.wiki.isSystemTiddler(title)) {\\n\\t\\t\\t\\t\\tdelete self.tiddlerInfo[title];\\n\\t\\t\\t\\t\\tself.logger.log(\\\"Deleting tiddler missing from server:\\\",title);\\n\\t\\t\\t\\t\\tself.wiki.deleteTiddler(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tself.processTaskQueue();\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nForce load a tiddler from the server\\n*/\\nSyncer.prototype.enqueueLoadTiddler = function(title) {\\n\\tthis.titlesToBeLoaded[title] = true;\\n\\tthis.processTaskQueue();\\n};\\n\\n/*\\nLazily load a skinny tiddler if we can\\n*/\\nSyncer.prototype.handleLazyLoadEvent = function(title) {\\n\\t// Ignore if the syncadaptor doesn't handle it\\n\\tif(!this.syncadaptor.supportsLazyLoading) {\\n\\t\\treturn;\\n\\t}\\n\\t// Don't lazy load the same tiddler twice\\n\\tif(!this.titlesHaveBeenLazyLoaded[title]) {\\n\\t\\t// Don't lazy load if the tiddler isn't included in the sync filter\\n\\t\\tif(this.getSyncedTiddlers().indexOf(title) !== -1) {\\n\\t\\t\\t// Mark the tiddler as needing loading, and having already been lazily loaded\\n\\t\\t\\tthis.titlesToBeLoaded[title] = true;\\n\\t\\t\\tthis.titlesHaveBeenLazyLoaded[title] = true;\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nDispay a password prompt and allow the user to login\\n*/\\nSyncer.prototype.handleLoginEvent = function() {\\n\\tvar self = this;\\n\\tthis.getStatus(function(err,isLoggedIn,username) {\\n\\t\\tif(!err && !isLoggedIn) {\\n\\t\\t\\tif(self.syncadaptor && self.syncadaptor.displayLoginPrompt) {\\n\\t\\t\\t\\tself.syncadaptor.displayLoginPrompt(self);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.displayLoginPrompt();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nDispay a password prompt\\n*/\\nSyncer.prototype.displayLoginPrompt = function() {\\n\\tvar self = this;\\n\\tvar promptInfo = $tw.passwordPrompt.createPrompt({\\n\\t\\tserviceName: $tw.language.getString(\\\"LoginToTiddlySpace\\\"),\\n\\t\\tcallback: function(data) {\\n\\t\\t\\tself.login(data.username,data.password,function(err,isLoggedIn) {\\n\\t\\t\\t\\tself.syncFromServer();\\n\\t\\t\\t});\\n\\t\\t\\treturn true; // Get rid of the password prompt\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nAttempt to login to TiddlyWeb.\\n\\tusername: username\\n\\tpassword: password\\n\\tcallback: invoked with arguments (err,isLoggedIn)\\n*/\\nSyncer.prototype.login = function(username,password,callback) {\\n\\tthis.logger.log(\\\"Attempting to login as\\\",username);\\n\\tvar self = this;\\n\\tif(this.syncadaptor.login) {\\n\\t\\tthis.syncadaptor.login(username,password,function(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tself.getStatus(function(err,isLoggedIn,username) {\\n\\t\\t\\t\\tif(callback) {\\n\\t\\t\\t\\t\\tcallback(err,isLoggedIn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t});\\n\\t} else {\\n\\t\\tcallback(null,true);\\n\\t}\\n};\\n\\n/*\\nAttempt to log out of TiddlyWeb\\n*/\\nSyncer.prototype.handleLogoutEvent = function() {\\n\\tthis.logger.log(\\\"Attempting to logout\\\");\\n\\tvar self = this;\\n\\tif(this.syncadaptor.logout) {\\n\\t\\tthis.syncadaptor.logout(function(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\tself.displayError(\\\"Logout Error\\\",err);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tself.getStatus();\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nImmediately refresh from the server\\n*/\\nSyncer.prototype.handleRefreshEvent = function() {\\n\\tthis.syncFromServer();\\n};\\n\\n/*\\nProcess the next task\\n*/\\nSyncer.prototype.processTaskQueue = function() {\\n\\tvar self = this;\\n\\t// Only process a task if the sync adaptor is fully initialised and we're not already performing\\n\\t// a task. If we are already performing a task then we'll dispatch the next one when it completes\\n\\tif((!this.syncadaptor.isReady || this.syncadaptor.isReady()) && this.numTasksInProgress === 0) {\\n\\t\\t// Choose the next task to perform\\n\\t\\tvar task = this.chooseNextTask();\\n\\t\\t// Perform the task if we had one\\n\\t\\tif(typeof task === \\\"object\\\" && task !== null) {\\n\\t\\t\\tthis.numTasksInProgress += 1;\\n\\t\\t\\ttask.run(function(err) {\\n\\t\\t\\t\\tself.numTasksInProgress -= 1;\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\tself.displayError(\\\"Sync error while processing \\\" + task.type + \\\" of '\\\" + task.title + \\\"'\\\",err);\\n\\t\\t\\t\\t\\tself.updateDirtyStatus();\\n\\t\\t\\t\\t\\tself.triggerTimeout(self.errorRetryInterval);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tself.updateDirtyStatus();\\n\\t\\t\\t\\t\\t// Process the next task\\n\\t\\t\\t\\t\\tself.processTaskQueue.call(self);\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\t// No task is ready so update the status\\n\\t\\t\\tthis.updateDirtyStatus();\\n\\t\\t\\t// And trigger a timeout if there is a pending task\\n\\t\\t\\tif(task === true) {\\n\\t\\t\\t\\tthis.triggerTimeout();\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tthis.updateDirtyStatus();\\t\\t\\n\\t}\\n};\\n\\nSyncer.prototype.triggerTimeout = function(interval) {\\n\\tvar self = this;\\n\\tif(!this.taskTimerId) {\\n\\t\\tthis.taskTimerId = setTimeout(function() {\\n\\t\\t\\tself.taskTimerId = null;\\n\\t\\t\\tself.processTaskQueue.call(self);\\n\\t\\t},interval || self.taskTimerInterval);\\n\\t}\\n};\\n\\n/*\\nChoose the next sync task. We prioritise saves, then deletes, then loads from the server\\n\\nReturns either a task object, null if there's no upcoming tasks, or the boolean true if there are pending tasks that aren't yet due\\n*/\\nSyncer.prototype.chooseNextTask = function() {\\n\\tvar thresholdLastSaved = (new Date()) - this.throttleInterval,\\n\\t\\thavePending = null;\\n\\t// First we look for tiddlers that have been modified locally and need saving back to the server\\n\\tvar titles = this.getSyncedTiddlers();\\n\\tfor(var index=0; index\u003Ctitles.length; index++) {\\n\\t\\tvar title = titles[index],\\n\\t\\t\\ttiddler = this.wiki.tiddlerExists(title) && this.wiki.getTiddler(title),\\n\\t\\t\\ttiddlerInfo = this.tiddlerInfo[title];\\n\\t\\tif(tiddler) {\\n\\t\\t\\t// If the tiddler is not known on the server, or has been modified locally no more recently than the threshold then it needs to be saved to the server\\n\\t\\t\\tvar hasChanged = !tiddlerInfo || this.wiki.getChangeCount(title) > tiddlerInfo.changeCount,\\n\\t\\t\\t\\tisReadyToSave = !tiddlerInfo || !tiddlerInfo.timestampLastSaved || tiddlerInfo.timestampLastSaved \u003C thresholdLastSaved;\\n\\t\\t\\tif(hasChanged) {\\n\\t\\t\\t\\tif(isReadyToSave) {\\n\\t\\t\\t\\t\\treturn new SaveTiddlerTask(this,title); \\t\\t\\t\\t\\t\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thavePending = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Second, we check tiddlers that are known from the server but not currently in the store, and so need deleting on the server\\n\\ttitles = Object.keys(this.tiddlerInfo);\\n\\tfor(index=0; index\u003Ctitles.length; index++) {\\n\\t\\ttitle = titles[index];\\n\\t\\ttiddlerInfo = this.tiddlerInfo[title];\\n\\t\\ttiddler = this.wiki.tiddlerExists(title) && this.wiki.getTiddler(title);\\n\\t\\tif(!tiddler) {\\n\\t\\t\\treturn new DeleteTiddlerTask(this,title);\\n\\t\\t}\\n\\t}\\n\\t// Check for tiddlers that need loading\\n\\ttitle = Object.keys(this.titlesToBeLoaded)[0];\\n\\tif(title) {\\n\\t\\tdelete this.titlesToBeLoaded[title];\\n\\t\\treturn new LoadTiddlerTask(this,title);\\n\\t}\\n\\t// No tasks are ready\\n\\treturn havePending;\\n};\\n\\nfunction SaveTiddlerTask(syncer,title) {\\n\\tthis.syncer = syncer;\\n\\tthis.title = title;\\n\\tthis.type = \\\"save\\\";\\n}\\n\\nSaveTiddlerTask.prototype.run = function(callback) {\\n\\tvar self = this,\\n\\t\\tchangeCount = this.syncer.wiki.getChangeCount(this.title),\\n\\t\\ttiddler = this.syncer.wiki.tiddlerExists(this.title) && this.syncer.wiki.getTiddler(this.title);\\n\\tthis.syncer.logger.log(\\\"Dispatching 'save' task:\\\",this.title);\\n\\tif(tiddler) {\\n\\t\\tthis.syncer.syncadaptor.saveTiddler(tiddler,function(err,adaptorInfo,revision) {\\n\\t\\t\\t// If there's an error, exit without changing any internal state\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\t// Adjust the info stored about this tiddler\\n\\t\\t\\tself.syncer.tiddlerInfo[self.title] = {\\n\\t\\t\\t\\tchangeCount: changeCount,\\n\\t\\t\\t\\tadaptorInfo: adaptorInfo,\\n\\t\\t\\t\\trevision: revision,\\n\\t\\t\\t\\ttimestampLastSaved: new Date()\\n\\t\\t\\t};\\n\\t\\t\\t// Invoke the callback\\n\\t\\t\\tcallback(null);\\n\\t\\t},{\\n\\t\\t\\ttiddlerInfo: self.syncer.tiddlerInfo[self.title]\\n\\t\\t});\\n\\t} else {\\n\\t\\tthis.syncer.logger.log(\\\" Not Dispatching 'save' task:\\\",this.title,\\\"tiddler does not exist\\\");\\n\\t\\t$tw.utils.nextTick(callback(null));\\n\\t}\\n};\\n\\nfunction DeleteTiddlerTask(syncer,title) {\\n\\tthis.syncer = syncer;\\n\\tthis.title = title;\\n\\tthis.type = \\\"delete\\\";\\n}\\n\\nDeleteTiddlerTask.prototype.run = function(callback) {\\n\\tvar self = this;\\n\\tthis.syncer.logger.log(\\\"Dispatching 'delete' task:\\\",this.title);\\n\\tthis.syncer.syncadaptor.deleteTiddler(this.title,function(err) {\\n\\t\\t// If there's an error, exit without changing any internal state\\n\\t\\tif(err) {\\n\\t\\t\\treturn callback(err);\\n\\t\\t}\\n\\t\\t// Remove the info stored about this tiddler\\n\\t\\tdelete self.syncer.tiddlerInfo[self.title];\\n\\t\\t// Invoke the callback\\n\\t\\tcallback(null);\\n\\t},{\\n\\t\\ttiddlerInfo: self.syncer.tiddlerInfo[this.title]\\n\\t});\\n};\\n\\nfunction LoadTiddlerTask(syncer,title) {\\n\\tthis.syncer = syncer;\\n\\tthis.title = title;\\n\\tthis.type = \\\"load\\\";\\n}\\n\\nLoadTiddlerTask.prototype.run = function(callback) {\\n\\tvar self = this;\\n\\tthis.syncer.logger.log(\\\"Dispatching 'load' task:\\\",this.title);\\n\\tthis.syncer.syncadaptor.loadTiddler(this.title,function(err,tiddlerFields) {\\n\\t\\t// If there's an error, exit without changing any internal state\\n\\t\\tif(err) {\\n\\t\\t\\treturn callback(err);\\n\\t\\t}\\n\\t\\t// Update the info stored about this tiddler\\n\\t\\tif(tiddlerFields) {\\n\\t\\t\\tself.syncer.storeTiddler(tiddlerFields);\\n\\t\\t}\\n\\t\\t// Invoke the callback\\n\\t\\tcallback(null);\\n\\t});\\n};\\n\\nexports.Syncer = Syncer;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/tiddler.js\":{\"title\":\"$:/core/modules/tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/tiddler.js\\ntype: application/javascript\\nmodule-type: tiddlermethod\\n\\nExtension methods for the $tw.Tiddler object (constructor and methods required at boot time are in boot/boot.js)\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.hasTag = function(tag) {\\n\\treturn this.fields.tags && this.fields.tags.indexOf(tag) !== -1;\\n};\\n\\nexports.isPlugin = function() {\\n\\treturn this.fields.type === \\\"application/json\\\" && this.hasField(\\\"plugin-type\\\");\\n};\\n\\nexports.isDraft = function() {\\n\\treturn this.hasField(\\\"draft.of\\\");\\n};\\n\\nexports.getFieldString = function(field,defaultValue) {\\n\\tvar value = this.fields[field];\\n\\t// Check for a missing field\\n\\tif(value === undefined || value === null) {\\n\\t\\treturn defaultValue || \\\"\\\";\\n\\t}\\n\\t// Stringify the field with the associated tiddler field module (if any)\\n\\tvar fieldModule = $tw.Tiddler.fieldModules[field];\\n\\tif(fieldModule && fieldModule.stringify) {\\n\\t\\treturn fieldModule.stringify.call(this,value);\\n\\t} else {\\n\\t\\treturn value.toString();\\n\\t}\\n};\\n\\n/*\\nGet the value of a field as a list\\n*/\\nexports.getFieldList = function(field) {\\n\\tvar value = this.fields[field];\\n\\t// Check for a missing field\\n\\tif(value === undefined || value === null) {\\n\\t\\treturn [];\\n\\t}\\n\\treturn $tw.utils.parseStringArray(value);\\n};\\n\\n/*\\nGet all the fields as a hashmap of strings. Options:\\n\\texclude: an array of field names to exclude\\n*/\\nexports.getFieldStrings = function(options) {\\n\\toptions = options || {};\\n\\tvar exclude = options.exclude || [];\\n\\tvar fields = {};\\n\\tfor(var field in this.fields) {\\n\\t\\tif($tw.utils.hop(this.fields,field)) {\\n\\t\\t\\tif(exclude.indexOf(field) === -1) {\\n\\t\\t\\t\\tfields[field] = this.getFieldString(field);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn fields;\\n};\\n\\n/*\\nGet all the fields as a name:value block. Options:\\n\\texclude: an array of field names to exclude\\n*/\\nexports.getFieldStringBlock = function(options) {\\n\\toptions = options || {};\\n\\tvar exclude = options.exclude || [],\\n\\t\\tfields = Object.keys(this.fields).sort(),\\n\\t\\tresult = [];\\n\\tfor(var t=0; t\u003Cfields.length; t++) {\\n\\t\\tvar field = fields[t];\\n\\t\\tif(exclude.indexOf(field) === -1) {\\n\\t\\t\\tresult.push(field + \\\": \\\" + this.getFieldString(field));\\n\\t\\t}\\n\\t}\\n\\treturn result.join(\\\"\\\\n\\\");\\n};\\n\\nexports.getFieldDay = function(field) {\\n\\tif(this.cache && this.cache.day && $tw.utils.hop(this.cache.day,field) ) {\\n\\t\\treturn this.cache.day[field];\\n\\t}\\n\\tvar day = \\\"\\\";\\n\\tif(this.fields[field]) {\\n\\t\\tday = (new Date($tw.utils.parseDate(this.fields[field]))).setHours(0,0,0,0);\\n\\t}\\n\\tthis.cache.day = this.cache.day || {};\\n\\tthis.cache.day[field] = day;\\n\\treturn day;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"tiddlermethod\"},\"$:/core/modules/upgraders/plugins.js\":{\"title\":\"$:/core/modules/upgraders/plugins.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/upgraders/plugins.js\\ntype: application/javascript\\nmodule-type: upgrader\\n\\nUpgrader module that checks that plugins are newer than any already installed version\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar UPGRADE_LIBRARY_TITLE = \\\"$:/UpgradeLibrary\\\";\\n\\nvar BLOCKED_PLUGINS = {\\n\\t\\\"$:/themes/tiddlywiki/stickytitles\\\": {\\n\\t\\tversions: [\\\"*\\\"]\\n\\t},\\n\\t\\\"$:/plugins/tiddlywiki/fullscreen\\\": {\\n\\t\\tversions: [\\\"*\\\"]\\n\\t}\\n};\\n\\nexports.upgrade = function(wiki,titles,tiddlers) {\\n\\tvar self = this,\\n\\t\\tmessages = {},\\n\\t\\tupgradeLibrary,\\n\\t\\tgetLibraryTiddler = function(title) {\\n\\t\\t\\tif(!upgradeLibrary) {\\n\\t\\t\\t\\tupgradeLibrary = wiki.getTiddlerData(UPGRADE_LIBRARY_TITLE,{});\\n\\t\\t\\t\\tupgradeLibrary.tiddlers = upgradeLibrary.tiddlers || {};\\n\\t\\t\\t}\\n\\t\\t\\treturn upgradeLibrary.tiddlers[title];\\n\\t\\t};\\n\\n\\t// Go through all the incoming tiddlers\\n\\t$tw.utils.each(titles,function(title) {\\n\\t\\tvar incomingTiddler = tiddlers[title];\\n\\t\\t// Check if we're dealing with a plugin\\n\\t\\tif(incomingTiddler && incomingTiddler[\\\"plugin-type\\\"]) {\\n\\t\\t\\t// Check whether the plugin contains JS modules\\n\\t\\t\\tvar requiresReload = wiki.doesPluginInfoRequireReload($tw.utils.parseJSONSafe(incomingTiddler.text)) ? (wiki.getTiddlerText(\\\"$:/language/ControlPanel/Plugins/PluginWillRequireReload\\\") + \\\" \\\") : \\\"\\\";\\n\\t\\t\\tmessages[title] = requiresReload;\\n\\t\\t\\tif(incomingTiddler.version) {\\n\\t\\t\\t\\t// Upgrade the incoming plugin if it is in the upgrade library\\n\\t\\t\\t\\tvar libraryTiddler = getLibraryTiddler(title);\\n\\t\\t\\t\\tif(libraryTiddler && libraryTiddler[\\\"plugin-type\\\"] && libraryTiddler.version) {\\n\\t\\t\\t\\t\\ttiddlers[title] = libraryTiddler;\\n\\t\\t\\t\\t\\tmessages[title] = requiresReload + $tw.language.getString(\\\"Import/Upgrader/Plugins/Upgraded\\\",{variables: {incoming: incomingTiddler.version, upgraded: libraryTiddler.version}});\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Suppress the incoming plugin if it is older than the currently installed one\\n\\t\\t\\t\\tvar existingTiddler = wiki.getTiddler(title);\\n\\t\\t\\t\\tif(existingTiddler && existingTiddler.hasField(\\\"plugin-type\\\") && existingTiddler.hasField(\\\"version\\\")) {\\n\\t\\t\\t\\t\\t// Reject the incoming plugin by blanking all its fields\\n\\t\\t\\t\\t\\tif($tw.utils.checkVersions(existingTiddler.fields.version,incomingTiddler.version)) {\\n\\t\\t\\t\\t\\t\\ttiddlers[title] = Object.create(null);\\n\\t\\t\\t\\t\\t\\tmessages[title] = $tw.language.getString(\\\"Import/Upgrader/Plugins/Suppressed/Version\\\",{variables: {incoming: incomingTiddler.version, existing: existingTiddler.fields.version}});\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Check whether the plugin is on the blocked list\\n\\t\\t\\tvar blockInfo = BLOCKED_PLUGINS[title];\\n\\t\\t\\tif(blockInfo) {\\n\\t\\t\\t\\tif(blockInfo.versions.indexOf(\\\"*\\\") !== -1 || (incomingTiddler.version && blockInfo.versions.indexOf(incomingTiddler.version) !== -1)) {\\n\\t\\t\\t\\t\\ttiddlers[title] = Object.create(null);\\n\\t\\t\\t\\t\\tmessages[title] = $tw.language.getString(\\\"Import/Upgrader/Plugins/Suppressed/Incompatible\\\");\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn messages;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"upgrader\"},\"$:/core/modules/upgraders/system.js\":{\"title\":\"$:/core/modules/upgraders/system.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/upgraders/system.js\\ntype: application/javascript\\nmodule-type: upgrader\\n\\nUpgrader module that suppresses certain system tiddlers that shouldn't be imported\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar DONT_IMPORT_LIST = [\\\"$:/Import\\\"],\\n\\tUNSELECT_PREFIX_LIST = [\\\"$:/temp/\\\",\\\"$:/state/\\\",\\\"$:/StoryList\\\",\\\"$:/HistoryList\\\"],\\n\\tWARN_IMPORT_PREFIX_LIST = [\\\"$:/core/modules/\\\"];\\n\\nexports.upgrade = function(wiki,titles,tiddlers) {\\n\\tvar self = this,\\n\\t\\tmessages = {},\\n\\t\\tshowAlert = false;\\n\\t// Check for tiddlers on our list\\n\\t$tw.utils.each(titles,function(title) {\\n\\t\\tif(DONT_IMPORT_LIST.indexOf(title) !== -1) {\\n\\t\\t\\ttiddlers[title] = Object.create(null);\\n\\t\\t\\tmessages[title] = $tw.language.getString(\\\"Import/Upgrader/System/Suppressed\\\");\\n\\t\\t} else {\\n\\t\\t\\tfor(var t=0; t\u003CUNSELECT_PREFIX_LIST.length; t++) {\\n\\t\\t\\t\\tvar prefix = UNSELECT_PREFIX_LIST[t];\\n\\t\\t\\t\\tif(title.substr(0,prefix.length) === prefix) {\\n\\t\\t\\t\\t\\tmessages[title] = $tw.language.getString(\\\"Import/Upgrader/Tiddler/Unselected\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor(var t=0; t\u003CWARN_IMPORT_PREFIX_LIST.length; t++) {\\n\\t\\t\\t\\tvar prefix = WARN_IMPORT_PREFIX_LIST[t];\\n\\t\\t\\t\\tif(title.substr(0,prefix.length) === prefix && wiki.isShadowTiddler(title)) {\\n\\t\\t\\t\\t\\tshowAlert = true;\\n\\t\\t\\t\\t\\tmessages[title] = $tw.language.getString(\\\"Import/Upgrader/System/Warning\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\tif(showAlert) {\\n\\t\\tvar logger = new $tw.utils.Logger(\\\"import\\\");\\n\\t\\tlogger.alert($tw.language.getString(\\\"Import/Upgrader/System/Alert\\\"));\\n\\t}\\n\\treturn messages;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"upgrader\"},\"$:/core/modules/upgraders/themetweaks.js\":{\"title\":\"$:/core/modules/upgraders/themetweaks.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/upgraders/themetweaks.js\\ntype: application/javascript\\nmodule-type: upgrader\\n\\nUpgrader module that handles the change in theme tweak storage introduced in 5.0.14-beta.\\n\\nPreviously, theme tweaks were stored in two data tiddlers:\\n\\n* $:/themes/tiddlywiki/vanilla/metrics\\n* $:/themes/tiddlywiki/vanilla/settings\\n\\nNow, each tweak is stored in its own separate tiddler.\\n\\nThis upgrader copies any values from the old format to the new. The old data tiddlers are not deleted in case they have been used to store additional indexes.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar MAPPINGS = {\\n\\t\\\"$:/themes/tiddlywiki/vanilla/metrics\\\": {\\n\\t\\t\\\"fontsize\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\\\",\\n\\t\\t\\\"lineheight\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\\\",\\n\\t\\t\\\"storyleft\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\\\",\\n\\t\\t\\\"storytop\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/storytop\\\",\\n\\t\\t\\\"storyright\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/storyright\\\",\\n\\t\\t\\\"storywidth\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\\\",\\n\\t\\t\\\"tiddlerwidth\\\": \\\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\"\\n\\t},\\n\\t\\\"$:/themes/tiddlywiki/vanilla/settings\\\": {\\n\\t\\t\\\"fontfamily\\\": \\\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\\\"\\n\\t}\\n};\\n\\nexports.upgrade = function(wiki,titles,tiddlers) {\\n\\tvar self = this,\\n\\t\\tmessages = {};\\n\\t// Check for tiddlers on our list\\n\\t$tw.utils.each(titles,function(title) {\\n\\t\\tvar mapping = MAPPINGS[title];\\n\\t\\tif(mapping) {\\n\\t\\t\\tvar tiddler = new $tw.Tiddler(tiddlers[title]),\\n\\t\\t\\t\\ttiddlerData = wiki.getTiddlerDataCached(tiddler,{});\\n\\t\\t\\tfor(var index in mapping) {\\n\\t\\t\\t\\tvar mappedTitle = mapping[index];\\n\\t\\t\\t\\tif(!tiddlers[mappedTitle] || tiddlers[mappedTitle].title !== mappedTitle) {\\n\\t\\t\\t\\t\\ttiddlers[mappedTitle] = {\\n\\t\\t\\t\\t\\t\\ttitle: mappedTitle,\\n\\t\\t\\t\\t\\t\\ttext: tiddlerData[index]\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tmessages[mappedTitle] = $tw.language.getString(\\\"Import/Upgrader/ThemeTweaks/Created\\\",{variables: {\\n\\t\\t\\t\\t\\t\\tfrom: title + \\\"##\\\" + index\\n\\t\\t\\t\\t\\t}});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn messages;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"upgrader\"},\"$:/core/modules/utils/base64-utf8/base64-utf8.module.js\":{\"text\":\"(function(){// From https://gist.github.com/Nijikokun/5192472\\n//\\n// UTF8 Module\\n//\\n// Cleaner and modularized utf-8 encoding and decoding library for javascript.\\n//\\n// copyright: MIT\\n// author: Nijiko Yonskai, @nijikokun, nijikokun@gmail.com\\n!function(r,e,o,t){void 0!==o.module&&o.module.exports?o.module.exports=e.apply(o):void 0!==o.define&&\\\"function\\\"===o.define&&o.define.amd?define(\\\"utf8\\\",[],e):o.utf8=e.apply(o)}(0,function(){return{encode:function(r){if(\\\"string\\\"!=typeof r)return r;r=r.replace(/\\\\r\\\\n/g,\\\"\\\\n\\\");for(var e,o=\\\"\\\",t=0;t\u003Cr.length;t++)if((e=r.charCodeAt(t))\u003C128)o+=String.fromCharCode(e);else if(e>127&&e\u003C2048)o+=String.fromCharCode(e>>6|192),o+=String.fromCharCode(63&e|128);else if(e>55295&&e\u003C57344&&r.length>t+1){var i=e,n=r.charCodeAt(t+1);t++;var d=65536+(i-55296\u003C\u003C10|n-56320);o+=String.fromCharCode(d>>18|240),o+=String.fromCharCode(d>>12&63|128),o+=String.fromCharCode(d>>6&63|128),o+=String.fromCharCode(63&d|128)}else o+=String.fromCharCode(e>>12|224),o+=String.fromCharCode(e>>6&63|128),o+=String.fromCharCode(63&e|128);return o},decode:function(r){if(\\\"string\\\"!=typeof r)return r;for(var e=\\\"\\\",o=0,t=0;o\u003Cr.length;)if((t=r.charCodeAt(o))\u003C128)e+=String.fromCharCode(t),o++;else if(t>191&&t\u003C224)e+=String.fromCharCode((31&t)\u003C\u003C6|63&r.charCodeAt(o+1)),o+=2;else if(t>223&&t\u003C240)e+=String.fromCharCode((15&t)\u003C\u003C12|(63&r.charCodeAt(o+1))\u003C\u003C6|63&r.charCodeAt(o+2)),o+=3;else{var i=(7&t)\u003C\u003C18|(63&r.charCodeAt(o+1))\u003C\u003C12|(63&r.charCodeAt(o+2))\u003C\u003C6|63&r.charCodeAt(o+3);e+=String.fromCharCode(55296+(i-65536>>10))+String.fromCharCode(56320+(i-65536&1023)),o+=4}return e}}},this),function(r,e,o,t){if(void 0!==o.module&&o.module.exports){if(t&&o.require)for(var i=0;i\u003Ct.length;i++)o[t[i]]=o.require(t[i]);o.module.exports=e.apply(o)}else void 0!==o.define&&\\\"function\\\"===o.define&&o.define.amd?define(\\\"base64\\\",t||[],e):o.base64=e.apply(o)}(0,function(r){var e=r||this.utf8,o=\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\\";return{encode:function(r){if(void 0===e)throw{error:\\\"MissingMethod\\\",message:\\\"UTF8 Module is missing.\\\"};if(\\\"string\\\"!=typeof r)return r;r=e.encode(r);for(var t,i,n,d,f,a,h,C=\\\"\\\",c=0;c\u003Cr.length;)d=(t=r.charCodeAt(c++))>>2,f=(3&t)\u003C\u003C4|(i=r.charCodeAt(c++))>>4,a=(15&i)\u003C\u003C2|(n=r.charCodeAt(c++))>>6,h=63&n,isNaN(i)?a=h=64:isNaN(n)&&(h=64),C+=o.charAt(d)+o.charAt(f)+o.charAt(a)+o.charAt(h);return C},decode:function(r){if(void 0===e)throw{error:\\\"MissingMethod\\\",message:\\\"UTF8 Module is missing.\\\"};if(\\\"string\\\"!=typeof r)return r;r=r.replace(/[^A-Za-z0-9\\\\+\\\\/\\\\=]/g,\\\"\\\");for(var t,i,n,d,f,a,h=\\\"\\\",C=0;C\u003Cr.length;)t=o.indexOf(r.charAt(C++))\u003C\u003C2|(d=o.indexOf(r.charAt(C++)))>>4,i=(15&d)\u003C\u003C4|(f=o.indexOf(r.charAt(C++)))>>2,n=(3&f)\u003C\u003C6|(a=o.indexOf(r.charAt(C++))),h+=String.fromCharCode(t),64!=f&&(h+=String.fromCharCode(i)),64!=a&&(h+=String.fromCharCode(n));return e.decode(h)}}},this,[\\\"utf8\\\"]);}).call(exports);\",\"type\":\"application/javascript\",\"title\":\"$:/core/modules/utils/base64-utf8/base64-utf8.module.js\",\"module-type\":\"library\"},\"$:/core/modules/utils/crypto.js\":{\"title\":\"$:/core/modules/utils/crypto.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/crypto.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nUtility functions related to crypto.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nLook for an encrypted store area in the text of a TiddlyWiki file\\n*/\\nexports.extractEncryptedStoreArea = function(text) {\\n\\tvar encryptedStoreAreaStartMarker = \\\"\u003Cpre id=\\\\\\\"encryptedStoreArea\\\\\\\" type=\\\\\\\"text/plain\\\\\\\" style=\\\\\\\"display:none;\\\\\\\">\\\",\\n\\t\\tencryptedStoreAreaStart = text.indexOf(encryptedStoreAreaStartMarker);\\n\\tif(encryptedStoreAreaStart !== -1) {\\n\\t\\tvar encryptedStoreAreaEnd = text.indexOf(\\\"\u003C/pre>\\\",encryptedStoreAreaStart);\\n\\t\\tif(encryptedStoreAreaEnd !== -1) {\\n\\t\\t\\treturn $tw.utils.htmlDecode(text.substring(encryptedStoreAreaStart + encryptedStoreAreaStartMarker.length,encryptedStoreAreaEnd));\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nAttempt to extract the tiddlers from an encrypted store area using the current password. If the password is not provided then the password in the password store will be used\\n*/\\nexports.decryptStoreArea = function(encryptedStoreArea,password) {\\n\\tvar decryptedText = $tw.crypto.decrypt(encryptedStoreArea,password);\\n\\tif(decryptedText) {\\n\\t\\tvar json = $tw.utils.parseJSONSafe(decryptedText),\\n\\t\\t\\ttiddlers = [];\\n\\t\\tfor(var title in json) {\\n\\t\\t\\tif(title !== \\\"$:/isEncrypted\\\") {\\n\\t\\t\\t\\ttiddlers.push(json[title]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn tiddlers;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\n\\n/*\\nAttempt to extract the tiddlers from an encrypted store area using the current password. If that fails, the user is prompted for a password.\\nencryptedStoreArea: text of the TiddlyWiki encrypted store area\\ncallback: function(tiddlers) called with the array of decrypted tiddlers\\n\\nThe following configuration settings are supported:\\n\\n$tw.config.usePasswordVault: causes any password entered by the user to also be put into the system password vault\\n*/\\nexports.decryptStoreAreaInteractive = function(encryptedStoreArea,callback,options) {\\n\\t// Try to decrypt with the current password\\n\\tvar tiddlers = $tw.utils.decryptStoreArea(encryptedStoreArea);\\n\\tif(tiddlers) {\\n\\t\\tcallback(tiddlers);\\n\\t} else {\\n\\t\\t// Prompt for a new password and keep trying\\n\\t\\t$tw.passwordPrompt.createPrompt({\\n\\t\\t\\tserviceName: \\\"Enter a password to decrypt the imported TiddlyWiki\\\",\\n\\t\\t\\tnoUserName: true,\\n\\t\\t\\tcanCancel: true,\\n\\t\\t\\tsubmitText: \\\"Decrypt\\\",\\n\\t\\t\\tcallback: function(data) {\\n\\t\\t\\t\\t// Exit if the user cancelled\\n\\t\\t\\t\\tif(!data) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Attempt to decrypt the tiddlers\\n\\t\\t\\t\\tvar tiddlers = $tw.utils.decryptStoreArea(encryptedStoreArea,data.password);\\n\\t\\t\\t\\tif(tiddlers) {\\n\\t\\t\\t\\t\\tif($tw.config.usePasswordVault) {\\n\\t\\t\\t\\t\\t\\t$tw.crypto.setPassword(data.password);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcallback(tiddlers);\\n\\t\\t\\t\\t\\t// Exit and remove the password prompt\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// We didn't decrypt everything, so continue to prompt for password\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/csv.js\":{\"title\":\"$:/core/modules/utils/csv.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/csv.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nA barebones CSV parser\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nParse a CSV string with a header row and return an array of hashmaps.\\n*/\\nexports.parseCsvStringWithHeader = function(text,options) {\\n\\toptions = options || {};\\n\\tvar separator = options.separator || \\\",\\\",\\n\\t\\trows = text.split(/\\\\r?\\\\n/mg).map(function(row) {\\n\\t\\t\\treturn $tw.utils.trim(row);\\n\\t\\t}).filter(function(row) {\\n\\t\\t\\treturn row !== \\\"\\\";\\n\\t\\t});\\n\\tif(rows.length \u003C 1) {\\n\\t\\treturn \\\"Missing header row\\\";\\n\\t}\\n\\tvar headings = rows[0].split(separator),\\n\\t\\tresults = [];\\n\\tfor(var row=1; row\u003Crows.length; row++) {\\n\\t\\tvar columns = rows[row].split(separator),\\n\\t\\t\\tcolumnResult = Object.create(null);\\n\\t\\tif(columns.length !== headings.length) {\\n\\t\\t\\treturn \\\"Malformed CSV row '\\\" + rows[row] + \\\"'\\\";\\n\\t\\t}\\n\\t\\tfor(var column=0; column\u003Ccolumns.length; column++) {\\n\\t\\t\\tvar columnName = headings[column];\\n\\t\\t\\tcolumnResult[columnName] = $tw.utils.trim(columns[column] || \\\"\\\");\\n\\t\\t}\\n\\t\\tresults.push(columnResult);\\n\\t}\\n\\treturn results;\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/diff-match-patch/diff_match_patch.js\":{\"text\":\"(function(){function diff_match_patch(){this.Diff_Timeout=1;this.Diff_EditCost=4;this.Match_Threshold=.5;this.Match_Distance=1E3;this.Patch_DeleteThreshold=.5;this.Patch_Margin=4;this.Match_MaxBits=32}var DIFF_DELETE=-1,DIFF_INSERT=1,DIFF_EQUAL=0;\\ndiff_match_patch.prototype.diff_main=function(a,b,c,d){\\\"undefined\\\"==typeof d&&(d=0>=this.Diff_Timeout?Number.MAX_VALUE:(new Date).getTime()+1E3*this.Diff_Timeout);if(null==a||null==b)throw Error(\\\"Null input. (diff_main)\\\");if(a==b)return a?[[DIFF_EQUAL,a]]:[];\\\"undefined\\\"==typeof c&&(c=!0);var e=c,f=this.diff_commonPrefix(a,b);c=a.substring(0,f);a=a.substring(f);b=b.substring(f);f=this.diff_commonSuffix(a,b);var g=a.substring(a.length-f);a=a.substring(0,a.length-f);b=b.substring(0,b.length-f);a=this.diff_compute_(a,\\nb,e,d);c&&a.unshift([DIFF_EQUAL,c]);g&&a.push([DIFF_EQUAL,g]);this.diff_cleanupMerge(a);return a};\\ndiff_match_patch.prototype.diff_compute_=function(a,b,c,d){if(!a)return[[DIFF_INSERT,b]];if(!b)return[[DIFF_DELETE,a]];var e=a.length>b.length?a:b,f=a.length>b.length?b:a,g=e.indexOf(f);return-1!=g?(c=[[DIFF_INSERT,e.substring(0,g)],[DIFF_EQUAL,f],[DIFF_INSERT,e.substring(g+f.length)]],a.length>b.length&&(c[0][0]=c[2][0]=DIFF_DELETE),c):1==f.length?[[DIFF_DELETE,a],[DIFF_INSERT,b]]:(e=this.diff_halfMatch_(a,b))?(b=e[1],f=e[3],a=e[4],e=this.diff_main(e[0],e[2],c,d),c=this.diff_main(b,f,c,d),e.concat([[DIFF_EQUAL,\\na]],c)):c&&100\u003Ca.length&&100\u003Cb.length?this.diff_lineMode_(a,b,d):this.diff_bisect_(a,b,d)};\\ndiff_match_patch.prototype.diff_lineMode_=function(a,b,c){var d=this.diff_linesToChars_(a,b);a=d.chars1;b=d.chars2;d=d.lineArray;a=this.diff_main(a,b,!1,c);this.diff_charsToLines_(a,d);this.diff_cleanupSemantic(a);a.push([DIFF_EQUAL,\\\"\\\"]);for(var e=d=b=0,f=\\\"\\\",g=\\\"\\\";b\u003Ca.length;){switch(a[b][0]){case DIFF_INSERT:e++;g+=a[b][1];break;case DIFF_DELETE:d++;f+=a[b][1];break;case DIFF_EQUAL:if(1\u003C=d&&1\u003C=e){a.splice(b-d-e,d+e);b=b-d-e;d=this.diff_main(f,g,!1,c);for(e=d.length-1;0\u003C=e;e--)a.splice(b,0,d[e]);b+=\\nd.length}d=e=0;g=f=\\\"\\\"}b++}a.pop();return a};\\ndiff_match_patch.prototype.diff_bisect_=function(a,b,c){for(var d=a.length,e=b.length,f=Math.ceil((d+e)/2),g=2*f,h=Array(g),l=Array(g),k=0;k\u003Cg;k++)h[k]=-1,l[k]=-1;h[f+1]=0;l[f+1]=0;k=d-e;for(var m=0!=k%2,p=0,x=0,w=0,q=0,t=0;t\u003Cf&&!((new Date).getTime()>c);t++){for(var v=-t+p;v\u003C=t-x;v+=2){var n=f+v;var r=v==-t||v!=t&&h[n-1]\u003Ch[n+1]?h[n+1]:h[n-1]+1;for(var y=r-v;r\u003Cd&&y\u003Ce&&a.charAt(r)==b.charAt(y);)r++,y++;h[n]=r;if(r>d)x+=2;else if(y>e)p+=2;else if(m&&(n=f+k-v,0\u003C=n&&n\u003Cg&&-1!=l[n])){var u=d-l[n];if(r>=\\nu)return this.diff_bisectSplit_(a,b,r,y,c)}}for(v=-t+w;v\u003C=t-q;v+=2){n=f+v;u=v==-t||v!=t&&l[n-1]\u003Cl[n+1]?l[n+1]:l[n-1]+1;for(r=u-v;u\u003Cd&&r\u003Ce&&a.charAt(d-u-1)==b.charAt(e-r-1);)u++,r++;l[n]=u;if(u>d)q+=2;else if(r>e)w+=2;else if(!m&&(n=f+k-v,0\u003C=n&&n\u003Cg&&-1!=h[n]&&(r=h[n],y=f+r-n,u=d-u,r>=u)))return this.diff_bisectSplit_(a,b,r,y,c)}}return[[DIFF_DELETE,a],[DIFF_INSERT,b]]};\\ndiff_match_patch.prototype.diff_bisectSplit_=function(a,b,c,d,e){var f=a.substring(0,c),g=b.substring(0,d);a=a.substring(c);b=b.substring(d);f=this.diff_main(f,g,!1,e);e=this.diff_main(a,b,!1,e);return f.concat(e)};\\ndiff_match_patch.prototype.diff_linesToChars_=function(a,b){function c(a){for(var b=\\\"\\\",c=0,f=-1,g=d.length;f\u003Ca.length-1;){f=a.indexOf(\\\"\\\\n\\\",c);-1==f&&(f=a.length-1);var h=a.substring(c,f+1);c=f+1;(e.hasOwnProperty?e.hasOwnProperty(h):void 0!==e[h])?b+=String.fromCharCode(e[h]):(b+=String.fromCharCode(g),e[h]=g,d[g++]=h)}return b}var d=[],e={};d[0]=\\\"\\\";var f=c(a),g=c(b);return{chars1:f,chars2:g,lineArray:d}};\\ndiff_match_patch.prototype.diff_charsToLines_=function(a,b){for(var c=0;c\u003Ca.length;c++){for(var d=a[c][1],e=[],f=0;f\u003Cd.length;f++)e[f]=b[d.charCodeAt(f)];a[c][1]=e.join(\\\"\\\")}};diff_match_patch.prototype.diff_commonPrefix=function(a,b){if(!a||!b||a.charAt(0)!=b.charAt(0))return 0;for(var c=0,d=Math.min(a.length,b.length),e=d,f=0;c\u003Ce;)a.substring(f,e)==b.substring(f,e)?f=c=e:d=e,e=Math.floor((d-c)/2+c);return e};\\ndiff_match_patch.prototype.diff_commonSuffix=function(a,b){if(!a||!b||a.charAt(a.length-1)!=b.charAt(b.length-1))return 0;for(var c=0,d=Math.min(a.length,b.length),e=d,f=0;c\u003Ce;)a.substring(a.length-e,a.length-f)==b.substring(b.length-e,b.length-f)?f=c=e:d=e,e=Math.floor((d-c)/2+c);return e};\\ndiff_match_patch.prototype.diff_commonOverlap_=function(a,b){var c=a.length,d=b.length;if(0==c||0==d)return 0;c>d?a=a.substring(c-d):c\u003Cd&&(b=b.substring(0,c));c=Math.min(c,d);if(a==b)return c;d=0;for(var e=1;;){var f=a.substring(c-e);f=b.indexOf(f);if(-1==f)return d;e+=f;if(0==f||a.substring(c-e)==b.substring(0,e))d=e,e++}};\\ndiff_match_patch.prototype.diff_halfMatch_=function(a,b){function c(a,b,c){for(var d=a.substring(c,c+Math.floor(a.length/4)),e=-1,g=\\\"\\\",h,k,l,m;-1!=(e=b.indexOf(d,e+1));){var p=f.diff_commonPrefix(a.substring(c),b.substring(e)),u=f.diff_commonSuffix(a.substring(0,c),b.substring(0,e));g.length\u003Cu+p&&(g=b.substring(e-u,e)+b.substring(e,e+p),h=a.substring(0,c-u),k=a.substring(c+p),l=b.substring(0,e-u),m=b.substring(e+p))}return 2*g.length>=a.length?[h,k,l,m,g]:null}if(0>=this.Diff_Timeout)return null;\\nvar d=a.length>b.length?a:b,e=a.length>b.length?b:a;if(4>d.length||2*e.length\u003Cd.length)return null;var f=this,g=c(d,e,Math.ceil(d.length/4));d=c(d,e,Math.ceil(d.length/2));if(g||d)g=d?g?g[4].length>d[4].length?g:d:d:g;else return null;if(a.length>b.length){d=g[0];e=g[1];var h=g[2];var l=g[3]}else h=g[0],l=g[1],d=g[2],e=g[3];return[d,e,h,l,g[4]]};\\ndiff_match_patch.prototype.diff_cleanupSemantic=function(a){for(var b=!1,c=[],d=0,e=null,f=0,g=0,h=0,l=0,k=0;f\u003Ca.length;)a[f][0]==DIFF_EQUAL?(c[d++]=f,g=l,h=k,k=l=0,e=a[f][1]):(a[f][0]==DIFF_INSERT?l+=a[f][1].length:k+=a[f][1].length,e&&e.length\u003C=Math.max(g,h)&&e.length\u003C=Math.max(l,k)&&(a.splice(c[d-1],0,[DIFF_DELETE,e]),a[c[d-1]+1][0]=DIFF_INSERT,d--,d--,f=0\u003Cd?c[d-1]:-1,k=l=h=g=0,e=null,b=!0)),f++;b&&this.diff_cleanupMerge(a);this.diff_cleanupSemanticLossless(a);for(f=1;f\u003Ca.length;){if(a[f-1][0]==\\nDIFF_DELETE&&a[f][0]==DIFF_INSERT){b=a[f-1][1];c=a[f][1];d=this.diff_commonOverlap_(b,c);e=this.diff_commonOverlap_(c,b);if(d>=e){if(d>=b.length/2||d>=c.length/2)a.splice(f,0,[DIFF_EQUAL,c.substring(0,d)]),a[f-1][1]=b.substring(0,b.length-d),a[f+1][1]=c.substring(d),f++}else if(e>=b.length/2||e>=c.length/2)a.splice(f,0,[DIFF_EQUAL,b.substring(0,e)]),a[f-1][0]=DIFF_INSERT,a[f-1][1]=c.substring(0,c.length-e),a[f+1][0]=DIFF_DELETE,a[f+1][1]=b.substring(e),f++;f++}f++}};\\ndiff_match_patch.prototype.diff_cleanupSemanticLossless=function(a){function b(a,b){if(!a||!b)return 6;var c=a.charAt(a.length-1),d=b.charAt(0),e=c.match(diff_match_patch.nonAlphaNumericRegex_),f=d.match(diff_match_patch.nonAlphaNumericRegex_),g=e&&c.match(diff_match_patch.whitespaceRegex_),h=f&&d.match(diff_match_patch.whitespaceRegex_);c=g&&c.match(diff_match_patch.linebreakRegex_);d=h&&d.match(diff_match_patch.linebreakRegex_);var k=c&&a.match(diff_match_patch.blanklineEndRegex_),l=d&&b.match(diff_match_patch.blanklineStartRegex_);\\nreturn k||l?5:c||d?4:e&&!g&&h?3:g||h?2:e||f?1:0}for(var c=1;c\u003Ca.length-1;){if(a[c-1][0]==DIFF_EQUAL&&a[c+1][0]==DIFF_EQUAL){var d=a[c-1][1],e=a[c][1],f=a[c+1][1],g=this.diff_commonSuffix(d,e);if(g){var h=e.substring(e.length-g);d=d.substring(0,d.length-g);e=h+e.substring(0,e.length-g);f=h+f}g=d;h=e;for(var l=f,k=b(d,e)+b(e,f);e.charAt(0)===f.charAt(0);){d+=e.charAt(0);e=e.substring(1)+f.charAt(0);f=f.substring(1);var m=b(d,e)+b(e,f);m>=k&&(k=m,g=d,h=e,l=f)}a[c-1][1]!=g&&(g?a[c-1][1]=g:(a.splice(c-\\n1,1),c--),a[c][1]=h,l?a[c+1][1]=l:(a.splice(c+1,1),c--))}c++}};diff_match_patch.nonAlphaNumericRegex_=/[^a-zA-Z0-9]/;diff_match_patch.whitespaceRegex_=/\\\\s/;diff_match_patch.linebreakRegex_=/[\\\\r\\\\n]/;diff_match_patch.blanklineEndRegex_=/\\\\n\\\\r?\\\\n$/;diff_match_patch.blanklineStartRegex_=/^\\\\r?\\\\n\\\\r?\\\\n/;\\ndiff_match_patch.prototype.diff_cleanupEfficiency=function(a){for(var b=!1,c=[],d=0,e=null,f=0,g=!1,h=!1,l=!1,k=!1;f\u003Ca.length;)a[f][0]==DIFF_EQUAL?(a[f][1].length\u003Cthis.Diff_EditCost&&(l||k)?(c[d++]=f,g=l,h=k,e=a[f][1]):(d=0,e=null),l=k=!1):(a[f][0]==DIFF_DELETE?k=!0:l=!0,e&&(g&&h&&l&&k||e.length\u003Cthis.Diff_EditCost/2&&3==g+h+l+k)&&(a.splice(c[d-1],0,[DIFF_DELETE,e]),a[c[d-1]+1][0]=DIFF_INSERT,d--,e=null,g&&h?(l=k=!0,d=0):(d--,f=0\u003Cd?c[d-1]:-1,l=k=!1),b=!0)),f++;b&&this.diff_cleanupMerge(a)};\\ndiff_match_patch.prototype.diff_cleanupMerge=function(a){a.push([DIFF_EQUAL,\\\"\\\"]);for(var b=0,c=0,d=0,e=\\\"\\\",f=\\\"\\\",g;b\u003Ca.length;)switch(a[b][0]){case DIFF_INSERT:d++;f+=a[b][1];b++;break;case DIFF_DELETE:c++;e+=a[b][1];b++;break;case DIFF_EQUAL:1\u003Cc+d?(0!==c&&0!==d&&(g=this.diff_commonPrefix(f,e),0!==g&&(0\u003Cb-c-d&&a[b-c-d-1][0]==DIFF_EQUAL?a[b-c-d-1][1]+=f.substring(0,g):(a.splice(0,0,[DIFF_EQUAL,f.substring(0,g)]),b++),f=f.substring(g),e=e.substring(g)),g=this.diff_commonSuffix(f,e),0!==g&&(a[b][1]=f.substring(f.length-\\ng)+a[b][1],f=f.substring(0,f.length-g),e=e.substring(0,e.length-g))),0===c?a.splice(b-d,c+d,[DIFF_INSERT,f]):0===d?a.splice(b-c,c+d,[DIFF_DELETE,e]):a.splice(b-c-d,c+d,[DIFF_DELETE,e],[DIFF_INSERT,f]),b=b-c-d+(c?1:0)+(d?1:0)+1):0!==b&&a[b-1][0]==DIFF_EQUAL?(a[b-1][1]+=a[b][1],a.splice(b,1)):b++,c=d=0,f=e=\\\"\\\"}\\\"\\\"===a[a.length-1][1]&&a.pop();c=!1;for(b=1;b\u003Ca.length-1;)a[b-1][0]==DIFF_EQUAL&&a[b+1][0]==DIFF_EQUAL&&(a[b][1].substring(a[b][1].length-a[b-1][1].length)==a[b-1][1]?(a[b][1]=a[b-1][1]+a[b][1].substring(0,\\na[b][1].length-a[b-1][1].length),a[b+1][1]=a[b-1][1]+a[b+1][1],a.splice(b-1,1),c=!0):a[b][1].substring(0,a[b+1][1].length)==a[b+1][1]&&(a[b-1][1]+=a[b+1][1],a[b][1]=a[b][1].substring(a[b+1][1].length)+a[b+1][1],a.splice(b+1,1),c=!0)),b++;c&&this.diff_cleanupMerge(a)};\\ndiff_match_patch.prototype.diff_xIndex=function(a,b){var c=0,d=0,e=0,f=0,g;for(g=0;g\u003Ca.length;g++){a[g][0]!==DIFF_INSERT&&(c+=a[g][1].length);a[g][0]!==DIFF_DELETE&&(d+=a[g][1].length);if(c>b)break;e=c;f=d}return a.length!=g&&a[g][0]===DIFF_DELETE?f:f+(b-e)};\\ndiff_match_patch.prototype.diff_prettyHtml=function(a){for(var b=[],c=/&/g,d=/\u003C/g,e=/>/g,f=/\\\\n/g,g=0;g\u003Ca.length;g++){var h=a[g][0],l=a[g][1].replace(c,\\\"&amp;\\\").replace(d,\\\"&lt;\\\").replace(e,\\\"&gt;\\\").replace(f,\\\"&para;\u003Cbr>\\\");switch(h){case DIFF_INSERT:b[g]='\u003Cins style=\\\"background:#e6ffe6;\\\">'+l+\\\"\u003C/ins>\\\";break;case DIFF_DELETE:b[g]='\u003Cdel style=\\\"background:#ffe6e6;\\\">'+l+\\\"\u003C/del>\\\";break;case DIFF_EQUAL:b[g]=\\\"\u003Cspan>\\\"+l+\\\"\u003C/span>\\\"}}return b.join(\\\"\\\")};\\ndiff_match_patch.prototype.diff_text1=function(a){for(var b=[],c=0;c\u003Ca.length;c++)a[c][0]!==DIFF_INSERT&&(b[c]=a[c][1]);return b.join(\\\"\\\")};diff_match_patch.prototype.diff_text2=function(a){for(var b=[],c=0;c\u003Ca.length;c++)a[c][0]!==DIFF_DELETE&&(b[c]=a[c][1]);return b.join(\\\"\\\")};\\ndiff_match_patch.prototype.diff_levenshtein=function(a){for(var b=0,c=0,d=0,e=0;e\u003Ca.length;e++){var f=a[e][1];switch(a[e][0]){case DIFF_INSERT:c+=f.length;break;case DIFF_DELETE:d+=f.length;break;case DIFF_EQUAL:b+=Math.max(c,d),d=c=0}}return b+=Math.max(c,d)};\\ndiff_match_patch.prototype.diff_toDelta=function(a){for(var b=[],c=0;c\u003Ca.length;c++)switch(a[c][0]){case DIFF_INSERT:b[c]=\\\"+\\\"+encodeURI(a[c][1]);break;case DIFF_DELETE:b[c]=\\\"-\\\"+a[c][1].length;break;case DIFF_EQUAL:b[c]=\\\"=\\\"+a[c][1].length}return b.join(\\\"\\\\t\\\").replace(/%20/g,\\\" \\\")};\\ndiff_match_patch.prototype.diff_fromDelta=function(a,b){for(var c=[],d=0,e=0,f=b.split(/\\\\t/g),g=0;g\u003Cf.length;g++){var h=f[g].substring(1);switch(f[g].charAt(0)){case \\\"+\\\":try{c[d++]=[DIFF_INSERT,decodeURI(h)]}catch(k){throw Error(\\\"Illegal escape in diff_fromDelta: \\\"+h);}break;case \\\"-\\\":case \\\"=\\\":var l=parseInt(h,10);if(isNaN(l)||0>l)throw Error(\\\"Invalid number in diff_fromDelta: \\\"+h);h=a.substring(e,e+=l);\\\"=\\\"==f[g].charAt(0)?c[d++]=[DIFF_EQUAL,h]:c[d++]=[DIFF_DELETE,h];break;default:if(f[g])throw Error(\\\"Invalid diff operation in diff_fromDelta: \\\"+\\nf[g]);}}if(e!=a.length)throw Error(\\\"Delta length (\\\"+e+\\\") does not equal source text length (\\\"+a.length+\\\").\\\");return c};diff_match_patch.prototype.match_main=function(a,b,c){if(null==a||null==b||null==c)throw Error(\\\"Null input. (match_main)\\\");c=Math.max(0,Math.min(c,a.length));return a==b?0:a.length?a.substring(c,c+b.length)==b?c:this.match_bitap_(a,b,c):-1};\\ndiff_match_patch.prototype.match_bitap_=function(a,b,c){function d(a,d){var e=a/b.length,g=Math.abs(c-d);return f.Match_Distance?e+g/f.Match_Distance:g?1:e}if(b.length>this.Match_MaxBits)throw Error(\\\"Pattern too long for this browser.\\\");var e=this.match_alphabet_(b),f=this,g=this.Match_Threshold,h=a.indexOf(b,c);-1!=h&&(g=Math.min(d(0,h),g),h=a.lastIndexOf(b,c+b.length),-1!=h&&(g=Math.min(d(0,h),g)));var l=1\u003C\u003Cb.length-1;h=-1;for(var k,m,p=b.length+a.length,x,w=0;w\u003Cb.length;w++){k=0;for(m=p;k\u003Cm;)d(w,\\nc+m)\u003C=g?k=m:p=m,m=Math.floor((p-k)/2+k);p=m;k=Math.max(1,c-m+1);var q=Math.min(c+m,a.length)+b.length;m=Array(q+2);for(m[q+1]=(1\u003C\u003Cw)-1;q>=k;q--){var t=e[a.charAt(q-1)];m[q]=0===w?(m[q+1]\u003C\u003C1|1)&t:(m[q+1]\u003C\u003C1|1)&t|(x[q+1]|x[q])\u003C\u003C1|1|x[q+1];if(m[q]&l&&(t=d(w,q-1),t\u003C=g))if(g=t,h=q-1,h>c)k=Math.max(1,2*c-h);else break}if(d(w+1,c)>g)break;x=m}return h};\\ndiff_match_patch.prototype.match_alphabet_=function(a){for(var b={},c=0;c\u003Ca.length;c++)b[a.charAt(c)]=0;for(c=0;c\u003Ca.length;c++)b[a.charAt(c)]|=1\u003C\u003Ca.length-c-1;return b};\\ndiff_match_patch.prototype.patch_addContext_=function(a,b){if(0!=b.length){for(var c=b.substring(a.start2,a.start2+a.length1),d=0;b.indexOf(c)!=b.lastIndexOf(c)&&c.length\u003Cthis.Match_MaxBits-this.Patch_Margin-this.Patch_Margin;)d+=this.Patch_Margin,c=b.substring(a.start2-d,a.start2+a.length1+d);d+=this.Patch_Margin;(c=b.substring(a.start2-d,a.start2))&&a.diffs.unshift([DIFF_EQUAL,c]);(d=b.substring(a.start2+a.length1,a.start2+a.length1+d))&&a.diffs.push([DIFF_EQUAL,d]);a.start1-=c.length;a.start2-=\\nc.length;a.length1+=c.length+d.length;a.length2+=c.length+d.length}};\\ndiff_match_patch.prototype.patch_make=function(a,b,c){if(\\\"string\\\"==typeof a&&\\\"string\\\"==typeof b&&\\\"undefined\\\"==typeof c){var d=a;b=this.diff_main(d,b,!0);2\u003Cb.length&&(this.diff_cleanupSemantic(b),this.diff_cleanupEfficiency(b))}else if(a&&\\\"object\\\"==typeof a&&\\\"undefined\\\"==typeof b&&\\\"undefined\\\"==typeof c)b=a,d=this.diff_text1(b);else if(\\\"string\\\"==typeof a&&b&&\\\"object\\\"==typeof b&&\\\"undefined\\\"==typeof c)d=a;else if(\\\"string\\\"==typeof a&&\\\"string\\\"==typeof b&&c&&\\\"object\\\"==typeof c)d=a,b=c;else throw Error(\\\"Unknown call format to patch_make.\\\");\\nif(0===b.length)return[];c=[];a=new diff_match_patch.patch_obj;for(var e=0,f=0,g=0,h=d,l=0;l\u003Cb.length;l++){var k=b[l][0],m=b[l][1];e||k===DIFF_EQUAL||(a.start1=f,a.start2=g);switch(k){case DIFF_INSERT:a.diffs[e++]=b[l];a.length2+=m.length;d=d.substring(0,g)+m+d.substring(g);break;case DIFF_DELETE:a.length1+=m.length;a.diffs[e++]=b[l];d=d.substring(0,g)+d.substring(g+m.length);break;case DIFF_EQUAL:m.length\u003C=2*this.Patch_Margin&&e&&b.length!=l+1?(a.diffs[e++]=b[l],a.length1+=m.length,a.length2+=m.length):\\nm.length>=2*this.Patch_Margin&&e&&(this.patch_addContext_(a,h),c.push(a),a=new diff_match_patch.patch_obj,e=0,h=d,f=g)}k!==DIFF_INSERT&&(f+=m.length);k!==DIFF_DELETE&&(g+=m.length)}e&&(this.patch_addContext_(a,h),c.push(a));return c};\\ndiff_match_patch.prototype.patch_deepCopy=function(a){for(var b=[],c=0;c\u003Ca.length;c++){var d=a[c],e=new diff_match_patch.patch_obj;e.diffs=[];for(var f=0;f\u003Cd.diffs.length;f++)e.diffs[f]=d.diffs[f].slice();e.start1=d.start1;e.start2=d.start2;e.length1=d.length1;e.length2=d.length2;b[c]=e}return b};\\ndiff_match_patch.prototype.patch_apply=function(a,b){if(0==a.length)return[b,[]];a=this.patch_deepCopy(a);var c=this.patch_addPadding(a);b=c+b+c;this.patch_splitMax(a);for(var d=0,e=[],f=0;f\u003Ca.length;f++){var g=a[f].start2+d,h=this.diff_text1(a[f].diffs),l=-1;if(h.length>this.Match_MaxBits){var k=this.match_main(b,h.substring(0,this.Match_MaxBits),g);-1!=k&&(l=this.match_main(b,h.substring(h.length-this.Match_MaxBits),g+h.length-this.Match_MaxBits),-1==l||k>=l)&&(k=-1)}else k=this.match_main(b,h,\\ng);if(-1==k)e[f]=!1,d-=a[f].length2-a[f].length1;else if(e[f]=!0,d=k-g,g=-1==l?b.substring(k,k+h.length):b.substring(k,l+this.Match_MaxBits),h==g)b=b.substring(0,k)+this.diff_text2(a[f].diffs)+b.substring(k+h.length);else if(g=this.diff_main(h,g,!1),h.length>this.Match_MaxBits&&this.diff_levenshtein(g)/h.length>this.Patch_DeleteThreshold)e[f]=!1;else{this.diff_cleanupSemanticLossless(g);h=0;var m;for(l=0;l\u003Ca[f].diffs.length;l++){var p=a[f].diffs[l];p[0]!==DIFF_EQUAL&&(m=this.diff_xIndex(g,h));p[0]===\\nDIFF_INSERT?b=b.substring(0,k+m)+p[1]+b.substring(k+m):p[0]===DIFF_DELETE&&(b=b.substring(0,k+m)+b.substring(k+this.diff_xIndex(g,h+p[1].length)));p[0]!==DIFF_DELETE&&(h+=p[1].length)}}}b=b.substring(c.length,b.length-c.length);return[b,e]};\\ndiff_match_patch.prototype.patch_addPadding=function(a){for(var b=this.Patch_Margin,c=\\\"\\\",d=1;d\u003C=b;d++)c+=String.fromCharCode(d);for(d=0;d\u003Ca.length;d++)a[d].start1+=b,a[d].start2+=b;d=a[0];var e=d.diffs;if(0==e.length||e[0][0]!=DIFF_EQUAL)e.unshift([DIFF_EQUAL,c]),d.start1-=b,d.start2-=b,d.length1+=b,d.length2+=b;else if(b>e[0][1].length){var f=b-e[0][1].length;e[0][1]=c.substring(e[0][1].length)+e[0][1];d.start1-=f;d.start2-=f;d.length1+=f;d.length2+=f}d=a[a.length-1];e=d.diffs;0==e.length||e[e.length-\\n1][0]!=DIFF_EQUAL?(e.push([DIFF_EQUAL,c]),d.length1+=b,d.length2+=b):b>e[e.length-1][1].length&&(f=b-e[e.length-1][1].length,e[e.length-1][1]+=c.substring(0,f),d.length1+=f,d.length2+=f);return c};\\ndiff_match_patch.prototype.patch_splitMax=function(a){for(var b=this.Match_MaxBits,c=0;c\u003Ca.length;c++)if(!(a[c].length1\u003C=b)){var d=a[c];a.splice(c--,1);for(var e=d.start1,f=d.start2,g=\\\"\\\";0!==d.diffs.length;){var h=new diff_match_patch.patch_obj,l=!0;h.start1=e-g.length;h.start2=f-g.length;\\\"\\\"!==g&&(h.length1=h.length2=g.length,h.diffs.push([DIFF_EQUAL,g]));for(;0!==d.diffs.length&&h.length1\u003Cb-this.Patch_Margin;){g=d.diffs[0][0];var k=d.diffs[0][1];g===DIFF_INSERT?(h.length2+=k.length,f+=k.length,h.diffs.push(d.diffs.shift()),\\nl=!1):g===DIFF_DELETE&&1==h.diffs.length&&h.diffs[0][0]==DIFF_EQUAL&&k.length>2*b?(h.length1+=k.length,e+=k.length,l=!1,h.diffs.push([g,k]),d.diffs.shift()):(k=k.substring(0,b-h.length1-this.Patch_Margin),h.length1+=k.length,e+=k.length,g===DIFF_EQUAL?(h.length2+=k.length,f+=k.length):l=!1,h.diffs.push([g,k]),k==d.diffs[0][1]?d.diffs.shift():d.diffs[0][1]=d.diffs[0][1].substring(k.length))}g=this.diff_text2(h.diffs);g=g.substring(g.length-this.Patch_Margin);k=this.diff_text1(d.diffs).substring(0,\\nthis.Patch_Margin);\\\"\\\"!==k&&(h.length1+=k.length,h.length2+=k.length,0!==h.diffs.length&&h.diffs[h.diffs.length-1][0]===DIFF_EQUAL?h.diffs[h.diffs.length-1][1]+=k:h.diffs.push([DIFF_EQUAL,k]));l||a.splice(++c,0,h)}}};diff_match_patch.prototype.patch_toText=function(a){for(var b=[],c=0;c\u003Ca.length;c++)b[c]=a[c];return b.join(\\\"\\\")};\\ndiff_match_patch.prototype.patch_fromText=function(a){var b=[];if(!a)return b;a=a.split(\\\"\\\\n\\\");for(var c=0,d=/^@@ -(\\\\d+),?(\\\\d*) \\\\+(\\\\d+),?(\\\\d*) @@$/;c\u003Ca.length;){var e=a[c].match(d);if(!e)throw Error(\\\"Invalid patch string: \\\"+a[c]);var f=new diff_match_patch.patch_obj;b.push(f);f.start1=parseInt(e[1],10);\\\"\\\"===e[2]?(f.start1--,f.length1=1):\\\"0\\\"==e[2]?f.length1=0:(f.start1--,f.length1=parseInt(e[2],10));f.start2=parseInt(e[3],10);\\\"\\\"===e[4]?(f.start2--,f.length2=1):\\\"0\\\"==e[4]?f.length2=0:(f.start2--,f.length2=\\nparseInt(e[4],10));for(c++;c\u003Ca.length;){e=a[c].charAt(0);try{var g=decodeURI(a[c].substring(1))}catch(h){throw Error(\\\"Illegal escape in patch_fromText: \\\"+g);}if(\\\"-\\\"==e)f.diffs.push([DIFF_DELETE,g]);else if(\\\"+\\\"==e)f.diffs.push([DIFF_INSERT,g]);else if(\\\" \\\"==e)f.diffs.push([DIFF_EQUAL,g]);else if(\\\"@\\\"==e)break;else if(\\\"\\\"!==e)throw Error('Invalid patch mode \\\"'+e+'\\\" in: '+g);c++}}return b};diff_match_patch.patch_obj=function(){this.diffs=[];this.start2=this.start1=null;this.length2=this.length1=0};\\ndiff_match_patch.patch_obj.prototype.toString=function(){for(var a=[\\\"@@ -\\\"+(0===this.length1?this.start1+\\\",0\\\":1==this.length1?this.start1+1:this.start1+1+\\\",\\\"+this.length1)+\\\" +\\\"+(0===this.length2?this.start2+\\\",0\\\":1==this.length2?this.start2+1:this.start2+1+\\\",\\\"+this.length2)+\\\" @@\\\\n\\\"],b,c=0;c\u003Cthis.diffs.length;c++){switch(this.diffs[c][0]){case DIFF_INSERT:b=\\\"+\\\";break;case DIFF_DELETE:b=\\\"-\\\";break;case DIFF_EQUAL:b=\\\" \\\"}a[c+1]=b+encodeURI(this.diffs[c][1])+\\\"\\\\n\\\"}return a.join(\\\"\\\").replace(/%20/g,\\\" \\\")};\\nthis.diff_match_patch=diff_match_patch;this.DIFF_DELETE=DIFF_DELETE;this.DIFF_INSERT=DIFF_INSERT;this.DIFF_EQUAL=DIFF_EQUAL;\\n}).call(exports);\",\"type\":\"application/javascript\",\"title\":\"$:/core/modules/utils/diff-match-patch/diff_match_patch.js\",\"module-type\":\"library\"},\"$:/core/modules/utils/dom/animations/slide.js\":{\"title\":\"$:/core/modules/utils/dom/animations/slide.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/animations/slide.js\\ntype: application/javascript\\nmodule-type: animation\\n\\nA simple slide animation that varies the height of the element\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nfunction slideOpen(domNode,options) {\\n\\toptions = options || {};\\n\\tvar duration = options.duration || $tw.utils.getAnimationDuration();\\n\\t// Get the current height of the domNode\\n\\tvar computedStyle = window.getComputedStyle(domNode),\\n\\t\\tcurrMarginBottom = parseInt(computedStyle.marginBottom,10),\\n\\t\\tcurrMarginTop = parseInt(computedStyle.marginTop,10),\\n\\t\\tcurrPaddingBottom = parseInt(computedStyle.paddingBottom,10),\\n\\t\\tcurrPaddingTop = parseInt(computedStyle.paddingTop,10),\\n\\t\\tcurrHeight = domNode.offsetHeight;\\n\\t// Reset the margin once the transition is over\\n\\tsetTimeout(function() {\\n\\t\\t$tw.utils.setStyle(domNode,[\\n\\t\\t\\t{transition: \\\"none\\\"},\\n\\t\\t\\t{marginBottom: \\\"\\\"},\\n\\t\\t\\t{marginTop: \\\"\\\"},\\n\\t\\t\\t{paddingBottom: \\\"\\\"},\\n\\t\\t\\t{paddingTop: \\\"\\\"},\\n\\t\\t\\t{height: \\\"auto\\\"},\\n\\t\\t\\t{opacity: \\\"\\\"}\\n\\t\\t]);\\n\\t\\tif(options.callback) {\\n\\t\\t\\toptions.callback();\\n\\t\\t}\\n\\t},duration);\\n\\t// Set up the initial position of the element\\n\\t$tw.utils.setStyle(domNode,[\\n\\t\\t{transition: \\\"none\\\"},\\n\\t\\t{marginTop: \\\"0px\\\"},\\n\\t\\t{marginBottom: \\\"0px\\\"},\\n\\t\\t{paddingTop: \\\"0px\\\"},\\n\\t\\t{paddingBottom: \\\"0px\\\"},\\n\\t\\t{height: \\\"0px\\\"},\\n\\t\\t{opacity: \\\"0\\\"}\\n\\t]);\\n\\t$tw.utils.forceLayout(domNode);\\n\\t// Transition to the final position\\n\\t$tw.utils.setStyle(domNode,[\\n\\t\\t{transition: \\\"margin-top \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"margin-bottom \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"padding-top \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"padding-bottom \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"height \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"opacity \\\" + duration + \\\"ms ease-in-out\\\"},\\n\\t\\t{marginBottom: currMarginBottom + \\\"px\\\"},\\n\\t\\t{marginTop: currMarginTop + \\\"px\\\"},\\n\\t\\t{paddingBottom: currPaddingBottom + \\\"px\\\"},\\n\\t\\t{paddingTop: currPaddingTop + \\\"px\\\"},\\n\\t\\t{height: currHeight + \\\"px\\\"},\\n\\t\\t{opacity: \\\"1\\\"}\\n\\t]);\\n}\\n\\nfunction slideClosed(domNode,options) {\\n\\toptions = options || {};\\n\\tvar duration = options.duration || $tw.utils.getAnimationDuration(),\\n\\t\\tcurrHeight = domNode.offsetHeight;\\n\\t// Clear the properties we've set when the animation is over\\n\\tsetTimeout(function() {\\n\\t\\t$tw.utils.setStyle(domNode,[\\n\\t\\t\\t{transition: \\\"none\\\"},\\n\\t\\t\\t{marginBottom: \\\"\\\"},\\n\\t\\t\\t{marginTop: \\\"\\\"},\\n\\t\\t\\t{paddingBottom: \\\"\\\"},\\n\\t\\t\\t{paddingTop: \\\"\\\"},\\n\\t\\t\\t{height: \\\"auto\\\"},\\n\\t\\t\\t{opacity: \\\"\\\"}\\n\\t\\t]);\\n\\t\\tif(options.callback) {\\n\\t\\t\\toptions.callback();\\n\\t\\t}\\n\\t},duration);\\n\\t// Set up the initial position of the element\\n\\t$tw.utils.setStyle(domNode,[\\n\\t\\t{height: currHeight + \\\"px\\\"},\\n\\t\\t{opacity: \\\"1\\\"}\\n\\t]);\\n\\t$tw.utils.forceLayout(domNode);\\n\\t// Transition to the final position\\n\\t$tw.utils.setStyle(domNode,[\\n\\t\\t{transition: \\\"margin-top \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"margin-bottom \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"padding-top \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"padding-bottom \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"height \\\" + duration + \\\"ms ease-in-out, \\\" +\\n\\t\\t\\t\\t\\t\\\"opacity \\\" + duration + \\\"ms ease-in-out\\\"},\\n\\t\\t{marginTop: \\\"0px\\\"},\\n\\t\\t{marginBottom: \\\"0px\\\"},\\n\\t\\t{paddingTop: \\\"0px\\\"},\\n\\t\\t{paddingBottom: \\\"0px\\\"},\\n\\t\\t{height: \\\"0px\\\"},\\n\\t\\t{opacity: \\\"0\\\"}\\n\\t]);\\n}\\n\\nexports.slide = {\\n\\topen: slideOpen,\\n\\tclose: slideClosed\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"animation\"},\"$:/core/modules/utils/dom/animator.js\":{\"title\":\"$:/core/modules/utils/dom/animator.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/animator.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nOrchestrates animations and transitions\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nfunction Animator() {\\n\\t// Get the registered animation modules\\n\\tthis.animations = {};\\n\\t$tw.modules.applyMethods(\\\"animation\\\",this.animations);\\n}\\n\\nAnimator.prototype.perform = function(type,domNode,options) {\\n\\toptions = options || {};\\n\\t// Find an animation that can handle this type\\n\\tvar chosenAnimation;\\n\\t$tw.utils.each(this.animations,function(animation,name) {\\n\\t\\tif($tw.utils.hop(animation,type)) {\\n\\t\\t\\tchosenAnimation = animation[type];\\n\\t\\t}\\n\\t});\\n\\tif(!chosenAnimation) {\\n\\t\\tchosenAnimation = function(domNode,options) {\\n\\t\\t\\tif(options.callback) {\\n\\t\\t\\t\\toptions.callback();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\t// Call the animation\\n\\tchosenAnimation(domNode,options);\\n};\\n\\nexports.Animator = Animator;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/browser.js\":{\"title\":\"$:/core/modules/utils/dom/browser.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/browser.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nBrowser feature detection\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nSet style properties of an element\\n\\telement: dom node\\n\\tstyles: ordered array of {name: value} pairs\\n*/\\nexports.setStyle = function(element,styles) {\\n\\tif(element.nodeType === 1) { // Element.ELEMENT_NODE\\n\\t\\tfor(var t=0; t\u003Cstyles.length; t++) {\\n\\t\\t\\tfor(var styleName in styles[t]) {\\n\\t\\t\\t\\telement.style[$tw.utils.convertStyleNameToPropertyName(styleName)] = styles[t][styleName];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nConverts a standard CSS property name into the local browser-specific equivalent. For example:\\n\\t\\\"background-color\\\" --> \\\"backgroundColor\\\"\\n\\t\\\"transition\\\" --> \\\"webkitTransition\\\"\\n*/\\n\\nvar styleNameCache = {}; // We'll cache the style name conversions\\n\\nexports.convertStyleNameToPropertyName = function(styleName) {\\n\\t// Return from the cache if we can\\n\\tif(styleNameCache[styleName]) {\\n\\t\\treturn styleNameCache[styleName];\\n\\t}\\n\\t// Convert it by first removing any hyphens\\n\\tvar propertyName = $tw.utils.unHyphenateCss(styleName);\\n\\t// Then check if it needs a prefix\\n\\tif($tw.browser && document.body.style[propertyName] === undefined) {\\n\\t\\tvar prefixes = [\\\"O\\\",\\\"MS\\\",\\\"Moz\\\",\\\"webkit\\\"];\\n\\t\\tfor(var t=0; t\u003Cprefixes.length; t++) {\\n\\t\\t\\tvar prefixedName = prefixes[t] + propertyName.substr(0,1).toUpperCase() + propertyName.substr(1);\\n\\t\\t\\tif(document.body.style[prefixedName] !== undefined) {\\n\\t\\t\\t\\tpropertyName = prefixedName;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Put it in the cache too\\n\\tstyleNameCache[styleName] = propertyName;\\n\\treturn propertyName;\\n};\\n\\n/*\\nConverts a JS format CSS property name back into the dashed form used in CSS declarations. For example:\\n\\t\\\"backgroundColor\\\" --> \\\"background-color\\\"\\n\\t\\\"webkitTransform\\\" --> \\\"-webkit-transform\\\"\\n*/\\nexports.convertPropertyNameToStyleName = function(propertyName) {\\n\\t// Rehyphenate the name\\n\\tvar styleName = $tw.utils.hyphenateCss(propertyName);\\n\\t// If there's a webkit prefix, add a dash (other browsers have uppercase prefixes, and so get the dash automatically)\\n\\tif(styleName.indexOf(\\\"webkit\\\") === 0) {\\n\\t\\tstyleName = \\\"-\\\" + styleName;\\n\\t} else if(styleName.indexOf(\\\"-m-s\\\") === 0) {\\n\\t\\tstyleName = \\\"-ms\\\" + styleName.substr(4);\\n\\t}\\n\\treturn styleName;\\n};\\n\\n/*\\nRound trip a stylename to a property name and back again. For example:\\n\\t\\\"transform\\\" --> \\\"webkitTransform\\\" --> \\\"-webkit-transform\\\"\\n*/\\nexports.roundTripPropertyName = function(propertyName) {\\n\\treturn $tw.utils.convertPropertyNameToStyleName($tw.utils.convertStyleNameToPropertyName(propertyName));\\n};\\n\\n/*\\nConverts a standard event name into the local browser specific equivalent. For example:\\n\\t\\\"animationEnd\\\" --> \\\"webkitAnimationEnd\\\"\\n*/\\n\\nvar eventNameCache = {}; // We'll cache the conversions\\n\\nvar eventNameMappings = {\\n\\t\\\"transitionEnd\\\": {\\n\\t\\tcorrespondingCssProperty: \\\"transition\\\",\\n\\t\\tmappings: {\\n\\t\\t\\ttransition: \\\"transitionend\\\",\\n\\t\\t\\tOTransition: \\\"oTransitionEnd\\\",\\n\\t\\t\\tMSTransition: \\\"msTransitionEnd\\\",\\n\\t\\t\\tMozTransition: \\\"transitionend\\\",\\n\\t\\t\\twebkitTransition: \\\"webkitTransitionEnd\\\"\\n\\t\\t}\\n\\t},\\n\\t\\\"animationEnd\\\": {\\n\\t\\tcorrespondingCssProperty: \\\"animation\\\",\\n\\t\\tmappings: {\\n\\t\\t\\tanimation: \\\"animationend\\\",\\n\\t\\t\\tOAnimation: \\\"oAnimationEnd\\\",\\n\\t\\t\\tMSAnimation: \\\"msAnimationEnd\\\",\\n\\t\\t\\tMozAnimation: \\\"animationend\\\",\\n\\t\\t\\twebkitAnimation: \\\"webkitAnimationEnd\\\"\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.convertEventName = function(eventName) {\\n\\tif(eventNameCache[eventName]) {\\n\\t\\treturn eventNameCache[eventName];\\n\\t}\\n\\tvar newEventName = eventName,\\n\\t\\tmappings = eventNameMappings[eventName];\\n\\tif(mappings) {\\n\\t\\tvar convertedProperty = $tw.utils.convertStyleNameToPropertyName(mappings.correspondingCssProperty);\\n\\t\\tif(mappings.mappings[convertedProperty]) {\\n\\t\\t\\tnewEventName = mappings.mappings[convertedProperty];\\n\\t\\t}\\n\\t}\\n\\t// Put it in the cache too\\n\\teventNameCache[eventName] = newEventName;\\n\\treturn newEventName;\\n};\\n\\n/*\\nReturn the names of the fullscreen APIs\\n*/\\nexports.getFullScreenApis = function() {\\n\\tvar d = document,\\n\\t\\tdb = d.body,\\n\\t\\tresult = {\\n\\t\\t\\\"_requestFullscreen\\\": db.webkitRequestFullscreen !== undefined ? \\\"webkitRequestFullscreen\\\" :\\n\\t\\t\\t\\t\\t\\t\\tdb.mozRequestFullScreen !== undefined ? \\\"mozRequestFullScreen\\\" :\\n\\t\\t\\t\\t\\t\\t\\tdb.msRequestFullscreen !== undefined ? \\\"msRequestFullscreen\\\" :\\n\\t\\t\\t\\t\\t\\t\\tdb.requestFullscreen !== undefined ? \\\"requestFullscreen\\\" : \\\"\\\",\\n\\t\\t\\\"_exitFullscreen\\\": d.webkitExitFullscreen !== undefined ? \\\"webkitExitFullscreen\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.mozCancelFullScreen !== undefined ? \\\"mozCancelFullScreen\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.msExitFullscreen !== undefined ? \\\"msExitFullscreen\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.exitFullscreen !== undefined ? \\\"exitFullscreen\\\" : \\\"\\\",\\n\\t\\t\\\"_fullscreenElement\\\": d.webkitFullscreenElement !== undefined ? \\\"webkitFullscreenElement\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.mozFullScreenElement !== undefined ? \\\"mozFullScreenElement\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.msFullscreenElement !== undefined ? \\\"msFullscreenElement\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.fullscreenElement !== undefined ? \\\"fullscreenElement\\\" : \\\"\\\",\\n\\t\\t\\\"_fullscreenChange\\\": d.webkitFullscreenElement !== undefined ? \\\"webkitfullscreenchange\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.mozFullScreenElement !== undefined ? \\\"mozfullscreenchange\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.msFullscreenElement !== undefined ? \\\"MSFullscreenChange\\\" :\\n\\t\\t\\t\\t\\t\\t\\td.fullscreenElement !== undefined ? \\\"fullscreenchange\\\" : \\\"\\\"\\n\\t};\\n\\tif(!result._requestFullscreen || !result._exitFullscreen || !result._fullscreenElement || !result._fullscreenChange) {\\n\\t\\treturn null;\\n\\t} else {\\n\\t\\treturn result;\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/csscolorparser.js\":{\"title\":\"$:/core/modules/utils/dom/csscolorparser.js\",\"text\":\"// (c) Dean McNamee \u003Cdean@gmail.com>, 2012.\\n//\\n// https://github.com/deanm/css-color-parser-js\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// http://www.w3.org/TR/css3-color/\\nvar kCSSColorTable = {\\n  \\\"transparent\\\": [0,0,0,0], \\\"aliceblue\\\": [240,248,255,1],\\n  \\\"antiquewhite\\\": [250,235,215,1], \\\"aqua\\\": [0,255,255,1],\\n  \\\"aquamarine\\\": [127,255,212,1], \\\"azure\\\": [240,255,255,1],\\n  \\\"beige\\\": [245,245,220,1], \\\"bisque\\\": [255,228,196,1],\\n  \\\"black\\\": [0,0,0,1], \\\"blanchedalmond\\\": [255,235,205,1],\\n  \\\"blue\\\": [0,0,255,1], \\\"blueviolet\\\": [138,43,226,1],\\n  \\\"brown\\\": [165,42,42,1], \\\"burlywood\\\": [222,184,135,1],\\n  \\\"cadetblue\\\": [95,158,160,1], \\\"chartreuse\\\": [127,255,0,1],\\n  \\\"chocolate\\\": [210,105,30,1], \\\"coral\\\": [255,127,80,1],\\n  \\\"cornflowerblue\\\": [100,149,237,1], \\\"cornsilk\\\": [255,248,220,1],\\n  \\\"crimson\\\": [220,20,60,1], \\\"cyan\\\": [0,255,255,1],\\n  \\\"darkblue\\\": [0,0,139,1], \\\"darkcyan\\\": [0,139,139,1],\\n  \\\"darkgoldenrod\\\": [184,134,11,1], \\\"darkgray\\\": [169,169,169,1],\\n  \\\"darkgreen\\\": [0,100,0,1], \\\"darkgrey\\\": [169,169,169,1],\\n  \\\"darkkhaki\\\": [189,183,107,1], \\\"darkmagenta\\\": [139,0,139,1],\\n  \\\"darkolivegreen\\\": [85,107,47,1], \\\"darkorange\\\": [255,140,0,1],\\n  \\\"darkorchid\\\": [153,50,204,1], \\\"darkred\\\": [139,0,0,1],\\n  \\\"darksalmon\\\": [233,150,122,1], \\\"darkseagreen\\\": [143,188,143,1],\\n  \\\"darkslateblue\\\": [72,61,139,1], \\\"darkslategray\\\": [47,79,79,1],\\n  \\\"darkslategrey\\\": [47,79,79,1], \\\"darkturquoise\\\": [0,206,209,1],\\n  \\\"darkviolet\\\": [148,0,211,1], \\\"deeppink\\\": [255,20,147,1],\\n  \\\"deepskyblue\\\": [0,191,255,1], \\\"dimgray\\\": [105,105,105,1],\\n  \\\"dimgrey\\\": [105,105,105,1], \\\"dodgerblue\\\": [30,144,255,1],\\n  \\\"firebrick\\\": [178,34,34,1], \\\"floralwhite\\\": [255,250,240,1],\\n  \\\"forestgreen\\\": [34,139,34,1], \\\"fuchsia\\\": [255,0,255,1],\\n  \\\"gainsboro\\\": [220,220,220,1], \\\"ghostwhite\\\": [248,248,255,1],\\n  \\\"gold\\\": [255,215,0,1], \\\"goldenrod\\\": [218,165,32,1],\\n  \\\"gray\\\": [128,128,128,1], \\\"green\\\": [0,128,0,1],\\n  \\\"greenyellow\\\": [173,255,47,1], \\\"grey\\\": [128,128,128,1],\\n  \\\"honeydew\\\": [240,255,240,1], \\\"hotpink\\\": [255,105,180,1],\\n  \\\"indianred\\\": [205,92,92,1], \\\"indigo\\\": [75,0,130,1],\\n  \\\"ivory\\\": [255,255,240,1], \\\"khaki\\\": [240,230,140,1],\\n  \\\"lavender\\\": [230,230,250,1], \\\"lavenderblush\\\": [255,240,245,1],\\n  \\\"lawngreen\\\": [124,252,0,1], \\\"lemonchiffon\\\": [255,250,205,1],\\n  \\\"lightblue\\\": [173,216,230,1], \\\"lightcoral\\\": [240,128,128,1],\\n  \\\"lightcyan\\\": [224,255,255,1], \\\"lightgoldenrodyellow\\\": [250,250,210,1],\\n  \\\"lightgray\\\": [211,211,211,1], \\\"lightgreen\\\": [144,238,144,1],\\n  \\\"lightgrey\\\": [211,211,211,1], \\\"lightpink\\\": [255,182,193,1],\\n  \\\"lightsalmon\\\": [255,160,122,1], \\\"lightseagreen\\\": [32,178,170,1],\\n  \\\"lightskyblue\\\": [135,206,250,1], \\\"lightslategray\\\": [119,136,153,1],\\n  \\\"lightslategrey\\\": [119,136,153,1], \\\"lightsteelblue\\\": [176,196,222,1],\\n  \\\"lightyellow\\\": [255,255,224,1], \\\"lime\\\": [0,255,0,1],\\n  \\\"limegreen\\\": [50,205,50,1], \\\"linen\\\": [250,240,230,1],\\n  \\\"magenta\\\": [255,0,255,1], \\\"maroon\\\": [128,0,0,1],\\n  \\\"mediumaquamarine\\\": [102,205,170,1], \\\"mediumblue\\\": [0,0,205,1],\\n  \\\"mediumorchid\\\": [186,85,211,1], \\\"mediumpurple\\\": [147,112,219,1],\\n  \\\"mediumseagreen\\\": [60,179,113,1], \\\"mediumslateblue\\\": [123,104,238,1],\\n  \\\"mediumspringgreen\\\": [0,250,154,1], \\\"mediumturquoise\\\": [72,209,204,1],\\n  \\\"mediumvioletred\\\": [199,21,133,1], \\\"midnightblue\\\": [25,25,112,1],\\n  \\\"mintcream\\\": [245,255,250,1], \\\"mistyrose\\\": [255,228,225,1],\\n  \\\"moccasin\\\": [255,228,181,1], \\\"navajowhite\\\": [255,222,173,1],\\n  \\\"navy\\\": [0,0,128,1], \\\"oldlace\\\": [253,245,230,1],\\n  \\\"olive\\\": [128,128,0,1], \\\"olivedrab\\\": [107,142,35,1],\\n  \\\"orange\\\": [255,165,0,1], \\\"orangered\\\": [255,69,0,1],\\n  \\\"orchid\\\": [218,112,214,1], \\\"palegoldenrod\\\": [238,232,170,1],\\n  \\\"palegreen\\\": [152,251,152,1], \\\"paleturquoise\\\": [175,238,238,1],\\n  \\\"palevioletred\\\": [219,112,147,1], \\\"papayawhip\\\": [255,239,213,1],\\n  \\\"peachpuff\\\": [255,218,185,1], \\\"peru\\\": [205,133,63,1],\\n  \\\"pink\\\": [255,192,203,1], \\\"plum\\\": [221,160,221,1],\\n  \\\"powderblue\\\": [176,224,230,1], \\\"purple\\\": [128,0,128,1],\\n  \\\"red\\\": [255,0,0,1], \\\"rosybrown\\\": [188,143,143,1],\\n  \\\"royalblue\\\": [65,105,225,1], \\\"saddlebrown\\\": [139,69,19,1],\\n  \\\"salmon\\\": [250,128,114,1], \\\"sandybrown\\\": [244,164,96,1],\\n  \\\"seagreen\\\": [46,139,87,1], \\\"seashell\\\": [255,245,238,1],\\n  \\\"sienna\\\": [160,82,45,1], \\\"silver\\\": [192,192,192,1],\\n  \\\"skyblue\\\": [135,206,235,1], \\\"slateblue\\\": [106,90,205,1],\\n  \\\"slategray\\\": [112,128,144,1], \\\"slategrey\\\": [112,128,144,1],\\n  \\\"snow\\\": [255,250,250,1], \\\"springgreen\\\": [0,255,127,1],\\n  \\\"steelblue\\\": [70,130,180,1], \\\"tan\\\": [210,180,140,1],\\n  \\\"teal\\\": [0,128,128,1], \\\"thistle\\\": [216,191,216,1],\\n  \\\"tomato\\\": [255,99,71,1], \\\"turquoise\\\": [64,224,208,1],\\n  \\\"violet\\\": [238,130,238,1], \\\"wheat\\\": [245,222,179,1],\\n  \\\"white\\\": [255,255,255,1], \\\"whitesmoke\\\": [245,245,245,1],\\n  \\\"yellow\\\": [255,255,0,1], \\\"yellowgreen\\\": [154,205,50,1]}\\n\\nfunction clamp_css_byte(i) {  // Clamp to integer 0 .. 255.\\n  i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\\n  return i \u003C 0 ? 0 : i > 255 ? 255 : i;\\n}\\n\\nfunction clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.\\n  return f \u003C 0 ? 0 : f > 1 ? 1 : f;\\n}\\n\\nfunction parse_css_int(str) {  // int or percentage.\\n  if (str[str.length - 1] === '%')\\n    return clamp_css_byte(parseFloat(str) / 100 * 255);\\n  return clamp_css_byte(parseInt(str));\\n}\\n\\nfunction parse_css_float(str) {  // float or percentage.\\n  if (str[str.length - 1] === '%')\\n    return clamp_css_float(parseFloat(str) / 100);\\n  return clamp_css_float(parseFloat(str));\\n}\\n\\nfunction css_hue_to_rgb(m1, m2, h) {\\n  if (h \u003C 0) h += 1;\\n  else if (h > 1) h -= 1;\\n\\n  if (h * 6 \u003C 1) return m1 + (m2 - m1) * h * 6;\\n  if (h * 2 \u003C 1) return m2;\\n  if (h * 3 \u003C 2) return m1 + (m2 - m1) * (2/3 - h) * 6;\\n  return m1;\\n}\\n\\nfunction parseCSSColor(css_str) {\\n  // Remove all whitespace, not compliant, but should just be more accepting.\\n  var str = css_str.replace(/ /g, '').toLowerCase();\\n\\n  // Color keywords (and transparent) lookup.\\n  if (str in kCSSColorTable) return kCSSColorTable[str].slice();  // dup.\\n\\n  // #abc and #abc123 syntax.\\n  if (str[0] === '#') {\\n    if (str.length === 4) {\\n      var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\\n      if (!(iv >= 0 && iv \u003C= 0xfff)) return null;  // Covers NaN.\\n      return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\\n              (iv & 0xf0) | ((iv & 0xf0) >> 4),\\n              (iv & 0xf) | ((iv & 0xf) \u003C\u003C 4),\\n              1];\\n    } else if (str.length === 7) {\\n      var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\\n      if (!(iv >= 0 && iv \u003C= 0xffffff)) return null;  // Covers NaN.\\n      return [(iv & 0xff0000) >> 16,\\n              (iv & 0xff00) >> 8,\\n              iv & 0xff,\\n              1];\\n    }\\n\\n    return null;\\n  }\\n\\n  var op = str.indexOf('('), ep = str.indexOf(')');\\n  if (op !== -1 && ep + 1 === str.length) {\\n    var fname = str.substr(0, op);\\n    var params = str.substr(op+1, ep-(op+1)).split(',');\\n    var alpha = 1;  // To allow case fallthrough.\\n    switch (fname) {\\n      case 'rgba':\\n        if (params.length !== 4) return null;\\n        alpha = parse_css_float(params.pop());\\n        // Fall through.\\n      case 'rgb':\\n        if (params.length !== 3) return null;\\n        return [parse_css_int(params[0]),\\n                parse_css_int(params[1]),\\n                parse_css_int(params[2]),\\n                alpha];\\n      case 'hsla':\\n        if (params.length !== 4) return null;\\n        alpha = parse_css_float(params.pop());\\n        // Fall through.\\n      case 'hsl':\\n        if (params.length !== 3) return null;\\n        var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\\n        // NOTE(deanm): According to the CSS spec s/l should only be\\n        // percentages, but we don't bother and let float or percentage.\\n        var s = parse_css_float(params[1]);\\n        var l = parse_css_float(params[2]);\\n        var m2 = l \u003C= 0.5 ? l * (s + 1) : l + s - l * s;\\n        var m1 = l * 2 - m2;\\n        return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),\\n                clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),\\n                clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),\\n                alpha];\\n      default:\\n        return null;\\n    }\\n  }\\n\\n  return null;\\n}\\n\\ntry { exports.parseCSSColor = parseCSSColor } catch(e) { }\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom.js\":{\"title\":\"$:/core/modules/utils/dom.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nVarious static DOM-related utility functions.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nDetermines whether element 'a' contains element 'b'\\nCode thanks to John Resig, http://ejohn.org/blog/comparing-document-position/\\n*/\\nexports.domContains = function(a,b) {\\n\\treturn a.contains ?\\n\\t\\ta !== b && a.contains(b) :\\n\\t\\t!!(a.compareDocumentPosition(b) & 16);\\n};\\n\\nexports.domMatchesSelector = function(node,selector) {\\n\\treturn node.matches ? node.matches(selector) : node.msMatchesSelector(selector);\\n};\\n\\nexports.removeChildren = function(node) {\\n\\twhile(node.hasChildNodes()) {\\n\\t\\tnode.removeChild(node.firstChild);\\n\\t}\\n};\\n\\nexports.hasClass = function(el,className) {\\n\\treturn el && el.hasAttribute && el.hasAttribute(\\\"class\\\") && el.getAttribute(\\\"class\\\").split(\\\" \\\").indexOf(className) !== -1;\\n};\\n\\nexports.addClass = function(el,className) {\\n\\tvar c = (el.getAttribute(\\\"class\\\") || \\\"\\\").split(\\\" \\\");\\n\\tif(c.indexOf(className) === -1) {\\n\\t\\tc.push(className);\\n\\t\\tel.setAttribute(\\\"class\\\",c.join(\\\" \\\"));\\n\\t}\\n};\\n\\nexports.removeClass = function(el,className) {\\n\\tvar c = (el.getAttribute(\\\"class\\\") || \\\"\\\").split(\\\" \\\"),\\n\\t\\tp = c.indexOf(className);\\n\\tif(p !== -1) {\\n\\t\\tc.splice(p,1);\\n\\t\\tel.setAttribute(\\\"class\\\",c.join(\\\" \\\"));\\n\\t}\\n};\\n\\nexports.toggleClass = function(el,className,status) {\\n\\tif(status === undefined) {\\n\\t\\tstatus = !exports.hasClass(el,className);\\n\\t}\\n\\tif(status) {\\n\\t\\texports.addClass(el,className);\\n\\t} else {\\n\\t\\texports.removeClass(el,className);\\n\\t}\\n};\\n\\n/*\\nGet the first parent element that has scrollbars or use the body as fallback.\\n*/\\nexports.getScrollContainer = function(el) {\\n\\tvar doc = el.ownerDocument;\\n\\twhile(el.parentNode) {\\n\\t\\tel = el.parentNode;\\n\\t\\tif(el.scrollTop) {\\n\\t\\t\\treturn el;\\n\\t\\t}\\n\\t}\\n\\treturn doc.body;\\n};\\n\\n/*\\nGet the scroll position of the viewport\\nReturns:\\n\\t{\\n\\t\\tx: horizontal scroll position in pixels,\\n\\t\\ty: vertical scroll position in pixels\\n\\t}\\n*/\\nexports.getScrollPosition = function(srcWindow) {\\n\\tvar scrollWindow = srcWindow || window;\\n\\tif(\\\"scrollX\\\" in scrollWindow) {\\n\\t\\treturn {x: scrollWindow.scrollX, y: scrollWindow.scrollY};\\n\\t} else {\\n\\t\\treturn {x: scrollWindow.document.documentElement.scrollLeft, y: scrollWindow.document.documentElement.scrollTop};\\n\\t}\\n};\\n\\n/*\\nAdjust the height of a textarea to fit its content, preserving scroll position, and return the height\\n*/\\nexports.resizeTextAreaToFit = function(domNode,minHeight) {\\n\\t// Get the scroll container and register the current scroll position\\n\\tvar container = $tw.utils.getScrollContainer(domNode),\\n\\t\\tscrollTop = container.scrollTop;\\n    // Measure the specified minimum height\\n\\tdomNode.style.height = minHeight;\\n\\tvar measuredHeight = domNode.offsetHeight || parseInt(minHeight,10);\\n\\t// Set its height to auto so that it snaps to the correct height\\n\\tdomNode.style.height = \\\"auto\\\";\\n\\t// Calculate the revised height\\n\\tvar newHeight = Math.max(domNode.scrollHeight + domNode.offsetHeight - domNode.clientHeight,measuredHeight);\\n\\t// Only try to change the height if it has changed\\n\\tif(newHeight !== domNode.offsetHeight) {\\n\\t\\tdomNode.style.height = newHeight + \\\"px\\\";\\n\\t\\t// Make sure that the dimensions of the textarea are recalculated\\n\\t\\t$tw.utils.forceLayout(domNode);\\n\\t\\t// Set the container to the position we registered at the beginning\\n\\t\\tcontainer.scrollTop = scrollTop;\\n\\t}\\n\\treturn newHeight;\\n};\\n\\n/*\\nGets the bounding rectangle of an element in absolute page coordinates\\n*/\\nexports.getBoundingPageRect = function(element) {\\n\\tvar scrollPos = $tw.utils.getScrollPosition(element.ownerDocument.defaultView),\\n\\t\\tclientRect = element.getBoundingClientRect();\\n\\treturn {\\n\\t\\tleft: clientRect.left + scrollPos.x,\\n\\t\\twidth: clientRect.width,\\n\\t\\tright: clientRect.right + scrollPos.x,\\n\\t\\ttop: clientRect.top + scrollPos.y,\\n\\t\\theight: clientRect.height,\\n\\t\\tbottom: clientRect.bottom + scrollPos.y\\n\\t};\\n};\\n\\n/*\\nSaves a named password in the browser\\n*/\\nexports.savePassword = function(name,password) {\\n\\tvar done = false;\\n\\ttry {\\n\\t\\twindow.localStorage.setItem(\\\"tw5-password-\\\" + name,password);\\n\\t\\tdone = true;\\n\\t} catch(e) {\\n\\t}\\n\\tif(!done) {\\n\\t\\t$tw.savedPasswords = $tw.savedPasswords || Object.create(null);\\n\\t\\t$tw.savedPasswords[name] = password;\\n\\t}\\n};\\n\\n/*\\nRetrieve a named password from the browser\\n*/\\nexports.getPassword = function(name) {\\n\\tvar value;\\n\\ttry {\\n\\t\\tvalue = window.localStorage.getItem(\\\"tw5-password-\\\" + name);\\n\\t} catch(e) {\\n\\t}\\n\\tif(value !== undefined) {\\n\\t\\treturn value;\\n\\t} else {\\n\\t\\treturn ($tw.savedPasswords || Object.create(null))[name] || \\\"\\\";\\n\\t}\\n};\\n\\n/*\\nForce layout of a dom node and its descendents\\n*/\\nexports.forceLayout = function(element) {\\n\\tvar dummy = element.offsetWidth;\\n};\\n\\n/*\\nPulse an element for debugging purposes\\n*/\\nexports.pulseElement = function(element) {\\n\\t// Event handler to remove the class at the end\\n\\telement.addEventListener($tw.browser.animationEnd,function handler(event) {\\n\\t\\telement.removeEventListener($tw.browser.animationEnd,handler,false);\\n\\t\\t$tw.utils.removeClass(element,\\\"pulse\\\");\\n\\t},false);\\n\\t// Apply the pulse class\\n\\t$tw.utils.removeClass(element,\\\"pulse\\\");\\n\\t$tw.utils.forceLayout(element);\\n\\t$tw.utils.addClass(element,\\\"pulse\\\");\\n};\\n\\n/*\\nAttach specified event handlers to a DOM node\\ndomNode: where to attach the event handlers\\nevents: array of event handlers to be added (see below)\\nEach entry in the events array is an object with these properties:\\nhandlerFunction: optional event handler function\\nhandlerObject: optional event handler object\\nhandlerMethod: optionally specifies object handler method name (defaults to `handleEvent`)\\n*/\\nexports.addEventListeners = function(domNode,events) {\\n\\t$tw.utils.each(events,function(eventInfo) {\\n\\t\\tvar handler;\\n\\t\\tif(eventInfo.handlerFunction) {\\n\\t\\t\\thandler = eventInfo.handlerFunction;\\n\\t\\t} else if(eventInfo.handlerObject) {\\n\\t\\t\\tif(eventInfo.handlerMethod) {\\n\\t\\t\\t\\thandler = function(event) {\\n\\t\\t\\t\\t\\teventInfo.handlerObject[eventInfo.handlerMethod].call(eventInfo.handlerObject,event);\\n\\t\\t\\t\\t};\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thandler = eventInfo.handlerObject;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tdomNode.addEventListener(eventInfo.name,handler,false);\\n\\t});\\n};\\n\\n/*\\nGet the computed styles applied to an element as an array of strings of individual CSS properties\\n*/\\nexports.getComputedStyles = function(domNode) {\\n\\tvar textAreaStyles = window.getComputedStyle(domNode,null),\\n\\t\\tstyleDefs = [],\\n\\t\\tname;\\n\\tfor(var t=0; t\u003CtextAreaStyles.length; t++) {\\n\\t\\tname = textAreaStyles[t];\\n\\t\\tstyleDefs.push(name + \\\": \\\" + textAreaStyles.getPropertyValue(name) + \\\";\\\");\\n\\t}\\n\\treturn styleDefs;\\n};\\n\\n/*\\nApply a set of styles passed as an array of strings of individual CSS properties\\n*/\\nexports.setStyles = function(domNode,styleDefs) {\\n\\tdomNode.style.cssText = styleDefs.join(\\\"\\\");\\n};\\n\\n/*\\nCopy the computed styles from a source element to a destination element\\n*/\\nexports.copyStyles = function(srcDomNode,dstDomNode) {\\n\\t$tw.utils.setStyles(dstDomNode,$tw.utils.getComputedStyles(srcDomNode));\\n};\\n\\n/*\\nCopy plain text to the clipboard on browsers that support it\\n*/\\nexports.copyToClipboard = function(text,options) {\\n\\toptions = options || {};\\n\\tvar textArea = document.createElement(\\\"textarea\\\");\\n\\ttextArea.style.position = \\\"fixed\\\";\\n\\ttextArea.style.top = 0;\\n\\ttextArea.style.left = 0;\\n\\ttextArea.style.fontSize = \\\"12pt\\\";\\n\\ttextArea.style.width = \\\"2em\\\";\\n\\ttextArea.style.height = \\\"2em\\\";\\n\\ttextArea.style.padding = 0;\\n\\ttextArea.style.border = \\\"none\\\";\\n\\ttextArea.style.outline = \\\"none\\\";\\n\\ttextArea.style.boxShadow = \\\"none\\\";\\n\\ttextArea.style.background = \\\"transparent\\\";\\n\\ttextArea.value = text;\\n\\tdocument.body.appendChild(textArea);\\n\\ttextArea.select();\\n\\ttextArea.setSelectionRange(0,text.length);\\n\\tvar succeeded = false;\\n\\ttry {\\n\\t\\tsucceeded = document.execCommand(\\\"copy\\\");\\n\\t} catch (err) {\\n\\t}\\n\\tif(!options.doNotNotify) {\\n\\t\\t$tw.notifier.display(succeeded ? \\\"$:/language/Notifications/CopiedToClipboard/Succeeded\\\" : \\\"$:/language/Notifications/CopiedToClipboard/Failed\\\");\\n\\t}\\n\\tdocument.body.removeChild(textArea);\\n};\\n\\nexports.getLocationPath = function() {\\n\\treturn window.location.toString().split(\\\"#\\\")[0];\\n};\\n\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/dragndrop.js\":{\"title\":\"$:/core/modules/utils/dom/dragndrop.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/dragndrop.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nBrowser data transfer utilities, used with the clipboard and drag and drop\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nOptions:\\n\\ndomNode: dom node to make draggable\\nselector: CSS selector to identify element within domNode to be used as drag handle (optional)\\ndragImageType: \\\"pill\\\", \\\"blank\\\" or \\\"dom\\\" (the default)\\ndragTiddlerFn: optional function to retrieve the title of tiddler to drag\\ndragFilterFn: optional function to retreive the filter defining a list of tiddlers to drag\\nwidget: widget to use as the context for the filter\\n*/\\nexports.makeDraggable = function(options) {\\n\\tvar dragImageType = options.dragImageType || \\\"dom\\\",\\n\\t\\tdragImage,\\n\\t\\tdomNode = options.domNode,\\n\\t\\tdragHandle = options.selector && domNode.querySelector(options.selector) || domNode;\\n\\t// Make the dom node draggable (not necessary for anchor tags)\\n\\tif((domNode.tagName || \\\"\\\").toLowerCase() !== \\\"a\\\") {\\n\\t\\tdragHandle.setAttribute(\\\"draggable\\\",\\\"true\\\");\\n\\t}\\n\\t// Add event handlers\\n\\t$tw.utils.addEventListeners(dragHandle,[\\n\\t\\t{name: \\\"dragstart\\\", handlerFunction: function(event) {\\n\\t\\t\\tif(event.dataTransfer === undefined) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\t// Collect the tiddlers being dragged\\n\\t\\t\\tvar dragTiddler = options.dragTiddlerFn && options.dragTiddlerFn(),\\n\\t\\t\\t\\tdragFilter = options.dragFilterFn && options.dragFilterFn(),\\n\\t\\t\\t\\ttitles = dragTiddler ? [dragTiddler] : [],\\n\\t\\t\\t    \\tstartActions = options.startActions;\\n\\t\\t\\tif(dragFilter) {\\n\\t\\t\\t\\ttitles.push.apply(titles,options.widget.wiki.filterTiddlers(dragFilter,options.widget));\\n\\t\\t\\t}\\n\\t\\t\\tvar titleString = $tw.utils.stringifyList(titles);\\n\\t\\t\\t// Check that we've something to drag\\n\\t\\t\\tif(titles.length > 0 && event.target === dragHandle) {\\n\\t\\t\\t\\t// Mark the drag in progress\\n\\t\\t\\t\\t$tw.dragInProgress = domNode;\\n\\t\\t\\t\\t// Set the dragging class on the element being dragged\\n\\t\\t\\t\\t$tw.utils.addClass(event.target,\\\"tc-dragging\\\");\\n\\t\\t\\t\\t// Invoke drag-start actions if given\\n\\t\\t\\t\\tif(startActions !== undefined) {\\n\\t\\t\\t\\t\\toptions.widget.invokeActionString(startActions,options.widget,event,{actionTiddler: titleString});\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Create the drag image elements\\n\\t\\t\\t\\tdragImage = options.widget.document.createElement(\\\"div\\\");\\n\\t\\t\\t\\tdragImage.className = \\\"tc-tiddler-dragger\\\";\\n\\t\\t\\t\\tvar inner = options.widget.document.createElement(\\\"div\\\");\\n\\t\\t\\t\\tinner.className = \\\"tc-tiddler-dragger-inner\\\";\\n\\t\\t\\t\\tinner.appendChild(options.widget.document.createTextNode(\\n\\t\\t\\t\\t\\ttitles.length === 1 ? \\n\\t\\t\\t\\t\\t\\ttitles[0] :\\n\\t\\t\\t\\t\\t\\ttitles.length + \\\" tiddlers\\\"\\n\\t\\t\\t\\t));\\n\\t\\t\\t\\tdragImage.appendChild(inner);\\n\\t\\t\\t\\toptions.widget.document.body.appendChild(dragImage);\\n\\t\\t\\t\\t// Set the data transfer properties\\n\\t\\t\\t\\tvar dataTransfer = event.dataTransfer;\\n\\t\\t\\t\\t// Set up the image\\n\\t\\t\\t\\tdataTransfer.effectAllowed = \\\"all\\\";\\n\\t\\t\\t\\tif(dataTransfer.setDragImage) {\\n\\t\\t\\t\\t\\tif(dragImageType === \\\"pill\\\") {\\n\\t\\t\\t\\t\\t\\tdataTransfer.setDragImage(dragImage.firstChild,-16,-16);\\n\\t\\t\\t\\t\\t} else if (dragImageType === \\\"blank\\\") {\\n\\t\\t\\t\\t\\t\\tdragImage.removeChild(dragImage.firstChild);\\n\\t\\t\\t\\t\\t\\tdataTransfer.setDragImage(dragImage,0,0);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tvar r = domNode.getBoundingClientRect();\\n\\t\\t\\t\\t\\t\\tdataTransfer.setDragImage(domNode,event.clientX-r.left,event.clientY-r.top);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Set up the data transfer\\n\\t\\t\\t\\tif(dataTransfer.clearData) {\\n\\t\\t\\t\\t\\tdataTransfer.clearData();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar jsonData = [];\\n\\t\\t\\t\\tif(titles.length > 1) {\\n\\t\\t\\t\\t\\ttitles.forEach(function(title) {\\n\\t\\t\\t\\t\\t\\tjsonData.push(options.widget.wiki.getTiddlerAsJson(title));\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tjsonData = \\\"[\\\" + jsonData.join(\\\",\\\") + \\\"]\\\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tjsonData = options.widget.wiki.getTiddlerAsJson(titles[0]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// IE doesn't like these content types\\n\\t\\t\\t\\tif(!$tw.browser.isIE) {\\n\\t\\t\\t\\t\\tdataTransfer.setData(\\\"text/vnd.tiddler\\\",jsonData);\\n\\t\\t\\t\\t\\tdataTransfer.setData(\\\"text/plain\\\",titleString);\\n\\t\\t\\t\\t\\tdataTransfer.setData(\\\"text/x-moz-url\\\",\\\"data:text/vnd.tiddler,\\\" + encodeURIComponent(jsonData));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdataTransfer.setData(\\\"URL\\\",\\\"data:text/vnd.tiddler,\\\" + encodeURIComponent(jsonData));\\n\\t\\t\\t\\tdataTransfer.setData(\\\"Text\\\",titleString);\\n\\t\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}},\\n\\t\\t{name: \\\"dragend\\\", handlerFunction: function(event) {\\n\\t\\t\\tif(event.target === domNode) {\\n\\t\\t\\t\\t// Collect the tiddlers being dragged\\n\\t\\t\\t\\tvar dragTiddler = options.dragTiddlerFn && options.dragTiddlerFn(),\\n\\t\\t\\t\\t\\tdragFilter = options.dragFilterFn && options.dragFilterFn(),\\n\\t\\t\\t\\t\\ttitles = dragTiddler ? [dragTiddler] : [],\\n\\t\\t\\t    \\t\\tendActions = options.endActions;\\n\\t\\t\\t\\tif(dragFilter) {\\n\\t\\t\\t\\t\\ttitles.push.apply(titles,options.widget.wiki.filterTiddlers(dragFilter,options.widget));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar titleString = $tw.utils.stringifyList(titles);\\n\\t\\t\\t\\t$tw.dragInProgress = null;\\n\\t\\t\\t\\t// Invoke drag-end actions if given\\n\\t\\t\\t\\tif(endActions !== undefined) {\\n\\t\\t\\t\\t\\toptions.widget.invokeActionString(endActions,options.widget,event,{actionTiddler: titleString});\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Remove the dragging class on the element being dragged\\n\\t\\t\\t\\t$tw.utils.removeClass(event.target,\\\"tc-dragging\\\");\\n\\t\\t\\t\\t// Delete the drag image element\\n\\t\\t\\t\\tif(dragImage) {\\n\\t\\t\\t\\t\\tdragImage.parentNode.removeChild(dragImage);\\n\\t\\t\\t\\t\\tdragImage = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}}\\n\\t]);\\n};\\n\\nexports.importDataTransfer = function(dataTransfer,fallbackTitle,callback) {\\n\\t// Try each provided data type in turn\\n\\tif($tw.log.IMPORT) {\\n\\t\\tconsole.log(\\\"Available data types:\\\");\\n\\t\\tfor(var type=0; type\u003CdataTransfer.types.length; type++) {\\n\\t\\t\\tconsole.log(\\\"type\\\",dataTransfer.types[type],dataTransfer.getData(dataTransfer.types[type]))\\n\\t\\t}\\n\\t}\\n\\tfor(var t=0; t\u003CimportDataTypes.length; t++) {\\n\\t\\tif(!$tw.browser.isIE || importDataTypes[t].IECompatible) {\\n\\t\\t\\t// Get the data\\n\\t\\t\\tvar dataType = importDataTypes[t];\\n\\t\\t\\t\\tvar data = dataTransfer.getData(dataType.type);\\n\\t\\t\\t// Import the tiddlers in the data\\n\\t\\t\\tif(data !== \\\"\\\" && data !== null) {\\n\\t\\t\\t\\tif($tw.log.IMPORT) {\\n\\t\\t\\t\\t\\tconsole.log(\\\"Importing data type '\\\" + dataType.type + \\\"', data: '\\\" + data + \\\"'\\\")\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar tiddlerFields = dataType.toTiddlerFieldsArray(data,fallbackTitle);\\n\\t\\t\\t\\tcallback(tiddlerFields);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nvar importDataTypes = [\\n\\t{type: \\\"text/vnd.tiddler\\\", IECompatible: false, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\treturn parseJSONTiddlers(data,fallbackTitle);\\n\\t}},\\n\\t{type: \\\"URL\\\", IECompatible: true, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\t// Check for tiddler data URI\\n\\t\\tvar match = $tw.utils.decodeURIComponentSafe(data).match(/^data\\\\:text\\\\/vnd\\\\.tiddler,(.*)/i);\\n\\t\\tif(match) {\\n\\t\\t\\treturn parseJSONTiddlers(match[1],fallbackTitle);\\n\\t\\t} else {\\n\\t\\t\\treturn [{title: fallbackTitle, text: data}]; // As URL string\\n\\t\\t}\\n\\t}},\\n\\t{type: \\\"text/x-moz-url\\\", IECompatible: false, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\t// Check for tiddler data URI\\n\\t\\tvar match = $tw.utils.decodeURIComponentSafe(data).match(/^data\\\\:text\\\\/vnd\\\\.tiddler,(.*)/i);\\n\\t\\tif(match) {\\n\\t\\t\\treturn parseJSONTiddlers(match[1],fallbackTitle);\\n\\t\\t} else {\\n\\t\\t\\treturn [{title: fallbackTitle, text: data}]; // As URL string\\n\\t\\t}\\n\\t}},\\n\\t{type: \\\"text/html\\\", IECompatible: false, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\treturn [{title: fallbackTitle, text: data}];\\n\\t}},\\n\\t{type: \\\"text/plain\\\", IECompatible: false, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\treturn [{title: fallbackTitle, text: data}];\\n\\t}},\\n\\t{type: \\\"Text\\\", IECompatible: true, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\treturn [{title: fallbackTitle, text: data}];\\n\\t}},\\n\\t{type: \\\"text/uri-list\\\", IECompatible: false, toTiddlerFieldsArray: function(data,fallbackTitle) {\\n\\t\\treturn [{title: fallbackTitle, text: data}];\\n\\t}}\\n];\\n\\nfunction parseJSONTiddlers(json,fallbackTitle) {\\n\\tvar data = $tw.utils.parseJSONSafe(json);\\n\\tif(!$tw.utils.isArray(data)) {\\n\\t\\tdata = [data];\\n\\t}\\n\\tdata.forEach(function(fields) {\\n\\t\\tfields.title = fields.title || fallbackTitle;\\n\\t});\\n\\treturn data;\\n};\\n\\nfunction dragEventContainsType(event,targetType) {\\n\\tif(event.dataTransfer.types) {\\n\\t\\tfor(var i=0; i\u003Cevent.dataTransfer.types.length; i++) {\\n\\t\\t\\tif(event.dataTransfer.types[i] === targetType) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\nexports.dragEventContainsFiles = function(event) {\\n\\treturn (dragEventContainsType(event,\\\"Files\\\") && !dragEventContainsType(event,\\\"text/plain\\\"));\\n};\\n\\nexports.dragEventContainsType = dragEventContainsType;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/http.js\":{\"title\":\"$:/core/modules/utils/dom/http.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/http.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nBrowser HTTP support\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nA quick and dirty HTTP function; to be refactored later. Options are:\\n\\turl: URL to retrieve\\n\\theaders: hashmap of headers to send\\n\\ttype: GET, PUT, POST etc\\n\\tcallback: function invoked with (err,data,xhr)\\n\\treturnProp: string name of the property to return as first argument of callback\\n*/\\nexports.httpRequest = function(options) {\\n\\tvar type = options.type || \\\"GET\\\",\\n\\t\\turl = options.url,\\n\\t\\theaders = options.headers || {accept: \\\"application/json\\\"},\\n\\t\\thasHeader = function(targetHeader) {\\n\\t\\t\\ttargetHeader = targetHeader.toLowerCase();\\n\\t\\t\\tvar result = false;\\n\\t\\t\\t$tw.utils.each(headers,function(header,headerTitle,object) {\\n\\t\\t\\t\\tif(headerTitle.toLowerCase() === targetHeader) {\\n\\t\\t\\t\\t\\tresult = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn result;\\n\\t\\t},\\n\\t\\tgetHeader = function(targetHeader) {\\n\\t\\t\\treturn headers[targetHeader] || headers[targetHeader.toLowerCase()];\\n\\t\\t},\\n\\t\\tisSimpleRequest = function(type,headers) {\\n\\t\\t\\tif([\\\"GET\\\",\\\"HEAD\\\",\\\"POST\\\"].indexOf(type) === -1) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tfor(var header in headers) {\\n\\t\\t\\t\\tif([\\\"accept\\\",\\\"accept-language\\\",\\\"content-language\\\",\\\"content-type\\\"].indexOf(header.toLowerCase()) === -1) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(hasHeader(\\\"Content-Type\\\") && [\\\"application/x-www-form-urlencoded\\\",\\\"multipart/form-data\\\",\\\"text/plain\\\"].indexOf(getHeader[\\\"Content-Type\\\"]) === -1) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\t\\n\\t\\t},\\n\\t\\treturnProp = options.returnProp || \\\"responseText\\\",\\n\\t\\trequest = new XMLHttpRequest(),\\n\\t\\tdata = \\\"\\\",\\n\\t\\tf,results;\\n\\t// Massage the data hashmap into a string\\n\\tif(options.data) {\\n\\t\\tif(typeof options.data === \\\"string\\\") { // Already a string\\n\\t\\t\\tdata = options.data;\\n\\t\\t} else { // A hashmap of strings\\n\\t\\t\\tresults = [];\\n\\t\\t\\t$tw.utils.each(options.data,function(dataItem,dataItemTitle) {\\n\\t\\t\\t\\tresults.push(dataItemTitle + \\\"=\\\" + encodeURIComponent(dataItem));\\n\\t\\t\\t});\\n\\t\\t\\tif(type === \\\"GET\\\" || type === \\\"HEAD\\\") {\\n\\t\\t\\t\\turl += \\\"?\\\" + results.join(\\\"&\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdata = results.join(\\\"&\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Set up the state change handler\\n\\trequest.onreadystatechange = function() {\\n\\t\\tif(this.readyState === 4) {\\n\\t\\t\\tif(this.status === 200 || this.status === 201 || this.status === 204) {\\n\\t\\t\\t\\t// Success!\\n\\t\\t\\t\\toptions.callback(null,this[returnProp],this);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t// Something went wrong\\n\\t\\toptions.callback($tw.language.getString(\\\"Error/XMLHttpRequest\\\") + \\\": \\\" + this.status,null,this);\\n\\t\\t}\\n\\t};\\n\\t// Make the request\\n\\trequest.open(type,url,true);\\n\\tif(headers) {\\n\\t\\t$tw.utils.each(headers,function(header,headerTitle,object) {\\n\\t\\t\\trequest.setRequestHeader(headerTitle,header);\\n\\t\\t});\\n\\t}\\n\\tif(data && !hasHeader(\\\"Content-Type\\\")) {\\n\\t\\trequest.setRequestHeader(\\\"Content-Type\\\",\\\"application/x-www-form-urlencoded; charset=UTF-8\\\");\\n\\t}\\n\\tif(!hasHeader(\\\"X-Requested-With\\\") && !isSimpleRequest(type,headers)) {\\n\\t\\trequest.setRequestHeader(\\\"X-Requested-With\\\",\\\"TiddlyWiki\\\");\\n\\t}\\n\\ttry {\\n\\t\\trequest.send(data);\\n\\t} catch(e) {\\n\\t\\toptions.callback(e,null,this);\\n\\t}\\n\\treturn request;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/keyboard.js\":{\"title\":\"$:/core/modules/utils/dom/keyboard.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/keyboard.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nKeyboard utilities; now deprecated. Instead, use $tw.keyboardManager\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n[\\\"parseKeyDescriptor\\\",\\\"checkKeyDescriptor\\\"].forEach(function(method) {\\n\\texports[method] = function() {\\n\\t\\tif($tw.keyboardManager) {\\n\\t\\t\\treturn $tw.keyboardManager[method].apply($tw.keyboardManager,Array.prototype.slice.call(arguments,0));\\n\\t\\t} else {\\n\\t\\t\\treturn null\\n\\t\\t}\\n\\t};\\n});\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/modal.js\":{\"title\":\"$:/core/modules/utils/dom/modal.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/modal.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nModal message mechanism\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\nvar navigator = require(\\\"$:/core/modules/widgets/navigator.js\\\");\\n\\nvar Modal = function(wiki) {\\n\\tthis.wiki = wiki;\\n\\tthis.modalCount = 0;\\n};\\n\\n/*\\nDisplay a modal dialogue\\n\\ttitle: Title of tiddler to display\\n\\toptions: see below\\nOptions include:\\n\\tdownloadLink: Text of a big download link to include\\n*/\\nModal.prototype.display = function(title,options) {\\n\\toptions = options || {};\\n\\tthis.srcDocument = options.variables && (options.variables.rootwindow === \\\"true\\\" ||\\n\\t\\t\\t\\toptions.variables.rootwindow === \\\"yes\\\") ? document :\\n\\t\\t\\t\\t(options.event && options.event.event && options.event.event.target ? options.event.event.target.ownerDocument : document);\\n\\tthis.srcWindow = this.srcDocument.defaultView;\\n\\tvar self = this,\\n\\t\\trefreshHandler,\\n\\t\\tduration = $tw.utils.getAnimationDuration(),\\n\\t\\ttiddler = this.wiki.getTiddler(title);\\n\\t// Don't do anything if the tiddler doesn't exist\\n\\tif(!tiddler) {\\n\\t\\treturn;\\n\\t}\\n\\t// Create the variables\\n\\tvar variables = $tw.utils.extend({\\n\\t\\t\\tcurrentTiddler: title,\\n\\t\\t\\t\\\"tv-story-list\\\": (options.event && options.event.widget ? options.event.widget.getVariable(\\\"tv-story-list\\\") : \\\"\\\"),\\n\\t\\t\\t\\\"tv-history-list\\\": (options.event && options.event.widget ? options.event.widget.getVariable(\\\"tv-history-list\\\") : \\\"\\\")\\n\\t\\t},options.variables);\\n\\n\\t// Create the wrapper divs\\n\\tvar wrapper = this.srcDocument.createElement(\\\"div\\\"),\\n\\t\\tmodalBackdrop = this.srcDocument.createElement(\\\"div\\\"),\\n\\t\\tmodalWrapper = this.srcDocument.createElement(\\\"div\\\"),\\n\\t\\tmodalHeader = this.srcDocument.createElement(\\\"div\\\"),\\n\\t\\theaderTitle = this.srcDocument.createElement(\\\"h3\\\"),\\n\\t\\tmodalBody = this.srcDocument.createElement(\\\"div\\\"),\\n\\t\\tmodalLink = this.srcDocument.createElement(\\\"a\\\"),\\n\\t\\tmodalFooter = this.srcDocument.createElement(\\\"div\\\"),\\n\\t\\tmodalFooterHelp = this.srcDocument.createElement(\\\"span\\\"),\\n\\t\\tmodalFooterButtons = this.srcDocument.createElement(\\\"span\\\");\\n\\t// Up the modal count and adjust the body class\\n\\tthis.modalCount++;\\n\\tthis.adjustPageClass();\\n\\t// Add classes\\n\\t$tw.utils.addClass(wrapper,\\\"tc-modal-wrapper\\\");\\n\\tif(tiddler.fields && tiddler.fields.class) {\\n\\t\\t$tw.utils.addClass(wrapper,tiddler.fields.class);\\n\\t}\\n\\t$tw.utils.addClass(modalBackdrop,\\\"tc-modal-backdrop\\\");\\n\\t$tw.utils.addClass(modalWrapper,\\\"tc-modal\\\");\\n\\t$tw.utils.addClass(modalHeader,\\\"tc-modal-header\\\");\\n\\t$tw.utils.addClass(modalBody,\\\"tc-modal-body\\\");\\n\\t$tw.utils.addClass(modalFooter,\\\"tc-modal-footer\\\");\\n\\t// Join them together\\n\\twrapper.appendChild(modalBackdrop);\\n\\twrapper.appendChild(modalWrapper);\\n\\tmodalHeader.appendChild(headerTitle);\\n\\tmodalWrapper.appendChild(modalHeader);\\n\\tmodalWrapper.appendChild(modalBody);\\n\\tmodalFooter.appendChild(modalFooterHelp);\\n\\tmodalFooter.appendChild(modalFooterButtons);\\n\\tmodalWrapper.appendChild(modalFooter);\\n\\tvar navigatorTree = {\\n\\t\\t\\\"type\\\": \\\"navigator\\\",\\n\\t\\t\\\"attributes\\\": {\\n\\t\\t\\t\\\"story\\\": {\\n\\t\\t\\t\\t\\\"name\\\": \\\"story\\\",\\n\\t\\t\\t\\t\\\"type\\\": \\\"string\\\",\\n\\t\\t\\t\\t\\\"value\\\": variables[\\\"tv-story-list\\\"]\\n\\t\\t\\t},\\n\\t\\t\\t\\\"history\\\": {\\n\\t\\t\\t\\t\\\"name\\\": \\\"history\\\",\\n\\t\\t\\t\\t\\\"type\\\": \\\"string\\\",\\n\\t\\t\\t\\t\\\"value\\\": variables[\\\"tv-history-list\\\"]\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t\\\"tag\\\": \\\"$navigator\\\",\\n\\t\\t\\\"isBlock\\\": true,\\n\\t\\t\\\"children\\\": []\\n\\t};\\n\\tvar navigatorWidgetNode = new navigator.navigator(navigatorTree, {\\n\\t\\twiki: this.wiki,\\n\\t\\tdocument : this.srcDocument,\\n\\t\\tparentWidget: $tw.rootWidget\\n\\t});\\n\\tnavigatorWidgetNode.render(modalBody,null);\\n\\n\\t// Render the title of the message\\n\\tvar headerWidgetNode = this.wiki.makeTranscludeWidget(title,{\\n\\t\\tfield: \\\"subtitle\\\",\\n\\t\\tmode: \\\"inline\\\",\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttext: {\\n\\t\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\t\\tvalue: title\\n\\t\\t}}}],\\n\\t\\tparentWidget: navigatorWidgetNode,\\n\\t\\tdocument: this.srcDocument,\\n\\t\\tvariables: variables,\\n\\t\\timportPageMacros: true\\n\\t});\\n\\theaderWidgetNode.render(headerTitle,null);\\n\\t// Render the body of the message\\n\\tvar bodyWidgetNode = this.wiki.makeTranscludeWidget(title,{\\n\\t\\tparentWidget: navigatorWidgetNode,\\n\\t\\tdocument: this.srcDocument,\\n\\t\\tvariables: variables,\\n\\t\\timportPageMacros: true\\n\\t});\\n\\n\\tbodyWidgetNode.render(modalBody,null);\\n\\t// Setup the link if present\\n\\tif(options.downloadLink) {\\n\\t\\tmodalLink.href = options.downloadLink;\\n\\t\\tmodalLink.appendChild(this.srcDocument.createTextNode(\\\"Right-click to save changes\\\"));\\n\\t\\tmodalBody.appendChild(modalLink);\\n\\t}\\n\\t// Render the footer of the message\\n\\tif(tiddler.fields && tiddler.fields.help) {\\n\\t\\tvar link = this.srcDocument.createElement(\\\"a\\\");\\n\\t\\tlink.setAttribute(\\\"href\\\",tiddler.fields.help);\\n\\t\\tlink.setAttribute(\\\"target\\\",\\\"_blank\\\");\\n\\t\\tlink.setAttribute(\\\"rel\\\",\\\"noopener noreferrer\\\");\\n\\t\\tlink.appendChild(this.srcDocument.createTextNode(\\\"Help\\\"));\\n\\t\\tmodalFooterHelp.appendChild(link);\\n\\t\\tmodalFooterHelp.style.float = \\\"left\\\";\\n\\t}\\n\\tvar footerWidgetNode = this.wiki.makeTranscludeWidget(title,{\\n\\t\\tfield: \\\"footer\\\",\\n\\t\\tmode: \\\"inline\\\",\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"button\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tmessage: {\\n\\t\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\t\\tvalue: \\\"tm-close-tiddler\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [{\\n\\t\\t\\t\\ttype: \\\"text\\\",\\n\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\ttext: {\\n\\t\\t\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\t\\t\\tvalue: $tw.language.getString(\\\"Buttons/Close/Caption\\\")\\n\\t\\t\\t}}}\\n\\t\\t]}],\\n\\t\\tparentWidget: navigatorWidgetNode,\\n\\t\\tdocument: this.srcDocument,\\n\\t\\tvariables: variables,\\n\\t\\timportPageMacros: true\\n\\t});\\n\\tfooterWidgetNode.render(modalFooterButtons,null);\\n\\t// Set up the refresh handler\\n\\trefreshHandler = function(changes) {\\n\\t\\theaderWidgetNode.refresh(changes,modalHeader,null);\\n\\t\\tbodyWidgetNode.refresh(changes,modalBody,null);\\n\\t\\tfooterWidgetNode.refresh(changes,modalFooterButtons,null);\\n\\t};\\n\\tthis.wiki.addEventListener(\\\"change\\\",refreshHandler);\\n\\t// Add the close event handler\\n\\tvar closeHandler = function(event) {\\n\\t\\t// Remove our refresh handler\\n\\t\\tself.wiki.removeEventListener(\\\"change\\\",refreshHandler);\\n\\t\\t// Decrease the modal count and adjust the body class\\n\\t\\tself.modalCount--;\\n\\t\\tself.adjustPageClass();\\n\\t\\t// Force layout and animate the modal message away\\n\\t\\t$tw.utils.forceLayout(modalBackdrop);\\n\\t\\t$tw.utils.forceLayout(modalWrapper);\\n\\t\\t$tw.utils.setStyle(modalBackdrop,[\\n\\t\\t\\t{opacity: \\\"0\\\"}\\n\\t\\t]);\\n\\t\\t$tw.utils.setStyle(modalWrapper,[\\n\\t\\t\\t{transform: \\\"translateY(\\\" + self.srcWindow.innerHeight + \\\"px)\\\"}\\n\\t\\t]);\\n\\t\\t// Set up an event for the transition end\\n\\t\\tself.srcWindow.setTimeout(function() {\\n\\t\\t\\tif(wrapper.parentNode) {\\n\\t\\t\\t\\t// Remove the modal message from the DOM\\n\\t\\t\\t\\tself.srcDocument.body.removeChild(wrapper);\\n\\t\\t\\t}\\n\\t\\t},duration);\\n\\t\\t// Don't let anyone else handle the tm-close-tiddler message\\n\\t\\treturn false;\\n\\t};\\n\\theaderWidgetNode.addEventListener(\\\"tm-close-tiddler\\\",closeHandler,false);\\n\\tbodyWidgetNode.addEventListener(\\\"tm-close-tiddler\\\",closeHandler,false);\\n\\tfooterWidgetNode.addEventListener(\\\"tm-close-tiddler\\\",closeHandler,false);\\n\\t// Set the initial styles for the message\\n\\t$tw.utils.setStyle(modalBackdrop,[\\n\\t\\t{opacity: \\\"0\\\"}\\n\\t]);\\n\\t$tw.utils.setStyle(modalWrapper,[\\n\\t\\t{transformOrigin: \\\"0% 0%\\\"},\\n\\t\\t{transform: \\\"translateY(\\\" + (-this.srcWindow.innerHeight) + \\\"px)\\\"}\\n\\t]);\\n\\t// Put the message into the document\\n\\tthis.srcDocument.body.appendChild(wrapper);\\n\\t// Set up animation for the styles\\n\\t$tw.utils.setStyle(modalBackdrop,[\\n\\t\\t{transition: \\\"opacity \\\" + duration + \\\"ms ease-out\\\"}\\n\\t]);\\n\\t$tw.utils.setStyle(modalWrapper,[\\n\\t\\t{transition: $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms ease-in-out\\\"}\\n\\t]);\\n\\t// Force layout\\n\\t$tw.utils.forceLayout(modalBackdrop);\\n\\t$tw.utils.forceLayout(modalWrapper);\\n\\t// Set final animated styles\\n\\t$tw.utils.setStyle(modalBackdrop,[\\n\\t\\t{opacity: \\\"0.7\\\"}\\n\\t]);\\n\\t$tw.utils.setStyle(modalWrapper,[\\n\\t\\t{transform: \\\"translateY(0px)\\\"}\\n\\t]);\\n};\\n\\nModal.prototype.adjustPageClass = function() {\\n\\tvar windowContainer = $tw.pageContainer ? ($tw.pageContainer === this.srcDocument.body.firstChild ? $tw.pageContainer : this.srcDocument.body.firstChild) : null;\\n\\tif(windowContainer) {\\n\\t\\t$tw.utils.toggleClass(windowContainer,\\\"tc-modal-displayed\\\",this.modalCount > 0);\\n\\t}\\n\\t$tw.utils.toggleClass(this.srcDocument.body,\\\"tc-modal-prevent-scroll\\\",this.modalCount > 0);\\n};\\n\\nexports.Modal = Modal;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/notifier.js\":{\"title\":\"$:/core/modules/utils/dom/notifier.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/notifier.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nNotifier mechanism\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nvar Notifier = function(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\n/*\\nDisplay a notification\\n\\ttitle: Title of tiddler containing the notification text\\n\\toptions: see below\\nOptions include:\\n*/\\nNotifier.prototype.display = function(title,options) {\\n\\toptions = options || {};\\n\\t// Create the wrapper divs\\n\\tvar self = this,\\n\\t\\tnotification = document.createElement(\\\"div\\\"),\\n\\t\\ttiddler = this.wiki.getTiddler(title),\\n\\t\\tduration = $tw.utils.getAnimationDuration(),\\n\\t\\trefreshHandler;\\n\\t// Don't do anything if the tiddler doesn't exist\\n\\tif(!tiddler) {\\n\\t\\treturn;\\n\\t}\\n\\t// Add classes\\n\\t$tw.utils.addClass(notification,\\\"tc-notification\\\");\\n\\t// Create the variables\\n\\tvar variables = $tw.utils.extend({currentTiddler: title},options.variables);\\n\\t// Render the body of the notification\\n\\tvar widgetNode = this.wiki.makeTranscludeWidget(title,{\\n\\t\\tparentWidget: $tw.rootWidget,\\n\\t\\tdocument: document,\\n\\t\\tvariables: variables,\\n\\t\\timportPageMacros: true});\\n\\twidgetNode.render(notification,null);\\n\\trefreshHandler = function(changes) {\\n\\t\\twidgetNode.refresh(changes,notification,null);\\n\\t};\\n\\tthis.wiki.addEventListener(\\\"change\\\",refreshHandler);\\n\\t// Set the initial styles for the notification\\n\\t$tw.utils.setStyle(notification,[\\n\\t\\t{opacity: \\\"0\\\"},\\n\\t\\t{transformOrigin: \\\"0% 0%\\\"},\\n\\t\\t{transform: \\\"translateY(\\\" + (-window.innerHeight) + \\\"px)\\\"},\\n\\t\\t{transition: \\\"opacity \\\" + duration + \\\"ms ease-out, \\\" + $tw.utils.roundTripPropertyName(\\\"transform\\\") + \\\" \\\" + duration + \\\"ms ease-in-out\\\"}\\n\\t]);\\n\\t// Add the notification to the DOM\\n\\tdocument.body.appendChild(notification);\\n\\t// Force layout\\n\\t$tw.utils.forceLayout(notification);\\n\\t// Set final animated styles\\n\\t$tw.utils.setStyle(notification,[\\n\\t\\t{opacity: \\\"1.0\\\"},\\n\\t\\t{transform: \\\"translateY(0px)\\\"}\\n\\t]);\\n\\t// Set a timer to remove the notification\\n\\twindow.setTimeout(function() {\\n\\t\\t// Remove our change event handler\\n\\t\\tself.wiki.removeEventListener(\\\"change\\\",refreshHandler);\\n\\t\\t// Force layout and animate the notification away\\n\\t\\t$tw.utils.forceLayout(notification);\\n\\t\\t$tw.utils.setStyle(notification,[\\n\\t\\t\\t{opacity: \\\"0.0\\\"},\\n\\t\\t\\t{transform: \\\"translateX(\\\" + (notification.offsetWidth) + \\\"px)\\\"}\\n\\t\\t]);\\n\\t\\t// Remove the modal message from the DOM once the transition ends\\n\\t\\tsetTimeout(function() {\\n\\t\\t\\tif(notification.parentNode) {\\n\\t\\t\\t\\tdocument.body.removeChild(notification);\\n\\t\\t\\t}\\n\\t\\t},duration);\\n\\t},$tw.config.preferences.notificationDuration);\\n};\\n\\nexports.Notifier = Notifier;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/popup.js\":{\"title\":\"$:/core/modules/utils/dom/popup.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/popup.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nModule that creates a $tw.utils.Popup object prototype that manages popups in the browser\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nCreates a Popup object with these options:\\n\\trootElement: the DOM element to which the popup zapper should be attached\\n*/\\nvar Popup = function(options) {\\n\\toptions = options || {};\\n\\tthis.rootElement = options.rootElement || document.documentElement;\\n\\tthis.popups = []; // Array of {title:,wiki:,domNode:} objects\\n};\\n\\n/*\\nTrigger a popup open or closed. Parameters are in a hashmap:\\n\\ttitle: title of the tiddler where the popup details are stored\\n\\tdomNode: dom node to which the popup will be positioned (one of domNode or domNodeRect is required)\\n\\tdomNodeRect: rectangle to which the popup will be positioned\\n\\twiki: wiki\\n\\tforce: if specified, forces the popup state to true or false (instead of toggling it)\\n\\tfloating: if true, skips registering the popup, meaning that it will need manually clearing\\n*/\\nPopup.prototype.triggerPopup = function(options) {\\n\\t// Check if this popup is already active\\n\\tvar index = this.findPopup(options.title);\\n\\t// Compute the new state\\n\\tvar state = index === -1;\\n\\tif(options.force !== undefined) {\\n\\t\\tstate = options.force;\\n\\t}\\n\\t// Show or cancel the popup according to the new state\\n\\tif(state) {\\n\\t\\tthis.show(options);\\n\\t} else {\\n\\t\\tthis.cancel(index);\\n\\t}\\n};\\n\\nPopup.prototype.findPopup = function(title) {\\n\\tvar index = -1;\\n\\tfor(var t=0; t\u003Cthis.popups.length; t++) {\\n\\t\\tif(this.popups[t].title === title) {\\n\\t\\t\\tindex = t;\\n\\t\\t}\\n\\t}\\n\\treturn index;\\n};\\n\\nPopup.prototype.handleEvent = function(event) {\\n\\tif(event.type === \\\"click\\\") {\\n\\t\\t// Find out what was clicked on\\n\\t\\tvar info = this.popupInfo(event.target),\\n\\t\\t\\tcancelLevel = info.popupLevel - 1;\\n\\t\\t// Don't remove the level that was clicked on if we clicked on a handle\\n\\t\\tif(info.isHandle) {\\n\\t\\t\\tcancelLevel++;\\n\\t\\t}\\n\\t\\t// Cancel\\n\\t\\tthis.cancel(cancelLevel);\\n\\t}\\n};\\n\\n/*\\nFind the popup level containing a DOM node. Returns:\\npopupLevel: count of the number of nested popups containing the specified element\\nisHandle: true if the specified element is within a popup handle\\n*/\\nPopup.prototype.popupInfo = function(domNode) {\\n\\tvar isHandle = false,\\n\\t\\tpopupCount = 0,\\n\\t\\tnode = domNode;\\n\\t// First check ancestors to see if we're within a popup handle\\n\\twhile(node) {\\n\\t\\tif($tw.utils.hasClass(node,\\\"tc-popup-handle\\\")) {\\n\\t\\t\\tisHandle = true;\\n\\t\\t\\tpopupCount++;\\n\\t\\t}\\n\\t\\tif($tw.utils.hasClass(node,\\\"tc-popup-keep\\\")) {\\n\\t\\t\\tisHandle = true;\\n\\t\\t}\\n\\t\\tnode = node.parentNode;\\n\\t}\\n\\t// Then count the number of ancestor popups\\n\\tnode = domNode;\\n\\twhile(node) {\\n\\t\\tif($tw.utils.hasClass(node,\\\"tc-popup\\\")) {\\n\\t\\t\\tpopupCount++;\\n\\t\\t}\\n\\t\\tnode = node.parentNode;\\n\\t}\\n\\tvar info = {\\n\\t\\tpopupLevel: popupCount,\\n\\t\\tisHandle: isHandle\\n\\t};\\n\\treturn info;\\n};\\n\\n/*\\nDisplay a popup by adding it to the stack\\n*/\\nPopup.prototype.show = function(options) {\\n\\t// Find out what was clicked on\\n\\tvar info = this.popupInfo(options.domNode);\\n\\t// Cancel any higher level popups\\n\\tthis.cancel(info.popupLevel);\\n\\n\\t// Store the popup details if not already there\\n\\tif(!options.floating && this.findPopup(options.title) === -1) {\\n\\t\\tthis.popups.push({\\n\\t\\t\\ttitle: options.title,\\n\\t\\t\\twiki: options.wiki,\\n\\t\\t\\tdomNode: options.domNode,\\n\\t\\t\\tnoStateReference: options.noStateReference\\n\\t\\t});\\n\\t}\\n\\t// Set the state tiddler\\n\\tvar rect;\\n\\tif(options.domNodeRect) {\\n\\t\\trect = options.domNodeRect;\\n\\t} else {\\n\\t\\trect = {\\n\\t\\t\\tleft: options.domNode.offsetLeft,\\n\\t\\t\\ttop: options.domNode.offsetTop,\\n\\t\\t\\twidth: options.domNode.offsetWidth,\\n\\t\\t\\theight: options.domNode.offsetHeight\\n\\t\\t};\\n\\t}\\n\\tvar popupRect = \\\"(\\\" + rect.left + \\\",\\\" + rect.top + \\\",\\\" + \\n\\t\\t\\t\\trect.width + \\\",\\\" + rect.height + \\\")\\\";\\n\\tif(options.noStateReference) {\\n\\t\\toptions.wiki.setText(options.title,\\\"text\\\",undefined,popupRect);\\n\\t} else {\\n\\t\\toptions.wiki.setTextReference(options.title,popupRect);\\n\\t}\\n\\t// Add the click handler if we have any popups\\n\\tif(this.popups.length > 0) {\\n\\t\\tthis.rootElement.addEventListener(\\\"click\\\",this,true);\\n\\t}\\n};\\n\\n/*\\nCancel all popups at or above a specified level or DOM node\\nlevel: popup level to cancel (0 cancels all popups)\\n*/\\nPopup.prototype.cancel = function(level) {\\n\\tvar numPopups = this.popups.length;\\n\\tlevel = Math.max(0,Math.min(level,numPopups));\\n\\tfor(var t=level; t\u003CnumPopups; t++) {\\n\\t\\tvar popup = this.popups.pop();\\n\\t\\tif(popup.title) {\\n\\t\\t\\tif(popup.noStateReference) {\\n\\t\\t\\t\\tpopup.wiki.deleteTiddler(popup.title);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpopup.wiki.deleteTiddler($tw.utils.parseTextReference(popup.title).title);\\n        \\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif(this.popups.length === 0) {\\n\\t\\tthis.rootElement.removeEventListener(\\\"click\\\",this,false);\\n\\t}\\n};\\n\\n/*\\nReturns true if the specified title and text identifies an active popup\\n*/\\nPopup.prototype.readPopupState = function(text) {\\n\\tvar popupLocationRegExp = /^\\\\((-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+)\\\\)$/;\\n\\treturn popupLocationRegExp.test(text);\\n};\\n\\nexports.Popup = Popup;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/dom/scroller.js\":{\"title\":\"$:/core/modules/utils/dom/scroller.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/dom/scroller.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nModule that creates a $tw.utils.Scroller object prototype that manages scrolling in the browser\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nEvent handler for when the `tm-scroll` event hits the document body\\n*/\\nvar PageScroller = function() {\\n\\tthis.idRequestFrame = null;\\n\\tthis.requestAnimationFrame = window.requestAnimationFrame ||\\n\\t\\twindow.webkitRequestAnimationFrame ||\\n\\t\\twindow.mozRequestAnimationFrame ||\\n\\t\\tfunction(callback) {\\n\\t\\t\\treturn window.setTimeout(callback, 1000/60);\\n\\t\\t};\\n\\tthis.cancelAnimationFrame = window.cancelAnimationFrame ||\\n\\t\\twindow.webkitCancelAnimationFrame ||\\n\\t\\twindow.webkitCancelRequestAnimationFrame ||\\n\\t\\twindow.mozCancelAnimationFrame ||\\n\\t\\twindow.mozCancelRequestAnimationFrame ||\\n\\t\\tfunction(id) {\\n\\t\\t\\twindow.clearTimeout(id);\\n\\t\\t};\\n};\\n\\nPageScroller.prototype.isScrolling = function() {\\n\\treturn this.idRequestFrame !== null;\\n}\\n\\nPageScroller.prototype.cancelScroll = function(srcWindow) {\\n\\tif(this.idRequestFrame) {\\n\\t\\tthis.cancelAnimationFrame.call(srcWindow,this.idRequestFrame);\\n\\t\\tthis.idRequestFrame = null;\\n\\t}\\n};\\n\\n/*\\nHandle an event\\n*/\\nPageScroller.prototype.handleEvent = function(event) {\\n\\tif(event.type === \\\"tm-scroll\\\") {\\n\\t\\tvar options = {};\\n\\t\\tif($tw.utils.hop(event.paramObject,\\\"animationDuration\\\")) {\\n\\t\\t\\toptions.animationDuration = event.paramObject.animationDuration;\\n\\t\\t}\\n\\t\\tif(event.paramObject && event.paramObject.selector) {\\n\\t\\t\\tthis.scrollSelectorIntoView(null,event.paramObject.selector,null,options);\\n\\t\\t} else {\\n\\t\\t\\tthis.scrollIntoView(event.target,null,options);\\n\\t\\t}\\n\\t\\treturn false; // Event was handled\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nHandle a scroll event hitting the page document\\n*/\\nPageScroller.prototype.scrollIntoView = function(element,callback,options) {\\n\\tvar self = this,\\n\\t\\tduration = $tw.utils.hop(options,\\\"animationDuration\\\") ? parseInt(options.animationDuration) : $tw.utils.getAnimationDuration(),\\n\\t\\tsrcWindow = element ? element.ownerDocument.defaultView : window;\\n\\t// Now get ready to scroll the body\\n\\tthis.cancelScroll(srcWindow);\\n\\tthis.startTime = Date.now();\\n\\t// Get the height of any position:fixed toolbars\\n\\tvar toolbar = srcWindow.document.querySelector(\\\".tc-adjust-top-of-scroll\\\"),\\n\\t\\toffset = 0;\\n\\tif(toolbar) {\\n\\t\\toffset = toolbar.offsetHeight;\\n\\t}\\n\\t// Get the client bounds of the element and adjust by the scroll position\\n\\tvar getBounds = function() {\\n\\t\\t\\tvar clientBounds = typeof callback === 'function' ? callback() : element.getBoundingClientRect(),\\n\\t\\t\\t\\tscrollPosition = $tw.utils.getScrollPosition(srcWindow);\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tleft: clientBounds.left + scrollPosition.x,\\n\\t\\t\\t\\ttop: clientBounds.top + scrollPosition.y - offset,\\n\\t\\t\\t\\twidth: clientBounds.width,\\n\\t\\t\\t\\theight: clientBounds.height\\n\\t\\t\\t};\\n\\t\\t},\\n\\t\\t// We'll consider the horizontal and vertical scroll directions separately via this function\\n\\t\\t// targetPos/targetSize - position and size of the target element\\n\\t\\t// currentPos/currentSize - position and size of the current scroll viewport\\n\\t\\t// returns: new position of the scroll viewport\\n\\t\\tgetEndPos = function(targetPos,targetSize,currentPos,currentSize) {\\n\\t\\t\\tvar newPos = targetPos;\\n\\t\\t\\t// If we are scrolling within 50 pixels of the top/left then snap to zero\\n\\t\\t\\tif(newPos \u003C 50) {\\n\\t\\t\\t\\tnewPos = 0;\\n\\t\\t\\t}\\n\\t\\t\\treturn newPos;\\n\\t\\t},\\n\\t\\tdrawFrame = function drawFrame() {\\n\\t\\t\\tvar t;\\n\\t\\t\\tif(duration \u003C= 0) {\\n\\t\\t\\t\\tt = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tt = ((Date.now()) - self.startTime) / duration;\\n\\t\\t\\t}\\n\\t\\t\\tif(t >= 1) {\\n\\t\\t\\t\\tself.cancelScroll(srcWindow);\\n\\t\\t\\t\\tt = 1;\\n\\t\\t\\t}\\n\\t\\t\\tt = $tw.utils.slowInSlowOut(t);\\n\\t\\t\\tvar scrollPosition = $tw.utils.getScrollPosition(srcWindow),\\n\\t\\t\\t\\tbounds = getBounds(),\\n\\t\\t\\t\\tendX = getEndPos(bounds.left,bounds.width,scrollPosition.x,srcWindow.innerWidth),\\n\\t\\t\\t\\tendY = getEndPos(bounds.top,bounds.height,scrollPosition.y,srcWindow.innerHeight);\\n\\t\\t\\tsrcWindow.scrollTo(scrollPosition.x + (endX - scrollPosition.x) * t,scrollPosition.y + (endY - scrollPosition.y) * t);\\n\\t\\t\\tif(t \u003C 1) {\\n\\t\\t\\t\\tself.idRequestFrame = self.requestAnimationFrame.call(srcWindow,drawFrame);\\n\\t\\t\\t}\\n\\t\\t};\\n\\tdrawFrame();\\n};\\n\\nPageScroller.prototype.scrollSelectorIntoView = function(baseElement,selector,callback,options) {\\n\\tbaseElement = baseElement || document.body;\\n\\tvar element = baseElement.querySelector(selector);\\n\\tif(element) {\\n\\t\\tthis.scrollIntoView(element,callback,options);\\n\\t}\\n};\\n\\nexports.PageScroller = PageScroller;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/edition-info.js\":{\"title\":\"$:/core/modules/utils/edition-info.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/edition-info.js\\ntype: application/javascript\\nmodule-type: utils-node\\n\\nInformation about the available editions\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar fs = require(\\\"fs\\\"),\\n\\tpath = require(\\\"path\\\");\\n\\nvar editionInfo;\\n\\nexports.getEditionInfo = function() {\\n\\tif(!editionInfo) {\\n\\t\\t// Enumerate the edition paths\\n\\t\\tvar editionPaths = $tw.getLibraryItemSearchPaths($tw.config.editionsPath,$tw.config.editionsEnvVar);\\n\\t\\teditionInfo = {};\\n\\t\\tfor(var editionIndex=0; editionIndex\u003CeditionPaths.length; editionIndex++) {\\n\\t\\t\\tvar editionPath = editionPaths[editionIndex];\\n\\t\\t\\t// Enumerate the folders\\n\\t\\t\\tvar entries = fs.readdirSync(editionPath);\\n\\t\\t\\tfor(var entryIndex=0; entryIndex\u003Centries.length; entryIndex++) {\\n\\t\\t\\t\\tvar entry = entries[entryIndex];\\n\\t\\t\\t\\t// Check if directories have a valid tiddlywiki.info\\n\\t\\t\\t\\tif(!editionInfo[entry] && $tw.utils.isDirectory(path.resolve(editionPath,entry))) {\\n\\t\\t\\t\\t\\tvar info = $tw.utils.parseJSONSafe(fs.readFileSync(path.resolve(editionPath,entry,\\\"tiddlywiki.info\\\"),\\\"utf8\\\"),null);\\n\\t\\t\\t\\t\\tif(info) {\\n\\t\\t\\t\\t\\t\\teditionInfo[entry] = info;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn editionInfo;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils-node\"},\"$:/core/modules/utils/escapecss.js\":{\"title\":\"$:/core/modules/utils/escapecss.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/escapecss.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nProvides CSS.escape() functionality.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false, window: false */\\n\\\"use strict\\\";\\n\\nexports.escapeCSS = (function() {\\n\\t// use browser's native CSS.escape() function if available\\n\\tif ($tw.browser && window.CSS && window.CSS.escape) {\\n\\t\\treturn window.CSS.escape;\\n\\t}\\n\\n\\t// otherwise, a utility method is provided\\n\\t// see also https://drafts.csswg.org/cssom/#serialize-an-identifier\\n\\n\\t/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\\n\\treturn function(value) {\\n\\t\\tif (arguments.length == 0) {\\n\\t\\t\\tthrow new TypeError('`CSS.escape` requires an argument.');\\n\\t\\t}\\n\\t\\tvar string = String(value);\\n\\t\\tvar length = string.length;\\n\\t\\tvar index = -1;\\n\\t\\tvar codeUnit;\\n\\t\\tvar result = '';\\n\\t\\tvar firstCodeUnit = string.charCodeAt(0);\\n\\t\\twhile (++index \u003C length) {\\n\\t\\t\\tcodeUnit = string.charCodeAt(index);\\n\\t\\t\\t// Note: there’s no need to special-case astral symbols, surrogate\\n\\t\\t\\t// pairs, or lone surrogates.\\n\\n\\t\\t\\t// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER\\n\\t\\t\\t// (U+FFFD).\\n\\t\\t\\tif (codeUnit == 0x0000) {\\n\\t\\t\\t\\tresult += '\\\\uFFFD';\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (\\n\\t\\t\\t\\t// If the character is in the range [\\\\1-\\\\1F] (U+0001 to U+001F) or is\\n\\t\\t\\t\\t// U+007F, […]\\n\\t\\t\\t\\t(codeUnit >= 0x0001 && codeUnit \u003C= 0x001F) || codeUnit == 0x007F ||\\n\\t\\t\\t\\t// If the character is the first character and is in the range [0-9]\\n\\t\\t\\t\\t// (U+0030 to U+0039), […]\\n\\t\\t\\t\\t(index == 0 && codeUnit >= 0x0030 && codeUnit \u003C= 0x0039) ||\\n\\t\\t\\t\\t// If the character is the second character and is in the range [0-9]\\n\\t\\t\\t\\t// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\\n\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\tindex == 1 &&\\n\\t\\t\\t\\t\\tcodeUnit >= 0x0030 && codeUnit \u003C= 0x0039 &&\\n\\t\\t\\t\\t\\tfirstCodeUnit == 0x002D\\n\\t\\t\\t\\t)\\n\\t\\t\\t) {\\n\\t\\t\\t\\t// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\\n\\t\\t\\t\\tresult += '\\\\\\\\' + codeUnit.toString(16) + ' ';\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (\\n\\t\\t\\t\\t// If the character is the first character and is a `-` (U+002D), and\\n\\t\\t\\t\\t// there is no second character, […]\\n\\t\\t\\t\\tindex == 0 &&\\n\\t\\t\\t\\tlength == 1 &&\\n\\t\\t\\t\\tcodeUnit == 0x002D\\n\\t\\t\\t) {\\n\\t\\t\\t\\tresult += '\\\\\\\\' + string.charAt(index);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If the character is not handled by one of the above rules and is\\n\\t\\t\\t// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\\n\\t\\t\\t// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\\n\\t\\t\\t// U+005A), or [a-z] (U+0061 to U+007A), […]\\n\\t\\t\\tif (\\n\\t\\t\\t\\tcodeUnit >= 0x0080 ||\\n\\t\\t\\t\\tcodeUnit == 0x002D ||\\n\\t\\t\\t\\tcodeUnit == 0x005F ||\\n\\t\\t\\t\\tcodeUnit >= 0x0030 && codeUnit \u003C= 0x0039 ||\\n\\t\\t\\t\\tcodeUnit >= 0x0041 && codeUnit \u003C= 0x005A ||\\n\\t\\t\\t\\tcodeUnit >= 0x0061 && codeUnit \u003C= 0x007A\\n\\t\\t\\t) {\\n\\t\\t\\t\\t// the character itself\\n\\t\\t\\t\\tresult += string.charAt(index);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Otherwise, the escaped character.\\n\\t\\t\\t// https://drafts.csswg.org/cssom/#escape-a-character\\n\\t\\t\\tresult += '\\\\\\\\' + string.charAt(index);\\n\\n\\t\\t}\\n\\t\\treturn result;\\n\\t};\\n})();\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/fakedom.js\":{\"title\":\"$:/core/modules/utils/fakedom.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/fakedom.js\\ntype: application/javascript\\nmodule-type: global\\n\\nA barebones implementation of DOM interfaces needed by the rendering mechanism.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Sequence number used to enable us to track objects for testing\\nvar sequenceNumber = null;\\n\\nvar bumpSequenceNumber = function(object) {\\n\\tif(sequenceNumber !== null) {\\n\\t\\tobject.sequenceNumber = sequenceNumber++;\\n\\t}\\n};\\n\\nvar TW_Node = function (){\\n\\tthrow TypeError(\\\"Illegal constructor\\\");\\n};\\n\\nObject.defineProperty(TW_Node.prototype, 'ELEMENT_NODE', {\\n\\tget: function() {\\n\\t\\treturn 1;\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Node.prototype, 'TEXT_NODE', {\\n\\tget: function() {\\n\\t\\treturn 3;\\n\\t}\\n});\\n\\nvar TW_TextNode = function(text) {\\n\\tbumpSequenceNumber(this);\\n\\tthis.textContent = text + \\\"\\\";\\n};\\n\\nTW_TextNode.prototype = Object.create(TW_Node.prototype);\\n\\nObject.defineProperty(TW_TextNode.prototype, \\\"nodeType\\\", {\\n\\tget: function() {\\n\\t\\treturn this.TEXT_NODE;\\n\\t}\\n});\\n\\nObject.defineProperty(TW_TextNode.prototype, \\\"formattedTextContent\\\", {\\n\\tget: function() {\\n\\t\\treturn this.textContent.replace(/(\\\\r?\\\\n)/g,\\\"\\\");\\n\\t}\\n});\\n\\nvar TW_Element = function(tag,namespace) {\\n\\tbumpSequenceNumber(this);\\n\\tthis.isTiddlyWikiFakeDom = true;\\n\\tthis.tag = tag;\\n\\tthis.attributes = {};\\n\\tthis.isRaw = false;\\n\\tthis.children = [];\\n\\tthis._style = {};\\n\\tthis.namespaceURI = namespace || \\\"http://www.w3.org/1999/xhtml\\\";\\n};\\n\\nTW_Element.prototype = Object.create(TW_Node.prototype);\\n\\nObject.defineProperty(TW_Element.prototype, \\\"style\\\", {\\n\\tget: function() {\\n\\t\\treturn this._style;\\n\\t},\\n\\tset: function(str) {\\n\\t\\tvar self = this;\\n\\t\\tstr = str || \\\"\\\";\\n\\t\\t$tw.utils.each(str.split(\\\";\\\"),function(declaration) {\\n\\t\\t\\tvar parts = declaration.split(\\\":\\\"),\\n\\t\\t\\t\\tname = $tw.utils.trim(parts[0]),\\n\\t\\t\\t\\tvalue = $tw.utils.trim(parts[1]);\\n\\t\\t\\tif(name && value) {\\n\\t\\t\\t\\tself._style[$tw.utils.convertStyleNameToPropertyName(name)] = value;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"nodeType\\\", {\\n\\tget: function() {\\n\\t\\treturn this.ELEMENT_NODE;\\n\\t}\\n});\\n\\nTW_Element.prototype.getAttribute = function(name) {\\n\\tif(this.isRaw) {\\n\\t\\tthrow \\\"Cannot getAttribute on a raw TW_Element\\\";\\n\\t}\\n\\treturn this.attributes[name];\\n};\\n\\nTW_Element.prototype.setAttribute = function(name,value) {\\n\\tif(this.isRaw) {\\n\\t\\tthrow \\\"Cannot setAttribute on a raw TW_Element\\\";\\n\\t}\\n\\tthis.attributes[name] = value + \\\"\\\";\\n};\\n\\nTW_Element.prototype.setAttributeNS = function(namespace,name,value) {\\n\\tthis.setAttribute(name,value);\\n};\\n\\nTW_Element.prototype.removeAttribute = function(name) {\\n\\tif(this.isRaw) {\\n\\t\\tthrow \\\"Cannot removeAttribute on a raw TW_Element\\\";\\n\\t}\\n\\tif($tw.utils.hop(this.attributes,name)) {\\n\\t\\tdelete this.attributes[name];\\n\\t}\\n};\\n\\nTW_Element.prototype.appendChild = function(node) {\\n\\tthis.children.push(node);\\n\\tnode.parentNode = this;\\n};\\n\\nTW_Element.prototype.insertBefore = function(node,nextSibling) {\\n\\tif(nextSibling) {\\n\\t\\tvar p = this.children.indexOf(nextSibling);\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tthis.children.splice(p,0,node);\\n\\t\\t\\tnode.parentNode = this;\\n\\t\\t} else {\\n\\t\\t\\tthis.appendChild(node);\\n\\t\\t}\\n\\t} else {\\n\\t\\tthis.appendChild(node);\\n\\t}\\n};\\n\\nTW_Element.prototype.removeChild = function(node) {\\n\\tvar p = this.children.indexOf(node);\\n\\tif(p !== -1) {\\n\\t\\tthis.children.splice(p,1);\\n\\t}\\n};\\n\\nTW_Element.prototype.hasChildNodes = function() {\\n\\treturn !!this.children.length;\\n};\\n\\nObject.defineProperty(TW_Element.prototype, \\\"childNodes\\\", {\\n\\tget: function() {\\n\\t\\treturn this.children;\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"firstChild\\\", {\\n\\tget: function() {\\n\\t\\treturn this.children[0];\\n\\t}\\n});\\n\\nTW_Element.prototype.addEventListener = function(type,listener,useCapture) {\\n\\t// Do nothing\\n};\\n\\nObject.defineProperty(TW_Element.prototype, \\\"tagName\\\", {\\n\\tget: function() {\\n\\t\\treturn this.tag || \\\"\\\";\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"className\\\", {\\n\\tget: function() {\\n\\t\\treturn this.attributes[\\\"class\\\"] || \\\"\\\";\\n\\t},\\n\\tset: function(value) {\\n\\t\\tthis.attributes[\\\"class\\\"] = value + \\\"\\\";\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"value\\\", {\\n\\tget: function() {\\n\\t\\treturn this.attributes.value || \\\"\\\";\\n\\t},\\n\\tset: function(value) {\\n\\t\\tthis.attributes.value = value + \\\"\\\";\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"outerHTML\\\", {\\n\\tget: function() {\\n\\t\\tvar output = [],attr,a,v;\\n\\t\\toutput.push(\\\"\u003C\\\",this.tag);\\n\\t\\tif(this.attributes) {\\n\\t\\t\\tattr = [];\\n\\t\\t\\tfor(a in this.attributes) {\\n\\t\\t\\t\\tattr.push(a);\\n\\t\\t\\t}\\n\\t\\t\\tattr.sort();\\n\\t\\t\\tfor(a=0; a\u003Cattr.length; a++) {\\n\\t\\t\\t\\tv = this.attributes[attr[a]];\\n\\t\\t\\t\\tif(v !== undefined) {\\n\\t\\t\\t\\t\\toutput.push(\\\" \\\",attr[a],\\\"=\\\\\\\"\\\",$tw.utils.htmlEncode(v),\\\"\\\\\\\"\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(this._style) {\\n\\t\\t\\tvar style = [];\\n\\t\\t\\tfor(var s in this._style) {\\n\\t\\t\\t\\tstyle.push($tw.utils.convertPropertyNameToStyleName(s) + \\\":\\\" + this._style[s] + \\\";\\\");\\n\\t\\t\\t}\\n\\t\\t\\tif(style.length > 0) {\\n\\t\\t\\t\\toutput.push(\\\" style=\\\\\\\"\\\",style.join(\\\"\\\"),\\\"\\\\\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\toutput.push(\\\">\\\");\\n\\t\\tif($tw.config.htmlVoidElements.indexOf(this.tag) === -1) {\\n\\t\\t\\toutput.push(this.innerHTML);\\n\\t\\t\\toutput.push(\\\"\u003C/\\\",this.tag,\\\">\\\");\\n\\t\\t}\\n\\t\\treturn output.join(\\\"\\\");\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"innerHTML\\\", {\\n\\tget: function() {\\n\\t\\tif(this.isRaw) {\\n\\t\\t\\treturn this.rawHTML;\\n\\t\\t} else {\\n\\t\\t\\tvar b = [];\\n\\t\\t\\t$tw.utils.each(this.children,function(node) {\\n\\t\\t\\t\\tif(node instanceof TW_Element) {\\n\\t\\t\\t\\t\\tb.push(node.outerHTML);\\n\\t\\t\\t\\t} else if(node instanceof TW_TextNode) {\\n\\t\\t\\t\\t\\tb.push($tw.utils.htmlTextEncode(node.textContent));\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn b.join(\\\"\\\");\\n\\t\\t}\\n\\t},\\n\\tset: function(value) {\\n\\t\\tthis.isRaw = true;\\n\\t\\tthis.rawHTML = value;\\n\\t\\tthis.rawTextContent = null;\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"textInnerHTML\\\", {\\n\\tset: function(value) {\\n\\t\\tif(this.isRaw) {\\n\\t\\t\\tthis.rawTextContent = value;\\n\\t\\t} else {\\n\\t\\t\\tthrow \\\"Cannot set textInnerHTML of a non-raw TW_Element\\\";\\n\\t\\t}\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"textContent\\\", {\\n\\tget: function() {\\n\\t\\tif(this.isRaw) {\\n\\t\\t\\tif(this.rawTextContent === null) {\\n\\t\\t\\t\\treturn \\\"\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this.rawTextContent;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tvar b = [];\\n\\t\\t\\t$tw.utils.each(this.children,function(node) {\\n\\t\\t\\t\\tb.push(node.textContent);\\n\\t\\t\\t});\\n\\t\\t\\treturn b.join(\\\"\\\");\\n\\t\\t}\\n\\t},\\n\\tset: function(value) {\\n\\t\\tthis.children = [new TW_TextNode(value)];\\n\\t}\\n});\\n\\nObject.defineProperty(TW_Element.prototype, \\\"formattedTextContent\\\", {\\n\\tget: function() {\\n\\t\\tif(this.isRaw) {\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t} else {\\n\\t\\t\\tvar b = [],\\n\\t\\t\\t\\tisBlock = $tw.config.htmlBlockElements.indexOf(this.tag) !== -1;\\n\\t\\t\\tif(isBlock) {\\n\\t\\t\\t\\tb.push(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t\\tif(this.tag === \\\"li\\\") {\\n\\t\\t\\t\\tb.push(\\\"* \\\");\\n\\t\\t\\t}\\n\\t\\t\\t$tw.utils.each(this.children,function(node) {\\n\\t\\t\\t\\tb.push(node.formattedTextContent);\\n\\t\\t\\t});\\n\\t\\t\\tif(isBlock) {\\n\\t\\t\\t\\tb.push(\\\"\\\\n\\\");\\n\\t\\t\\t}\\n\\t\\t\\treturn b.join(\\\"\\\");\\n\\t\\t}\\n\\t}\\n});\\n\\nvar document = {\\n\\tsetSequenceNumber: function(value) {\\n\\t\\tsequenceNumber = value;\\n\\t},\\n\\tcreateElementNS: function(namespace,tag) {\\n\\t\\treturn new TW_Element(tag,namespace);\\n\\t},\\n\\tcreateElement: function(tag) {\\n\\t\\treturn new TW_Element(tag);\\n\\t},\\n\\tcreateTextNode: function(text) {\\n\\t\\treturn new TW_TextNode(text);\\n\\t},\\n\\tcompatMode: \\\"CSS1Compat\\\", // For KaTeX to know that we're not a browser in quirks mode\\n\\tisTiddlyWikiFakeDom: true\\n};\\n\\nexports.fakeDocument = document;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/utils/filesystem.js\":{\"title\":\"$:/core/modules/utils/filesystem.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/filesystem.js\\ntype: application/javascript\\nmodule-type: utils-node\\n\\nFile system utilities\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar fs = require(\\\"fs\\\"),\\n\\tpath = require(\\\"path\\\");\\n\\n/*\\nReturn the subdirectories of a path\\n*/\\nexports.getSubdirectories = function(dirPath) {\\n\\tif(!$tw.utils.isDirectory(dirPath)) {\\n\\t\\treturn null;\\n\\t}\\n\\tvar subdirs = [];\\n\\t$tw.utils.each(fs.readdirSync(dirPath),function(item) {\\n\\t\\tif($tw.utils.isDirectory(path.resolve(dirPath,item))) {\\n\\t\\t\\tsubdirs.push(item);\\n\\t\\t}\\n\\t});\\n\\treturn subdirs;\\n}\\n\\n/*\\nRecursively (and synchronously) copy a directory and all its content\\n*/\\nexports.copyDirectory = function(srcPath,dstPath) {\\n\\t// Remove any trailing path separators\\n\\tsrcPath = path.resolve($tw.utils.removeTrailingSeparator(srcPath));\\n\\tdstPath = path.resolve($tw.utils.removeTrailingSeparator(dstPath));\\n\\t// Check that neither director is within the other\\n\\tif(srcPath.substring(0,dstPath.length) === dstPath || dstPath.substring(0,srcPath.length) === srcPath) {\\n\\t\\treturn \\\"Cannot copy nested directories\\\";\\n\\t}\\n\\t// Create the destination directory\\n\\tvar err = $tw.utils.createDirectory(dstPath);\\n\\tif(err) {\\n\\t\\treturn err;\\n\\t}\\n\\t// Function to copy a folder full of files\\n\\tvar copy = function(srcPath,dstPath) {\\n\\t\\tvar srcStats = fs.lstatSync(srcPath),\\n\\t\\t\\tdstExists = fs.existsSync(dstPath);\\n\\t\\tif(srcStats.isFile()) {\\n\\t\\t\\t$tw.utils.copyFile(srcPath,dstPath);\\n\\t\\t} else if(srcStats.isDirectory()) {\\n\\t\\t\\tvar items = fs.readdirSync(srcPath);\\n\\t\\t\\tfor(var t=0; t\u003Citems.length; t++) {\\n\\t\\t\\t\\tvar item = items[t],\\n\\t\\t\\t\\t\\terr = copy(srcPath + path.sep + item,dstPath + path.sep + item);\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\treturn err;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tcopy(srcPath,dstPath);\\n\\treturn null;\\n};\\n\\n/*\\nCopy a file\\n*/\\nvar FILE_BUFFER_LENGTH = 64 * 1024,\\n\\tfileBuffer;\\n\\nexports.copyFile = function(srcPath,dstPath) {\\n\\t// Create buffer if required\\n\\tif(!fileBuffer) {\\n\\t\\tfileBuffer = Buffer.alloc(FILE_BUFFER_LENGTH);\\n\\t}\\n\\t// Create any directories in the destination\\n\\t$tw.utils.createDirectory(path.dirname(dstPath));\\n\\t// Copy the file\\n\\tvar srcFile = fs.openSync(srcPath,\\\"r\\\"),\\n\\t\\tdstFile = fs.openSync(dstPath,\\\"w\\\"),\\n\\t\\tbytesRead = 1,\\n\\t\\tpos = 0;\\n\\twhile (bytesRead > 0) {\\n\\t\\tbytesRead = fs.readSync(srcFile,fileBuffer,0,FILE_BUFFER_LENGTH,pos);\\n\\t\\tfs.writeSync(dstFile,fileBuffer,0,bytesRead);\\n\\t\\tpos += bytesRead;\\n\\t}\\n\\tfs.closeSync(srcFile);\\n\\tfs.closeSync(dstFile);\\n\\treturn null;\\n};\\n\\n/*\\nRemove trailing path separator\\n*/\\nexports.removeTrailingSeparator = function(dirPath) {\\n\\tvar len = dirPath.length;\\n\\tif(dirPath.charAt(len-1) === path.sep) {\\n\\t\\tdirPath = dirPath.substr(0,len-1);\\n\\t}\\n\\treturn dirPath;\\n};\\n\\n/*\\nRecursively create a directory\\n*/\\nexports.createDirectory = function(dirPath) {\\n\\tif(dirPath.substr(dirPath.length-1,1) !== path.sep) {\\n\\t\\tdirPath = dirPath + path.sep;\\n\\t}\\n\\tvar pos = 1;\\n\\tpos = dirPath.indexOf(path.sep,pos);\\n\\twhile(pos !== -1) {\\n\\t\\tvar subDirPath = dirPath.substr(0,pos);\\n\\t\\tif(!$tw.utils.isDirectory(subDirPath)) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tfs.mkdirSync(subDirPath);\\n\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\treturn \\\"Error creating directory '\\\" + subDirPath + \\\"'\\\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpos = dirPath.indexOf(path.sep,pos + 1);\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nRecursively create directories needed to contain a specified file\\n*/\\nexports.createFileDirectories = function(filePath) {\\n\\treturn $tw.utils.createDirectory(path.dirname(filePath));\\n};\\n\\n/*\\nRecursively delete a directory\\n*/\\nexports.deleteDirectory = function(dirPath) {\\n\\tif(fs.existsSync(dirPath)) {\\n\\t\\tvar entries = fs.readdirSync(dirPath);\\n\\t\\tfor(var entryIndex=0; entryIndex\u003Centries.length; entryIndex++) {\\n\\t\\t\\tvar currPath = dirPath + path.sep + entries[entryIndex];\\n\\t\\t\\tif(fs.lstatSync(currPath).isDirectory()) {\\n\\t\\t\\t\\t$tw.utils.deleteDirectory(currPath);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfs.unlinkSync(currPath);\\n\\t\\t\\t}\\n\\t\\t}\\n\\tfs.rmdirSync(dirPath);\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nCheck if a path identifies a directory\\n*/\\nexports.isDirectory = function(dirPath) {\\n\\treturn fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory();\\n};\\n\\n/*\\nCheck if a path identifies a directory that is empty\\n*/\\nexports.isDirectoryEmpty = function(dirPath) {\\n\\tif(!$tw.utils.isDirectory(dirPath)) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar files = fs.readdirSync(dirPath),\\n\\t\\tempty = true;\\n\\t$tw.utils.each(files,function(file,index) {\\n\\t\\tif(file.charAt(0) !== \\\".\\\") {\\n\\t\\t\\tempty = false;\\n\\t\\t}\\n\\t});\\n\\treturn empty;\\n};\\n\\n/*\\nRecursively delete a tree of empty directories\\n*/\\nexports.deleteEmptyDirs = function(dirpath,callback) {\\n\\tvar self = this;\\n\\tfs.readdir(dirpath,function(err,files) {\\n\\t\\tif(err) {\\n\\t\\t\\treturn callback(err);\\n\\t\\t}\\n\\t\\tif(files.length > 0) {\\n\\t\\t\\treturn callback(null);\\n\\t\\t}\\n\\t\\tfs.rmdir(dirpath,function(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tself.deleteEmptyDirs(path.dirname(dirpath),callback);\\n\\t\\t});\\n\\t});\\n};\\n\\n/*\\nCreate a fileInfo object for saving a tiddler:\\n\\tfilepath: the absolute path to the file containing the tiddler\\n\\ttype: the type of the tiddler file on disk (NOT the type of the tiddler)\\n\\thasMetaFile: true if the file also has a companion .meta file\\n\\tisEditableFile: true if the tiddler was loaded via non-standard options & marked editable\\nOptions include:\\n\\tdirectory: absolute path of root directory to which we are saving\\n\\tpathFilters: optional array of filters to be used to generate the base path\\n\\textFilters: optional array of filters to be used to generate the base path\\n\\twiki: optional wiki for evaluating the pathFilters,\\n\\tfileInfo: an existing fileInfo to check against\\n*/\\nexports.generateTiddlerFileInfo = function(tiddler,options) {\\n\\tvar fileInfo = {}, metaExt;\\n\\t// Propagate the isEditableFile flag\\n\\tif(options.fileInfo && !!options.fileInfo.isEditableFile) {\\n\\t\\tfileInfo.isEditableFile = true;\\n\\t\\tfileInfo.originalpath = options.fileInfo.originalpath;\\n\\t}\\n\\t// Check if the tiddler has any unsafe fields that can't be expressed in a .tid or .meta file: containing control characters, or leading/trailing whitespace\\n\\tvar hasUnsafeFields = false;\\n\\t$tw.utils.each(tiddler.getFieldStrings(),function(value,fieldName) {\\n\\t\\tif(fieldName !== \\\"text\\\") {\\n\\t\\t\\thasUnsafeFields = hasUnsafeFields || /[\\\\x00-\\\\x1F]/mg.test(value);\\n\\t\\t\\thasUnsafeFields = hasUnsafeFields || ($tw.utils.trim(value) !== value);\\n\\t\\t}\\n\\t\\thasUnsafeFields = hasUnsafeFields || /:/mg.test(fieldName);\\n\\t});\\n\\t// Check for field values \\n\\tif(hasUnsafeFields) {\\n\\t\\t// Save as a JSON file\\n\\t\\tfileInfo.type = \\\"application/json\\\";\\n\\t\\tfileInfo.hasMetaFile = false;\\n\\t} else {\\n\\t\\t// Save as a .tid or a text/binary file plus a .meta file\\n\\t\\tvar tiddlerType = tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\";\\n\\t\\tif(tiddlerType === \\\"text/vnd.tiddlywiki\\\") {\\n\\t\\t\\t// Save as a .tid file\\n\\t\\t\\tfileInfo.type = \\\"application/x-tiddler\\\";\\n\\t\\t\\tfileInfo.hasMetaFile = false;\\n\\t\\t} else {\\n\\t\\t\\t// Save as a text/binary file and a .meta file\\n\\t\\t\\tfileInfo.type = tiddlerType;\\n\\t\\t\\tfileInfo.hasMetaFile = true;\\n\\t\\t}\\n\\t\\tif(options.extFilters) {\\n\\t\\t\\t// Check for extension overrides\\n\\t\\t\\tmetaExt = $tw.utils.generateTiddlerExtension(tiddler.fields.title,{\\n\\t\\t\\t\\textFilters: options.extFilters,\\n\\t\\t\\t\\twiki: options.wiki\\n\\t\\t\\t});\\n\\t\\t\\tif(metaExt) {\\n\\t\\t\\t\\tif(metaExt === \\\".tid\\\") {\\n\\t\\t\\t\\t\\t// Overriding to the .tid extension needs special handling\\n\\t\\t\\t\\t\\tfileInfo.type = \\\"application/x-tiddler\\\";\\n\\t\\t\\t\\t\\tfileInfo.hasMetaFile = false;\\n\\t\\t\\t\\t} else if (metaExt === \\\".json\\\") {\\n\\t\\t\\t\\t\\t// Overriding to the .json extension needs special handling\\n\\t\\t\\t\\t\\tfileInfo.type = \\\"application/json\\\";\\n\\t\\t\\t\\t\\tfileInfo.hasMetaFile = false;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t//If the new type matches a known extention, use that MIME type's encoding\\n\\t\\t\\t\\t\\tvar extInfo = $tw.utils.getFileExtensionInfo(metaExt);\\n\\t\\t\\t\\t\\tfileInfo.type = extInfo ? extInfo.type : null;\\n\\t\\t\\t\\t\\tfileInfo.encoding = $tw.utils.getTypeEncoding(metaExt);\\n\\t\\t\\t\\t\\tfileInfo.hasMetaFile = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Take the file extension from the tiddler content type or metaExt\\n\\tvar contentTypeInfo = $tw.config.contentTypeInfo[fileInfo.type] || {extension: \\\"\\\"};\\n\\t// Generate the filepath\\n\\tfileInfo.filepath = $tw.utils.generateTiddlerFilepath(tiddler.fields.title,{\\n\\t\\textension: metaExt || contentTypeInfo.extension,\\n\\t\\tdirectory: options.directory,\\n\\t\\tpathFilters: options.pathFilters,\\n\\t\\twiki: options.wiki,\\n\\t\\tfileInfo: options.fileInfo\\n\\t});\\n\\treturn fileInfo;\\n};\\n\\n/*\\nGenerate the file extension for saving a tiddler\\nOptions include:\\n\\textFilters: optional array of filters to be used to generate the extention\\n\\twiki: optional wiki for evaluating the extFilters\\n*/\\nexports.generateTiddlerExtension = function(title,options) {\\n\\tvar extension;\\n\\t// Check if any of the extFilters applies\\n\\tif(options.extFilters && options.wiki) { \\n\\t\\t$tw.utils.each(options.extFilters,function(filter) {\\n\\t\\t\\tif(!extension) {\\n\\t\\t\\t\\tvar source = options.wiki.makeTiddlerIterator([title]),\\n\\t\\t\\t\\t\\tresult = options.wiki.filterTiddlers(filter,null,source);\\n\\t\\t\\t\\tif(result.length > 0) {\\n\\t\\t\\t\\t\\textension = result[0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn extension;\\n};\\n\\n/*\\nGenerate the filepath for saving a tiddler\\nOptions include:\\n\\textension: file extension to be added the finished filepath\\n\\tdirectory: absolute path of root directory to which we are saving\\n\\tpathFilters: optional array of filters to be used to generate the base path\\n\\twiki: optional wiki for evaluating the pathFilters\\n\\tfileInfo: an existing fileInfo object to check against\\n*/\\nexports.generateTiddlerFilepath = function(title,options) {\\n\\tvar directory = options.directory || \\\"\\\",\\n\\t\\textension = options.extension || \\\"\\\",\\n\\t\\toriginalpath = (options.fileInfo && options.fileInfo.originalpath) ? options.fileInfo.originalpath : \\\"\\\",\\n\\t\\tfilepath;\\n\\t// Check if any of the pathFilters applies\\n\\tif(options.pathFilters && options.wiki) {\\n\\t\\t$tw.utils.each(options.pathFilters,function(filter) {\\n\\t\\t\\tif(!filepath) {\\n\\t\\t\\t\\tvar source = options.wiki.makeTiddlerIterator([title]),\\n\\t\\t\\t\\t\\tresult = options.wiki.filterTiddlers(filter,null,source);\\n\\t\\t\\t\\tif(result.length > 0) {\\n\\t\\t\\t\\t\\tfilepath = result[0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\tif(!filepath && !!originalpath) {\\n\\t\\t//Use the originalpath without the extension\\n\\t\\tvar ext = path.extname(originalpath);\\n\\t\\tfilepath = originalpath.substring(0,originalpath.length - ext.length);\\n\\t} else if(!filepath) {\\n\\t\\tfilepath = title;\\n\\t\\t// Remove any forward or backward slashes so we don't create directories\\n\\t\\tfilepath = filepath.replace(/\\\\/|\\\\\\\\/g,\\\"_\\\");\\n\\t}\\n\\t// Replace any Windows control codes\\n\\tfilepath = filepath.replace(/^(con|prn|aux|nul|com[0-9]|lpt[0-9])$/i,\\\"_$1_\\\");\\n\\t// Replace any leading spaces with the same number of underscores\\n\\tfilepath = filepath.replace(/^ +/,function (u) { return u.replace(/ /g, \\\"_\\\")});\\n\\t//If the path does not start with \\\".\\\" or \\\"..\\\" && a path seperator, then\\n\\tif(!/^\\\\.{1,2}[/\\\\\\\\]/g.test(filepath)) {\\n\\t\\t// Don't let the filename start with any dots because such files are invisible on *nix\\n\\t\\tfilepath = filepath.replace(/^\\\\.+/g,function (u) { return u.replace(/\\\\./g, \\\"_\\\")});\\n\\t}\\n\\t// Replace any Unicode control codes\\n\\tfilepath = filepath.replace(/[\\\\x00-\\\\x1f\\\\x80-\\\\x9f]/g,\\\"_\\\");\\n\\t// Replace any characters that can't be used in cross-platform filenames\\n\\tfilepath = $tw.utils.transliterate(filepath.replace(/\u003C|>|~|\\\\:|\\\\\\\"|\\\\||\\\\?|\\\\*|\\\\^/g,\\\"_\\\"));\\n\\t// Replace any dots or spaces at the end of the extension with the same number of underscores\\n\\textension = extension.replace(/[\\\\. ]+$/, function (u) { return u.replace(/[\\\\. ]/g, \\\"_\\\")});\\n\\t// Truncate the extension if it is too long\\n\\tif(extension.length > 32) {\\n\\t\\textension = extension.substr(0,32);\\n\\t}\\n\\t// If the filepath already ends in the extension then remove it\\n\\tif(filepath.substring(filepath.length - extension.length) === extension) {\\n\\t\\tfilepath = filepath.substring(0,filepath.length - extension.length);\\n\\t}\\n\\t// Truncate the filename if it is too long\\n\\tif(filepath.length > 200) {\\n\\t\\tfilepath = filepath.substr(0,200);\\n\\t}\\n\\t// If the resulting filename is blank (eg because the title is just punctuation)\\n\\tif(!filepath || /^_+$/g.test(filepath)) {\\n\\t\\t// ...then just use the character codes of the title\\n\\t\\tfilepath = \\\"\\\";\\n\\t\\t$tw.utils.each(title.split(\\\"\\\"),function(char) {\\n\\t\\t\\tif(filepath) {\\n\\t\\t\\t\\tfilepath += \\\"-\\\";\\n\\t\\t\\t}\\n\\t\\t\\tfilepath += char.charCodeAt(0).toString();\\n\\t\\t});\\n\\t}\\n\\t// Add a uniquifier if the file already exists\\n\\tvar fullPath, oldPath = (options.fileInfo) ? options.fileInfo.filepath : undefined,\\n\\t\\tcount = 0;\\n\\tdo {\\n\\t\\tfullPath = path.resolve(directory,filepath + (count ? \\\"_\\\" + count : \\\"\\\") + extension);\\n\\t\\tif(oldPath && oldPath == fullPath) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tcount++;\\n\\t} while(fs.existsSync(fullPath));\\n\\t// If the last write failed with an error, or if path does not start with:\\n\\t//\\tthe resolved options.directory, the resolved wikiPath directory, the wikiTiddlersPath directory, \\n\\t//\\tor the 'originalpath' directory, then encodeURIComponent() and resolve to tiddler directory.\\n\\tvar writePath = $tw.hooks.invokeHook(\\\"th-make-tiddler-path\\\",fullPath,fullPath),\\n\\t\\tencode = (options.fileInfo || {writeError: false}).writeError == true;\\n\\tif(!encode) {\\n\\t\\tencode = !(writePath.indexOf($tw.boot.wikiTiddlersPath) == 0 ||\\n\\t\\t\\twritePath.indexOf(path.resolve(directory)) == 0 ||\\n\\t\\t\\twritePath.indexOf(path.resolve($tw.boot.wikiPath)) == 0 ||\\n\\t\\t\\twritePath.indexOf(path.resolve($tw.boot.wikiTiddlersPath,originalpath)) == 0 );\\n\\t\\t}\\n\\tif(encode) {\\n\\t\\twritePath = path.resolve(directory,encodeURIComponent(fullPath));\\n\\t}\\n\\t// Return the full path to the file\\n\\treturn writePath;\\n};\\n\\n/*\\nSave a tiddler to a file described by the fileInfo:\\n\\tfilepath: the absolute path to the file containing the tiddler\\n\\ttype: the type of the tiddler file (NOT the type of the tiddler)\\n\\thasMetaFile: true if the file also has a companion .meta file\\n*/\\nexports.saveTiddlerToFile = function(tiddler,fileInfo,callback) {\\n\\t$tw.utils.createDirectory(path.dirname(fileInfo.filepath));\\n\\tif(fileInfo.hasMetaFile) {\\n\\t\\t// Save the tiddler as a separate body and meta file\\n\\t\\tvar typeInfo = $tw.config.contentTypeInfo[tiddler.fields.type || \\\"text/plain\\\"] || {encoding: \\\"utf8\\\"};\\n\\t\\tfs.writeFile(fileInfo.filepath,tiddler.fields.text || \\\"\\\",typeInfo.encoding,function(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t}\\n\\t\\t\\tfs.writeFile(fileInfo.filepath + \\\".meta\\\",tiddler.getFieldStringBlock({exclude: [\\\"text\\\",\\\"bag\\\"]}),\\\"utf8\\\",function(err) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn callback(null,fileInfo);\\n\\t\\t\\t});\\n\\t\\t});\\n\\t} else {\\n\\t\\t// Save the tiddler as a self contained templated file\\n\\t\\tif(fileInfo.type === \\\"application/x-tiddler\\\") {\\n\\t\\t\\tfs.writeFile(fileInfo.filepath,tiddler.getFieldStringBlock({exclude: [\\\"text\\\",\\\"bag\\\"]}) + (!!tiddler.fields.text ? \\\"\\\\n\\\\n\\\" + tiddler.fields.text : \\\"\\\"),\\\"utf8\\\",function(err) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn callback(null,fileInfo);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tfs.writeFile(fileInfo.filepath,JSON.stringify([tiddler.getFieldStrings({exclude: [\\\"bag\\\"]})],null,$tw.config.preferences.jsonSpaces),\\\"utf8\\\",function(err) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn callback(null,fileInfo);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nSave a tiddler to a file described by the fileInfo:\\n\\tfilepath: the absolute path to the file containing the tiddler\\n\\ttype: the type of the tiddler file (NOT the type of the tiddler)\\n\\thasMetaFile: true if the file also has a companion .meta file\\n*/\\nexports.saveTiddlerToFileSync = function(tiddler,fileInfo) {\\n\\t$tw.utils.createDirectory(path.dirname(fileInfo.filepath));\\n\\tif(fileInfo.hasMetaFile) {\\n\\t\\t// Save the tiddler as a separate body and meta file\\n\\t\\tvar typeInfo = $tw.config.contentTypeInfo[tiddler.fields.type || \\\"text/plain\\\"] || {encoding: \\\"utf8\\\"};\\n\\t\\tfs.writeFileSync(fileInfo.filepath,tiddler.fields.text || \\\"\\\",typeInfo.encoding);\\n\\t\\tfs.writeFileSync(fileInfo.filepath + \\\".meta\\\",tiddler.getFieldStringBlock({exclude: [\\\"text\\\",\\\"bag\\\"]}),\\\"utf8\\\");\\n\\t} else {\\n\\t\\t// Save the tiddler as a self contained templated file\\n\\t\\tif(fileInfo.type === \\\"application/x-tiddler\\\") {\\n\\t\\t\\tfs.writeFileSync(fileInfo.filepath,tiddler.getFieldStringBlock({exclude: [\\\"text\\\",\\\"bag\\\"]}) + (!!tiddler.fields.text ? \\\"\\\\n\\\\n\\\" + tiddler.fields.text : \\\"\\\"),\\\"utf8\\\");\\n\\t\\t} else {\\n\\t\\t\\tfs.writeFileSync(fileInfo.filepath,JSON.stringify([tiddler.getFieldStrings({exclude: [\\\"bag\\\"]})],null,$tw.config.preferences.jsonSpaces),\\\"utf8\\\");\\n\\t\\t}\\n\\t}\\n\\treturn fileInfo;\\n};\\n\\n/*\\nDelete a file described by the fileInfo if it exits\\n*/\\nexports.deleteTiddlerFile = function(fileInfo,callback) {\\n\\t//Only attempt to delete files that exist on disk\\n\\tif(!fileInfo.filepath || !fs.existsSync(fileInfo.filepath)) {\\n\\t\\t//For some reason, the tiddler is only in memory or we can't modify the file at this path\\n\\t\\t$tw.syncer.displayError(\\\"Server deleteTiddlerFile task failed for filepath: \\\"+fileInfo.filepath);\\n\\t\\treturn callback(null,fileInfo);\\n\\t}\\n\\t// Delete the file\\n\\tfs.unlink(fileInfo.filepath,function(err) {\\n\\t\\tif(err) {\\n\\t\\t\\treturn callback(err);\\n\\t\\t}\\n\\t\\t// Delete the metafile if present\\n\\t\\tif(fileInfo.hasMetaFile && fs.existsSync(fileInfo.filepath + \\\".meta\\\")) {\\n\\t\\t\\tfs.unlink(fileInfo.filepath + \\\".meta\\\",function(err) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn $tw.utils.deleteEmptyDirs(path.dirname(fileInfo.filepath),function(err) {\\n\\t\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn callback(null,fileInfo);\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\treturn $tw.utils.deleteEmptyDirs(path.dirname(fileInfo.filepath),function(err) {\\n\\t\\t\\t\\tif(err) {\\n\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn callback(null,fileInfo);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n};\\n\\n/*\\nCleanup old files on disk, by comparing the options values:\\n\\tadaptorInfo from $tw.syncer.tiddlerInfo\\n\\tbootInfo from $tw.boot.files\\n*/\\nexports.cleanupTiddlerFiles = function(options,callback) {\\n\\tvar adaptorInfo = options.adaptorInfo || {},\\n\\tbootInfo = options.bootInfo || {},\\n\\ttitle = options.title || \\\"undefined\\\";\\n\\tif(adaptorInfo.filepath && bootInfo.filepath && adaptorInfo.filepath !== bootInfo.filepath) {\\n\\t\\t$tw.utils.deleteTiddlerFile(adaptorInfo,function(err) {\\n\\t\\t\\tif(err) {\\n\\t\\t\\t\\tif ((err.code == \\\"EPERM\\\" || err.code == \\\"EACCES\\\") && err.syscall == \\\"unlink\\\") {\\n\\t\\t\\t\\t\\t// Error deleting the previous file on disk, should fail gracefully\\n\\t\\t\\t\\t\\t$tw.syncer.displayError(\\\"Server desynchronized. Error cleaning up previous file for tiddler: \\\\\\\"\\\"+title+\\\"\\\\\\\"\\\",err);\\n\\t\\t\\t\\t\\treturn callback(null,bootInfo);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn callback(err);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn callback(null,bootInfo);\\n\\t\\t});\\n\\t} else {\\n\\t\\treturn callback(null,bootInfo);\\n\\t}\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils-node\"},\"$:/core/modules/utils/linkedlist.js\":{\"title\":\"$:/core/modules/utils/linkedlist.js\",\"text\":\"/*\\\\\\nmodule-type: utils\\ntitle: $:/core/modules/utils/linkedlist.js\\ntype: application/javascript\\n\\nThis is a doubly-linked indexed list intended for manipulation, particularly\\npushTop, which it does with significantly better performance than an array.\\n\\n\\\\*/\\n(function(){\\n\\nfunction LinkedList() {\\n\\tthis.clear();\\n};\\n\\nLinkedList.prototype.clear = function() {\\n\\t// LinkedList performs the duty of both the head and tail node\\n\\tthis.next = Object.create(null);\\n\\tthis.prev = Object.create(null);\\n\\tthis.first = undefined;\\n\\tthis.last = undefined;\\n\\tthis.length = 0;\\n};\\n\\nLinkedList.prototype.remove = function(value) {\\n\\tif($tw.utils.isArray(value)) {\\n\\t\\tfor(var t=0; t\u003Cvalue.length; t++) {\\n\\t\\t\\t_assertString(value[t]);\\n\\t\\t}\\n\\t\\tfor(var t=0; t\u003Cvalue.length; t++) {\\n\\t\\t\\t_removeOne(this,value[t]);\\n\\t\\t}\\n\\t} else {\\n\\t\\t_assertString(value);\\n\\t\\t_removeOne(this,value);\\n\\t}\\n};\\n\\n/*\\nPush behaves like array.push and accepts multiple string arguments. But it also\\naccepts a single array argument too, to be consistent with its other methods.\\n*/\\nLinkedList.prototype.push = function(/* values */) {\\n\\tvar values = arguments;\\n\\tif($tw.utils.isArray(values[0])) {\\n\\t\\tvalues = values[0];\\n\\t}\\n\\tfor(var i = 0; i \u003C values.length; i++) {\\n\\t\\t_assertString(values[i]);\\n\\t}\\n\\tfor(var i = 0; i \u003C values.length; i++) {\\n\\t\\t_linkToEnd(this,values[i]);\\n\\t}\\n\\treturn this.length;\\n};\\n\\nLinkedList.prototype.pushTop = function(value) {\\n\\tif($tw.utils.isArray(value)) {\\n\\t\\tfor (var t=0; t\u003Cvalue.length; t++) {\\n\\t\\t\\t_assertString(value[t]);\\n\\t\\t}\\n\\t\\tfor(var t=0; t\u003Cvalue.length; t++) {\\n\\t\\t\\t_removeOne(this,value[t]);\\n\\t\\t}\\n\\t\\tfor(var t=0; t\u003Cvalue.length; t++) {\\n\\t\\t\\t_linkToEnd(this,value[t]);\\n\\t\\t}\\n\\t} else {\\n\\t\\t_assertString(value);\\n\\t\\t_removeOne(this,value);\\n\\t\\t_linkToEnd(this,value);\\n\\t}\\n};\\n\\nLinkedList.prototype.each = function(callback) {\\n\\tvar visits = Object.create(null),\\n\\t\\tvalue = this.first;\\n\\twhile(value !== undefined) {\\n\\t\\tcallback(value);\\n\\t\\tvar next = this.next[value];\\n\\t\\tif(typeof next === \\\"object\\\") {\\n\\t\\t\\tvar i = visits[value] || 0;\\n\\t\\t\\tvisits[value] = i+1;\\n\\t\\t\\tvalue = next[i];\\n\\t\\t} else {\\n\\t\\t\\tvalue = next;\\n\\t\\t}\\n\\t}\\n};\\n\\nLinkedList.prototype.toArray = function() {\\n\\tvar output = new Array(this.length),\\n\\t\\tindex = 0;\\n\\tthis.each(function(value) { output[index++] = value; });\\n\\treturn output;\\n};\\n\\nLinkedList.prototype.makeTiddlerIterator = function(wiki) {\\n\\tvar self = this;\\n\\treturn function(callback) {\\n\\t\\tself.each(function(title) {\\n\\t\\t\\tcallback(wiki.getTiddler(title),title);\\n\\t\\t});\\n\\t};\\n};\\n\\nfunction _removeOne(list,value) {\\n\\tvar prevEntry = list.prev[value],\\n\\t\\tnextEntry = list.next[value],\\n\\t\\tprev = prevEntry,\\n\\t\\tnext = nextEntry;\\n\\tif(typeof nextEntry === \\\"object\\\") {\\n\\t\\tnext = nextEntry[0];\\n\\t\\tprev = prevEntry[0];\\n\\t}\\n\\t// Relink preceding element.\\n\\tif(list.first === value) {\\n\\t\\tlist.first = next\\n\\t} else if(prev !== undefined) {\\n\\t\\tif(typeof list.next[prev] === \\\"object\\\") {\\n\\t\\t\\tif(next === undefined) {\\n\\t\\t\\t\\t// Must have been last, and 'i' would be last element.\\n\\t\\t\\t\\tlist.next[prev].pop();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar i = list.next[prev].indexOf(value);\\n\\t\\t\\t\\tlist.next[prev][i] = next;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tlist.next[prev] = next;\\n\\t\\t}\\n\\t} else {\\n\\t\\treturn;\\n\\t}\\n\\t// Now relink following element\\n\\t// Check \\\"next !== undefined\\\" rather than \\\"list.last === value\\\" because\\n\\t// we need to know if the FIRST value is the last in the list, not the last.\\n\\tif(next !== undefined) {\\n\\t\\tif(typeof list.prev[next] === \\\"object\\\") {\\n\\t\\t\\tif(prev === undefined) {\\n\\t\\t\\t\\t// Must have been first, and 'i' would be 0.\\n\\t\\t\\t\\tlist.prev[next].shift();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar i = list.prev[next].indexOf(value);\\n\\t\\t\\t\\tlist.prev[next][i] = prev;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tlist.prev[next] = prev;\\n\\t\\t}\\n\\t} else {\\n\\t\\tlist.last = prev;\\n\\t}\\n\\t// Delink actual value. If it uses arrays, just remove first entries.\\n\\tif(typeof nextEntry === \\\"object\\\") {\\n\\t\\tnextEntry.shift();\\n\\t\\tprevEntry.shift();\\n\\t} else {\\n\\t\\tlist.next[value] = undefined;\\n\\t\\tlist.prev[value] = undefined;\\n\\t}\\n\\tlist.length -= 1;\\n};\\n\\n// Sticks the given node onto the end of the list.\\nfunction _linkToEnd(list,value) {\\n\\tif(list.first === undefined) {\\n\\t\\tlist.first = value;\\n\\t} else {\\n\\t\\t// Does it already exists?\\n\\t\\tif(list.first === value || list.prev[value] !== undefined) {\\n\\t\\t\\tif(typeof list.next[value] === \\\"string\\\") {\\n\\t\\t\\t\\tlist.next[value] = [list.next[value]];\\n\\t\\t\\t\\tlist.prev[value] = [list.prev[value]];\\n\\t\\t\\t} else if(typeof list.next[value] === \\\"undefined\\\") {\\n\\t\\t\\t\\t// list.next[value] must be undefined.\\n\\t\\t\\t\\t// Special case. List already has 1 value. It's at the end.\\n\\t\\t\\t\\tlist.next[value] = [];\\n\\t\\t\\t\\tlist.prev[value] = [list.prev[value]];\\n\\t\\t\\t}\\n\\t\\t\\tlist.prev[value].push(list.last);\\n\\t\\t\\t// We do NOT append a new value onto \\\"next\\\" list. Iteration will\\n\\t\\t\\t// figure out it must point to End-of-List on its own.\\n\\t\\t} else {\\n\\t\\t\\tlist.prev[value] = list.last;\\n\\t\\t}\\n\\t\\t// Make the old last point to this new one.\\n\\t\\tif(typeof list.next[list.last] === \\\"object\\\") {\\n\\t\\t\\tlist.next[list.last].push(value);\\n\\t\\t} else {\\n\\t\\t\\tlist.next[list.last] = value;\\n\\t\\t}\\n\\t}\\n\\tlist.last = value;\\n\\tlist.length += 1;\\n};\\n\\nfunction _assertString(value) {\\n\\tif(typeof value !== \\\"string\\\") {\\n\\t\\tthrow \\\"Linked List only accepts string values, not \\\" + value;\\n\\t}\\n};\\n\\nexports.LinkedList = LinkedList;\\n\\n})();\\n\",\"module-type\":\"utils\",\"type\":\"application/javascript\"},\"$:/core/modules/utils/logger.js\":{\"title\":\"$:/core/modules/utils/logger.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/logger.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nA basic logging implementation\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar ALERT_TAG = \\\"$:/tags/Alert\\\";\\n\\n/*\\nMake a new logger\\n*/\\nfunction Logger(componentName,options) {\\n\\toptions = options || {};\\n\\tthis.componentName = componentName || \\\"\\\";\\n\\tthis.colour = options.colour || \\\"white\\\";\\n\\tthis.enable = \\\"enable\\\" in options ? options.enable : true;\\n\\tthis.save = \\\"save\\\" in options ? options.save : true;\\n\\tthis.saveLimit = options.saveLimit || 100 * 1024;\\n\\tthis.saveBufferLogger = this;\\n\\tthis.buffer = \\\"\\\";\\n\\tthis.alertCount = 0;\\n}\\n\\nLogger.prototype.setSaveBuffer = function(logger) {\\n\\tthis.saveBufferLogger = logger;\\n};\\n\\n/*\\nLog a message\\n*/\\nLogger.prototype.log = function(/* args */) {\\n\\tvar self = this;\\n\\tif(this.enable) {\\n\\t\\tif(this.saveBufferLogger.save) {\\n\\t\\t\\tthis.saveBufferLogger.buffer += $tw.utils.formatDateString(new Date(),\\\"YYYY MM DD 0hh:0mm:0ss.0XXX\\\") + \\\":\\\";\\n\\t\\t\\t$tw.utils.each(Array.prototype.slice.call(arguments,0),function(arg,index) {\\n\\t\\t\\t\\tself.saveBufferLogger.buffer += \\\" \\\" + arg;\\n\\t\\t\\t});\\n\\t\\t\\tthis.saveBufferLogger.buffer += \\\"\\\\n\\\";\\n\\t\\t\\tthis.saveBufferLogger.buffer = this.saveBufferLogger.buffer.slice(-this.saveBufferLogger.saveLimit);\\n\\t\\t}\\n\\t\\tif(console !== undefined && console.log !== undefined) {\\n\\t\\t\\treturn Function.apply.call(console.log, console, [$tw.utils.terminalColour(this.colour),this.componentName + \\\":\\\"].concat(Array.prototype.slice.call(arguments,0)).concat($tw.utils.terminalColour()));\\n\\t\\t}\\n\\t} \\n};\\n\\n/*\\nRead the message buffer\\n*/\\nLogger.prototype.getBuffer = function() {\\n\\treturn this.saveBufferLogger.buffer;\\n};\\n\\n/*\\nLog a structure as a table\\n*/\\nLogger.prototype.table = function(value) {\\n\\t(console.table || console.log)(value);\\n};\\n\\n/*\\nAlert a message\\n*/\\nLogger.prototype.alert = function(/* args */) {\\n\\tif(this.enable) {\\n\\t\\t// Prepare the text of the alert\\n\\t\\tvar text = Array.prototype.join.call(arguments,\\\" \\\");\\n\\t\\t// Create alert tiddlers in the browser\\n\\t\\tif($tw.browser) {\\n\\t\\t\\t// Check if there is an existing alert with the same text and the same component\\n\\t\\t\\tvar existingAlerts = $tw.wiki.getTiddlersWithTag(ALERT_TAG),\\n\\t\\t\\t\\talertFields,\\n\\t\\t\\t\\texistingCount,\\n\\t\\t\\t\\tself = this;\\n\\t\\t\\t$tw.utils.each(existingAlerts,function(title) {\\n\\t\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\t\\tif(tiddler.fields.text === text && tiddler.fields.component === self.componentName && tiddler.fields.modified && (!alertFields || tiddler.fields.modified \u003C alertFields.modified)) {\\n\\t\\t\\t\\t\\t\\talertFields = $tw.utils.extend({},tiddler.fields);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\tif(alertFields) {\\n\\t\\t\\t\\texistingCount = alertFields.count || 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\talertFields = {\\n\\t\\t\\t\\t\\ttitle: $tw.wiki.generateNewTitle(\\\"$:/temp/alerts/alert\\\",{prefix: \\\"\\\"}),\\n\\t\\t\\t\\t\\ttext: text,\\n\\t\\t\\t\\t\\ttags: [ALERT_TAG],\\n\\t\\t\\t\\t\\tcomponent: this.componentName\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\texistingCount = 0;\\n\\t\\t\\t\\tthis.alertCount += 1;\\n\\t\\t\\t}\\n\\t\\t\\talertFields.modified = new Date();\\n\\t\\t\\tif(++existingCount > 1) {\\n\\t\\t\\t\\talertFields.count = existingCount;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\talertFields.count = undefined;\\n\\t\\t\\t}\\n\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler(alertFields));\\n\\t\\t\\t// Log the alert as well\\n\\t\\t\\tthis.log.apply(this,Array.prototype.slice.call(arguments,0));\\n\\t\\t} else {\\n\\t\\t\\t// Print an orange message to the console if not in the browser\\n\\t\\t\\tconsole.error(\\\"\\\\x1b[1;33m\\\" + text + \\\"\\\\x1b[0m\\\");\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nClear outstanding alerts\\n*/\\nLogger.prototype.clearAlerts = function() {\\n\\tvar self = this;\\n\\tif($tw.browser && this.alertCount > 0) {\\n\\t\\t$tw.utils.each($tw.wiki.getTiddlersWithTag(ALERT_TAG),function(title) {\\n\\t\\t\\tvar tiddler = $tw.wiki.getTiddler(title);\\n\\t\\t\\tif(tiddler.fields.component === self.componentName) {\\n\\t\\t\\t\\t$tw.wiki.deleteTiddler(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tthis.alertCount = 0;\\n\\t}\\n};\\n\\nexports.Logger = Logger;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/parsetree.js\":{\"title\":\"$:/core/modules/utils/parsetree.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/parsetree.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nParse tree utility functions.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.addAttributeToParseTreeNode = function(node,name,value) {\\n\\tnode.attributes = node.attributes || {};\\n\\tnode.attributes[name] = {type: \\\"string\\\", value: value};\\n};\\n\\nexports.getAttributeValueFromParseTreeNode = function(node,name,defaultValue) {\\n\\tif(node.attributes && node.attributes[name] && node.attributes[name].value !== undefined) {\\n\\t\\treturn node.attributes[name].value;\\n\\t}\\n\\treturn defaultValue;\\n};\\n\\nexports.addClassToParseTreeNode = function(node,classString) {\\n\\tvar classes = [];\\n\\tnode.attributes = node.attributes || {};\\n\\tnode.attributes[\\\"class\\\"] = node.attributes[\\\"class\\\"] || {type: \\\"string\\\", value: \\\"\\\"};\\n\\tif(node.attributes[\\\"class\\\"].type === \\\"string\\\") {\\n\\t\\tif(node.attributes[\\\"class\\\"].value !== \\\"\\\") {\\n\\t\\t\\tclasses = node.attributes[\\\"class\\\"].value.split(\\\" \\\");\\n\\t\\t}\\n\\t\\tif(classString !== \\\"\\\") {\\n\\t\\t\\t$tw.utils.pushTop(classes,classString.split(\\\" \\\"));\\n\\t\\t}\\n\\t\\tnode.attributes[\\\"class\\\"].value = classes.join(\\\" \\\");\\n\\t}\\n};\\n\\nexports.addStyleToParseTreeNode = function(node,name,value) {\\n\\t\\tnode.attributes = node.attributes || {};\\n\\t\\tnode.attributes.style = node.attributes.style || {type: \\\"string\\\", value: \\\"\\\"};\\n\\t\\tif(node.attributes.style.type === \\\"string\\\") {\\n\\t\\t\\tnode.attributes.style.value += name + \\\":\\\" + value + \\\";\\\";\\n\\t\\t}\\n};\\n\\nexports.findParseTreeNode = function(nodeArray,search) {\\n\\tfor(var t=0; t\u003CnodeArray.length; t++) {\\n\\t\\tif(nodeArray[t].type === search.type && nodeArray[t].tag === search.tag) {\\n\\t\\t\\treturn nodeArray[t];\\n\\t\\t}\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/*\\nHelper to get the text of a parse tree node or array of nodes\\n*/\\nexports.getParseTreeText = function getParseTreeText(tree) {\\n\\tvar output = [];\\n\\tif($tw.utils.isArray(tree)) {\\n\\t\\t$tw.utils.each(tree,function(node) {\\n\\t\\t\\toutput.push(getParseTreeText(node));\\n\\t\\t});\\n\\t} else {\\n\\t\\tif(tree.type === \\\"text\\\") {\\n\\t\\t\\toutput.push(tree.text);\\n\\t\\t}\\n\\t\\tif(tree.children) {\\n\\t\\t\\treturn getParseTreeText(tree.children);\\n\\t\\t}\\n\\t}\\n\\treturn output.join(\\\"\\\");\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/performance.js\":{\"title\":\"$:/core/modules/utils/performance.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/performance.js\\ntype: application/javascript\\nmodule-type: global\\n\\nPerformance measurement.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nfunction Performance(enabled) {\\n\\tthis.enabled = !!enabled;\\n\\tthis.measures = {}; // Hashmap by measurement name of {time:, invocations:}\\n\\tthis.logger = new $tw.utils.Logger(\\\"performance\\\");\\n\\tthis.showGreeting();\\n}\\n\\nPerformance.prototype.showGreeting = function() {\\n\\tif($tw.browser) {\\n\\t\\tthis.logger.log(\\\"Execute $tw.perf.log(); to see filter execution timings\\\");\\n\\t}\\n};\\n\\n/*\\nWrap performance reporting around a top level function\\n*/\\nPerformance.prototype.report = function(name,fn) {\\n\\tvar self = this;\\n\\tif(this.enabled) {\\n\\t\\treturn function() {\\n\\t\\t\\tvar startTime = $tw.utils.timer(),\\n\\t\\t\\t\\tresult = fn.apply(this,arguments);\\n\\t\\t\\tself.logger.log(name + \\\": \\\" + $tw.utils.timer(startTime).toFixed(2) + \\\"ms\\\");\\n\\t\\t\\treturn result;\\n\\t\\t};\\n\\t} else {\\n\\t\\treturn fn;\\n\\t}\\n};\\n\\nPerformance.prototype.log = function() {\\n\\tvar self = this,\\n\\t\\ttotalTime = 0,\\n\\t\\torderedMeasures = Object.keys(this.measures).sort(function(a,b) {\\n\\t\\t\\tif(self.measures[a].time > self.measures[b].time) {\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t} else if (self.measures[a].time \u003C self.measures[b].time) {\\n\\t\\t\\t\\treturn + 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t$tw.utils.each(orderedMeasures,function(name) {\\n\\t\\ttotalTime += self.measures[name].time;\\n\\t});\\n\\tvar results = []\\n\\t$tw.utils.each(orderedMeasures,function(name) {\\n\\t\\tvar measure = self.measures[name];\\n\\t\\tresults.push({name: name,invocations: measure.invocations, avgTime: measure.time / measure.invocations, totalTime: measure.time, percentTime: (measure.time / totalTime) * 100})\\n\\t});\\n\\tself.logger.table(results);\\n};\\n\\n/*\\nWrap performance measurements around a subfunction\\n*/\\nPerformance.prototype.measure = function(name,fn) {\\n\\tvar self = this;\\n\\tif(this.enabled) {\\n\\t\\treturn function() {\\n\\t\\t\\tvar startTime = $tw.utils.timer(),\\n\\t\\t\\t\\tresult = fn.apply(this,arguments);\\n\\t\\t\\tif(!(name in self.measures)) {\\n\\t\\t\\t\\tself.measures[name] = {time: 0, invocations: 0};\\n\\t\\t\\t}\\n\\t\\t\\tself.measures[name].time += $tw.utils.timer(startTime);\\n\\t\\t\\tself.measures[name].invocations++;\\n\\t\\t\\treturn result;\\n\\t\\t};\\n\\t} else {\\n\\t\\treturn fn;\\n\\t}\\n};\\n\\nexports.Performance = Performance;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"global\"},\"$:/core/modules/utils/pluginmaker.js\":{\"title\":\"$:/core/modules/utils/pluginmaker.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/pluginmaker.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nA quick and dirty way to pack up plugins within the browser.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nRepack a plugin, and then delete any non-shadow payload tiddlers\\n*/\\nexports.repackPlugin = function(title,additionalTiddlers,excludeTiddlers) {\\n\\tadditionalTiddlers = additionalTiddlers || [];\\n\\texcludeTiddlers = excludeTiddlers || [];\\n\\t// Get the plugin tiddler\\n\\tvar pluginTiddler = $tw.wiki.getTiddler(title);\\n\\tif(!pluginTiddler) {\\n\\t\\tthrow \\\"No such tiddler as \\\" + title;\\n\\t}\\n\\t// Extract the JSON\\n\\tvar jsonPluginTiddler = $tw.utils.parseJSONSafe(pluginTiddler.fields.text,null);\\n\\tif(!jsonPluginTiddler) {\\n\\t\\tthrow \\\"Cannot parse plugin tiddler \\\" + title + \\\"\\\\n\\\" + $tw.language.getString(\\\"Error/Caption\\\") + \\\": \\\" + e;\\n\\t}\\n\\t// Get the list of tiddlers\\n\\tvar tiddlers = Object.keys(jsonPluginTiddler.tiddlers);\\n\\t// Add the additional tiddlers\\n\\t$tw.utils.pushTop(tiddlers,additionalTiddlers);\\n\\t// Remove any excluded tiddlers\\n\\tfor(var t=tiddlers.length-1; t>=0; t--) {\\n\\t\\tif(excludeTiddlers.indexOf(tiddlers[t]) !== -1) {\\n\\t\\t\\ttiddlers.splice(t,1);\\n\\t\\t}\\n\\t}\\n\\t// Pack up the tiddlers into a block of JSON\\n\\tvar plugins = {};\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar tiddler = $tw.wiki.getTiddler(title),\\n\\t\\t\\tfields = {};\\n\\t\\t$tw.utils.each(tiddler.fields,function (value,name) {\\n\\t\\t\\tfields[name] = tiddler.getFieldString(name);\\n\\t\\t});\\n\\t\\tplugins[title] = fields;\\n\\t});\\n\\t// Retrieve and bump the version number\\n\\tvar pluginVersion = $tw.utils.parseVersion(pluginTiddler.getFieldString(\\\"version\\\") || \\\"0.0.0\\\") || {\\n\\t\\t\\tmajor: \\\"0\\\",\\n\\t\\t\\tminor: \\\"0\\\",\\n\\t\\t\\tpatch: \\\"0\\\"\\n\\t\\t};\\n\\tpluginVersion.patch++;\\n\\tvar version = pluginVersion.major + \\\".\\\" + pluginVersion.minor + \\\".\\\" + pluginVersion.patch;\\n\\tif(pluginVersion.prerelease) {\\n\\t\\tversion += \\\"-\\\" + pluginVersion.prerelease;\\n\\t}\\n\\tif(pluginVersion.build) {\\n\\t\\tversion += \\\"+\\\" + pluginVersion.build;\\n\\t}\\n\\t// Save the tiddler\\n\\t$tw.wiki.addTiddler(new $tw.Tiddler(pluginTiddler,{text: JSON.stringify({tiddlers: plugins},null,4), version: version}));\\n\\t// Delete any non-shadow constituent tiddlers\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tif($tw.wiki.tiddlerExists(title)) {\\n\\t\\t\\t$tw.wiki.deleteTiddler(title);\\n\\t\\t}\\n\\t});\\n\\t// Trigger an autosave\\n\\t$tw.rootWidget.dispatchEvent({type: \\\"tm-auto-save-wiki\\\"});\\n\\t// Return a heartwarming confirmation\\n\\treturn \\\"Plugin \\\" + title + \\\" successfully saved\\\";\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/transliterate.js\":{\"title\":\"$:/core/modules/utils/transliterate.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/transliterate.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nTransliteration static utility functions.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nTransliterate string to ASCII\\n\\n(Some pairs taken from http://semplicewebsites.com/removing-accents-javascript)\\n*/\\nexports.transliterationPairs = {\\n\\t\\\"Á\\\":\\\"A\\\",\\n\\t\\\"Ă\\\":\\\"A\\\",\\n\\t\\\"Ắ\\\":\\\"A\\\",\\n\\t\\\"Ặ\\\":\\\"A\\\",\\n\\t\\\"Ằ\\\":\\\"A\\\",\\n\\t\\\"Ẳ\\\":\\\"A\\\",\\n\\t\\\"Ẵ\\\":\\\"A\\\",\\n\\t\\\"Ǎ\\\":\\\"A\\\",\\n\\t\\\"Â\\\":\\\"A\\\",\\n\\t\\\"Ấ\\\":\\\"A\\\",\\n\\t\\\"Ậ\\\":\\\"A\\\",\\n\\t\\\"Ầ\\\":\\\"A\\\",\\n\\t\\\"Ẩ\\\":\\\"A\\\",\\n\\t\\\"Ẫ\\\":\\\"A\\\",\\n\\t\\\"Ä\\\":\\\"A\\\",\\n\\t\\\"Ǟ\\\":\\\"A\\\",\\n\\t\\\"Ȧ\\\":\\\"A\\\",\\n\\t\\\"Ǡ\\\":\\\"A\\\",\\n\\t\\\"Ạ\\\":\\\"A\\\",\\n\\t\\\"Ȁ\\\":\\\"A\\\",\\n\\t\\\"À\\\":\\\"A\\\",\\n\\t\\\"Ả\\\":\\\"A\\\",\\n\\t\\\"Ȃ\\\":\\\"A\\\",\\n\\t\\\"Ā\\\":\\\"A\\\",\\n\\t\\\"Ą\\\":\\\"A\\\",\\n\\t\\\"Å\\\":\\\"A\\\",\\n\\t\\\"Ǻ\\\":\\\"A\\\",\\n\\t\\\"Ḁ\\\":\\\"A\\\",\\n\\t\\\"Ⱥ\\\":\\\"A\\\",\\n\\t\\\"Ã\\\":\\\"A\\\",\\n\\t\\\"Ꜳ\\\":\\\"AA\\\",\\n\\t\\\"Æ\\\":\\\"AE\\\",\\n\\t\\\"Ǽ\\\":\\\"AE\\\",\\n\\t\\\"Ǣ\\\":\\\"AE\\\",\\n\\t\\\"Ꜵ\\\":\\\"AO\\\",\\n\\t\\\"Ꜷ\\\":\\\"AU\\\",\\n\\t\\\"Ꜹ\\\":\\\"AV\\\",\\n\\t\\\"Ꜻ\\\":\\\"AV\\\",\\n\\t\\\"Ꜽ\\\":\\\"AY\\\",\\n\\t\\\"Ḃ\\\":\\\"B\\\",\\n\\t\\\"Ḅ\\\":\\\"B\\\",\\n\\t\\\"Ɓ\\\":\\\"B\\\",\\n\\t\\\"Ḇ\\\":\\\"B\\\",\\n\\t\\\"Ƀ\\\":\\\"B\\\",\\n\\t\\\"Ƃ\\\":\\\"B\\\",\\n\\t\\\"Ć\\\":\\\"C\\\",\\n\\t\\\"Č\\\":\\\"C\\\",\\n\\t\\\"Ç\\\":\\\"C\\\",\\n\\t\\\"Ḉ\\\":\\\"C\\\",\\n\\t\\\"Ĉ\\\":\\\"C\\\",\\n\\t\\\"Ċ\\\":\\\"C\\\",\\n\\t\\\"Ƈ\\\":\\\"C\\\",\\n\\t\\\"Ȼ\\\":\\\"C\\\",\\n\\t\\\"Ď\\\":\\\"D\\\",\\n\\t\\\"Ḑ\\\":\\\"D\\\",\\n\\t\\\"Ḓ\\\":\\\"D\\\",\\n\\t\\\"Ḋ\\\":\\\"D\\\",\\n\\t\\\"Ḍ\\\":\\\"D\\\",\\n\\t\\\"Ɗ\\\":\\\"D\\\",\\n\\t\\\"Ḏ\\\":\\\"D\\\",\\n\\t\\\"ǲ\\\":\\\"D\\\",\\n\\t\\\"ǅ\\\":\\\"D\\\",\\n\\t\\\"Đ\\\":\\\"D\\\",\\n\\t\\\"Ƌ\\\":\\\"D\\\",\\n\\t\\\"Ǳ\\\":\\\"DZ\\\",\\n\\t\\\"Ǆ\\\":\\\"DZ\\\",\\n\\t\\\"É\\\":\\\"E\\\",\\n\\t\\\"Ĕ\\\":\\\"E\\\",\\n\\t\\\"Ě\\\":\\\"E\\\",\\n\\t\\\"Ȩ\\\":\\\"E\\\",\\n\\t\\\"Ḝ\\\":\\\"E\\\",\\n\\t\\\"Ê\\\":\\\"E\\\",\\n\\t\\\"Ế\\\":\\\"E\\\",\\n\\t\\\"Ệ\\\":\\\"E\\\",\\n\\t\\\"Ề\\\":\\\"E\\\",\\n\\t\\\"Ể\\\":\\\"E\\\",\\n\\t\\\"Ễ\\\":\\\"E\\\",\\n\\t\\\"Ḙ\\\":\\\"E\\\",\\n\\t\\\"Ë\\\":\\\"E\\\",\\n\\t\\\"Ė\\\":\\\"E\\\",\\n\\t\\\"Ẹ\\\":\\\"E\\\",\\n\\t\\\"Ȅ\\\":\\\"E\\\",\\n\\t\\\"È\\\":\\\"E\\\",\\n\\t\\\"Ẻ\\\":\\\"E\\\",\\n\\t\\\"Ȇ\\\":\\\"E\\\",\\n\\t\\\"Ē\\\":\\\"E\\\",\\n\\t\\\"Ḗ\\\":\\\"E\\\",\\n\\t\\\"Ḕ\\\":\\\"E\\\",\\n\\t\\\"Ę\\\":\\\"E\\\",\\n\\t\\\"Ɇ\\\":\\\"E\\\",\\n\\t\\\"Ẽ\\\":\\\"E\\\",\\n\\t\\\"Ḛ\\\":\\\"E\\\",\\n\\t\\\"Ꝫ\\\":\\\"ET\\\",\\n\\t\\\"Ḟ\\\":\\\"F\\\",\\n\\t\\\"Ƒ\\\":\\\"F\\\",\\n\\t\\\"Ǵ\\\":\\\"G\\\",\\n\\t\\\"Ğ\\\":\\\"G\\\",\\n\\t\\\"Ǧ\\\":\\\"G\\\",\\n\\t\\\"Ģ\\\":\\\"G\\\",\\n\\t\\\"Ĝ\\\":\\\"G\\\",\\n\\t\\\"Ġ\\\":\\\"G\\\",\\n\\t\\\"Ɠ\\\":\\\"G\\\",\\n\\t\\\"Ḡ\\\":\\\"G\\\",\\n\\t\\\"Ǥ\\\":\\\"G\\\",\\n\\t\\\"Ḫ\\\":\\\"H\\\",\\n\\t\\\"Ȟ\\\":\\\"H\\\",\\n\\t\\\"Ḩ\\\":\\\"H\\\",\\n\\t\\\"Ĥ\\\":\\\"H\\\",\\n\\t\\\"Ⱨ\\\":\\\"H\\\",\\n\\t\\\"Ḧ\\\":\\\"H\\\",\\n\\t\\\"Ḣ\\\":\\\"H\\\",\\n\\t\\\"Ḥ\\\":\\\"H\\\",\\n\\t\\\"Ħ\\\":\\\"H\\\",\\n\\t\\\"Í\\\":\\\"I\\\",\\n\\t\\\"Ĭ\\\":\\\"I\\\",\\n\\t\\\"Ǐ\\\":\\\"I\\\",\\n\\t\\\"Î\\\":\\\"I\\\",\\n\\t\\\"Ï\\\":\\\"I\\\",\\n\\t\\\"Ḯ\\\":\\\"I\\\",\\n\\t\\\"İ\\\":\\\"I\\\",\\n\\t\\\"Ị\\\":\\\"I\\\",\\n\\t\\\"Ȉ\\\":\\\"I\\\",\\n\\t\\\"Ì\\\":\\\"I\\\",\\n\\t\\\"Ỉ\\\":\\\"I\\\",\\n\\t\\\"Ȋ\\\":\\\"I\\\",\\n\\t\\\"Ī\\\":\\\"I\\\",\\n\\t\\\"Į\\\":\\\"I\\\",\\n\\t\\\"Ɨ\\\":\\\"I\\\",\\n\\t\\\"Ĩ\\\":\\\"I\\\",\\n\\t\\\"Ḭ\\\":\\\"I\\\",\\n\\t\\\"Ꝺ\\\":\\\"D\\\",\\n\\t\\\"Ꝼ\\\":\\\"F\\\",\\n\\t\\\"Ᵹ\\\":\\\"G\\\",\\n\\t\\\"Ꞃ\\\":\\\"R\\\",\\n\\t\\\"Ꞅ\\\":\\\"S\\\",\\n\\t\\\"Ꞇ\\\":\\\"T\\\",\\n\\t\\\"Ꝭ\\\":\\\"IS\\\",\\n\\t\\\"Ĵ\\\":\\\"J\\\",\\n\\t\\\"Ɉ\\\":\\\"J\\\",\\n\\t\\\"Ḱ\\\":\\\"K\\\",\\n\\t\\\"Ǩ\\\":\\\"K\\\",\\n\\t\\\"Ķ\\\":\\\"K\\\",\\n\\t\\\"Ⱪ\\\":\\\"K\\\",\\n\\t\\\"Ꝃ\\\":\\\"K\\\",\\n\\t\\\"Ḳ\\\":\\\"K\\\",\\n\\t\\\"Ƙ\\\":\\\"K\\\",\\n\\t\\\"Ḵ\\\":\\\"K\\\",\\n\\t\\\"Ꝁ\\\":\\\"K\\\",\\n\\t\\\"Ꝅ\\\":\\\"K\\\",\\n\\t\\\"Ĺ\\\":\\\"L\\\",\\n\\t\\\"Ƚ\\\":\\\"L\\\",\\n\\t\\\"Ľ\\\":\\\"L\\\",\\n\\t\\\"Ļ\\\":\\\"L\\\",\\n\\t\\\"Ḽ\\\":\\\"L\\\",\\n\\t\\\"Ḷ\\\":\\\"L\\\",\\n\\t\\\"Ḹ\\\":\\\"L\\\",\\n\\t\\\"Ⱡ\\\":\\\"L\\\",\\n\\t\\\"Ꝉ\\\":\\\"L\\\",\\n\\t\\\"Ḻ\\\":\\\"L\\\",\\n\\t\\\"Ŀ\\\":\\\"L\\\",\\n\\t\\\"Ɫ\\\":\\\"L\\\",\\n\\t\\\"ǈ\\\":\\\"L\\\",\\n\\t\\\"Ł\\\":\\\"L\\\",\\n\\t\\\"Ǉ\\\":\\\"LJ\\\",\\n\\t\\\"Ḿ\\\":\\\"M\\\",\\n\\t\\\"Ṁ\\\":\\\"M\\\",\\n\\t\\\"Ṃ\\\":\\\"M\\\",\\n\\t\\\"Ɱ\\\":\\\"M\\\",\\n\\t\\\"Ń\\\":\\\"N\\\",\\n\\t\\\"Ň\\\":\\\"N\\\",\\n\\t\\\"Ņ\\\":\\\"N\\\",\\n\\t\\\"Ṋ\\\":\\\"N\\\",\\n\\t\\\"Ṅ\\\":\\\"N\\\",\\n\\t\\\"Ṇ\\\":\\\"N\\\",\\n\\t\\\"Ǹ\\\":\\\"N\\\",\\n\\t\\\"Ɲ\\\":\\\"N\\\",\\n\\t\\\"Ṉ\\\":\\\"N\\\",\\n\\t\\\"Ƞ\\\":\\\"N\\\",\\n\\t\\\"ǋ\\\":\\\"N\\\",\\n\\t\\\"Ñ\\\":\\\"N\\\",\\n\\t\\\"Ǌ\\\":\\\"NJ\\\",\\n\\t\\\"ð\\\":\\\"d\\\",\\n\\t\\\"Ð\\\":\\\"D\\\",\\n\\t\\\"Ó\\\":\\\"O\\\",\\n\\t\\\"Ŏ\\\":\\\"O\\\",\\n\\t\\\"Ǒ\\\":\\\"O\\\",\\n\\t\\\"Ô\\\":\\\"O\\\",\\n\\t\\\"Ố\\\":\\\"O\\\",\\n\\t\\\"Ộ\\\":\\\"O\\\",\\n\\t\\\"Ồ\\\":\\\"O\\\",\\n\\t\\\"Ổ\\\":\\\"O\\\",\\n\\t\\\"Ỗ\\\":\\\"O\\\",\\n\\t\\\"Ö\\\":\\\"O\\\",\\n\\t\\\"Ȫ\\\":\\\"O\\\",\\n\\t\\\"Ȯ\\\":\\\"O\\\",\\n\\t\\\"Ȱ\\\":\\\"O\\\",\\n\\t\\\"Ọ\\\":\\\"O\\\",\\n\\t\\\"Ő\\\":\\\"O\\\",\\n\\t\\\"Ȍ\\\":\\\"O\\\",\\n\\t\\\"Ò\\\":\\\"O\\\",\\n\\t\\\"Ỏ\\\":\\\"O\\\",\\n\\t\\\"Ơ\\\":\\\"O\\\",\\n\\t\\\"Ớ\\\":\\\"O\\\",\\n\\t\\\"Ợ\\\":\\\"O\\\",\\n\\t\\\"Ờ\\\":\\\"O\\\",\\n\\t\\\"Ở\\\":\\\"O\\\",\\n\\t\\\"Ỡ\\\":\\\"O\\\",\\n\\t\\\"Ȏ\\\":\\\"O\\\",\\n\\t\\\"Ꝋ\\\":\\\"O\\\",\\n\\t\\\"Ꝍ\\\":\\\"O\\\",\\n\\t\\\"Ō\\\":\\\"O\\\",\\n\\t\\\"Ṓ\\\":\\\"O\\\",\\n\\t\\\"Ṑ\\\":\\\"O\\\",\\n\\t\\\"Ɵ\\\":\\\"O\\\",\\n\\t\\\"Ǫ\\\":\\\"O\\\",\\n\\t\\\"Ǭ\\\":\\\"O\\\",\\n\\t\\\"Ø\\\":\\\"O\\\",\\n\\t\\\"Ǿ\\\":\\\"O\\\",\\n\\t\\\"Õ\\\":\\\"O\\\",\\n\\t\\\"Ṍ\\\":\\\"O\\\",\\n\\t\\\"Ṏ\\\":\\\"O\\\",\\n\\t\\\"Ȭ\\\":\\\"O\\\",\\n\\t\\\"Ƣ\\\":\\\"OI\\\",\\n\\t\\\"Ꝏ\\\":\\\"OO\\\",\\n\\t\\\"Ɛ\\\":\\\"E\\\",\\n\\t\\\"Ɔ\\\":\\\"O\\\",\\n\\t\\\"Ȣ\\\":\\\"OU\\\",\\n\\t\\\"Ṕ\\\":\\\"P\\\",\\n\\t\\\"Ṗ\\\":\\\"P\\\",\\n\\t\\\"Ꝓ\\\":\\\"P\\\",\\n\\t\\\"Ƥ\\\":\\\"P\\\",\\n\\t\\\"Ꝕ\\\":\\\"P\\\",\\n\\t\\\"Ᵽ\\\":\\\"P\\\",\\n\\t\\\"Ꝑ\\\":\\\"P\\\",\\n\\t\\\"Ꝙ\\\":\\\"Q\\\",\\n\\t\\\"Ꝗ\\\":\\\"Q\\\",\\n\\t\\\"Ŕ\\\":\\\"R\\\",\\n\\t\\\"Ř\\\":\\\"R\\\",\\n\\t\\\"Ŗ\\\":\\\"R\\\",\\n\\t\\\"Ṙ\\\":\\\"R\\\",\\n\\t\\\"Ṛ\\\":\\\"R\\\",\\n\\t\\\"Ṝ\\\":\\\"R\\\",\\n\\t\\\"Ȑ\\\":\\\"R\\\",\\n\\t\\\"Ȓ\\\":\\\"R\\\",\\n\\t\\\"Ṟ\\\":\\\"R\\\",\\n\\t\\\"Ɍ\\\":\\\"R\\\",\\n\\t\\\"Ɽ\\\":\\\"R\\\",\\n\\t\\\"Ꜿ\\\":\\\"C\\\",\\n\\t\\\"Ǝ\\\":\\\"E\\\",\\n\\t\\\"ß\\\":\\\"ss\\\",\\n\\t\\\"ẞ\\\":\\\"SS\\\",\\n\\t\\\"Ś\\\":\\\"S\\\",\\n\\t\\\"Ṥ\\\":\\\"S\\\",\\n\\t\\\"Š\\\":\\\"S\\\",\\n\\t\\\"Ṧ\\\":\\\"S\\\",\\n\\t\\\"Ş\\\":\\\"S\\\",\\n\\t\\\"Ŝ\\\":\\\"S\\\",\\n\\t\\\"Ș\\\":\\\"S\\\",\\n\\t\\\"Ṡ\\\":\\\"S\\\",\\n\\t\\\"Ṣ\\\":\\\"S\\\",\\n\\t\\\"Ṩ\\\":\\\"S\\\",\\n\\t\\\"þ\\\": \\\"th\\\",\\n\\t\\\"Þ\\\": \\\"TH\\\",\\n\\t\\\"Ť\\\":\\\"T\\\",\\n\\t\\\"Ţ\\\":\\\"T\\\",\\n\\t\\\"Ṱ\\\":\\\"T\\\",\\n\\t\\\"Ț\\\":\\\"T\\\",\\n\\t\\\"Ⱦ\\\":\\\"T\\\",\\n\\t\\\"Ṫ\\\":\\\"T\\\",\\n\\t\\\"Ṭ\\\":\\\"T\\\",\\n\\t\\\"Ƭ\\\":\\\"T\\\",\\n\\t\\\"Ṯ\\\":\\\"T\\\",\\n\\t\\\"Ʈ\\\":\\\"T\\\",\\n\\t\\\"Ŧ\\\":\\\"T\\\",\\n\\t\\\"Ɐ\\\":\\\"A\\\",\\n\\t\\\"Ꞁ\\\":\\\"L\\\",\\n\\t\\\"Ɯ\\\":\\\"M\\\",\\n\\t\\\"Ʌ\\\":\\\"V\\\",\\n\\t\\\"Ꜩ\\\":\\\"TZ\\\",\\n\\t\\\"Ú\\\":\\\"U\\\",\\n\\t\\\"Ŭ\\\":\\\"U\\\",\\n\\t\\\"Ǔ\\\":\\\"U\\\",\\n\\t\\\"Û\\\":\\\"U\\\",\\n\\t\\\"Ṷ\\\":\\\"U\\\",\\n\\t\\\"Ü\\\":\\\"U\\\",\\n\\t\\\"Ǘ\\\":\\\"U\\\",\\n\\t\\\"Ǚ\\\":\\\"U\\\",\\n\\t\\\"Ǜ\\\":\\\"U\\\",\\n\\t\\\"Ǖ\\\":\\\"U\\\",\\n\\t\\\"Ṳ\\\":\\\"U\\\",\\n\\t\\\"Ụ\\\":\\\"U\\\",\\n\\t\\\"Ű\\\":\\\"U\\\",\\n\\t\\\"Ȕ\\\":\\\"U\\\",\\n\\t\\\"Ù\\\":\\\"U\\\",\\n\\t\\\"Ủ\\\":\\\"U\\\",\\n\\t\\\"Ư\\\":\\\"U\\\",\\n\\t\\\"Ứ\\\":\\\"U\\\",\\n\\t\\\"Ự\\\":\\\"U\\\",\\n\\t\\\"Ừ\\\":\\\"U\\\",\\n\\t\\\"Ử\\\":\\\"U\\\",\\n\\t\\\"Ữ\\\":\\\"U\\\",\\n\\t\\\"Ȗ\\\":\\\"U\\\",\\n\\t\\\"Ū\\\":\\\"U\\\",\\n\\t\\\"Ṻ\\\":\\\"U\\\",\\n\\t\\\"Ų\\\":\\\"U\\\",\\n\\t\\\"Ů\\\":\\\"U\\\",\\n\\t\\\"Ũ\\\":\\\"U\\\",\\n\\t\\\"Ṹ\\\":\\\"U\\\",\\n\\t\\\"Ṵ\\\":\\\"U\\\",\\n\\t\\\"Ꝟ\\\":\\\"V\\\",\\n\\t\\\"Ṿ\\\":\\\"V\\\",\\n\\t\\\"Ʋ\\\":\\\"V\\\",\\n\\t\\\"Ṽ\\\":\\\"V\\\",\\n\\t\\\"Ꝡ\\\":\\\"VY\\\",\\n\\t\\\"Ẃ\\\":\\\"W\\\",\\n\\t\\\"Ŵ\\\":\\\"W\\\",\\n\\t\\\"Ẅ\\\":\\\"W\\\",\\n\\t\\\"Ẇ\\\":\\\"W\\\",\\n\\t\\\"Ẉ\\\":\\\"W\\\",\\n\\t\\\"Ẁ\\\":\\\"W\\\",\\n\\t\\\"Ⱳ\\\":\\\"W\\\",\\n\\t\\\"Ẍ\\\":\\\"X\\\",\\n\\t\\\"Ẋ\\\":\\\"X\\\",\\n\\t\\\"Ý\\\":\\\"Y\\\",\\n\\t\\\"Ŷ\\\":\\\"Y\\\",\\n\\t\\\"Ÿ\\\":\\\"Y\\\",\\n\\t\\\"Ẏ\\\":\\\"Y\\\",\\n\\t\\\"Ỵ\\\":\\\"Y\\\",\\n\\t\\\"Ỳ\\\":\\\"Y\\\",\\n\\t\\\"Ƴ\\\":\\\"Y\\\",\\n\\t\\\"Ỷ\\\":\\\"Y\\\",\\n\\t\\\"Ỿ\\\":\\\"Y\\\",\\n\\t\\\"Ȳ\\\":\\\"Y\\\",\\n\\t\\\"Ɏ\\\":\\\"Y\\\",\\n\\t\\\"Ỹ\\\":\\\"Y\\\",\\n\\t\\\"Ź\\\":\\\"Z\\\",\\n\\t\\\"Ž\\\":\\\"Z\\\",\\n\\t\\\"Ẑ\\\":\\\"Z\\\",\\n\\t\\\"Ⱬ\\\":\\\"Z\\\",\\n\\t\\\"Ż\\\":\\\"Z\\\",\\n\\t\\\"Ẓ\\\":\\\"Z\\\",\\n\\t\\\"Ȥ\\\":\\\"Z\\\",\\n\\t\\\"Ẕ\\\":\\\"Z\\\",\\n\\t\\\"Ƶ\\\":\\\"Z\\\",\\n\\t\\\"Ĳ\\\":\\\"IJ\\\",\\n\\t\\\"Œ\\\":\\\"OE\\\",\\n\\t\\\"ᴀ\\\":\\\"A\\\",\\n\\t\\\"ᴁ\\\":\\\"AE\\\",\\n\\t\\\"ʙ\\\":\\\"B\\\",\\n\\t\\\"ᴃ\\\":\\\"B\\\",\\n\\t\\\"ᴄ\\\":\\\"C\\\",\\n\\t\\\"ᴅ\\\":\\\"D\\\",\\n\\t\\\"ᴇ\\\":\\\"E\\\",\\n\\t\\\"ꜰ\\\":\\\"F\\\",\\n\\t\\\"ɢ\\\":\\\"G\\\",\\n\\t\\\"ʛ\\\":\\\"G\\\",\\n\\t\\\"ʜ\\\":\\\"H\\\",\\n\\t\\\"ɪ\\\":\\\"I\\\",\\n\\t\\\"ʁ\\\":\\\"R\\\",\\n\\t\\\"ᴊ\\\":\\\"J\\\",\\n\\t\\\"ᴋ\\\":\\\"K\\\",\\n\\t\\\"ʟ\\\":\\\"L\\\",\\n\\t\\\"ᴌ\\\":\\\"L\\\",\\n\\t\\\"ᴍ\\\":\\\"M\\\",\\n\\t\\\"ɴ\\\":\\\"N\\\",\\n\\t\\\"ᴏ\\\":\\\"O\\\",\\n\\t\\\"ɶ\\\":\\\"OE\\\",\\n\\t\\\"ᴐ\\\":\\\"O\\\",\\n\\t\\\"ᴕ\\\":\\\"OU\\\",\\n\\t\\\"ᴘ\\\":\\\"P\\\",\\n\\t\\\"ʀ\\\":\\\"R\\\",\\n\\t\\\"ᴎ\\\":\\\"N\\\",\\n\\t\\\"ᴙ\\\":\\\"R\\\",\\n\\t\\\"ꜱ\\\":\\\"S\\\",\\n\\t\\\"ᴛ\\\":\\\"T\\\",\\n\\t\\\"ⱻ\\\":\\\"E\\\",\\n\\t\\\"ᴚ\\\":\\\"R\\\",\\n\\t\\\"ᴜ\\\":\\\"U\\\",\\n\\t\\\"ᴠ\\\":\\\"V\\\",\\n\\t\\\"ᴡ\\\":\\\"W\\\",\\n\\t\\\"ʏ\\\":\\\"Y\\\",\\n\\t\\\"ᴢ\\\":\\\"Z\\\",\\n\\t\\\"á\\\":\\\"a\\\",\\n\\t\\\"ă\\\":\\\"a\\\",\\n\\t\\\"ắ\\\":\\\"a\\\",\\n\\t\\\"ặ\\\":\\\"a\\\",\\n\\t\\\"ằ\\\":\\\"a\\\",\\n\\t\\\"ẳ\\\":\\\"a\\\",\\n\\t\\\"ẵ\\\":\\\"a\\\",\\n\\t\\\"ǎ\\\":\\\"a\\\",\\n\\t\\\"â\\\":\\\"a\\\",\\n\\t\\\"ấ\\\":\\\"a\\\",\\n\\t\\\"ậ\\\":\\\"a\\\",\\n\\t\\\"ầ\\\":\\\"a\\\",\\n\\t\\\"ẩ\\\":\\\"a\\\",\\n\\t\\\"ẫ\\\":\\\"a\\\",\\n\\t\\\"ä\\\":\\\"a\\\",\\n\\t\\\"ǟ\\\":\\\"a\\\",\\n\\t\\\"ȧ\\\":\\\"a\\\",\\n\\t\\\"ǡ\\\":\\\"a\\\",\\n\\t\\\"ạ\\\":\\\"a\\\",\\n\\t\\\"ȁ\\\":\\\"a\\\",\\n\\t\\\"à\\\":\\\"a\\\",\\n\\t\\\"ả\\\":\\\"a\\\",\\n\\t\\\"ȃ\\\":\\\"a\\\",\\n\\t\\\"ā\\\":\\\"a\\\",\\n\\t\\\"ą\\\":\\\"a\\\",\\n\\t\\\"ᶏ\\\":\\\"a\\\",\\n\\t\\\"ẚ\\\":\\\"a\\\",\\n\\t\\\"å\\\":\\\"a\\\",\\n\\t\\\"ǻ\\\":\\\"a\\\",\\n\\t\\\"ḁ\\\":\\\"a\\\",\\n\\t\\\"ⱥ\\\":\\\"a\\\",\\n\\t\\\"ã\\\":\\\"a\\\",\\n\\t\\\"ꜳ\\\":\\\"aa\\\",\\n\\t\\\"æ\\\":\\\"ae\\\",\\n\\t\\\"ǽ\\\":\\\"ae\\\",\\n\\t\\\"ǣ\\\":\\\"ae\\\",\\n\\t\\\"ꜵ\\\":\\\"ao\\\",\\n\\t\\\"ꜷ\\\":\\\"au\\\",\\n\\t\\\"ꜹ\\\":\\\"av\\\",\\n\\t\\\"ꜻ\\\":\\\"av\\\",\\n\\t\\\"ꜽ\\\":\\\"ay\\\",\\n\\t\\\"ḃ\\\":\\\"b\\\",\\n\\t\\\"ḅ\\\":\\\"b\\\",\\n\\t\\\"ɓ\\\":\\\"b\\\",\\n\\t\\\"ḇ\\\":\\\"b\\\",\\n\\t\\\"ᵬ\\\":\\\"b\\\",\\n\\t\\\"ᶀ\\\":\\\"b\\\",\\n\\t\\\"ƀ\\\":\\\"b\\\",\\n\\t\\\"ƃ\\\":\\\"b\\\",\\n\\t\\\"ɵ\\\":\\\"o\\\",\\n\\t\\\"ć\\\":\\\"c\\\",\\n\\t\\\"č\\\":\\\"c\\\",\\n\\t\\\"ç\\\":\\\"c\\\",\\n\\t\\\"ḉ\\\":\\\"c\\\",\\n\\t\\\"ĉ\\\":\\\"c\\\",\\n\\t\\\"ɕ\\\":\\\"c\\\",\\n\\t\\\"ċ\\\":\\\"c\\\",\\n\\t\\\"ƈ\\\":\\\"c\\\",\\n\\t\\\"ȼ\\\":\\\"c\\\",\\n\\t\\\"ď\\\":\\\"d\\\",\\n\\t\\\"ḑ\\\":\\\"d\\\",\\n\\t\\\"ḓ\\\":\\\"d\\\",\\n\\t\\\"ȡ\\\":\\\"d\\\",\\n\\t\\\"ḋ\\\":\\\"d\\\",\\n\\t\\\"ḍ\\\":\\\"d\\\",\\n\\t\\\"ɗ\\\":\\\"d\\\",\\n\\t\\\"ᶑ\\\":\\\"d\\\",\\n\\t\\\"ḏ\\\":\\\"d\\\",\\n\\t\\\"ᵭ\\\":\\\"d\\\",\\n\\t\\\"ᶁ\\\":\\\"d\\\",\\n\\t\\\"đ\\\":\\\"d\\\",\\n\\t\\\"ɖ\\\":\\\"d\\\",\\n\\t\\\"ƌ\\\":\\\"d\\\",\\n\\t\\\"ı\\\":\\\"i\\\",\\n\\t\\\"ȷ\\\":\\\"j\\\",\\n\\t\\\"ɟ\\\":\\\"j\\\",\\n\\t\\\"ʄ\\\":\\\"j\\\",\\n\\t\\\"ǳ\\\":\\\"dz\\\",\\n\\t\\\"ǆ\\\":\\\"dz\\\",\\n\\t\\\"é\\\":\\\"e\\\",\\n\\t\\\"ĕ\\\":\\\"e\\\",\\n\\t\\\"ě\\\":\\\"e\\\",\\n\\t\\\"ȩ\\\":\\\"e\\\",\\n\\t\\\"ḝ\\\":\\\"e\\\",\\n\\t\\\"ê\\\":\\\"e\\\",\\n\\t\\\"ế\\\":\\\"e\\\",\\n\\t\\\"ệ\\\":\\\"e\\\",\\n\\t\\\"ề\\\":\\\"e\\\",\\n\\t\\\"ể\\\":\\\"e\\\",\\n\\t\\\"ễ\\\":\\\"e\\\",\\n\\t\\\"ḙ\\\":\\\"e\\\",\\n\\t\\\"ë\\\":\\\"e\\\",\\n\\t\\\"ė\\\":\\\"e\\\",\\n\\t\\\"ẹ\\\":\\\"e\\\",\\n\\t\\\"ȅ\\\":\\\"e\\\",\\n\\t\\\"è\\\":\\\"e\\\",\\n\\t\\\"ẻ\\\":\\\"e\\\",\\n\\t\\\"ȇ\\\":\\\"e\\\",\\n\\t\\\"ē\\\":\\\"e\\\",\\n\\t\\\"ḗ\\\":\\\"e\\\",\\n\\t\\\"ḕ\\\":\\\"e\\\",\\n\\t\\\"ⱸ\\\":\\\"e\\\",\\n\\t\\\"ę\\\":\\\"e\\\",\\n\\t\\\"ᶒ\\\":\\\"e\\\",\\n\\t\\\"ɇ\\\":\\\"e\\\",\\n\\t\\\"ẽ\\\":\\\"e\\\",\\n\\t\\\"ḛ\\\":\\\"e\\\",\\n\\t\\\"ꝫ\\\":\\\"et\\\",\\n\\t\\\"ḟ\\\":\\\"f\\\",\\n\\t\\\"ƒ\\\":\\\"f\\\",\\n\\t\\\"ᵮ\\\":\\\"f\\\",\\n\\t\\\"ᶂ\\\":\\\"f\\\",\\n\\t\\\"ǵ\\\":\\\"g\\\",\\n\\t\\\"ğ\\\":\\\"g\\\",\\n\\t\\\"ǧ\\\":\\\"g\\\",\\n\\t\\\"ģ\\\":\\\"g\\\",\\n\\t\\\"ĝ\\\":\\\"g\\\",\\n\\t\\\"ġ\\\":\\\"g\\\",\\n\\t\\\"ɠ\\\":\\\"g\\\",\\n\\t\\\"ḡ\\\":\\\"g\\\",\\n\\t\\\"ᶃ\\\":\\\"g\\\",\\n\\t\\\"ǥ\\\":\\\"g\\\",\\n\\t\\\"ḫ\\\":\\\"h\\\",\\n\\t\\\"ȟ\\\":\\\"h\\\",\\n\\t\\\"ḩ\\\":\\\"h\\\",\\n\\t\\\"ĥ\\\":\\\"h\\\",\\n\\t\\\"ⱨ\\\":\\\"h\\\",\\n\\t\\\"ḧ\\\":\\\"h\\\",\\n\\t\\\"ḣ\\\":\\\"h\\\",\\n\\t\\\"ḥ\\\":\\\"h\\\",\\n\\t\\\"ɦ\\\":\\\"h\\\",\\n\\t\\\"ẖ\\\":\\\"h\\\",\\n\\t\\\"ħ\\\":\\\"h\\\",\\n\\t\\\"ƕ\\\":\\\"hv\\\",\\n\\t\\\"í\\\":\\\"i\\\",\\n\\t\\\"ĭ\\\":\\\"i\\\",\\n\\t\\\"ǐ\\\":\\\"i\\\",\\n\\t\\\"î\\\":\\\"i\\\",\\n\\t\\\"ï\\\":\\\"i\\\",\\n\\t\\\"ḯ\\\":\\\"i\\\",\\n\\t\\\"ị\\\":\\\"i\\\",\\n\\t\\\"ȉ\\\":\\\"i\\\",\\n\\t\\\"ì\\\":\\\"i\\\",\\n\\t\\\"ỉ\\\":\\\"i\\\",\\n\\t\\\"ȋ\\\":\\\"i\\\",\\n\\t\\\"ī\\\":\\\"i\\\",\\n\\t\\\"į\\\":\\\"i\\\",\\n\\t\\\"ᶖ\\\":\\\"i\\\",\\n\\t\\\"ɨ\\\":\\\"i\\\",\\n\\t\\\"ĩ\\\":\\\"i\\\",\\n\\t\\\"ḭ\\\":\\\"i\\\",\\n\\t\\\"ꝺ\\\":\\\"d\\\",\\n\\t\\\"ꝼ\\\":\\\"f\\\",\\n\\t\\\"ᵹ\\\":\\\"g\\\",\\n\\t\\\"ꞃ\\\":\\\"r\\\",\\n\\t\\\"ꞅ\\\":\\\"s\\\",\\n\\t\\\"ꞇ\\\":\\\"t\\\",\\n\\t\\\"ꝭ\\\":\\\"is\\\",\\n\\t\\\"ǰ\\\":\\\"j\\\",\\n\\t\\\"ĵ\\\":\\\"j\\\",\\n\\t\\\"ʝ\\\":\\\"j\\\",\\n\\t\\\"ɉ\\\":\\\"j\\\",\\n\\t\\\"ḱ\\\":\\\"k\\\",\\n\\t\\\"ǩ\\\":\\\"k\\\",\\n\\t\\\"ķ\\\":\\\"k\\\",\\n\\t\\\"ⱪ\\\":\\\"k\\\",\\n\\t\\\"ꝃ\\\":\\\"k\\\",\\n\\t\\\"ḳ\\\":\\\"k\\\",\\n\\t\\\"ƙ\\\":\\\"k\\\",\\n\\t\\\"ḵ\\\":\\\"k\\\",\\n\\t\\\"ᶄ\\\":\\\"k\\\",\\n\\t\\\"ꝁ\\\":\\\"k\\\",\\n\\t\\\"ꝅ\\\":\\\"k\\\",\\n\\t\\\"ĺ\\\":\\\"l\\\",\\n\\t\\\"ƚ\\\":\\\"l\\\",\\n\\t\\\"ɬ\\\":\\\"l\\\",\\n\\t\\\"ľ\\\":\\\"l\\\",\\n\\t\\\"ļ\\\":\\\"l\\\",\\n\\t\\\"ḽ\\\":\\\"l\\\",\\n\\t\\\"ȴ\\\":\\\"l\\\",\\n\\t\\\"ḷ\\\":\\\"l\\\",\\n\\t\\\"ḹ\\\":\\\"l\\\",\\n\\t\\\"ⱡ\\\":\\\"l\\\",\\n\\t\\\"ꝉ\\\":\\\"l\\\",\\n\\t\\\"ḻ\\\":\\\"l\\\",\\n\\t\\\"ŀ\\\":\\\"l\\\",\\n\\t\\\"ɫ\\\":\\\"l\\\",\\n\\t\\\"ᶅ\\\":\\\"l\\\",\\n\\t\\\"ɭ\\\":\\\"l\\\",\\n\\t\\\"ł\\\":\\\"l\\\",\\n\\t\\\"ǉ\\\":\\\"lj\\\",\\n\\t\\\"ſ\\\":\\\"s\\\",\\n\\t\\\"ẜ\\\":\\\"s\\\",\\n\\t\\\"ẛ\\\":\\\"s\\\",\\n\\t\\\"ẝ\\\":\\\"s\\\",\\n\\t\\\"ḿ\\\":\\\"m\\\",\\n\\t\\\"ṁ\\\":\\\"m\\\",\\n\\t\\\"ṃ\\\":\\\"m\\\",\\n\\t\\\"ɱ\\\":\\\"m\\\",\\n\\t\\\"ᵯ\\\":\\\"m\\\",\\n\\t\\\"ᶆ\\\":\\\"m\\\",\\n\\t\\\"ń\\\":\\\"n\\\",\\n\\t\\\"ň\\\":\\\"n\\\",\\n\\t\\\"ņ\\\":\\\"n\\\",\\n\\t\\\"ṋ\\\":\\\"n\\\",\\n\\t\\\"ȵ\\\":\\\"n\\\",\\n\\t\\\"ṅ\\\":\\\"n\\\",\\n\\t\\\"ṇ\\\":\\\"n\\\",\\n\\t\\\"ǹ\\\":\\\"n\\\",\\n\\t\\\"ɲ\\\":\\\"n\\\",\\n\\t\\\"ṉ\\\":\\\"n\\\",\\n\\t\\\"ƞ\\\":\\\"n\\\",\\n\\t\\\"ᵰ\\\":\\\"n\\\",\\n\\t\\\"ᶇ\\\":\\\"n\\\",\\n\\t\\\"ɳ\\\":\\\"n\\\",\\n\\t\\\"ñ\\\":\\\"n\\\",\\n\\t\\\"ǌ\\\":\\\"nj\\\",\\n\\t\\\"ó\\\":\\\"o\\\",\\n\\t\\\"ŏ\\\":\\\"o\\\",\\n\\t\\\"ǒ\\\":\\\"o\\\",\\n\\t\\\"ô\\\":\\\"o\\\",\\n\\t\\\"ố\\\":\\\"o\\\",\\n\\t\\\"ộ\\\":\\\"o\\\",\\n\\t\\\"ồ\\\":\\\"o\\\",\\n\\t\\\"ổ\\\":\\\"o\\\",\\n\\t\\\"ỗ\\\":\\\"o\\\",\\n\\t\\\"ö\\\":\\\"o\\\",\\n\\t\\\"ȫ\\\":\\\"o\\\",\\n\\t\\\"ȯ\\\":\\\"o\\\",\\n\\t\\\"ȱ\\\":\\\"o\\\",\\n\\t\\\"ọ\\\":\\\"o\\\",\\n\\t\\\"ő\\\":\\\"o\\\",\\n\\t\\\"ȍ\\\":\\\"o\\\",\\n\\t\\\"ò\\\":\\\"o\\\",\\n\\t\\\"ỏ\\\":\\\"o\\\",\\n\\t\\\"ơ\\\":\\\"o\\\",\\n\\t\\\"ớ\\\":\\\"o\\\",\\n\\t\\\"ợ\\\":\\\"o\\\",\\n\\t\\\"ờ\\\":\\\"o\\\",\\n\\t\\\"ở\\\":\\\"o\\\",\\n\\t\\\"ỡ\\\":\\\"o\\\",\\n\\t\\\"ȏ\\\":\\\"o\\\",\\n\\t\\\"ꝋ\\\":\\\"o\\\",\\n\\t\\\"ꝍ\\\":\\\"o\\\",\\n\\t\\\"ⱺ\\\":\\\"o\\\",\\n\\t\\\"ō\\\":\\\"o\\\",\\n\\t\\\"ṓ\\\":\\\"o\\\",\\n\\t\\\"ṑ\\\":\\\"o\\\",\\n\\t\\\"ǫ\\\":\\\"o\\\",\\n\\t\\\"ǭ\\\":\\\"o\\\",\\n\\t\\\"ø\\\":\\\"o\\\",\\n\\t\\\"ǿ\\\":\\\"o\\\",\\n\\t\\\"õ\\\":\\\"o\\\",\\n\\t\\\"ṍ\\\":\\\"o\\\",\\n\\t\\\"ṏ\\\":\\\"o\\\",\\n\\t\\\"ȭ\\\":\\\"o\\\",\\n\\t\\\"ƣ\\\":\\\"oi\\\",\\n\\t\\\"ꝏ\\\":\\\"oo\\\",\\n\\t\\\"ɛ\\\":\\\"e\\\",\\n\\t\\\"ᶓ\\\":\\\"e\\\",\\n\\t\\\"ɔ\\\":\\\"o\\\",\\n\\t\\\"ᶗ\\\":\\\"o\\\",\\n\\t\\\"ȣ\\\":\\\"ou\\\",\\n\\t\\\"ṕ\\\":\\\"p\\\",\\n\\t\\\"ṗ\\\":\\\"p\\\",\\n\\t\\\"ꝓ\\\":\\\"p\\\",\\n\\t\\\"ƥ\\\":\\\"p\\\",\\n\\t\\\"ᵱ\\\":\\\"p\\\",\\n\\t\\\"ᶈ\\\":\\\"p\\\",\\n\\t\\\"ꝕ\\\":\\\"p\\\",\\n\\t\\\"ᵽ\\\":\\\"p\\\",\\n\\t\\\"ꝑ\\\":\\\"p\\\",\\n\\t\\\"ꝙ\\\":\\\"q\\\",\\n\\t\\\"ʠ\\\":\\\"q\\\",\\n\\t\\\"ɋ\\\":\\\"q\\\",\\n\\t\\\"ꝗ\\\":\\\"q\\\",\\n\\t\\\"ŕ\\\":\\\"r\\\",\\n\\t\\\"ř\\\":\\\"r\\\",\\n\\t\\\"ŗ\\\":\\\"r\\\",\\n\\t\\\"ṙ\\\":\\\"r\\\",\\n\\t\\\"ṛ\\\":\\\"r\\\",\\n\\t\\\"ṝ\\\":\\\"r\\\",\\n\\t\\\"ȑ\\\":\\\"r\\\",\\n\\t\\\"ɾ\\\":\\\"r\\\",\\n\\t\\\"ᵳ\\\":\\\"r\\\",\\n\\t\\\"ȓ\\\":\\\"r\\\",\\n\\t\\\"ṟ\\\":\\\"r\\\",\\n\\t\\\"ɼ\\\":\\\"r\\\",\\n\\t\\\"ᵲ\\\":\\\"r\\\",\\n\\t\\\"ᶉ\\\":\\\"r\\\",\\n\\t\\\"ɍ\\\":\\\"r\\\",\\n\\t\\\"ɽ\\\":\\\"r\\\",\\n\\t\\\"ↄ\\\":\\\"c\\\",\\n\\t\\\"ꜿ\\\":\\\"c\\\",\\n\\t\\\"ɘ\\\":\\\"e\\\",\\n\\t\\\"ɿ\\\":\\\"r\\\",\\n\\t\\\"ś\\\":\\\"s\\\",\\n\\t\\\"ṥ\\\":\\\"s\\\",\\n\\t\\\"š\\\":\\\"s\\\",\\n\\t\\\"ṧ\\\":\\\"s\\\",\\n\\t\\\"ş\\\":\\\"s\\\",\\n\\t\\\"ŝ\\\":\\\"s\\\",\\n\\t\\\"ș\\\":\\\"s\\\",\\n\\t\\\"ṡ\\\":\\\"s\\\",\\n\\t\\\"ṣ\\\":\\\"s\\\",\\n\\t\\\"ṩ\\\":\\\"s\\\",\\n\\t\\\"ʂ\\\":\\\"s\\\",\\n\\t\\\"ᵴ\\\":\\\"s\\\",\\n\\t\\\"ᶊ\\\":\\\"s\\\",\\n\\t\\\"ȿ\\\":\\\"s\\\",\\n\\t\\\"ɡ\\\":\\\"g\\\",\\n\\t\\\"ᴑ\\\":\\\"o\\\",\\n\\t\\\"ᴓ\\\":\\\"o\\\",\\n\\t\\\"ᴝ\\\":\\\"u\\\",\\n\\t\\\"ť\\\":\\\"t\\\",\\n\\t\\\"ţ\\\":\\\"t\\\",\\n\\t\\\"ṱ\\\":\\\"t\\\",\\n\\t\\\"ț\\\":\\\"t\\\",\\n\\t\\\"ȶ\\\":\\\"t\\\",\\n\\t\\\"ẗ\\\":\\\"t\\\",\\n\\t\\\"ⱦ\\\":\\\"t\\\",\\n\\t\\\"ṫ\\\":\\\"t\\\",\\n\\t\\\"ṭ\\\":\\\"t\\\",\\n\\t\\\"ƭ\\\":\\\"t\\\",\\n\\t\\\"ṯ\\\":\\\"t\\\",\\n\\t\\\"ᵵ\\\":\\\"t\\\",\\n\\t\\\"ƫ\\\":\\\"t\\\",\\n\\t\\\"ʈ\\\":\\\"t\\\",\\n\\t\\\"ŧ\\\":\\\"t\\\",\\n\\t\\\"ᵺ\\\":\\\"th\\\",\\n\\t\\\"ɐ\\\":\\\"a\\\",\\n\\t\\\"ᴂ\\\":\\\"ae\\\",\\n\\t\\\"ǝ\\\":\\\"e\\\",\\n\\t\\\"ᵷ\\\":\\\"g\\\",\\n\\t\\\"ɥ\\\":\\\"h\\\",\\n\\t\\\"ʮ\\\":\\\"h\\\",\\n\\t\\\"ʯ\\\":\\\"h\\\",\\n\\t\\\"ᴉ\\\":\\\"i\\\",\\n\\t\\\"ʞ\\\":\\\"k\\\",\\n\\t\\\"ꞁ\\\":\\\"l\\\",\\n\\t\\\"ɯ\\\":\\\"m\\\",\\n\\t\\\"ɰ\\\":\\\"m\\\",\\n\\t\\\"ᴔ\\\":\\\"oe\\\",\\n\\t\\\"ɹ\\\":\\\"r\\\",\\n\\t\\\"ɻ\\\":\\\"r\\\",\\n\\t\\\"ɺ\\\":\\\"r\\\",\\n\\t\\\"ⱹ\\\":\\\"r\\\",\\n\\t\\\"ʇ\\\":\\\"t\\\",\\n\\t\\\"ʌ\\\":\\\"v\\\",\\n\\t\\\"ʍ\\\":\\\"w\\\",\\n\\t\\\"ʎ\\\":\\\"y\\\",\\n\\t\\\"ꜩ\\\":\\\"tz\\\",\\n\\t\\\"ú\\\":\\\"u\\\",\\n\\t\\\"ŭ\\\":\\\"u\\\",\\n\\t\\\"ǔ\\\":\\\"u\\\",\\n\\t\\\"û\\\":\\\"u\\\",\\n\\t\\\"ṷ\\\":\\\"u\\\",\\n\\t\\\"ü\\\":\\\"u\\\",\\n\\t\\\"ǘ\\\":\\\"u\\\",\\n\\t\\\"ǚ\\\":\\\"u\\\",\\n\\t\\\"ǜ\\\":\\\"u\\\",\\n\\t\\\"ǖ\\\":\\\"u\\\",\\n\\t\\\"ṳ\\\":\\\"u\\\",\\n\\t\\\"ụ\\\":\\\"u\\\",\\n\\t\\\"ű\\\":\\\"u\\\",\\n\\t\\\"ȕ\\\":\\\"u\\\",\\n\\t\\\"ù\\\":\\\"u\\\",\\n\\t\\\"ủ\\\":\\\"u\\\",\\n\\t\\\"ư\\\":\\\"u\\\",\\n\\t\\\"ứ\\\":\\\"u\\\",\\n\\t\\\"ự\\\":\\\"u\\\",\\n\\t\\\"ừ\\\":\\\"u\\\",\\n\\t\\\"ử\\\":\\\"u\\\",\\n\\t\\\"ữ\\\":\\\"u\\\",\\n\\t\\\"ȗ\\\":\\\"u\\\",\\n\\t\\\"ū\\\":\\\"u\\\",\\n\\t\\\"ṻ\\\":\\\"u\\\",\\n\\t\\\"ų\\\":\\\"u\\\",\\n\\t\\\"ᶙ\\\":\\\"u\\\",\\n\\t\\\"ů\\\":\\\"u\\\",\\n\\t\\\"ũ\\\":\\\"u\\\",\\n\\t\\\"ṹ\\\":\\\"u\\\",\\n\\t\\\"ṵ\\\":\\\"u\\\",\\n\\t\\\"ᵫ\\\":\\\"ue\\\",\\n\\t\\\"ꝸ\\\":\\\"um\\\",\\n\\t\\\"ⱴ\\\":\\\"v\\\",\\n\\t\\\"ꝟ\\\":\\\"v\\\",\\n\\t\\\"ṿ\\\":\\\"v\\\",\\n\\t\\\"ʋ\\\":\\\"v\\\",\\n\\t\\\"ᶌ\\\":\\\"v\\\",\\n\\t\\\"ⱱ\\\":\\\"v\\\",\\n\\t\\\"ṽ\\\":\\\"v\\\",\\n\\t\\\"ꝡ\\\":\\\"vy\\\",\\n\\t\\\"ẃ\\\":\\\"w\\\",\\n\\t\\\"ŵ\\\":\\\"w\\\",\\n\\t\\\"ẅ\\\":\\\"w\\\",\\n\\t\\\"ẇ\\\":\\\"w\\\",\\n\\t\\\"ẉ\\\":\\\"w\\\",\\n\\t\\\"ẁ\\\":\\\"w\\\",\\n\\t\\\"ⱳ\\\":\\\"w\\\",\\n\\t\\\"ẘ\\\":\\\"w\\\",\\n\\t\\\"ẍ\\\":\\\"x\\\",\\n\\t\\\"ẋ\\\":\\\"x\\\",\\n\\t\\\"ᶍ\\\":\\\"x\\\",\\n\\t\\\"ý\\\":\\\"y\\\",\\n\\t\\\"ŷ\\\":\\\"y\\\",\\n\\t\\\"ÿ\\\":\\\"y\\\",\\n\\t\\\"ẏ\\\":\\\"y\\\",\\n\\t\\\"ỵ\\\":\\\"y\\\",\\n\\t\\\"ỳ\\\":\\\"y\\\",\\n\\t\\\"ƴ\\\":\\\"y\\\",\\n\\t\\\"ỷ\\\":\\\"y\\\",\\n\\t\\\"ỿ\\\":\\\"y\\\",\\n\\t\\\"ȳ\\\":\\\"y\\\",\\n\\t\\\"ẙ\\\":\\\"y\\\",\\n\\t\\\"ɏ\\\":\\\"y\\\",\\n\\t\\\"ỹ\\\":\\\"y\\\",\\n\\t\\\"ź\\\":\\\"z\\\",\\n\\t\\\"ž\\\":\\\"z\\\",\\n\\t\\\"ẑ\\\":\\\"z\\\",\\n\\t\\\"ʑ\\\":\\\"z\\\",\\n\\t\\\"ⱬ\\\":\\\"z\\\",\\n\\t\\\"ż\\\":\\\"z\\\",\\n\\t\\\"ẓ\\\":\\\"z\\\",\\n\\t\\\"ȥ\\\":\\\"z\\\",\\n\\t\\\"ẕ\\\":\\\"z\\\",\\n\\t\\\"ᵶ\\\":\\\"z\\\",\\n\\t\\\"ᶎ\\\":\\\"z\\\",\\n\\t\\\"ʐ\\\":\\\"z\\\",\\n\\t\\\"ƶ\\\":\\\"z\\\",\\n\\t\\\"ɀ\\\":\\\"z\\\",\\n\\t\\\"ﬀ\\\":\\\"ff\\\",\\n\\t\\\"ﬃ\\\":\\\"ffi\\\",\\n\\t\\\"ﬄ\\\":\\\"ffl\\\",\\n\\t\\\"ﬁ\\\":\\\"fi\\\",\\n\\t\\\"ﬂ\\\":\\\"fl\\\",\\n\\t\\\"ĳ\\\":\\\"ij\\\",\\n\\t\\\"œ\\\":\\\"oe\\\",\\n\\t\\\"ﬆ\\\":\\\"st\\\",\\n\\t\\\"ₐ\\\":\\\"a\\\",\\n\\t\\\"ₑ\\\":\\\"e\\\",\\n\\t\\\"ᵢ\\\":\\\"i\\\",\\n\\t\\\"ⱼ\\\":\\\"j\\\",\\n\\t\\\"ₒ\\\":\\\"o\\\",\\n\\t\\\"ᵣ\\\":\\\"r\\\",\\n\\t\\\"ᵤ\\\":\\\"u\\\",\\n\\t\\\"ᵥ\\\":\\\"v\\\",\\n\\t\\\"ₓ\\\":\\\"x\\\",\\n\\t\\\"Ё\\\":\\\"YO\\\",\\n\\t\\\"Й\\\":\\\"I\\\",\\n\\t\\\"Ц\\\":\\\"TS\\\",\\n\\t\\\"У\\\":\\\"U\\\",\\n\\t\\\"К\\\":\\\"K\\\",\\n\\t\\\"Е\\\":\\\"E\\\",\\n\\t\\\"Н\\\":\\\"N\\\",\\n\\t\\\"Г\\\":\\\"G\\\",\\n\\t\\\"Ш\\\":\\\"SH\\\",\\n\\t\\\"Щ\\\":\\\"SCH\\\",\\n\\t\\\"З\\\":\\\"Z\\\",\\n\\t\\\"Х\\\":\\\"H\\\",\\n\\t\\\"Ъ\\\":\\\"'\\\",\\n\\t\\\"ё\\\":\\\"yo\\\",\\n\\t\\\"й\\\":\\\"i\\\",\\n\\t\\\"ц\\\":\\\"ts\\\",\\n\\t\\\"у\\\":\\\"u\\\",\\n\\t\\\"к\\\":\\\"k\\\",\\n\\t\\\"е\\\":\\\"e\\\",\\n\\t\\\"н\\\":\\\"n\\\",\\n\\t\\\"г\\\":\\\"g\\\",\\n\\t\\\"ш\\\":\\\"sh\\\",\\n\\t\\\"щ\\\":\\\"sch\\\",\\n\\t\\\"з\\\":\\\"z\\\",\\n\\t\\\"х\\\":\\\"h\\\",\\n\\t\\\"ъ\\\":\\\"'\\\",\\n\\t\\\"Ф\\\":\\\"F\\\",\\n\\t\\\"Ы\\\":\\\"I\\\",\\n\\t\\\"В\\\":\\\"V\\\",\\n\\t\\\"А\\\":\\\"a\\\",\\n\\t\\\"П\\\":\\\"P\\\",\\n\\t\\\"Р\\\":\\\"R\\\",\\n\\t\\\"О\\\":\\\"O\\\",\\n\\t\\\"Л\\\":\\\"L\\\",\\n\\t\\\"Д\\\":\\\"D\\\",\\n\\t\\\"Ж\\\":\\\"ZH\\\",\\n\\t\\\"Э\\\":\\\"E\\\",\\n\\t\\\"ф\\\":\\\"f\\\",\\n\\t\\\"ы\\\":\\\"i\\\",\\n\\t\\\"в\\\":\\\"v\\\",\\n\\t\\\"а\\\":\\\"a\\\",\\n\\t\\\"п\\\":\\\"p\\\",\\n\\t\\\"р\\\":\\\"r\\\",\\n\\t\\\"о\\\":\\\"o\\\",\\n\\t\\\"л\\\":\\\"l\\\",\\n\\t\\\"д\\\":\\\"d\\\",\\n\\t\\\"ж\\\":\\\"zh\\\",\\n\\t\\\"э\\\":\\\"e\\\",\\n\\t\\\"Я\\\":\\\"Ya\\\",\\n\\t\\\"Ч\\\":\\\"CH\\\",\\n\\t\\\"С\\\":\\\"S\\\",\\n\\t\\\"М\\\":\\\"M\\\",\\n\\t\\\"И\\\":\\\"I\\\",\\n\\t\\\"Т\\\":\\\"T\\\",\\n\\t\\\"Ь\\\":\\\"'\\\",\\n\\t\\\"Б\\\":\\\"B\\\",\\n\\t\\\"Ю\\\":\\\"YU\\\",\\n\\t\\\"я\\\":\\\"ya\\\",\\n\\t\\\"ч\\\":\\\"ch\\\",\\n\\t\\\"с\\\":\\\"s\\\",\\n\\t\\\"м\\\":\\\"m\\\",\\n\\t\\\"и\\\":\\\"i\\\",\\n\\t\\\"т\\\":\\\"t\\\",\\n\\t\\\"ь\\\":\\\"'\\\",\\n\\t\\\"б\\\":\\\"b\\\",\\n\\t\\\"ю\\\":\\\"yu\\\",\\n\\t\\\"…\\\":\\\"...\\\"\\n};\\n\\nexports.transliterate = function(str) {\\n\\treturn str.replace(/[^A-Za-z0-9\\\\[\\\\] ]/g,function(ch) {\\n\\t\\treturn exports.transliterationPairs[ch] || ch\\n\\t});\\n};\\n\\nexports.transliterateToSafeASCII = function(str) {\\n\\treturn str.replace(/[^\\\\x00-\\\\x7F]/g,function(ch) {\\n\\t\\treturn exports.transliterationPairs[ch] || \\\"\\\"\\n\\t});\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/utils/utils.js\":{\"title\":\"$:/core/modules/utils/utils.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/utils/utils.js\\ntype: application/javascript\\nmodule-type: utils\\n\\nVarious static utility functions.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar base64utf8 = require(\\\"$:/core/modules/utils/base64-utf8/base64-utf8.module.js\\\");\\n\\n/*\\nDisplay a message, in colour if we're on a terminal\\n*/\\nexports.log = function(text,colour) {\\n\\tconsole.log($tw.node ? exports.terminalColour(colour) + text + exports.terminalColour() : text);\\n};\\n\\nexports.terminalColour = function(colour) {\\n\\tif(!$tw.browser && $tw.node && process.stdout.isTTY) {\\n\\t\\tif(colour) {\\n\\t\\t\\tvar code = exports.terminalColourLookup[colour];\\n\\t\\t\\tif(code) {\\n\\t\\t\\t\\treturn \\\"\\\\x1b[\\\" + code + \\\"m\\\";\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"\\\\x1b[0m\\\"; // Cancel colour\\n\\t\\t}\\n\\t}\\n\\treturn \\\"\\\";\\n};\\n\\nexports.terminalColourLookup = {\\n\\t\\\"black\\\": \\\"0;30\\\",\\n\\t\\\"red\\\": \\\"0;31\\\",\\n\\t\\\"green\\\": \\\"0;32\\\",\\n\\t\\\"brown/orange\\\": \\\"0;33\\\",\\n\\t\\\"blue\\\": \\\"0;34\\\",\\n\\t\\\"purple\\\": \\\"0;35\\\",\\n\\t\\\"cyan\\\": \\\"0;36\\\",\\n\\t\\\"light gray\\\": \\\"0;37\\\"\\n};\\n\\n/*\\nDisplay a warning, in colour if we're on a terminal\\n*/\\nexports.warning = function(text) {\\n\\texports.log(text,\\\"brown/orange\\\");\\n};\\n\\n/*\\nLog a table of name: value pairs\\n*/\\nexports.logTable = function(data) {\\n\\tif(console.table) {\\n\\t\\tconsole.table(data);\\n\\t} else {\\n\\t\\t$tw.utils.each(data,function(value,name) {\\n\\t\\t\\tconsole.log(name + \\\": \\\" + value);\\n\\t\\t});\\n\\t}\\n}\\n\\n/*\\nReturn the integer represented by the str (string).\\nReturn the dflt (default) parameter if str is not a base-10 number.\\n*/\\nexports.getInt = function(str,deflt) {\\n\\tvar i = parseInt(str,10);\\n\\treturn isNaN(i) ? deflt : i;\\n}\\n\\n/*\\nRepeatedly replaces a substring within a string. Like String.prototype.replace, but without any of the default special handling of $ sequences in the replace string\\n*/\\nexports.replaceString = function(text,search,replace) {\\n\\treturn text.replace(search,function() {\\n\\t\\treturn replace;\\n\\t});\\n};\\n\\n/*\\nRepeats a string\\n*/\\nexports.repeat = function(str,count) {\\n\\tvar result = \\\"\\\";\\n\\tfor(var t=0;t\u003Ccount;t++) {\\n\\t\\tresult += str;\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nTrim whitespace from the start and end of a string\\nThanks to Steven Levithan, http://blog.stevenlevithan.com/archives/faster-trim-javascript\\n*/\\nexports.trim = function(str) {\\n\\tif(typeof str === \\\"string\\\") {\\n\\t\\treturn str.replace(/^\\\\s\\\\s*/, '').replace(/\\\\s\\\\s*$/, '');\\n\\t} else {\\n\\t\\treturn str;\\n\\t}\\n};\\n\\nexports.trimPrefix = function(str,unwanted) {\\n\\tif(typeof str === \\\"string\\\" && typeof unwanted === \\\"string\\\") {\\n\\t\\tif(unwanted === \\\"\\\") {\\n\\t\\t\\treturn str.replace(/^\\\\s\\\\s*/, '');\\n\\t\\t} else {\\n\\t\\t\\t// Safely regexp-escape the unwanted text\\n\\t\\t\\tunwanted = unwanted.replace(/[\\\\\\\\^$*+?.()|[\\\\]{}]/g, '\\\\\\\\$&');\\n\\t\\t\\tvar regex = new RegExp('^(' + unwanted + ')+');\\n\\t\\t\\treturn str.replace(regex, '');\\n\\t\\t}\\n\\t} else {\\n\\t\\treturn str;\\n\\t}\\n};\\n\\nexports.trimSuffix = function(str,unwanted) {\\n\\tif(typeof str === \\\"string\\\" && typeof unwanted === \\\"string\\\") {\\n\\t\\tif(unwanted === \\\"\\\") {\\n\\t\\t\\treturn str.replace(/\\\\s\\\\s*$/, '');\\n\\t\\t} else {\\n\\t\\t\\t// Safely regexp-escape the unwanted text\\n\\t\\t\\tunwanted = unwanted.replace(/[\\\\\\\\^$*+?.()|[\\\\]{}]/g, '\\\\\\\\$&');\\n\\t\\t\\tvar regex = new RegExp('(' + unwanted + ')+$');\\n\\t\\t\\treturn str.replace(regex, '');\\n\\t\\t}\\n\\t} else {\\n\\t\\treturn str;\\n\\t}\\n};\\n\\n/*\\nConvert a string to sentence case (ie capitalise first letter)\\n*/\\nexports.toSentenceCase = function(str) {\\n\\treturn (str || \\\"\\\").replace(/^\\\\S/, function(c) {return c.toUpperCase();});\\n}\\n\\n/*\\nConvert a string to title case (ie capitalise each initial letter)\\n*/\\nexports.toTitleCase = function(str) {\\n\\treturn (str || \\\"\\\").replace(/(^|\\\\s)\\\\S/g, function(c) {return c.toUpperCase();});\\n}\\n\\n/*\\nFind the line break preceding a given position in a string\\nReturns position immediately after that line break, or the start of the string\\n*/\\nexports.findPrecedingLineBreak = function(text,pos) {\\n\\tvar result = text.lastIndexOf(\\\"\\\\n\\\",pos - 1);\\n\\tif(result === -1) {\\n\\t\\tresult = 0;\\n\\t} else {\\n\\t\\tresult++;\\n\\t\\tif(text.charAt(result) === \\\"\\\\r\\\") {\\n\\t\\t\\tresult++;\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nFind the line break following a given position in a string\\n*/\\nexports.findFollowingLineBreak = function(text,pos) {\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\tvar result = text.indexOf(\\\"\\\\n\\\",pos);\\n\\tif(result === -1) {\\n\\t\\tresult = text.length;\\n\\t} else {\\n\\t\\tif(text.charAt(result) === \\\"\\\\r\\\") {\\n\\t\\t\\tresult++;\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nReturn the number of keys in an object\\n*/\\nexports.count = function(object) {\\n\\treturn Object.keys(object || {}).length;\\n};\\n\\n/*\\nDetermine whether an array-item is an object-property\\n*/\\nexports.hopArray = function(object,array) {\\n\\tfor(var i=0; i\u003Carray.length; i++) {\\n\\t\\tif($tw.utils.hop(object,array[i])) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\n/*\\nRemove entries from an array\\n\\tarray: array to modify\\n\\tvalue: a single value to remove, or an array of values to remove\\n*/\\nexports.removeArrayEntries = function(array,value) {\\n\\tvar t,p;\\n\\tif($tw.utils.isArray(value)) {\\n\\t\\tfor(t=0; t\u003Cvalue.length; t++) {\\n\\t\\t\\tp = array.indexOf(value[t]);\\n\\t\\t\\tif(p !== -1) {\\n\\t\\t\\t\\tarray.splice(p,1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tp = array.indexOf(value);\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tarray.splice(p,1);\\n\\t\\t}\\n\\t}\\n\\treturn array;\\n};\\n\\n/*\\nCheck whether any members of a hashmap are present in another hashmap\\n*/\\nexports.checkDependencies = function(dependencies,changes) {\\n\\tvar hit = false;\\n\\t$tw.utils.each(changes,function(change,title) {\\n\\t\\tif($tw.utils.hop(dependencies,title)) {\\n\\t\\t\\thit = true;\\n\\t\\t}\\n\\t});\\n\\treturn hit;\\n};\\n\\nexports.extend = function(object /* [, src] */) {\\n\\t$tw.utils.each(Array.prototype.slice.call(arguments, 1), function(source) {\\n\\t\\tif(source) {\\n\\t\\t\\tfor(var property in source) {\\n\\t\\t\\t\\tobject[property] = source[property];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn object;\\n};\\n\\nexports.deepCopy = function(object) {\\n\\tvar result,t;\\n\\tif($tw.utils.isArray(object)) {\\n\\t\\t// Copy arrays\\n\\t\\tresult = object.slice(0);\\n\\t} else if(typeof object === \\\"object\\\") {\\n\\t\\tresult = {};\\n\\t\\tfor(t in object) {\\n\\t\\t\\tif(object[t] !== undefined) {\\n\\t\\t\\t\\tresult[t] = $tw.utils.deepCopy(object[t]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tresult = object;\\n\\t}\\n\\treturn result;\\n};\\n\\nexports.extendDeepCopy = function(object,extendedProperties) {\\n\\tvar result = $tw.utils.deepCopy(object),t;\\n\\tfor(t in extendedProperties) {\\n\\t\\tif(extendedProperties[t] !== undefined) {\\n\\t\\t\\tresult[t] = $tw.utils.deepCopy(extendedProperties[t]);\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n};\\n\\nexports.deepFreeze = function deepFreeze(object) {\\n\\tvar property, key;\\n\\tif(object) {\\n\\t\\tObject.freeze(object);\\n\\t\\tfor(key in object) {\\n\\t\\t\\tproperty = object[key];\\n\\t\\t\\tif($tw.utils.hop(object,key) && (typeof property === \\\"object\\\") && !Object.isFrozen(property)) {\\n\\t\\t\\t\\tdeepFreeze(property);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.slowInSlowOut = function(t) {\\n\\treturn (1 - ((Math.cos(t * Math.PI) + 1) / 2));\\n};\\n\\nexports.formatTitleString = function(template,options) {\\n\\tvar base = options.base || \\\"\\\",\\n\\t\\tseparator = options.separator || \\\"\\\",\\n\\t\\tcounter = options.counter || \\\"\\\";\\n\\tvar result = \\\"\\\",\\n\\t\\tt = template,\\n\\t\\tmatches = [\\n\\t\\t\\t[/^\\\\$basename\\\\$/i, function() {\\n\\t\\t\\t\\treturn base;\\n\\t\\t\\t}],\\n\\t\\t\\t[/^\\\\$count:(\\\\d+)\\\\$/i, function(match) {\\n\\t\\t\\t\\treturn $tw.utils.pad(counter,match[1]);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^\\\\$separator\\\\$/i, function() {\\n\\t\\t\\t\\treturn separator;\\n\\t\\t\\t}],\\n\\t\\t\\t[/^\\\\$count\\\\$/i, function() {\\n\\t\\t\\t\\treturn counter + \\\"\\\";\\n\\t\\t\\t}]\\n\\t\\t];\\n\\twhile(t.length){\\n\\t\\tvar matchString = \\\"\\\";\\n\\t\\t$tw.utils.each(matches, function(m) {\\n\\t\\t\\tvar match = m[0].exec(t);\\n\\t\\t\\tif(match) {\\n\\t\\t\\t\\tmatchString = m[1].call(null,match);\\n\\t\\t\\t\\tt = t.substr(match[0].length);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tif(matchString) {\\n\\t\\t\\tresult += matchString;\\n\\t\\t} else {\\n\\t\\t\\tresult += t.charAt(0);\\n\\t\\t\\tt = t.substr(1);\\n\\t\\t}\\n\\t}\\n\\tresult = result.replace(/\\\\\\\\(.)/g,\\\"$1\\\");\\n\\treturn result;\\n};\\n\\nexports.formatDateString = function(date,template) {\\n\\tvar result = \\\"\\\",\\n\\t\\tt = template,\\n\\t\\tmatches = [\\n\\t\\t\\t[/^0hh12/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad($tw.utils.getHours12(date));\\n\\t\\t\\t}],\\n\\t\\t\\t[/^wYYYY/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad($tw.utils.getYearForWeekNo(date),4);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^hh12/, function() {\\n\\t\\t\\t\\treturn $tw.utils.getHours12(date);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^DDth/, function() {\\n\\t\\t\\t\\treturn date.getDate() + $tw.utils.getDaySuffix(date);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^YYYY/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getFullYear(),4);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^aYYYY/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(Math.abs(date.getFullYear()),4);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^\\\\{era:([^,\\\\|}]*)\\\\|([^}\\\\|]*)\\\\|([^}]*)\\\\}/, function(match) {\\n\\t\\t\\t\\tvar year = date.getFullYear();\\n\\t\\t\\t\\treturn year === 0 ? match[2] : (year \u003C 0 ? match[1] : match[3]);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0hh/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getHours());\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0mm/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getMinutes());\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0ss/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getSeconds());\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0XXX/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getMilliseconds(),3);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0DD/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getDate());\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0MM/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getMonth()+1);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0WW/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad($tw.utils.getWeek(date));\\n\\t\\t\\t}],\\n\\t\\t\\t[/^0ddddd/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24),3);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^ddddd/, function() {\\n\\t\\t\\t\\treturn Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^dddd/, function() {\\n\\t\\t\\t\\treturn [7,1,2,3,4,5,6][date.getDay()];\\n\\t\\t\\t}],\\n\\t\\t\\t[/^ddd/, function() {\\n\\t\\t\\t\\treturn $tw.language.getString(\\\"Date/Short/Day/\\\" + date.getDay());\\n\\t\\t\\t}],\\n\\t\\t\\t[/^mmm/, function() {\\n\\t\\t\\t\\treturn $tw.language.getString(\\\"Date/Short/Month/\\\" + (date.getMonth() + 1));\\n\\t\\t\\t}],\\n\\t\\t\\t[/^DDD/, function() {\\n\\t\\t\\t\\treturn $tw.language.getString(\\\"Date/Long/Day/\\\" + date.getDay());\\n\\t\\t\\t}],\\n\\t\\t\\t[/^MMM/, function() {\\n\\t\\t\\t\\treturn $tw.language.getString(\\\"Date/Long/Month/\\\" + (date.getMonth() + 1));\\n\\t\\t\\t}],\\n\\t\\t\\t[/^TZD/, function() {\\n\\t\\t\\t\\tvar tz = date.getTimezoneOffset(),\\n\\t\\t\\t\\tatz = Math.abs(tz);\\n\\t\\t\\t\\treturn (tz \u003C 0 ? '+' : '-') + $tw.utils.pad(Math.floor(atz / 60)) + ':' + $tw.utils.pad(atz % 60);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^wYY/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad($tw.utils.getYearForWeekNo(date) - 2000);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^[ap]m/, function() {\\n\\t\\t\\t\\treturn $tw.utils.getAmPm(date).toLowerCase();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^hh/, function() {\\n\\t\\t\\t\\treturn date.getHours();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^mm/, function() {\\n\\t\\t\\t\\treturn date.getMinutes();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^ss/, function() {\\n\\t\\t\\t\\treturn date.getSeconds();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^XXX/, function() {\\n\\t\\t\\t\\treturn date.getMilliseconds();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^[AP]M/, function() {\\n\\t\\t\\t\\treturn $tw.utils.getAmPm(date).toUpperCase();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^DD/, function() {\\n\\t\\t\\t\\treturn date.getDate();\\n\\t\\t\\t}],\\n\\t\\t\\t[/^MM/, function() {\\n\\t\\t\\t\\treturn date.getMonth() + 1;\\n\\t\\t\\t}],\\n\\t\\t\\t[/^WW/, function() {\\n\\t\\t\\t\\treturn $tw.utils.getWeek(date);\\n\\t\\t\\t}],\\n\\t\\t\\t[/^YY/, function() {\\n\\t\\t\\t\\treturn $tw.utils.pad(date.getFullYear() - 2000);\\n\\t\\t\\t}]\\n\\t\\t];\\n\\t// If the user wants everything in UTC, shift the datestamp\\n\\t// Optimize for format string that essentially means\\n\\t// 'return raw UTC (tiddlywiki style) date string.'\\n\\tif(t.indexOf(\\\"[UTC]\\\") == 0 ) {\\n\\t\\tif(t == \\\"[UTC]YYYY0MM0DD0hh0mm0ssXXX\\\")\\n\\t\\t\\treturn $tw.utils.stringifyDate(new Date());\\n\\t\\tvar offset = date.getTimezoneOffset() ; // in minutes\\n\\t\\tdate = new Date(date.getTime()+offset*60*1000) ;\\n\\t\\tt = t.substr(5) ;\\n\\t}\\n\\twhile(t.length){\\n\\t\\tvar matchString = \\\"\\\";\\n\\t\\t$tw.utils.each(matches, function(m) {\\n\\t\\t\\tvar match = m[0].exec(t);\\n\\t\\t\\tif(match) {\\n\\t\\t\\t\\tmatchString = m[1].call(null,match);\\n\\t\\t\\t\\tt = t.substr(match[0].length);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tif(matchString) {\\n\\t\\t\\tresult += matchString;\\n\\t\\t} else {\\n\\t\\t\\tresult += t.charAt(0);\\n\\t\\t\\tt = t.substr(1);\\n\\t\\t}\\n\\t}\\n\\tresult = result.replace(/\\\\\\\\(.)/g,\\\"$1\\\");\\n\\treturn result;\\n};\\n\\nexports.getAmPm = function(date) {\\n\\treturn $tw.language.getString(\\\"Date/Period/\\\" + (date.getHours() >= 12 ? \\\"pm\\\" : \\\"am\\\"));\\n};\\n\\nexports.getDaySuffix = function(date) {\\n\\treturn $tw.language.getString(\\\"Date/DaySuffix/\\\" + date.getDate());\\n};\\n\\nexports.getWeek = function(date) {\\n\\tvar dt = new Date(date.getTime());\\n\\tvar d = dt.getDay();\\n\\tif(d === 0) {\\n\\t\\td = 7; // JavaScript Sun=0, ISO Sun=7\\n\\t}\\n\\tdt.setTime(dt.getTime() + (4 - d) * 86400000);// shift day to Thurs of same week to calculate weekNo\\n\\tvar x = new Date(dt.getFullYear(),0,1);\\n\\tvar n = Math.floor((dt.getTime() - x.getTime()) / 86400000);\\n\\treturn Math.floor(n / 7) + 1;\\n};\\n\\nexports.getYearForWeekNo = function(date) {\\n\\tvar dt = new Date(date.getTime());\\n\\tvar d = dt.getDay();\\n\\tif(d === 0) {\\n\\t\\td = 7; // JavaScript Sun=0, ISO Sun=7\\n\\t}\\n\\tdt.setTime(dt.getTime() + (4 - d) * 86400000);// shift day to Thurs of same week\\n\\treturn dt.getFullYear();\\n};\\n\\nexports.getHours12 = function(date) {\\n\\tvar h = date.getHours();\\n\\treturn h > 12 ? h-12 : ( h > 0 ? h : 12 );\\n};\\n\\n/*\\nConvert a date delta in milliseconds into a string representation of \\\"23 seconds ago\\\", \\\"27 minutes ago\\\" etc.\\n\\tdelta: delta in milliseconds\\nReturns an object with these members:\\n\\tdescription: string describing the delta period\\n\\tupdatePeriod: time in millisecond until the string will be inaccurate\\n*/\\nexports.getRelativeDate = function(delta) {\\n\\tvar futurep = false;\\n\\tif(delta \u003C 0) {\\n\\t\\tdelta = -1 * delta;\\n\\t\\tfuturep = true;\\n\\t}\\n\\tvar units = [\\n\\t\\t{name: \\\"Years\\\",   duration:      365 * 24 * 60 * 60 * 1000},\\n\\t\\t{name: \\\"Months\\\",  duration: (365/12) * 24 * 60 * 60 * 1000},\\n\\t\\t{name: \\\"Days\\\",    duration:            24 * 60 * 60 * 1000},\\n\\t\\t{name: \\\"Hours\\\",   duration:                 60 * 60 * 1000},\\n\\t\\t{name: \\\"Minutes\\\", duration:                      60 * 1000},\\n\\t\\t{name: \\\"Seconds\\\", duration:                           1000}\\n\\t];\\n\\tfor(var t=0; t\u003Cunits.length; t++) {\\n\\t\\tvar result = Math.floor(delta / units[t].duration);\\n\\t\\tif(result >= 2) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tdelta: delta,\\n\\t\\t\\t\\tdescription: $tw.language.getString(\\n\\t\\t\\t\\t\\t\\\"RelativeDate/\\\" + (futurep ? \\\"Future\\\" : \\\"Past\\\") + \\\"/\\\" + units[t].name,\\n\\t\\t\\t\\t\\t{variables:\\n\\t\\t\\t\\t\\t\\t{period: result.toString()}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tupdatePeriod: units[t].duration\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\treturn {\\n\\t\\tdelta: delta,\\n\\t\\tdescription: $tw.language.getString(\\n\\t\\t\\t\\\"RelativeDate/\\\" + (futurep ? \\\"Future\\\" : \\\"Past\\\") + \\\"/Second\\\",\\n\\t\\t\\t{variables:\\n\\t\\t\\t\\t{period: \\\"1\\\"}\\n\\t\\t\\t}\\n\\t\\t),\\n\\t\\tupdatePeriod: 1000\\n\\t};\\n};\\n\\n// Convert & to \\\"&amp;\\\", \u003C to \\\"&lt;\\\", > to \\\"&gt;\\\", \\\" to \\\"&quot;\\\"\\nexports.htmlEncode = function(s) {\\n\\tif(s) {\\n\\t\\treturn s.toString().replace(/&/mg,\\\"&amp;\\\").replace(/\u003C/mg,\\\"&lt;\\\").replace(/>/mg,\\\"&gt;\\\").replace(/\\\\\\\"/mg,\\\"&quot;\\\");\\n\\t} else {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n};\\n\\n// Converts like htmlEncode, but forgets the double quote for brevity\\nexports.htmlTextEncode = function(s) {\\n\\tif(s) {\\n\\t\\treturn s.toString().replace(/&/mg,\\\"&amp;\\\").replace(/\u003C/mg,\\\"&lt;\\\").replace(/>/mg,\\\"&gt;\\\");\\n\\t} else {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n};\\n\\n// Converts all HTML entities to their character equivalents\\nexports.entityDecode = function(s) {\\n\\tvar converter = String.fromCodePoint || String.fromCharCode,\\n\\t\\te = s.substr(1,s.length-2), // Strip the & and the ;\\n\\t\\tc;\\n\\tif(e.charAt(0) === \\\"#\\\") {\\n\\t\\tif(e.charAt(1) === \\\"x\\\" || e.charAt(1) === \\\"X\\\") {\\n\\t\\t\\tc = parseInt(e.substr(2),16);\\n\\t\\t} else {\\n\\t\\t\\tc = parseInt(e.substr(1),10);\\n\\t\\t}\\n\\t\\tif(isNaN(c)) {\\n\\t\\t\\treturn s;\\n\\t\\t} else {\\n\\t\\t\\treturn converter(c);\\n\\t\\t}\\n\\t} else {\\n\\t\\tc = $tw.config.htmlEntities[e];\\n\\t\\tif(c) {\\n\\t\\t\\treturn converter(c);\\n\\t\\t} else {\\n\\t\\t\\treturn s; // Couldn't convert it as an entity, just return it raw\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.unescapeLineBreaks = function(s) {\\n\\treturn s.replace(/\\\\\\\\n/mg,\\\"\\\\n\\\").replace(/\\\\\\\\b/mg,\\\" \\\").replace(/\\\\\\\\s/mg,\\\"\\\\\\\\\\\").replace(/\\\\r/mg,\\\"\\\");\\n};\\n\\n/*\\n * Returns an escape sequence for given character. Uses \\\\x for characters \u003C=\\n * 0xFF to save space, \\\\u for the rest.\\n *\\n * The code needs to be in sync with th code template in the compilation\\n * function for \\\"action\\\" nodes.\\n */\\n// Copied from peg.js, thanks to David Majda\\nexports.escape = function(ch) {\\n\\tvar charCode = ch.charCodeAt(0);\\n\\tif(charCode \u003C= 0xFF) {\\n\\t\\treturn '\\\\\\\\x' + $tw.utils.pad(charCode.toString(16).toUpperCase());\\n\\t} else {\\n\\t\\treturn '\\\\\\\\u' + $tw.utils.pad(charCode.toString(16).toUpperCase(),4);\\n\\t}\\n};\\n\\n// Turns a string into a legal JavaScript string\\n// Copied from peg.js, thanks to David Majda\\nexports.stringify = function(s, rawUnicode) {\\n\\t/*\\n\\t* ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a string\\n\\t* literal except for the closing quote character, backslash, carriage return,\\n\\t* line separator, paragraph separator, and line feed. Any character may\\n\\t* appear in the form of an escape sequence.\\n\\t*\\n\\t* For portability, we also escape all non-ASCII characters.\\n\\t*/\\n\\tvar regex = rawUnicode ? /[\\\\x00-\\\\x1f]/g : /[\\\\x00-\\\\x1f\\\\x80-\\\\uFFFF]/g;\\n\\treturn (s || \\\"\\\")\\n\\t\\t.replace(/\\\\\\\\/g, '\\\\\\\\\\\\\\\\')            // backslash\\n\\t\\t.replace(/\\\"/g, '\\\\\\\\\\\"')              // double quote character\\n\\t\\t.replace(/'/g, \\\"\\\\\\\\'\\\")              // single quote character\\n\\t\\t.replace(/\\\\r/g, '\\\\\\\\r')             // carriage return\\n\\t\\t.replace(/\\\\n/g, '\\\\\\\\n')             // line feed\\n\\t\\t.replace(regex, exports.escape);   // non-ASCII characters\\n};\\n\\n// Turns a string into a legal JSON string\\n// Derived from peg.js, thanks to David Majda\\nexports.jsonStringify = function(s, rawUnicode) {\\n\\t// See http://www.json.org/\\n\\tvar regex = rawUnicode ? /[\\\\x00-\\\\x1f]/g : /[\\\\x00-\\\\x1f\\\\x80-\\\\uFFFF]/g;\\n\\treturn (s || \\\"\\\")\\n\\t\\t.replace(/\\\\\\\\/g, '\\\\\\\\\\\\\\\\')            // backslash\\n\\t\\t.replace(/\\\"/g, '\\\\\\\\\\\"')              // double quote character\\n\\t\\t.replace(/\\\\r/g, '\\\\\\\\r')             // carriage return\\n\\t\\t.replace(/\\\\n/g, '\\\\\\\\n')             // line feed\\n\\t\\t.replace(/\\\\x08/g, '\\\\\\\\b')           // backspace\\n\\t\\t.replace(/\\\\x0c/g, '\\\\\\\\f')           // formfeed\\n\\t\\t.replace(/\\\\t/g, '\\\\\\\\t')             // tab\\n\\t\\t.replace(regex,function(s) {\\n\\t\\t\\treturn '\\\\\\\\u' + $tw.utils.pad(s.charCodeAt(0).toString(16).toUpperCase(),4);\\n\\t\\t}); // non-ASCII characters\\n};\\n\\n/*\\nEscape the RegExp special characters with a preceding backslash\\n*/\\nexports.escapeRegExp = function(s) {\\n    return s.replace(/[\\\\-\\\\/\\\\\\\\\\\\^\\\\$\\\\*\\\\+\\\\?\\\\.\\\\(\\\\)\\\\|\\\\[\\\\]\\\\{\\\\}]/g, '\\\\\\\\$&');\\n};\\n\\n// Checks whether a link target is external, i.e. not a tiddler title\\nexports.isLinkExternal = function(to) {\\n\\tvar externalRegExp = /^(?:file|http|https|mailto|ftp|irc|news|data|skype):[^\\\\s\u003C>{}\\\\[\\\\]`|\\\"\\\\\\\\^]+(?:\\\\/|\\\\b)/i;\\n\\treturn externalRegExp.test(to);\\n};\\n\\nexports.nextTick = function(fn) {\\n/*global window: false */\\n\\tif(typeof process === \\\"undefined\\\") {\\n\\t\\t// Apparently it would be faster to use postMessage - http://dbaron.org/log/20100309-faster-timeouts\\n\\t\\twindow.setTimeout(fn,0);\\n\\t} else {\\n\\t\\tprocess.nextTick(fn);\\n\\t}\\n};\\n\\n/*\\nConvert a hyphenated CSS property name into a camel case one\\n*/\\nexports.unHyphenateCss = function(propName) {\\n\\treturn propName.replace(/-([a-z])/gi, function(match0,match1) {\\n\\t\\treturn match1.toUpperCase();\\n\\t});\\n};\\n\\n/*\\nConvert a camelcase CSS property name into a dashed one (\\\"backgroundColor\\\" --> \\\"background-color\\\")\\n*/\\nexports.hyphenateCss = function(propName) {\\n\\treturn propName.replace(/([A-Z])/g, function(match0,match1) {\\n\\t\\treturn \\\"-\\\" + match1.toLowerCase();\\n\\t});\\n};\\n\\n/*\\nParse a text reference of one of these forms:\\n* title\\n* !!field\\n* title!!field\\n* title##index\\n* etc\\nReturns an object with the following fields, all optional:\\n* title: tiddler title\\n* field: tiddler field name\\n* index: JSON property index\\n*/\\nexports.parseTextReference = function(textRef) {\\n\\t// Separate out the title, field name and/or JSON indices\\n\\tvar reTextRef = /(?:(.*?)!!(.+))|(?:(.*?)##(.+))|(.*)/mg,\\n\\t\\tmatch = reTextRef.exec(textRef),\\n\\t\\tresult = {};\\n\\tif(match && reTextRef.lastIndex === textRef.length) {\\n\\t\\t// Return the parts\\n\\t\\tif(match[1]) {\\n\\t\\t\\tresult.title = match[1];\\n\\t\\t}\\n\\t\\tif(match[2]) {\\n\\t\\t\\tresult.field = match[2];\\n\\t\\t}\\n\\t\\tif(match[3]) {\\n\\t\\t\\tresult.title = match[3];\\n\\t\\t}\\n\\t\\tif(match[4]) {\\n\\t\\t\\tresult.index = match[4];\\n\\t\\t}\\n\\t\\tif(match[5]) {\\n\\t\\t\\tresult.title = match[5];\\n\\t\\t}\\n\\t} else {\\n\\t\\t// If we couldn't parse it\\n\\t\\tresult.title = textRef\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nChecks whether a string is a valid fieldname\\n*/\\nexports.isValidFieldName = function(name) {\\n\\tif(!name || typeof name !== \\\"string\\\") {\\n\\t\\treturn false;\\n\\t}\\n\\t// Since v5.2.x, there are no restrictions on characters in field names\\n\\treturn name;\\n};\\n\\n/*\\nExtract the version number from the meta tag or from the boot file\\n*/\\n\\n// Browser version\\nexports.extractVersionInfo = function() {\\n\\tif($tw.packageInfo) {\\n\\t\\treturn $tw.packageInfo.version;\\n\\t} else {\\n\\t\\tvar metatags = document.getElementsByTagName(\\\"meta\\\");\\n\\t\\tfor(var t=0; t\u003Cmetatags.length; t++) {\\n\\t\\t\\tvar m = metatags[t];\\n\\t\\t\\tif(m.name === \\\"tiddlywiki-version\\\") {\\n\\t\\t\\t\\treturn m.content;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nGet the animation duration in ms\\n*/\\nexports.getAnimationDuration = function() {\\n\\treturn parseInt($tw.wiki.getTiddlerText(\\\"$:/config/AnimationDuration\\\",\\\"400\\\"),10) || 0;\\n};\\n\\n/*\\nHash a string to a number\\nDerived from http://stackoverflow.com/a/15710692\\n*/\\nexports.hashString = function(str) {\\n\\treturn str.split(\\\"\\\").reduce(function(a,b) {\\n\\t\\ta = ((a \u003C\u003C 5) - a) + b.charCodeAt(0);\\n\\t\\treturn a & a;\\n\\t},0);\\n};\\n\\n/*\\nDecode a base64 string\\n*/\\nexports.base64Decode = function(string64) {\\n\\treturn base64utf8.base64.decode.call(base64utf8,string64);\\n};\\n\\n/*\\nEncode a string to base64\\n*/\\nexports.base64Encode = function(string64) {\\n\\treturn base64utf8.base64.encode.call(base64utf8,string64);\\n};\\n\\n/*\\nConvert a hashmap into a tiddler dictionary format sequence of name:value pairs\\n*/\\nexports.makeTiddlerDictionary = function(data) {\\n\\tvar output = [];\\n\\tfor(var name in data) {\\n\\t\\toutput.push(name + \\\": \\\" + data[name]);\\n\\t}\\n\\treturn output.join(\\\"\\\\n\\\");\\n};\\n\\n/*\\nHigh resolution microsecond timer for profiling\\n*/\\nexports.timer = function(base) {\\n\\tvar m;\\n\\tif($tw.node) {\\n\\t\\tvar r = process.hrtime();\\n\\t\\tm =  r[0] * 1e3 + (r[1] / 1e6);\\n\\t} else if(window.performance) {\\n\\t\\tm = performance.now();\\n\\t} else {\\n\\t\\tm = Date.now();\\n\\t}\\n\\tif(typeof base !== \\\"undefined\\\") {\\n\\t\\tm = m - base;\\n\\t}\\n\\treturn m;\\n};\\n\\n/*\\nConvert text and content type to a data URI\\n*/\\nexports.makeDataUri = function(text,type,_canonical_uri) {\\n\\ttype = type || \\\"text/vnd.tiddlywiki\\\";\\n\\tvar typeInfo = $tw.config.contentTypeInfo[type] || $tw.config.contentTypeInfo[\\\"text/plain\\\"],\\n\\t\\tisBase64 = typeInfo.encoding === \\\"base64\\\",\\n\\t\\tparts = [];\\n\\tif(_canonical_uri) {\\n\\t\\tparts.push(_canonical_uri);\\n\\t} else {\\n\\t\\tparts.push(\\\"data:\\\");\\n\\t\\tparts.push(type);\\n\\t\\tparts.push(isBase64 ? \\\";base64\\\" : \\\"\\\");\\n\\t\\tparts.push(\\\",\\\");\\n\\t\\tparts.push(isBase64 ? text : encodeURIComponent(text));\\n\\t}\\n\\treturn parts.join(\\\"\\\");\\n};\\n\\n/*\\nUseful for finding out the fully escaped CSS selector equivalent to a given tag. For example:\\n\\n$tw.utils.tagToCssSelector(\\\"$:/tags/Stylesheet\\\") --> tc-tagged-\\\\%24\\\\%3A\\\\%2Ftags\\\\%2FStylesheet\\n*/\\nexports.tagToCssSelector = function(tagName) {\\n\\treturn \\\"tc-tagged-\\\" + encodeURIComponent(tagName).replace(/[!\\\"#$%&'()*+,\\\\-./:;\u003C=>?@[\\\\\\\\\\\\]^`{\\\\|}~,]/mg,function(c) {\\n\\t\\treturn \\\"\\\\\\\\\\\" + c;\\n\\t});\\n};\\n\\n/*\\nIE does not have sign function\\n*/\\nexports.sign = Math.sign || function(x) {\\n\\tx = +x; // convert to a number\\n\\tif (x === 0 || isNaN(x)) {\\n\\t\\treturn x;\\n\\t}\\n\\treturn x > 0 ? 1 : -1;\\n};\\n\\n/*\\nIE does not have an endsWith function\\n*/\\nexports.strEndsWith = function(str,ending,position) {\\n\\tif(str.endsWith) {\\n\\t\\treturn str.endsWith(ending,position);\\n\\t} else {\\n\\t\\tif (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > str.length) {\\n\\t\\t\\tposition = str.length;\\n\\t\\t}\\n\\t\\tposition -= ending.length;\\n\\t\\tvar lastIndex = str.indexOf(ending, position);\\n\\t\\treturn lastIndex !== -1 && lastIndex === position;\\n\\t}\\n};\\n\\n/*\\nReturn system information useful for debugging\\n*/\\nexports.getSystemInfo = function(str,ending,position) {\\n\\tvar results = [],\\n\\t\\tsave = function(desc,value) {\\n\\t\\t\\tresults.push(desc + \\\": \\\" + value);\\n\\t\\t};\\n\\tif($tw.browser) {\\n\\t\\tsave(\\\"User Agent\\\",navigator.userAgent);\\n\\t\\tsave(\\\"Online Status\\\",window.navigator.onLine);\\n\\t}\\n\\tif($tw.node) {\\n\\t\\tsave(\\\"Node Version\\\",process.version);\\n\\t}\\n\\treturn results.join(\\\"\\\\n\\\");\\n};\\n\\nexports.parseNumber = function(str) {\\n\\treturn parseFloat(str) || 0;\\n};\\n\\nexports.parseInt = function(str) {\\n\\treturn parseInt(str,10) || 0;\\n};\\n\\nexports.stringifyNumber = function(num) {\\n\\treturn num + \\\"\\\";\\n};\\n\\nexports.makeCompareFunction = function(type,options) {\\n\\toptions = options || {};\\n\\t// set isCaseSensitive to true if not defined in options\\n\\tvar isCaseSensitive = (options.isCaseSensitive === false) ? false : true,\\n\\t\\tgt = options.invert ? -1 : +1,\\n\\t\\tlt = options.invert ? +1 : -1,\\n\\t\\tcompare = function(a,b) {\\n\\t\\t\\tif(a > b) {\\n\\t\\t\\t\\treturn gt ;\\n\\t\\t\\t} else if(a \u003C b) {\\n\\t\\t\\t\\treturn lt;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\ttypes = {\\n\\t\\t\\t\\\"number\\\": function(a,b) {\\n\\t\\t\\t\\treturn compare($tw.utils.parseNumber(a),$tw.utils.parseNumber(b));\\n\\t\\t\\t},\\n\\t\\t\\t\\\"integer\\\": function(a,b) {\\n\\t\\t\\t\\treturn compare($tw.utils.parseInt(a),$tw.utils.parseInt(b));\\n\\t\\t\\t},\\n\\t\\t\\t\\\"string\\\": function(a,b) {\\n\\t\\t\\t\\tif(!isCaseSensitive) {\\n\\t\\t\\t\\t\\ta = a.toLowerCase();\\n\\t\\t\\t\\t\\tb = b.toLowerCase();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn compare(\\\"\\\" + a,\\\"\\\" + b);\\n\\t\\t\\t},\\n\\t\\t\\t\\\"date\\\": function(a,b) {\\n\\t\\t\\t\\tvar dateA = $tw.utils.parseDate(a),\\n\\t\\t\\t\\t\\tdateB = $tw.utils.parseDate(b);\\n\\t\\t\\t\\tif(!isFinite(dateA)) {\\n\\t\\t\\t\\t\\tdateA = new Date(0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(!isFinite(dateB)) {\\n\\t\\t\\t\\t\\tdateB = new Date(0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn compare(dateA,dateB);\\n\\t\\t\\t},\\n\\t\\t\\t\\\"version\\\": function(a,b) {\\n\\t\\t\\t\\treturn $tw.utils.compareVersions(a,b);\\n\\t\\t\\t},\\n\\t\\t\\t\\\"alphanumeric\\\": function(a,b) {\\n\\t\\t\\t\\tif(!isCaseSensitive) {\\n\\t\\t\\t\\t\\ta = a.toLowerCase();\\n\\t\\t\\t\\t\\tb = b.toLowerCase();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn options.invert ? b.localeCompare(a,undefined,{numeric: true,sensitivity: \\\"base\\\"}) : a.localeCompare(b,undefined,{numeric: true,sensitivity: \\\"base\\\"});\\n\\t\\t\\t}\\n\\t\\t};\\n\\treturn (types[type] || types[options.defaultType] || types.number);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"utils\"},\"$:/core/modules/widgets/action-confirm.js\":{\"title\":\"$:/core/modules/widgets/action-confirm.js\",\"text\":\"/*\\\\\\n\\ntitle: $:/core/modules/widgets/action-confirm.js\\ntype: application/javascript\\nmodule-type: widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ConfirmWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nConfirmWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nConfirmWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.parentDomNode = parent;\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nConfirmWidget.prototype.execute = function() {\\n\\tthis.message = this.getAttribute(\\\"$message\\\",$tw.language.getString(\\\"ConfirmAction\\\"));\\n\\tthis.prompt = (this.getAttribute(\\\"$prompt\\\",\\\"yes\\\") == \\\"no\\\" ? false : true);\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nConfirmWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$message\\\"] || changedAttributes[\\\"$prompt\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nConfirmWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar invokeActions = true,\\n\\t\\thandled = true,\\n\\t    \\twin = event && event.event && event.event.view ? event.event.view : window;\\n\\tif(this.prompt) {\\n\\t\\tinvokeActions = win.confirm(this.message);\\n\\t}\\n\\tif(invokeActions) {\\n\\t\\thandled = this.invokeActions(triggeringWidget,event);\\n\\t}\\n\\treturn handled;\\n};\\n\\nConfirmWidget.prototype.allowActionPropagation = function() {\\n\\treturn false;\\n};\\n\\nexports[\\\"action-confirm\\\"] = ConfirmWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-createtiddler.js\":{\"title\":\"$:/core/modules/widgets/action-createtiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-createtiddler.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to create a new tiddler with a unique name and specified fields.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false, require:false, exports:false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar CreateTiddlerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nCreateTiddlerWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nCreateTiddlerWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Render children\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nCreateTiddlerWidget.prototype.execute = function() {\\n\\tthis.actionBaseTitle = this.getAttribute(\\\"$basetitle\\\");\\n\\tthis.hasBase = !!this.actionBaseTitle;\\n\\tthis.actionSaveTitle = this.getAttribute(\\\"$savetitle\\\");\\n\\tthis.actionSaveDraftTitle = this.getAttribute(\\\"$savedrafttitle\\\");\\n\\tthis.actionTimestamp = this.getAttribute(\\\"$timestamp\\\",\\\"yes\\\") === \\\"yes\\\";\\n\\t//Following params are new since 5.1.22\\n\\tthis.actionTemplate = this.getAttribute(\\\"$template\\\");\\n\\tthis.useTemplate = !!this.actionTemplate;\\n\\tthis.actionOverwrite = this.getAttribute(\\\"$overwrite\\\",\\\"no\\\");\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nCreateTiddlerWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nCreateTiddlerWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar title = this.wiki.getTiddlerText(\\\"$:/language/DefaultNewTiddlerTitle\\\"), // Get the initial new-tiddler title\\n\\t\\tfields = {},\\n\\t\\tcreationFields,\\n\\t\\tmodificationFields;\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\n\\t\\t\\tfields[name] = attribute;\\n\\t\\t}\\n\\t});\\n\\tif(this.actionTimestamp) {\\n\\t\\tcreationFields = this.wiki.getCreationFields();\\n\\t\\tmodificationFields = this.wiki.getModificationFields();\\n\\t}\\n\\tif(this.hasBase && this.actionOverwrite === \\\"no\\\") {\\n\\t\\ttitle = this.wiki.generateNewTitle(this.actionBaseTitle);\\n\\t} else if (this.hasBase && this.actionOverwrite === \\\"yes\\\") {\\n\\t\\ttitle = this.actionBaseTitle\\n\\t}\\n\\t// NO $basetitle BUT $template parameter is available\\n\\t// the title MUST be unique, otherwise the template would be overwritten\\n\\tif (!this.hasBase && this.useTemplate) {\\n\\t\\ttitle = this.wiki.generateNewTitle(this.actionTemplate);\\n\\t} else if (!this.hasBase && !this.useTemplate) {\\n\\t\\t// If no $basetitle and no $template then use initial title\\n\\t\\ttitle = this.wiki.generateNewTitle(title);\\n\\t}\\n\\tvar templateTiddler = this.wiki.getTiddler(this.actionTemplate) || {};\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(templateTiddler.fields,creationFields,fields,modificationFields,{title: title}));\\n\\tvar draftTitle = this.wiki.generateDraftTitle(title);\\n\\tif(this.actionSaveTitle) {\\n\\t\\tthis.wiki.setTextReference(this.actionSaveTitle,title,this.getVariable(\\\"currentTiddler\\\"));\\n\\t}\\n\\tif(this.actionSaveDraftTitle) {\\n\\t\\tthis.wiki.setTextReference(this.actionSaveDraftTitle,draftTitle,this.getVariable(\\\"currentTiddler\\\"));\\n\\t}\\n\\tthis.setVariable(\\\"createTiddler-title\\\",title);\\n\\tthis.setVariable(\\\"createTiddler-draftTitle\\\",draftTitle);\\n\\tthis.refreshChildren();\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-createtiddler\\\"] = CreateTiddlerWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-deletefield.js\":{\"title\":\"$:/core/modules/widgets/action-deletefield.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-deletefield.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to delete fields of a tiddler.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DeleteFieldWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDeleteFieldWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDeleteFieldWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDeleteFieldWidget.prototype.execute = function() {\\n\\tthis.actionTiddler = this.getAttribute(\\\"$tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.actionField = this.getAttribute(\\\"$field\\\");\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nDeleteFieldWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$tiddler\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nDeleteFieldWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar self = this,\\n\\t\\ttiddler = this.wiki.getTiddler(self.actionTiddler),\\n\\t\\tremoveFields = {},\\n\\t\\thasChanged = false;\\n\\tif(this.actionField && tiddler) {\\n\\t\\tremoveFields[this.actionField] = undefined;\\n\\t\\tif(this.actionField in tiddler.fields) {\\n\\t\\t\\thasChanged = true;\\n\\t\\t}\\n\\t}\\n\\tif(tiddler) {\\n\\t\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\t\\tif(name.charAt(0) !== \\\"$\\\" && name !== \\\"title\\\") {\\n\\t\\t\\t\\tremoveFields[name] = undefined;\\n\\t\\t\\t\\thasChanged = true;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tif(hasChanged) {\\n\\t\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(this.wiki.getCreationFields(),tiddler,removeFields,this.wiki.getModificationFields()));\\n\\t\\t}\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-deletefield\\\"] = DeleteFieldWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-deletetiddler.js\":{\"title\":\"$:/core/modules/widgets/action-deletetiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-deletetiddler.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to delete a tiddler.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DeleteTiddlerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDeleteTiddlerWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDeleteTiddlerWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDeleteTiddlerWidget.prototype.execute = function() {\\n\\tthis.actionFilter = this.getAttribute(\\\"$filter\\\");\\n\\tthis.actionTiddler = this.getAttribute(\\\"$tiddler\\\");\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nDeleteTiddlerWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$filter\\\"] || changedAttributes[\\\"$tiddler\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nDeleteTiddlerWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar tiddlers = [];\\n\\tif(this.actionFilter) {\\n\\t\\ttiddlers = this.wiki.filterTiddlers(this.actionFilter,this);\\n\\t}\\n\\tif(this.actionTiddler) {\\n\\t\\ttiddlers.push(this.actionTiddler);\\n\\t}\\n\\tfor(var t=0; t\u003Ctiddlers.length; t++) {\\n\\t\\tthis.wiki.deleteTiddler(tiddlers[t]);\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-deletetiddler\\\"] = DeleteTiddlerWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-listops.js\":{\"title\":\"$:/core/modules/widgets/action-listops.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-listops.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to apply list operations to any tiddler field (defaults to the 'list' field of the current tiddler)\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar ActionListopsWidget = function(parseTreeNode, options) {\\n\\tthis.initialise(parseTreeNode, options);\\n};\\n/**\\n * Inherit from the base widget class\\n */\\nActionListopsWidget.prototype = new Widget();\\n/**\\n * Render this widget into the DOM\\n */\\nActionListopsWidget.prototype.render = function(parent, nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n/**\\n * Compute the internal state of the widget\\n */\\nActionListopsWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.target = this.getAttribute(\\\"$tiddler\\\", this.getVariable(\\n\\t\\t\\\"currentTiddler\\\"));\\n\\tthis.filter = this.getAttribute(\\\"$filter\\\");\\n\\tthis.subfilter = this.getAttribute(\\\"$subfilter\\\");\\n\\tthis.listField = this.getAttribute(\\\"$field\\\", \\\"list\\\");\\n\\tthis.listIndex = this.getAttribute(\\\"$index\\\");\\n\\tthis.filtertags = this.getAttribute(\\\"$tags\\\");\\n};\\n/**\\n * \\tRefresh the widget by ensuring our attributes are up to date\\n */\\nActionListopsWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n/**\\n * \\tInvoke the action associated with this widget\\n */\\nActionListopsWidget.prototype.invokeAction = function(triggeringWidget,\\n\\tevent) {\\n\\t//Apply the specified filters to the lists\\n\\tvar field = this.listField,\\n\\t\\tindex,\\n\\t\\tlist = this.listField;\\n\\tif(this.listIndex) {\\n\\t\\tfield = undefined;\\n\\t\\tindex = this.listIndex;\\n\\t\\tlist = this.listIndex;\\n\\t}\\n\\tif(this.filter) {\\n\\t\\tthis.wiki.setText(this.target, field, index, $tw.utils.stringifyList(\\n\\t\\t\\tthis.wiki\\n\\t\\t\\t.filterTiddlers(this.filter, this)));\\n\\t}\\n\\tif(this.subfilter) {\\n\\t\\tvar inputList = this.wiki.getTiddlerList(this.target,field,index),\\n\\t\\t\\tsubfilter = \\\"[all[]] \\\" + this.subfilter;\\n\\t\\tthis.wiki.setText(this.target, field, index, $tw.utils.stringifyList(this.wiki.filterTiddlers(subfilter,this,this.wiki.makeTiddlerIterator(inputList))));\\n\\t}\\n\\tif(this.filtertags) {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.target),\\n\\t\\t\\toldtags = tiddler ? (tiddler.fields.tags || []).slice(0) : [],\\n\\t\\t\\ttagfilter = $tw.utils.stringifyList(oldtags) + \\\" \\\" + this.filtertags,\\n\\t\\t\\tnewtags = this.wiki.filterTiddlers(tagfilter,this);\\n\\t\\tif($tw.utils.stringifyList(oldtags.sort()) !== $tw.utils.stringifyList(newtags.sort())) {\\n\\t\\t\\tthis.wiki.setText(this.target,\\\"tags\\\",undefined,$tw.utils.stringifyList(newtags));\\n\\t\\t}\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-listops\\\"] = ActionListopsWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-log.js\":{\"title\":\"$:/core/modules/widgets/action-log.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-log.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to log debug messages\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar LogWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nLogWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLogWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\nLogWidget.prototype.execute = function(){\\n\\tthis.message = this.getAttribute(\\\"$$message\\\",\\\"debug\\\");\\n\\tthis.logAll = this.getAttribute(\\\"$$all\\\",\\\"no\\\") === \\\"yes\\\" ? true : false;\\n\\tthis.filter = this.getAttribute(\\\"$$filter\\\");\\n}\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nLogWidget.prototype.refresh = function(changedTiddlers) {\\n\\tthis.refreshSelf();\\n\\treturn true;\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nLogWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tthis.log();\\n\\treturn true; // Action was invoked\\n};\\n\\nLogWidget.prototype.log = function() {\\n\\tvar data = {},\\n\\t\\tdataCount,\\n\\t\\tallVars = {},\\n\\t\\tfilteredVars;\\n\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\tif(name.substring(0,2) !== \\\"$$\\\") {\\n\\t\\t\\tdata[name] = attribute;\\n\\t\\t}\\n\\t});\\n\\n\\tfor(var v in this.variables) {\\n\\t\\tallVars[v] = this.getVariable(v,{defaultValue:\\\"\\\"});\\n\\t}\\n\\tif(this.filter) {\\n\\t\\tfilteredVars = this.wiki.compileFilter(this.filter).call(this.wiki,this.wiki.makeTiddlerIterator(allVars));\\n\\t\\t$tw.utils.each(filteredVars,function(name) {\\n\\t\\t\\tdata[name] = allVars[name];\\n\\t\\t});\\n\\t}\\n\\tdataCount = $tw.utils.count(data);\\n\\n\\tconsole.group(this.message);\\n\\tif(dataCount > 0) {\\n\\t\\t$tw.utils.logTable(data);\\n\\t}\\n\\tif(this.logAll || !dataCount) {\\n\\t\\tconsole.groupCollapsed(\\\"All variables\\\");\\n\\t\\t$tw.utils.logTable(allVars);\\n\\t\\tconsole.groupEnd();\\n\\t}\\n\\tconsole.groupEnd();\\n}\\n\\nexports[\\\"action-log\\\"] = LogWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-navigate.js\":{\"title\":\"$:/core/modules/widgets/action-navigate.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-navigate.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to navigate to a tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar NavigateWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nNavigateWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nNavigateWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nNavigateWidget.prototype.execute = function() {\\n\\tthis.actionTo = this.getAttribute(\\\"$to\\\");\\n\\tthis.actionScroll = this.getAttribute(\\\"$scroll\\\");\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nNavigateWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$to\\\"] || changedAttributes[\\\"$scroll\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nNavigateWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tevent = event || {};\\n\\tvar bounds = triggeringWidget && triggeringWidget.getBoundingClientRect && triggeringWidget.getBoundingClientRect(),\\n\\t\\tsuppressNavigation = event.metaKey || event.ctrlKey || (event.button === 1);\\n\\tif(this.actionScroll === \\\"yes\\\") {\\n\\t\\tsuppressNavigation = false;\\n\\t} else if(this.actionScroll === \\\"no\\\") {\\n\\t\\tsuppressNavigation = true;\\n\\t}\\n\\tthis.dispatchEvent({\\n\\t\\ttype: \\\"tm-navigate\\\",\\n\\t\\tnavigateTo: this.actionTo === undefined ? this.getVariable(\\\"currentTiddler\\\") : this.actionTo,\\n\\t\\tnavigateFromTitle: this.getVariable(\\\"storyTiddler\\\"),\\n\\t\\tnavigateFromNode: triggeringWidget,\\n\\t\\tnavigateFromClientRect: bounds && { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\\n\\t\\t},\\n\\t\\tnavigateFromClientTop: bounds && bounds.top,\\n\\t\\tnavigateFromClientLeft: bounds && bounds.left,\\n\\t\\tnavigateFromClientWidth: bounds && bounds.width,\\n\\t\\tnavigateFromClientRight: bounds && bounds.right,\\n\\t\\tnavigateFromClientBottom: bounds && bounds.bottom,\\n\\t\\tnavigateFromClientHeight: bounds && bounds.height,\\n\\t\\tnavigateSuppressNavigation: suppressNavigation,\\n\\t\\tmetaKey: event.metaKey,\\n\\t\\tctrlKey: event.ctrlKey,\\n\\t\\taltKey: event.altKey,\\n\\t\\tshiftKey: event.shiftKey,\\n\\t\\tevent: event\\n\\t});\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-navigate\\\"] = NavigateWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-popup.js\":{\"title\":\"$:/core/modules/widgets/action-popup.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-popup.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to trigger a popup.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ActionPopupWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nActionPopupWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nActionPopupWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nActionPopupWidget.prototype.execute = function() {\\n\\tthis.actionState = this.getAttribute(\\\"$state\\\");\\n\\tthis.actionCoords = this.getAttribute(\\\"$coords\\\");\\n\\tthis.floating = this.getAttribute(\\\"$floating\\\",\\\"no\\\") === \\\"yes\\\";\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nActionPopupWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$state\\\"] || changedAttributes[\\\"$coords\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nActionPopupWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\t// Trigger the popup\\n\\tvar popupLocationRegExp = /^\\\\((-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+)\\\\)$/,\\n\\t\\tmatch = popupLocationRegExp.exec(this.actionCoords || \\\"\\\");\\n\\tif(match) {\\n\\t\\t$tw.popup.triggerPopup({\\n\\t\\t\\tdomNode: null,\\n\\t\\t\\tdomNodeRect: {\\n\\t\\t\\t\\tleft: parseFloat(match[1]),\\n\\t\\t\\t\\ttop: parseFloat(match[2]),\\n\\t\\t\\t\\twidth: parseFloat(match[3]),\\n\\t\\t\\t\\theight: parseFloat(match[4])\\n\\t\\t\\t},\\n\\t\\t\\ttitle: this.actionState,\\n\\t\\t\\twiki: this.wiki,\\n\\t\\t\\tfloating: this.floating\\n\\t\\t});\\n\\t} else {\\n\\t\\t$tw.popup.cancel(0);\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-popup\\\"] = ActionPopupWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-sendmessage.js\":{\"title\":\"$:/core/modules/widgets/action-sendmessage.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-sendmessage.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to send a message\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar SendMessageWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nSendMessageWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nSendMessageWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nSendMessageWidget.prototype.execute = function() {\\n\\tthis.actionMessage = this.getAttribute(\\\"$message\\\");\\n\\tthis.actionParam = this.getAttribute(\\\"$param\\\");\\n\\tthis.actionName = this.getAttribute(\\\"$name\\\");\\n\\tthis.actionValue = this.getAttribute(\\\"$value\\\",\\\"\\\");\\n\\tthis.actionNames = this.getAttribute(\\\"$names\\\");\\n\\tthis.actionValues = this.getAttribute(\\\"$values\\\");\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nSendMessageWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(Object.keys(changedAttributes).length) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nSendMessageWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\t// Get the string parameter\\n\\tvar param = this.actionParam;\\n\\t// Assemble the parameters as a hashmap\\n\\tvar paramObject = Object.create(null);\\n\\t// Add names/values pairs if present\\n\\tif(this.actionNames && this.actionValues) {\\n\\t\\tvar names = this.wiki.filterTiddlers(this.actionNames,this),\\n\\t\\t\\tvalues = this.wiki.filterTiddlers(this.actionValues,this);\\n\\t\\t$tw.utils.each(names,function(name,index) {\\n\\t\\t\\tparamObject[name] = values[index] || \\\"\\\";\\n\\t\\t});\\n\\t}\\n\\t// Add raw parameters\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\n\\t\\t\\tparamObject[name] = attribute;\\n\\t\\t}\\n\\t});\\n\\t// Add name/value pair if present\\n\\tif(this.actionName) {\\n\\t\\tparamObject[this.actionName] = this.actionValue;\\n\\t}\\n\\t// Dispatch the message\\n\\tvar params = {\\n\\t\\ttype: this.actionMessage,\\n\\t\\tparam: param,\\n\\t\\tparamObject: paramObject,\\n\\t\\tevent: event,\\n\\t\\ttiddlerTitle: this.getVariable(\\\"currentTiddler\\\"),\\n\\t\\tnavigateFromTitle: this.getVariable(\\\"storyTiddler\\\")\\n\\t};\\n\\tthis.dispatchEvent(params);\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-sendmessage\\\"] = SendMessageWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-setfield.js\":{\"title\":\"$:/core/modules/widgets/action-setfield.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-setfield.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to set a single field or index on a tiddler.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar SetFieldWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nSetFieldWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nSetFieldWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nSetFieldWidget.prototype.execute = function() {\\n\\tthis.actionTiddler = this.getAttribute(\\\"$tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.actionField = this.getAttribute(\\\"$field\\\");\\n\\tthis.actionIndex = this.getAttribute(\\\"$index\\\");\\n\\tthis.actionValue = this.getAttribute(\\\"$value\\\");\\n\\tthis.actionTimestamp = this.getAttribute(\\\"$timestamp\\\",\\\"yes\\\") === \\\"yes\\\";\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nSetFieldWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$tiddler\\\"] || changedAttributes[\\\"$field\\\"] || changedAttributes[\\\"$index\\\"] || changedAttributes[\\\"$value\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nSetFieldWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar self = this,\\n\\t\\toptions = {};\\n\\toptions.suppressTimestamp = !this.actionTimestamp;\\n\\tif((typeof this.actionField == \\\"string\\\") || (typeof this.actionIndex == \\\"string\\\")  || (typeof this.actionValue == \\\"string\\\")) {\\n\\t\\tthis.wiki.setText(this.actionTiddler,this.actionField,this.actionIndex,this.actionValue,options);\\n\\t}\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\n\\t\\t\\tself.wiki.setText(self.actionTiddler,name,undefined,attribute,options);\\n\\t\\t}\\n\\t});\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-setfield\\\"] = SetFieldWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/action-setmultiplefields.js\":{\"title\":\"$:/core/modules/widgets/action-setmultiplefields.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/action-setmultiplefields.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to set multiple fields or indexes on a tiddler\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar SetMultipleFieldsWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nSetMultipleFieldsWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nSetMultipleFieldsWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nSetMultipleFieldsWidget.prototype.execute = function() {\\n\\tthis.actionTiddler = this.getAttribute(\\\"$tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.actionFields = this.getAttribute(\\\"$fields\\\");\\n\\tthis.actionIndexes = this.getAttribute(\\\"$indexes\\\");\\n\\tthis.actionValues = this.getAttribute(\\\"$values\\\");\\n\\tthis.actionTimestamp = this.getAttribute(\\\"$timestamp\\\",\\\"yes\\\") === \\\"yes\\\";\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nSetMultipleFieldsWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$tiddler\\\"] || changedAttributes[\\\"$fields\\\"] || changedAttributes[\\\"$indexes\\\"] || changedAttributes[\\\"$values\\\"] || changedAttributes[\\\"$timestamp\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nSetMultipleFieldsWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar tiddler = this.wiki.getTiddler(this.actionTiddler),\\n\\t\\tnames, values = this.wiki.filterTiddlers(this.actionValues,this);\\n\\tif(this.actionFields) {\\n\\t\\tvar additions = {};\\n\\t\\tnames = this.wiki.filterTiddlers(this.actionFields,this);\\n\\t\\t$tw.utils.each(names,function(fieldname,index) {\\n\\t\\t\\tadditions[fieldname] = values[index] || \\\"\\\";\\n\\t\\t});\\n\\t\\tvar creationFields = this.actionTimestamp ? this.wiki.getCreationFields() : undefined,\\n\\t\\t\\tmodificationFields = this.actionTimestamp ? this.wiki.getModificationFields() : undefined;\\n\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(creationFields,tiddler,{title: this.actionTiddler},modificationFields,additions));\\n\\t} else if(this.actionIndexes) {\\n\\t\\tvar data = this.wiki.getTiddlerData(this.actionTiddler,Object.create(null));\\n\\t\\tnames = this.wiki.filterTiddlers(this.actionIndexes,this);\\n\\t\\t$tw.utils.each(names,function(name,index) {\\n\\t\\t\\tdata[name] = values[index] || \\\"\\\";\\n\\t\\t});\\n\\t\\tthis.wiki.setTiddlerData(this.actionTiddler,data,{},{suppressTimestamp: !this.actionTimestamp});\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-setmultiplefields\\\"] = SetMultipleFieldsWidget;\\n\\n})();\\n\\t\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/browse.js\":{\"title\":\"$:/core/modules/widgets/browse.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/browse.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nBrowse widget for browsing for files to import\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar BrowseWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nBrowseWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nBrowseWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create element\\n\\tvar domNode = this.document.createElement(\\\"input\\\");\\n\\tdomNode.setAttribute(\\\"type\\\",\\\"file\\\");\\n\\tif(this.browseMultiple) {\\n\\t\\tdomNode.setAttribute(\\\"multiple\\\",\\\"multiple\\\");\\n\\t}\\n\\tif(this.tooltip) {\\n\\t\\tdomNode.setAttribute(\\\"title\\\",this.tooltip);\\n\\t}\\n\\t// Nw.js supports \\\"nwsaveas\\\" to force a \\\"save as\\\" dialogue that allows a new or existing file to be selected\\n\\tif(this.nwsaveas) {\\n\\t\\tdomNode.setAttribute(\\\"nwsaveas\\\",this.nwsaveas);\\n\\t}\\n\\tif(this.accept) {\\n\\t\\tdomNode.setAttribute(\\\"accept\\\",this.accept);\\n\\t}\\n\\t// Nw.js supports \\\"webkitdirectory\\\" and \\\"nwdirectory\\\" to allow a directory to be selected\\n\\tif(this.webkitdirectory) {\\n\\t\\tdomNode.setAttribute(\\\"webkitdirectory\\\",this.webkitdirectory);\\n\\t}\\n\\tif(this.nwdirectory) {\\n\\t\\tdomNode.setAttribute(\\\"nwdirectory\\\",this.nwdirectory);\\n\\t}\\n\\t// Add a click event handler\\n\\tdomNode.addEventListener(\\\"change\\\",function (event) {\\n\\t\\tif(self.message) {\\n\\t\\t\\tself.dispatchEvent({type: self.message, param: self.param, files: event.target.files});\\n\\t\\t} else {\\n\\t\\t\\tself.wiki.readFiles(event.target.files,{\\n\\t\\t\\t\\tcallback: function(tiddlerFieldsArray) {\\n\\t\\t\\t\\t\\tself.dispatchEvent({type: \\\"tm-import-tiddlers\\\", param: JSON.stringify(tiddlerFieldsArray)});\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tdeserializer: self.deserializer\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\treturn false;\\n\\t},false);\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nBrowseWidget.prototype.execute = function() {\\n\\tthis.browseMultiple = this.getAttribute(\\\"multiple\\\");\\n\\tthis.deserializer = this.getAttribute(\\\"deserializer\\\");\\n\\tthis.message = this.getAttribute(\\\"message\\\");\\n\\tthis.param = this.getAttribute(\\\"param\\\");\\n\\tthis.tooltip = this.getAttribute(\\\"tooltip\\\");\\n\\tthis.nwsaveas = this.getAttribute(\\\"nwsaveas\\\");\\n\\tthis.accept = this.getAttribute(\\\"accept\\\");\\n\\tthis.webkitdirectory = this.getAttribute(\\\"webkitdirectory\\\");\\n\\tthis.nwdirectory = this.getAttribute(\\\"nwdirectory\\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nBrowseWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn false;\\n};\\n\\nexports.browse = BrowseWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/button.js\":{\"title\":\"$:/core/modules/widgets/button.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/button.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nButton widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ButtonWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nButtonWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nButtonWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this,\\n\\t\\ttag = \\\"button\\\",\\n\\t\\tdomNode;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create element\\n\\tif(this.buttonTag && $tw.config.htmlUnsafeElements.indexOf(this.buttonTag) === -1) {\\n\\t\\ttag = this.buttonTag;\\n\\t}\\n\\tdomNode = this.document.createElement(tag);\\n\\tthis.domNode = domNode;\\n\\t// Assign classes\\n\\tvar classes = this[\\\"class\\\"].split(\\\" \\\") || [],\\n\\t\\tisPoppedUp = (this.popup || this.popupTitle) && this.isPoppedUp();\\n\\tif(this.selectedClass) {\\n\\t\\tif((this.set || this.setTitle) && this.setTo && this.isSelected()) {\\n\\t\\t\\t$tw.utils.pushTop(classes,this.selectedClass.split(\\\" \\\"));\\n\\t\\t}\\n\\t\\tif(isPoppedUp) {\\n\\t\\t\\t$tw.utils.pushTop(classes,this.selectedClass.split(\\\" \\\"));\\n\\t\\t}\\n\\t}\\n\\tif(isPoppedUp) {\\n\\t\\t$tw.utils.pushTop(classes,\\\"tc-popup-handle\\\");\\n\\t}\\n\\tdomNode.className = classes.join(\\\" \\\");\\n\\t// Assign other attributes\\n\\tif(this.style) {\\n\\t\\tdomNode.setAttribute(\\\"style\\\",this.style);\\n\\t}\\n\\tif(this.tooltip) {\\n\\t\\tdomNode.setAttribute(\\\"title\\\",this.tooltip);\\n\\t}\\n\\tif(this[\\\"aria-label\\\"]) {\\n\\t\\tdomNode.setAttribute(\\\"aria-label\\\",this[\\\"aria-label\\\"]);\\n\\t}\\n\\tif(this.popup || this.popupTitle) {\\n\\t\\tdomNode.setAttribute(\\\"aria-expanded\\\",isPoppedUp ? \\\"true\\\" : \\\"false\\\");\\n\\t}\\n\\t// Set the tabindex\\n\\tif(this.tabIndex) {\\n\\t\\tdomNode.setAttribute(\\\"tabindex\\\",this.tabIndex);\\n\\t}\\n\\tif(this.isDisabled === \\\"yes\\\") {\\n\\t\\tdomNode.setAttribute(\\\"disabled\\\",true);\\n\\t}\\n\\t// Add a click event handler\\n\\tdomNode.addEventListener(\\\"click\\\",function (event) {\\n\\t\\tvar handled = false;\\n\\t\\tif(self.invokeActions(self,event)) {\\n\\t\\t\\thandled = true;\\n\\t\\t}\\n\\t\\tif(self.to) {\\n\\t\\t\\tself.navigateTo(event);\\n\\t\\t\\thandled = true;\\n\\t\\t}\\n\\t\\tif(self.message) {\\n\\t\\t\\tself.dispatchMessage(event);\\n\\t\\t\\thandled = true;\\n\\t\\t}\\n\\t\\tif(self.popup || self.popupTitle) {\\n\\t\\t\\tself.triggerPopup(event);\\n\\t\\t\\thandled = true;\\n\\t\\t}\\n\\t\\tif(self.set || self.setTitle) {\\n\\t\\t\\tself.setTiddler();\\n\\t\\t\\thandled = true;\\n\\t\\t}\\n\\t\\tif(self.actions) {\\n\\t\\t\\tvar modifierKey = $tw.keyboardManager.getEventModifierKeyDescriptor(event);\\n\\t\\t\\tself.invokeActionString(self.actions,self,event,{modifier: modifierKey});\\n\\t\\t}\\n\\t\\tif(handled) {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t}\\n\\t\\treturn handled;\\n\\t},false);\\n\\t// Make it draggable if required\\n\\tif(this.dragTiddler || this.dragFilter) {\\n\\t\\t$tw.utils.makeDraggable({\\n\\t\\t\\tdomNode: domNode,\\n\\t\\t\\tdragTiddlerFn: function() {return self.dragTiddler;},\\n\\t\\t\\tdragFilterFn: function() {return self.dragFilter;},\\n\\t\\t\\twidget: this\\n\\t\\t});\\n\\t}\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nWe don't allow actions to propagate because we trigger actions ourselves\\n*/\\nButtonWidget.prototype.allowActionPropagation = function() {\\n\\treturn false;\\n};\\n\\nButtonWidget.prototype.getBoundingClientRect = function() {\\n\\treturn this.domNodes[0].getBoundingClientRect();\\n};\\n\\nButtonWidget.prototype.isSelected = function() {\\n    return this.setTitle ? (this.setField ? this.wiki.getTiddler(this.setTitle).getFieldString(this.setField) === this.setTo :\\n\\t\\t(this.setIndex ? this.wiki.extractTiddlerDataItem(this.setTitle,this.setIndex) === this.setTo :\\n\\t\\t\\tthis.wiki.getTiddlerText(this.setTitle))) || this.defaultSetValue || this.getVariable(\\\"currentTiddler\\\") :\\n\\t\\tthis.wiki.getTextReference(this.set,this.defaultSetValue,this.getVariable(\\\"currentTiddler\\\")) === this.setTo;\\n};\\n\\nButtonWidget.prototype.isPoppedUp = function() {\\n\\tvar tiddler = this.popupTitle ? this.wiki.getTiddler(this.popupTitle) : this.wiki.getTiddler(this.popup);\\n\\tvar result = tiddler && tiddler.fields.text ? $tw.popup.readPopupState(tiddler.fields.text) : false;\\n\\treturn result;\\n};\\n\\nButtonWidget.prototype.navigateTo = function(event) {\\n\\tvar bounds = this.getBoundingClientRect();\\n\\tthis.dispatchEvent({\\n\\t\\ttype: \\\"tm-navigate\\\",\\n\\t\\tnavigateTo: this.to,\\n\\t\\tnavigateFromTitle: this.getVariable(\\\"storyTiddler\\\"),\\n\\t\\tnavigateFromNode: this,\\n\\t\\tnavigateFromClientRect: { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\\n\\t\\t},\\n\\t\\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey || (event.button === 1),\\n\\t\\tevent: event\\n\\t});\\n};\\n\\nButtonWidget.prototype.dispatchMessage = function(event) {\\n\\tthis.dispatchEvent({type: this.message, param: this.param, tiddlerTitle: this.getVariable(\\\"currentTiddler\\\"), event: event});\\n};\\n\\nButtonWidget.prototype.triggerPopup = function(event) {\\n\\tif(this.popupTitle) {\\n\\t\\t$tw.popup.triggerPopup({\\n\\t\\t\\tdomNode: this.domNodes[0],\\n\\t\\t\\ttitle: this.popupTitle,\\n\\t\\t\\twiki: this.wiki,\\n\\t\\t\\tnoStateReference: true\\n\\t\\t});\\n\\t} else {\\n\\t\\t$tw.popup.triggerPopup({\\n\\t\\t\\tdomNode: this.domNodes[0],\\n\\t\\t\\ttitle: this.popup,\\n\\t\\t\\twiki: this.wiki\\n\\t\\t});\\n\\t}\\n};\\n\\nButtonWidget.prototype.setTiddler = function() {\\n\\tif(this.setTitle) {\\n\\t\\tthis.setField ? this.wiki.setText(this.setTitle,this.setField,undefined,this.setTo) :\\n\\t\\t\\t\\t(this.setIndex ? this.wiki.setText(this.setTitle,undefined,this.setIndex,this.setTo) :\\n\\t\\t\\t\\tthis.wiki.setText(this.setTitle,\\\"text\\\",undefined,this.setTo));\\n\\t} else {\\n\\t\\tthis.wiki.setTextReference(this.set,this.setTo,this.getVariable(\\\"currentTiddler\\\"));\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nButtonWidget.prototype.execute = function() {\\n\\t// Get attributes\\n\\tthis.actions = this.getAttribute(\\\"actions\\\");\\n\\tthis.to = this.getAttribute(\\\"to\\\");\\n\\tthis.message = this.getAttribute(\\\"message\\\");\\n\\tthis.param = this.getAttribute(\\\"param\\\");\\n\\tthis.set = this.getAttribute(\\\"set\\\");\\n\\tthis.setTo = this.getAttribute(\\\"setTo\\\");\\n\\tthis.popup = this.getAttribute(\\\"popup\\\");\\n\\tthis.hover = this.getAttribute(\\\"hover\\\");\\n\\tthis[\\\"aria-label\\\"] = this.getAttribute(\\\"aria-label\\\");\\n\\tthis.tooltip = this.getAttribute(\\\"tooltip\\\");\\n\\tthis.style = this.getAttribute(\\\"style\\\");\\n\\tthis[\\\"class\\\"] = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\tthis.selectedClass = this.getAttribute(\\\"selectedClass\\\");\\n\\tthis.defaultSetValue = this.getAttribute(\\\"default\\\",\\\"\\\");\\n\\tthis.buttonTag = this.getAttribute(\\\"tag\\\");\\n\\tthis.dragTiddler = this.getAttribute(\\\"dragTiddler\\\");\\n\\tthis.dragFilter = this.getAttribute(\\\"dragFilter\\\");\\n\\tthis.setTitle = this.getAttribute(\\\"setTitle\\\");\\n\\tthis.setField = this.getAttribute(\\\"setField\\\");\\n\\tthis.setIndex = this.getAttribute(\\\"setIndex\\\");\\n\\tthis.popupTitle = this.getAttribute(\\\"popupTitle\\\");\\n\\tthis.tabIndex = this.getAttribute(\\\"tabindex\\\");\\n\\tthis.isDisabled = this.getAttribute(\\\"disabled\\\",\\\"no\\\");\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\nButtonWidget.prototype.updateDomNodeClasses = function() {\\n\\tvar domNodeClasses = this.domNode.className.split(\\\" \\\"),\\n\\t\\toldClasses = this.class.split(\\\" \\\"),\\n\\t\\tnewClasses;\\n\\tthis[\\\"class\\\"] = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\tnewClasses = this.class.split(\\\" \\\");\\n\\t//Remove classes assigned from the old value of class attribute\\n\\t$tw.utils.each(oldClasses,function(oldClass){\\n\\t\\tvar i = domNodeClasses.indexOf(oldClass);\\n\\t\\tif(i !== -1) {\\n\\t\\t\\tdomNodeClasses.splice(i,1);\\n\\t\\t}\\n\\t});\\n\\t//Add new classes from updated class attribute.\\n\\t$tw.utils.pushTop(domNodeClasses,newClasses);\\n\\tthis.domNode.className = domNodeClasses.join(\\\" \\\");\\n}\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nButtonWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.actions || changedAttributes.to || changedAttributes.message || changedAttributes.param || changedAttributes.set || changedAttributes.setTo || changedAttributes.popup || changedAttributes.hover || changedAttributes.selectedClass || changedAttributes.style || changedAttributes.dragFilter || changedAttributes.dragTiddler || (this.set && changedTiddlers[this.set]) || (this.popup && changedTiddlers[this.popup]) || (this.popupTitle && changedTiddlers[this.popupTitle]) || changedAttributes.setTitle || changedAttributes.setField || changedAttributes.setIndex || changedAttributes.popupTitle || changedAttributes.disabled || changedAttributes[\\\"default\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if(changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.updateDomNodeClasses();\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.button = ButtonWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/checkbox.js\":{\"title\":\"$:/core/modules/widgets/checkbox.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/checkbox.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nCheckbox widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar CheckboxWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nCheckboxWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nCheckboxWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Create our elements\\n\\tthis.labelDomNode = this.document.createElement(\\\"label\\\");\\n\\tthis.labelDomNode.setAttribute(\\\"class\\\",this.checkboxClass);\\n\\tthis.inputDomNode = this.document.createElement(\\\"input\\\");\\n\\tthis.inputDomNode.setAttribute(\\\"type\\\",\\\"checkbox\\\");\\n\\tif(this.getValue()) {\\n\\t\\tthis.inputDomNode.setAttribute(\\\"checked\\\",\\\"true\\\");\\n\\t}\\n\\tif(this.isDisabled === \\\"yes\\\") {\\n\\t\\tthis.inputDomNode.setAttribute(\\\"disabled\\\",true);\\n\\t}\\n\\tthis.labelDomNode.appendChild(this.inputDomNode);\\n\\tthis.spanDomNode = this.document.createElement(\\\"span\\\");\\n\\tthis.labelDomNode.appendChild(this.spanDomNode);\\n\\t// Add a click event handler\\n\\t$tw.utils.addEventListeners(this.inputDomNode,[\\n\\t\\t{name: \\\"change\\\", handlerObject: this, handlerMethod: \\\"handleChangeEvent\\\"}\\n\\t]);\\n\\t// Insert the label into the DOM and render any children\\n\\tparent.insertBefore(this.labelDomNode,nextSibling);\\n\\tthis.renderChildren(this.spanDomNode,null);\\n\\tthis.domNodes.push(this.labelDomNode);\\n};\\n\\nCheckboxWidget.prototype.getValue = function() {\\n\\tvar tiddler = this.wiki.getTiddler(this.checkboxTitle);\\n\\tif(tiddler) {\\n\\t\\tif(this.checkboxTag) {\\n\\t\\t\\tif(this.checkboxInvertTag) {\\n\\t\\t\\t\\treturn !tiddler.hasTag(this.checkboxTag);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn tiddler.hasTag(this.checkboxTag);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(this.checkboxField) {\\n\\t\\t\\tvar value;\\n\\t\\t\\tif($tw.utils.hop(tiddler.fields,this.checkboxField)) {\\n\\t\\t\\t\\tvalue = tiddler.fields[this.checkboxField] || \\\"\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvalue = this.checkboxDefault || \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif(value === this.checkboxChecked) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tif(value === this.checkboxUnchecked) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(this.checkboxIndex) {\\n\\t\\t\\tvar value = this.wiki.extractTiddlerDataItem(tiddler,this.checkboxIndex,this.checkboxDefault || \\\"\\\");\\n\\t\\t\\tif(value === this.checkboxChecked) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tif(value === this.checkboxUnchecked) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tif(this.checkboxTag) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tif(this.checkboxField) {\\n\\t\\t\\tif(this.checkboxDefault === this.checkboxChecked) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tif(this.checkboxDefault === this.checkboxUnchecked) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\nCheckboxWidget.prototype.handleChangeEvent = function(event) {\\n\\tvar checked = this.inputDomNode.checked,\\n\\t\\ttiddler = this.wiki.getTiddler(this.checkboxTitle),\\n\\t\\tfallbackFields = {text: \\\"\\\"},\\n\\t\\tnewFields = {title: this.checkboxTitle},\\n\\t\\thasChanged = false,\\n\\t\\ttagCheck = false,\\n\\t\\thasTag = tiddler && tiddler.hasTag(this.checkboxTag),\\n\\t\\tvalue = checked ? this.checkboxChecked : this.checkboxUnchecked;\\n\\tif(this.checkboxTag && this.checkboxInvertTag === \\\"yes\\\") {\\n\\t\\ttagCheck = hasTag === checked;\\n\\t} else {\\n\\t\\ttagCheck = hasTag !== checked;\\n\\t}\\n\\t// Set the tag if specified\\n\\tif(this.checkboxTag && (!tiddler || tagCheck)) {\\n\\t\\tnewFields.tags = tiddler ? (tiddler.fields.tags || []).slice(0) : [];\\n\\t\\tvar pos = newFields.tags.indexOf(this.checkboxTag);\\n\\t\\tif(pos !== -1) {\\n\\t\\t\\tnewFields.tags.splice(pos,1);\\n\\t\\t}\\n\\t\\tif(this.checkboxInvertTag === \\\"yes\\\" && !checked) {\\n\\t\\t\\tnewFields.tags.push(this.checkboxTag);\\n\\t\\t} else if(this.checkboxInvertTag !== \\\"yes\\\" && checked) {\\n\\t\\t\\tnewFields.tags.push(this.checkboxTag);\\n\\t\\t}\\n\\t\\thasChanged = true;\\n\\t}\\n\\t// Set the field if specified\\n\\tif(this.checkboxField) {\\n\\t\\tif(!tiddler || tiddler.fields[this.checkboxField] !== value) {\\n\\t\\t\\tnewFields[this.checkboxField] = value;\\n\\t\\t\\thasChanged = true;\\n\\t\\t}\\n\\t}\\n\\t// Set the index if specified\\n\\tif(this.checkboxIndex) {\\n\\t\\tvar indexValue = this.wiki.extractTiddlerDataItem(this.checkboxTitle,this.checkboxIndex);\\n\\t\\tif(!tiddler || indexValue !== value) {\\n\\t\\t\\thasChanged = true;\\n\\t\\t}\\n\\t}\\n\\tif(hasChanged) {\\n\\t\\tif(this.checkboxIndex) {\\n\\t\\t\\tthis.wiki.setText(this.checkboxTitle,\\\"\\\",this.checkboxIndex,value);\\n\\t\\t} else {\\n\\t\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(this.wiki.getCreationFields(),fallbackFields,tiddler,newFields,this.wiki.getModificationFields()));\\n\\t\\t}\\n\\t}\\n\\t// Trigger actions\\n\\tif(this.checkboxActions) {\\n\\t\\tthis.invokeActionString(this.checkboxActions,this,event);\\n\\t}\\n\\tif(this.checkboxCheckActions && checked) {\\n\\t\\tthis.invokeActionString(this.checkboxCheckActions,this,event);\\n\\t}\\n\\tif(this.checkboxUncheckActions && !checked) {\\n\\t\\tthis.invokeActionString(this.checkboxUncheckActions,this,event);\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nCheckboxWidget.prototype.execute = function() {\\n\\t// Get the parameters from the attributes\\n\\tthis.checkboxActions = this.getAttribute(\\\"actions\\\");\\n\\tthis.checkboxCheckActions = this.getAttribute(\\\"checkactions\\\");\\n\\tthis.checkboxUncheckActions = this.getAttribute(\\\"uncheckactions\\\");\\n\\tthis.checkboxTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.checkboxTag = this.getAttribute(\\\"tag\\\");\\n\\tthis.checkboxField = this.getAttribute(\\\"field\\\");\\n\\tthis.checkboxIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.checkboxChecked = this.getAttribute(\\\"checked\\\");\\n\\tthis.checkboxUnchecked = this.getAttribute(\\\"unchecked\\\");\\n\\tthis.checkboxDefault = this.getAttribute(\\\"default\\\");\\n\\tthis.checkboxClass = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\tthis.checkboxInvertTag = this.getAttribute(\\\"invertTag\\\",\\\"\\\");\\n\\tthis.isDisabled = this.getAttribute(\\\"disabled\\\",\\\"no\\\");\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nCheckboxWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler || changedAttributes.tag || changedAttributes.invertTag || changedAttributes.field || changedAttributes.index || changedAttributes.checked || changedAttributes.unchecked || changedAttributes[\\\"default\\\"] || changedAttributes[\\\"class\\\"] || changedAttributes.disabled) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tvar refreshed = false;\\n\\t\\tif(changedTiddlers[this.checkboxTitle]) {\\n\\t\\t\\tthis.inputDomNode.checked = this.getValue();\\n\\t\\t\\trefreshed = true;\\n\\t\\t}\\n\\t\\treturn this.refreshChildren(changedTiddlers) || refreshed;\\n\\t}\\n};\\n\\nexports.checkbox = CheckboxWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/codeblock.js\":{\"title\":\"$:/core/modules/widgets/codeblock.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/codeblock.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nCode block node widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar CodeBlockWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nCodeBlockWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nCodeBlockWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar codeNode = this.document.createElement(\\\"code\\\"),\\n\\t\\tdomNode = this.document.createElement(\\\"pre\\\");\\n\\tcodeNode.appendChild(this.document.createTextNode(this.getAttribute(\\\"code\\\")));\\n\\tdomNode.appendChild(codeNode);\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.domNodes.push(domNode);\\n\\tif(this.postRender) {\\n\\t\\tthis.postRender();\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nCodeBlockWidget.prototype.execute = function() {\\n\\tthis.language = this.getAttribute(\\\"language\\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nCodeBlockWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.code || changedAttributes.language) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.codeblock = CodeBlockWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/count.js\":{\"title\":\"$:/core/modules/widgets/count.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/count.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nCount widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar CountWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nCountWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nCountWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar textNode = this.document.createTextNode(this.currentCount);\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nCountWidget.prototype.execute = function() {\\n\\t// Get parameters from our attributes\\n\\tthis.filter = this.getAttribute(\\\"filter\\\");\\n\\t// Execute the filter\\n\\tif(this.filter) {\\n\\t\\tthis.currentCount = this.wiki.filterTiddlers(this.filter,this).length;\\n\\t} else {\\n\\t\\tthis.currentCount = \\\"0\\\";\\n\\t}\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nCountWidget.prototype.refresh = function(changedTiddlers) {\\n\\t// Re-execute the filter to get the count\\n\\tthis.computeAttributes();\\n\\tvar oldCount = this.currentCount;\\n\\tthis.execute();\\n\\tif(this.currentCount !== oldCount) {\\n\\t\\t// Regenerate and rerender the widget and replace the existing DOM node\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n\\n};\\n\\nexports.count = CountWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/diff-text.js\":{\"title\":\"$:/core/modules/widgets/diff-text.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/diff-text.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget to display a diff between two texts\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget,\\n\\tdmp = require(\\\"$:/core/modules/utils/diff-match-patch/diff_match_patch.js\\\");\\n\\nvar DiffTextWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDiffTextWidget.prototype = new Widget();\\n\\nDiffTextWidget.prototype.invisibleCharacters = {\\n\\t\\\"\\\\n\\\": \\\"↩︎\\\\n\\\",\\n\\t\\\"\\\\r\\\": \\\"⇠\\\",\\n\\t\\\"\\\\t\\\": \\\"⇥\\\\t\\\"\\n};\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDiffTextWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create the diff\\n\\tvar dmpObject = new dmp.diff_match_patch(),\\n\\t\\tdiffs = dmpObject.diff_main(this.getAttribute(\\\"source\\\"),this.getAttribute(\\\"dest\\\"));\\n\\t// Apply required cleanup\\n\\tswitch(this.getAttribute(\\\"cleanup\\\",\\\"semantic\\\")) {\\n\\t\\tcase \\\"none\\\":\\n\\t\\t\\t// No cleanup\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"efficiency\\\":\\n\\t\\t\\tdmpObject.diff_cleanupEfficiency(diffs);\\n\\t\\t\\tbreak;\\n\\t\\tdefault: // case \\\"semantic\\\"\\n\\t\\t\\tdmpObject.diff_cleanupSemantic(diffs);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// Create the elements\\n\\tvar domContainer = this.document.createElement(\\\"div\\\"), \\n\\t\\tdomDiff = this.createDiffDom(diffs);\\n\\tparent.insertBefore(domContainer,nextSibling);\\n\\t// Set variables\\n\\tthis.setVariable(\\\"diff-count\\\",diffs.reduce(function(acc,diff) {\\n\\t\\tif(diff[0] !== dmp.DIFF_EQUAL) {\\n\\t\\t\\tacc++;\\n\\t\\t}\\n\\t\\treturn acc;\\n\\t},0).toString());\\n\\t// Render child widgets\\n\\tthis.renderChildren(domContainer,null);\\n\\t// Render the diff\\n\\tdomContainer.appendChild(domDiff);\\n\\t// Save our container\\n\\tthis.domNodes.push(domContainer);\\n};\\n\\n/*\\nCreate DOM elements representing a list of diffs\\n*/\\nDiffTextWidget.prototype.createDiffDom = function(diffs) {\\n\\tvar self = this;\\n\\t// Create the element and assign the attributes\\n\\tvar domPre = this.document.createElement(\\\"pre\\\"),\\n\\t\\tdomCode = this.document.createElement(\\\"code\\\");\\n\\t$tw.utils.each(diffs,function(diff) {\\n\\t\\tvar tag = diff[0] === dmp.DIFF_INSERT ? \\\"ins\\\" : (diff[0] === dmp.DIFF_DELETE ? \\\"del\\\" : \\\"span\\\"),\\n\\t\\t\\tclassName = diff[0] === dmp.DIFF_INSERT ? \\\"tc-diff-insert\\\" : (diff[0] === dmp.DIFF_DELETE ? \\\"tc-diff-delete\\\" : \\\"tc-diff-equal\\\"),\\n\\t\\t\\tdom = self.document.createElement(tag),\\n\\t\\t\\ttext = diff[1],\\n\\t\\t\\tcurrPos = 0,\\n\\t\\t\\tre = /([\\\\x00-\\\\x1F])/mg,\\n\\t\\t\\tmatch = re.exec(text),\\n\\t\\t\\tspan,\\n\\t\\t\\tprintable;\\n\\t\\tdom.className = className;\\n\\t\\twhile(match) {\\n\\t\\t\\tif(currPos \u003C match.index) {\\n\\t\\t\\t\\tdom.appendChild(self.document.createTextNode(text.slice(currPos,match.index)));\\n\\t\\t\\t}\\n\\t\\t\\tspan = self.document.createElement(\\\"span\\\");\\n\\t\\t\\tspan.className = \\\"tc-diff-invisible\\\";\\n\\t\\t\\tprintable = self.invisibleCharacters[match[0]] || (\\\"[0x\\\" + match[0].charCodeAt(0).toString(16) + \\\"]\\\");\\n\\t\\t\\tspan.appendChild(self.document.createTextNode(printable));\\n\\t\\t\\tdom.appendChild(span);\\n\\t\\t\\tcurrPos = match.index + match[0].length;\\n\\t\\t\\tmatch = re.exec(text);\\n\\t\\t}\\n\\t\\tif(currPos \u003C text.length) {\\n\\t\\t\\tdom.appendChild(self.document.createTextNode(text.slice(currPos)));\\n\\t\\t}\\n\\t\\tdomCode.appendChild(dom);\\n\\t});\\n\\tdomPre.appendChild(domCode);\\n\\treturn domPre;\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDiffTextWidget.prototype.execute = function() {\\n\\t// Make child widgets\\n\\tvar parseTreeNodes;\\n\\tif(this.parseTreeNode && this.parseTreeNode.children && this.parseTreeNode.children.length > 0) {\\n\\t\\tparseTreeNodes = this.parseTreeNode.children;\\n\\t} else {\\n\\t\\tparseTreeNodes = [{\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: \\\"$:/language/Diffs/CountMessage\\\"}\\n\\t\\t\\t}\\n\\t\\t}];\\n\\t}\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nDiffTextWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.source || changedAttributes.dest || changedAttributes.cleanup) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports[\\\"diff-text\\\"] = DiffTextWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/draggable.js\":{\"title\":\"$:/core/modules/widgets/draggable.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/draggable.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDraggable widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DraggableWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDraggableWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDraggableWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this,\\n\\t\\ttag,\\n\\t\\tdomNode,\\n\\t\\tclasses = [];\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Sanitise the specified tag\\n\\ttag = this.draggableTag;\\n\\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n\\t\\ttag = \\\"div\\\";\\n\\t}\\n\\t// Create our element\\n\\tdomNode = this.document.createElement(tag);\\n\\t// Assign classes\\n\\tif(this.draggableClasses) {\\n\\t\\tclasses.push(this.draggableClasses);\\n\\t}\\n\\tif(!this.dragHandleSelector) {\\n\\t\\tclasses.push(\\\"tc-draggable\\\");\\n\\t}\\n\\tdomNode.setAttribute(\\\"class\\\",classes.join(\\\" \\\"));\\n\\t// Insert the node into the DOM and render any children\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\t// Add event handlers\\n\\t$tw.utils.makeDraggable({\\n\\t\\tdomNode: domNode,\\n\\t\\tdragTiddlerFn: function() {return self.getAttribute(\\\"tiddler\\\");},\\n\\t\\tdragFilterFn: function() {return self.getAttribute(\\\"filter\\\");},\\n\\t\\tstartActions: self.startActions,\\n\\t\\tendActions: self.endActions,\\n\\t\\tdragImageType: self.dragImageType,\\n\\t\\twidget: this,\\n\\t\\tselector: self.dragHandleSelector\\n\\t});\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDraggableWidget.prototype.execute = function() {\\n\\t// Pick up our attributes\\n\\tthis.draggableTag = this.getAttribute(\\\"tag\\\",\\\"div\\\");\\n\\tthis.draggableClasses = this.getAttribute(\\\"class\\\");\\n\\tthis.startActions = this.getAttribute(\\\"startactions\\\");\\n\\tthis.endActions = this.getAttribute(\\\"endactions\\\");\\n\\tthis.dragImageType = this.getAttribute(\\\"dragimagetype\\\");\\n\\tthis.dragHandleSelector = this.getAttribute(\\\"selector\\\");\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nDraggableWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tag || changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.draggable = DraggableWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/droppable.js\":{\"title\":\"$:/core/modules/widgets/droppable.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/droppable.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDroppable widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DroppableWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDroppableWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDroppableWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this,\\n\\t\\ttag = this.parseTreeNode.isBlock ? \\\"div\\\" : \\\"span\\\",\\n\\t\\tdomNode;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tif(this.droppableTag && $tw.config.htmlUnsafeElements.indexOf(this.droppableTag) === -1) {\\n\\t\\ttag = this.droppableTag;\\n\\t}\\n\\t// Create element and assign classes\\n\\tdomNode = this.document.createElement(tag);\\n\\tthis.domNode = domNode;\\n\\tthis.assignDomNodeClasses();\\n\\t// Add event handlers\\n\\tif(this.droppableEnable) {\\n\\t\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t\\t{name: \\\"dragenter\\\", handlerObject: this, handlerMethod: \\\"handleDragEnterEvent\\\"},\\n\\t\\t\\t{name: \\\"dragover\\\", handlerObject: this, handlerMethod: \\\"handleDragOverEvent\\\"},\\n\\t\\t\\t{name: \\\"dragleave\\\", handlerObject: this, handlerMethod: \\\"handleDragLeaveEvent\\\"},\\n\\t\\t\\t{name: \\\"drop\\\", handlerObject: this, handlerMethod: \\\"handleDropEvent\\\"}\\n\\t\\t]);\\n\\t} else {\\n\\t\\t$tw.utils.addClass(this.domNode,this.disabledClass);\\n\\t}\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n\\t// Stack of outstanding enter/leave events\\n\\tthis.currentlyEntered = [];\\n};\\n\\nDroppableWidget.prototype.enterDrag = function(event) {\\n\\tif(this.currentlyEntered.indexOf(event.target) === -1) {\\n\\t\\tthis.currentlyEntered.push(event.target);\\n\\t}\\n\\t// If we're entering for the first time we need to apply highlighting\\n\\t$tw.utils.addClass(this.domNodes[0],\\\"tc-dragover\\\");\\n};\\n\\nDroppableWidget.prototype.leaveDrag = function(event) {\\n\\tvar pos = this.currentlyEntered.indexOf(event.target);\\n\\tif(pos !== -1) {\\n\\t\\tthis.currentlyEntered.splice(pos,1);\\n\\t}\\n\\t// Remove highlighting if we're leaving externally. The hacky second condition is to resolve a problem with Firefox whereby there is an erroneous dragenter event if the node being dragged is within the dropzone\\n\\tif(this.currentlyEntered.length === 0 || (this.currentlyEntered.length === 1 && this.currentlyEntered[0] === $tw.dragInProgress)) {\\n\\t\\tthis.currentlyEntered = [];\\n\\t\\tif(this.domNodes[0]) {\\n\\t\\t\\t$tw.utils.removeClass(this.domNodes[0],\\\"tc-dragover\\\");\\n\\t\\t}\\n\\t}\\n};\\n\\nDroppableWidget.prototype.handleDragEnterEvent  = function(event) {\\n\\tthis.enterDrag(event);\\n\\t// Tell the browser that we're ready to handle the drop\\n\\tevent.preventDefault();\\n\\t// Tell the browser not to ripple the drag up to any parent drop handlers\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\nDroppableWidget.prototype.handleDragOverEvent  = function(event) {\\n\\t// Check for being over a TEXTAREA or INPUT\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) !== -1) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Tell the browser that we're still interested in the drop\\n\\tevent.preventDefault();\\n\\t// Set the drop effect\\n\\tevent.dataTransfer.dropEffect = this.droppableEffect;\\n\\treturn false;\\n};\\n\\nDroppableWidget.prototype.handleDragLeaveEvent  = function(event) {\\n\\tthis.leaveDrag(event);\\n\\treturn false;\\n};\\n\\nDroppableWidget.prototype.handleDropEvent  = function(event) {\\n\\tvar self = this;\\n\\tthis.leaveDrag(event);\\n\\t// Check for being over a TEXTAREA or INPUT\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) !== -1) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar dataTransfer = event.dataTransfer;\\n\\t// Remove highlighting\\n\\t$tw.utils.removeClass(this.domNodes[0],\\\"tc-dragover\\\");\\n\\t// Try to import the various data types we understand\\n\\t$tw.utils.importDataTransfer(dataTransfer,null,function(fieldsArray) {\\n\\t\\tfieldsArray.forEach(function(fields) {\\n\\t\\t\\tself.performActions(fields.title || fields.text,event);\\n\\t\\t});\\n\\t});\\n\\t// Tell the browser that we handled the drop\\n\\tevent.preventDefault();\\n\\t// Stop the drop ripple up to any parent handlers\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\nDroppableWidget.prototype.performActions = function(title,event) {\\n\\tif(this.droppableActions) {\\n\\t\\tvar modifierKey = $tw.keyboardManager.getEventModifierKeyDescriptor(event);\\n\\t\\tthis.invokeActionString(this.droppableActions,this,event,{actionTiddler: title, modifier: modifierKey});\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDroppableWidget.prototype.execute = function() {\\n\\tthis.droppableActions = this.getAttribute(\\\"actions\\\");\\n\\tthis.droppableEffect = this.getAttribute(\\\"effect\\\",\\\"copy\\\");\\n\\tthis.droppableTag = this.getAttribute(\\\"tag\\\");\\n\\tthis.droppableEnable = (this.getAttribute(\\\"enable\\\") || \\\"yes\\\") === \\\"yes\\\";\\n\\tthis.disabledClass = this.getAttribute(\\\"disabledClass\\\",\\\"\\\");\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\nDroppableWidget.prototype.assignDomNodeClasses = function() {\\n\\tvar classes = this.getAttribute(\\\"class\\\",\\\"\\\").split(\\\" \\\");\\n\\tclasses.push(\\\"tc-droppable\\\");\\n\\tthis.domNode.className = classes.join(\\\" \\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nDroppableWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tag || changedAttributes.enable || changedAttributes.disabledClass || changedAttributes.actions || changedAttributes.effect) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if(changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.assignDomNodeClasses();\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.droppable = DroppableWidget;\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/dropzone.js\":{\"title\":\"$:/core/modules/widgets/dropzone.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/dropzone.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDropzone widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar IMPORT_TITLE = \\\"$:/Import\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DropZoneWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDropZoneWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDropZoneWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create element\\n\\tvar domNode = this.document.createElement(\\\"div\\\");\\n\\tthis.domNode = domNode;\\n\\tdomNode.className = this.dropzoneClass || \\\"tc-dropzone\\\";\\n\\t// Add event handlers\\n\\tif(this.dropzoneEnable) {\\n\\t\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t\\t{name: \\\"dragenter\\\", handlerObject: this, handlerMethod: \\\"handleDragEnterEvent\\\"},\\n\\t\\t\\t{name: \\\"dragover\\\", handlerObject: this, handlerMethod: \\\"handleDragOverEvent\\\"},\\n\\t\\t\\t{name: \\\"dragleave\\\", handlerObject: this, handlerMethod: \\\"handleDragLeaveEvent\\\"},\\n\\t\\t\\t{name: \\\"drop\\\", handlerObject: this, handlerMethod: \\\"handleDropEvent\\\"},\\n\\t\\t\\t{name: \\\"paste\\\", handlerObject: this, handlerMethod: \\\"handlePasteEvent\\\"},\\n\\t\\t\\t{name: \\\"dragend\\\", handlerObject: this, handlerMethod: \\\"handleDragEndEvent\\\"}\\n\\t\\t]);\\n\\t}\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n\\t// Stack of outstanding enter/leave events\\n\\tthis.currentlyEntered = [];\\n};\\n\\n// Handler for transient event listeners added when the dropzone has an active drag in progress\\nDropZoneWidget.prototype.handleEvent = function(event) {\\n\\tif(event.type === \\\"click\\\") {\\n\\t\\tif(this.currentlyEntered.length) {\\n\\t\\t\\tthis.resetState();\\n\\t\\t}\\n\\t} else if(event.type === \\\"dragenter\\\") {\\n\\t\\tif(event.target && event.target !== this.domNode && !$tw.utils.domContains(this.domNode,event.target)) {\\n\\t\\t\\tthis.resetState();\\n\\t\\t}\\n\\t} else if(event.type === \\\"dragleave\\\") {\\n\\t\\t// Check if drag left the window\\n\\t\\tif(event.relatedTarget === null || (event.relatedTarget && event.relatedTarget.nodeName === \\\"HTML\\\")) {\\n\\t\\t\\tthis.resetState();\\n\\t\\t}\\n\\t}\\n};\\n\\n// Reset the state of the dropzone after a drag has ended\\nDropZoneWidget.prototype.resetState = function() {\\n\\t$tw.utils.removeClass(this.domNode,\\\"tc-dragover\\\");\\n\\tthis.currentlyEntered = [];\\n\\tthis.document.body.removeEventListener(\\\"click\\\",this,true);\\n\\tthis.document.body.removeEventListener(\\\"dragenter\\\",this,true);\\n\\tthis.document.body.removeEventListener(\\\"dragleave\\\",this,true);\\n\\tthis.dragInProgress = false;\\n};\\n\\nDropZoneWidget.prototype.enterDrag = function(event) {\\n\\tif(this.currentlyEntered.indexOf(event.target) === -1) {\\n\\t\\tthis.currentlyEntered.push(event.target);\\n\\t}\\n\\tif(!this.dragInProgress) {\\n\\t\\tthis.dragInProgress = true;\\n\\t\\t// If we're entering for the first time we need to apply highlighting\\n\\t\\t$tw.utils.addClass(this.domNodes[0],\\\"tc-dragover\\\");\\n\\t\\tthis.document.body.addEventListener(\\\"click\\\",this,true);\\n\\t\\tthis.document.body.addEventListener(\\\"dragenter\\\",this,true);\\n\\t\\tthis.document.body.addEventListener(\\\"dragleave\\\",this,true);\\n\\t}\\n};\\n\\nDropZoneWidget.prototype.leaveDrag = function(event) {\\n\\tvar pos = this.currentlyEntered.indexOf(event.target);\\n\\tif(pos !== -1) {\\n\\t\\tthis.currentlyEntered.splice(pos,1);\\n\\t}\\n\\t// Remove highlighting if we're leaving externally\\n\\tif(this.currentlyEntered.length === 0) {\\n\\t\\tthis.resetState();\\n\\t}\\n};\\n\\nDropZoneWidget.prototype.handleDragEnterEvent  = function(event) {\\n\\tif($tw.dragInProgress) {\\n\\t\\treturn false;\\n\\t}\\n\\tif(this.filesOnly && !$tw.utils.dragEventContainsFiles(event)) {\\n\\t\\treturn false;\\n\\t}\\n\\tthis.enterDrag(event);\\n\\t// Tell the browser that we're ready to handle the drop\\n\\tevent.preventDefault();\\n\\t// Tell the browser not to ripple the drag up to any parent drop handlers\\n\\tevent.stopPropagation();\\n};\\n\\nDropZoneWidget.prototype.handleDragOverEvent  = function(event) {\\n\\t// Check for being over a TEXTAREA or INPUT\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) !== -1) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Check for this window being the source of the drag\\n\\tif($tw.dragInProgress) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Tell the browser that we're still interested in the drop\\n\\tevent.preventDefault();\\n\\t// Check if this is a synthetic event, IE does not allow accessing dropEffect outside of original event handler\\n\\tif(event.isTrusted) {\\n\\t\\tevent.dataTransfer.dropEffect = \\\"copy\\\"; // Explicitly show this is a copy\\n\\t}\\n};\\n\\nDropZoneWidget.prototype.handleDragLeaveEvent  = function(event) {\\n\\tthis.leaveDrag(event);\\n};\\n\\nDropZoneWidget.prototype.handleDragEndEvent = function(event) {\\n\\tthis.resetState();\\n};\\n\\nDropZoneWidget.prototype.filterByContentTypes = function(tiddlerFieldsArray) {\\n\\tvar filteredTypes,\\n\\t\\tfiltered = [],\\n\\t\\ttypes = [];\\n\\t$tw.utils.each(tiddlerFieldsArray,function(tiddlerFields) {\\n\\t\\ttypes.push(tiddlerFields.type || \\\"\\\");\\n\\t});\\n\\tfilteredTypes = this.wiki.filterTiddlers(this.contentTypesFilter,this,this.wiki.makeTiddlerIterator(types));\\n\\t$tw.utils.each(tiddlerFieldsArray,function(tiddlerFields) {\\n\\t\\tif(filteredTypes.indexOf(tiddlerFields.type) !== -1) {\\n\\t\\t\\tfiltered.push(tiddlerFields);\\n\\t\\t}\\n\\t});\\n\\treturn filtered;\\n};\\n\\nDropZoneWidget.prototype.readFileCallback = function(tiddlerFieldsArray) {\\n\\tif(this.contentTypesFilter) {\\n\\t\\ttiddlerFieldsArray = this.filterByContentTypes(tiddlerFieldsArray);\\n\\t}\\n\\tif(tiddlerFieldsArray.length) {\\n\\t\\tthis.dispatchEvent({type: \\\"tm-import-tiddlers\\\", param: JSON.stringify(tiddlerFieldsArray), autoOpenOnImport: this.autoOpenOnImport, importTitle: this.importTitle});\\n\\t\\tif(this.actions) {\\n\\t\\t\\tthis.invokeActionString(this.actions,this,event,{importTitle: this.importTitle});\\n\\t\\t}\\n\\t}\\n};\\n\\nDropZoneWidget.prototype.handleDropEvent  = function(event) {\\n\\tvar self = this,\\n\\t\\treadFileCallback = function(tiddlerFieldsArray) {\\n\\t\\t\\tself.readFileCallback(tiddlerFieldsArray);\\n\\t\\t};\\n\\tthis.leaveDrag(event);\\n\\t// Check for being over a TEXTAREA or INPUT\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) !== -1) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Check for this window being the source of the drag\\n\\tif($tw.dragInProgress) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar self = this,\\n\\t\\tdataTransfer = event.dataTransfer;\\n\\t// Remove highlighting\\n\\tthis.resetState();\\n\\t// Import any files in the drop\\n\\tvar numFiles = 0;\\n\\t// If we have type text/vnd.tiddlywiki then skip trying to import files\\n\\tif(dataTransfer.files && !$tw.utils.dragEventContainsType(event,\\\"text/vnd.tiddler\\\")) {\\n\\t\\tnumFiles = this.wiki.readFiles(dataTransfer.files,{\\n\\t\\t\\tcallback: readFileCallback,\\n\\t\\t\\tdeserializer: this.dropzoneDeserializer\\n\\t\\t});\\n\\t}\\n\\t// Try to import the various data types we understand\\n\\tif(numFiles === 0) {\\n\\t\\tvar fallbackTitle = self.wiki.generateNewTitle(\\\"Untitled\\\");\\n\\t\\t//Use the deserializer specified if any\\n\\t\\tif(this.dropzoneDeserializer) {\\n\\t\\t\\tfor(var t= 0; t\u003CdataTransfer.items.length; t++) {\\n\\t\\t\\t\\tvar item = dataTransfer.items[t];\\n\\t\\t\\t\\tif(item.kind === \\\"string\\\") {\\n\\t\\t\\t\\t\\titem.getAsString(function(str){\\n\\t\\t\\t\\t\\t\\tvar tiddlerFields = self.wiki.deserializeTiddlers(null,str,{title: fallbackTitle},{deserializer:self.dropzoneDeserializer});\\n\\t\\t\\t\\t\\t\\tif(tiddlerFields && tiddlerFields.length) {\\n\\t\\t\\t\\t\\t\\t\\treadFileCallback(tiddlerFields);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t$tw.utils.importDataTransfer(dataTransfer,fallbackTitle,readFileCallback);\\n\\t\\t}\\n\\t}\\n\\t// Tell the browser that we handled the drop\\n\\tevent.preventDefault();\\n\\t// Stop the drop ripple up to any parent handlers\\n\\tevent.stopPropagation();\\n};\\n\\nDropZoneWidget.prototype.handlePasteEvent  = function(event) {\\n\\tvar self = this,\\n\\t\\treadFileCallback = function(tiddlerFieldsArray) {\\n\\t\\t\\tself.readFileCallback(tiddlerFieldsArray);\\n\\t\\t};\\n\\t// Let the browser handle it if we're in a textarea or input box\\n\\tif([\\\"TEXTAREA\\\",\\\"INPUT\\\"].indexOf(event.target.tagName) == -1 && !event.target.isContentEditable) {\\n\\t\\tvar self = this,\\n\\t\\t\\titems = event.clipboardData.items;\\n\\t\\t// Enumerate the clipboard items\\n\\t\\tfor(var t = 0; t\u003Citems.length; t++) {\\n\\t\\t\\tvar item = items[t];\\n\\t\\t\\tif(item.kind === \\\"file\\\") {\\n\\t\\t\\t\\t// Import any files\\n\\t\\t\\t\\tthis.wiki.readFile(item.getAsFile(),{\\n\\t\\t\\t\\t\\tcallback: readFileCallback,\\n\\t\\t\\t\\t\\tdeserializer: this.dropzoneDeserializer\\n\\t\\t\\t\\t});\\n\\t\\t\\t} else if(item.kind === \\\"string\\\") {\\n\\t\\t\\t\\t// Create tiddlers from string items\\n\\t\\t\\t\\tvar tiddlerFields,\\n\\t\\t\\t\\t\\ttype = item.type;\\n\\t\\t\\t\\titem.getAsString(function(str) {\\n\\t\\t\\t\\t\\t// Use the deserializer specified if any\\n\\t\\t\\t\\t\\tif(self.dropzoneDeserializer) {\\n\\t\\t\\t\\t\\t\\ttiddlerFields = self.wiki.deserializeTiddlers(null,str,{title: self.wiki.generateNewTitle(\\\"Untitled\\\")},{deserializer:self.dropzoneDeserializer});\\n\\t\\t\\t\\t\\t\\tif(tiddlerFields && tiddlerFields.length) {\\n\\t\\t\\t\\t\\t\\t\\treadFileCallback(tiddlerFields);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\ttiddlerFields = {\\n\\t\\t\\t\\t\\t\\t\\ttitle: self.wiki.generateNewTitle(\\\"Untitled\\\"),\\n\\t\\t\\t\\t\\t\\t\\ttext: str,\\n\\t\\t\\t\\t\\t\\t\\ttype: type\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tif($tw.log.IMPORT) {\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(\\\"Importing string '\\\" + str + \\\"', type: '\\\" + type + \\\"'\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treadFileCallback([tiddlerFields]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Tell the browser that we've handled the paste\\n\\t\\tevent.stopPropagation();\\n\\t\\tevent.preventDefault();\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDropZoneWidget.prototype.execute = function() {\\n\\tthis.dropzoneClass = this.getAttribute(\\\"class\\\");\\n\\tthis.dropzoneDeserializer = this.getAttribute(\\\"deserializer\\\");\\n\\tthis.dropzoneEnable = (this.getAttribute(\\\"enable\\\") || \\\"yes\\\") === \\\"yes\\\";\\n\\tthis.autoOpenOnImport = this.getAttribute(\\\"autoOpenOnImport\\\");\\n\\tthis.importTitle = this.getAttribute(\\\"importTitle\\\",IMPORT_TITLE);\\n\\tthis.actions = this.getAttribute(\\\"actions\\\");\\n\\tthis.contentTypesFilter = this.getAttribute(\\\"contentTypesFilter\\\");\\n\\tthis.filesOnly = this.getAttribute(\\\"filesOnly\\\",\\\"no\\\") === \\\"yes\\\";\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nDropZoneWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.dropzone = DropZoneWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/edit-binary.js\":{\"title\":\"$:/core/modules/widgets/edit-binary.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/edit-binary.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEdit-binary widget; placeholder for editing binary tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar BINARY_WARNING_MESSAGE = \\\"$:/core/ui/BinaryWarning\\\";\\nvar EXPORT_BUTTON_IMAGE = \\\"$:/core/images/export-button\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EditBinaryWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEditBinaryWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEditBinaryWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEditBinaryWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tvar editTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tvar tiddler = this.wiki.getTiddler(editTitle);\\n\\tvar type = tiddler.fields.type;\\n\\tvar text = tiddler.fields.text;\\n\\t// Transclude the binary data tiddler warning message\\n\\tvar warn = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"p\\\",\\n\\t\\tchildren: [{\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: BINARY_WARNING_MESSAGE}\\n\\t\\t\\t}\\n\\t\\t}]\\n\\t};\\n\\t// Create download link based on draft tiddler title\\n\\tvar link = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"a\\\",\\n\\t\\tattributes: {\\n\\t\\t\\ttitle: {type: \\\"indirect\\\", textReference: \\\"!!draft.title\\\"},\\n\\t\\t\\tdownload: {type: \\\"indirect\\\", textReference: \\\"!!draft.title\\\"}\\n\\t\\t},\\n\\t\\tchildren: [{\\n\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttiddler: {type: \\\"string\\\", value: EXPORT_BUTTON_IMAGE}\\n\\t\\t\\t}\\n\\t\\t}]\\n\\t};\\n\\t// Set the link href to internal data URI (no external)\\n\\tif(text) {\\n\\t\\tlink.attributes.href = {\\n\\t\\t\\ttype: \\\"string\\\", \\n\\t\\t\\tvalue: \\\"data:\\\" + type + \\\";base64,\\\" + text\\n\\t\\t};\\n\\t}\\n\\t// Combine warning message and download link in a div\\n\\tvar element = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"div\\\",\\n\\t\\tattributes: {\\n\\t\\t\\tclass: {type: \\\"string\\\", value: \\\"tc-binary-warning\\\"}\\n\\t\\t},\\n\\t\\tchildren: [warn, link]\\n\\t}\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets([element]);\\n};\\n\\n/*\\nRefresh by refreshing our child widget\\n*/\\nEditBinaryWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"edit-binary\\\"] = EditBinaryWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/edit-bitmap.js\":{\"title\":\"$:/core/modules/widgets/edit-bitmap.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/edit-bitmap.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEdit-bitmap widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Default image sizes\\nvar DEFAULT_IMAGE_WIDTH = 600,\\n\\tDEFAULT_IMAGE_HEIGHT = 370,\\n\\tDEFAULT_IMAGE_TYPE = \\\"image/png\\\";\\n\\n// Configuration tiddlers\\nvar LINE_WIDTH_TITLE = \\\"$:/config/BitmapEditor/LineWidth\\\",\\n\\tLINE_COLOUR_TITLE = \\\"$:/config/BitmapEditor/Colour\\\",\\n\\tLINE_OPACITY_TITLE = \\\"$:/config/BitmapEditor/Opacity\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EditBitmapWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEditBitmapWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEditBitmapWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Initialise the editor operations if they've not been done already\\n\\tif(!this.editorOperations) {\\n\\t\\tEditBitmapWidget.prototype.editorOperations = {};\\n\\t\\t$tw.modules.applyMethods(\\\"bitmapeditoroperation\\\",this.editorOperations);\\n\\t}\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Create the wrapper for the toolbar and render its content\\n\\tthis.toolbarNode = this.document.createElement(\\\"div\\\");\\n\\tthis.toolbarNode.className = \\\"tc-editor-toolbar\\\";\\n\\tparent.insertBefore(this.toolbarNode,nextSibling);\\n\\tthis.domNodes.push(this.toolbarNode);\\n\\t// Create the on-screen canvas\\n\\tthis.canvasDomNode = $tw.utils.domMaker(\\\"canvas\\\",{\\n\\t\\tdocument: this.document,\\n\\t\\t\\\"class\\\":\\\"tc-edit-bitmapeditor\\\",\\n\\t\\teventListeners: [{\\n\\t\\t\\tname: \\\"touchstart\\\", handlerObject: this, handlerMethod: \\\"handleTouchStartEvent\\\"\\n\\t\\t},{\\n\\t\\t\\tname: \\\"touchmove\\\", handlerObject: this, handlerMethod: \\\"handleTouchMoveEvent\\\"\\n\\t\\t},{\\n\\t\\t\\tname: \\\"touchend\\\", handlerObject: this, handlerMethod: \\\"handleTouchEndEvent\\\"\\n\\t\\t},{\\n\\t\\t\\tname: \\\"mousedown\\\", handlerObject: this, handlerMethod: \\\"handleMouseDownEvent\\\"\\n\\t\\t},{\\n\\t\\t\\tname: \\\"mousemove\\\", handlerObject: this, handlerMethod: \\\"handleMouseMoveEvent\\\"\\n\\t\\t},{\\n\\t\\t\\tname: \\\"mouseup\\\", handlerObject: this, handlerMethod: \\\"handleMouseUpEvent\\\"\\n\\t\\t}]\\n\\t});\\n\\t// Set the width and height variables\\n\\tthis.setVariable(\\\"tv-bitmap-editor-width\\\",this.canvasDomNode.width + \\\"px\\\");\\n\\tthis.setVariable(\\\"tv-bitmap-editor-height\\\",this.canvasDomNode.height + \\\"px\\\");\\n\\t// Render toolbar child widgets\\n\\tthis.renderChildren(this.toolbarNode,null);\\n\\t// // Insert the elements into the DOM\\n\\tparent.insertBefore(this.canvasDomNode,nextSibling);\\n\\tthis.domNodes.push(this.canvasDomNode);\\n\\t// Load the image into the canvas\\n\\tif($tw.browser) {\\n\\t\\tthis.loadCanvas();\\n\\t}\\n\\t// Add widget message listeners\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"tm-edit-bitmap-operation\\\", handler: \\\"handleEditBitmapOperationMessage\\\"}\\n\\t]);\\n};\\n\\n/*\\nHandle an edit bitmap operation message from the toolbar\\n*/\\nEditBitmapWidget.prototype.handleEditBitmapOperationMessage = function(event) {\\n\\t// Invoke the handler\\n\\tvar handler = this.editorOperations[event.param];\\n\\tif(handler) {\\n\\t\\thandler.call(this,event);\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEditBitmapWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.editTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nJust refresh the toolbar\\n*/\\nEditBitmapWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nSet the bitmap size variables and refresh the toolbar\\n*/\\nEditBitmapWidget.prototype.refreshToolbar = function() {\\n\\t// Set the width and height variables\\n\\tthis.setVariable(\\\"tv-bitmap-editor-width\\\",this.canvasDomNode.width + \\\"px\\\");\\n\\tthis.setVariable(\\\"tv-bitmap-editor-height\\\",this.canvasDomNode.height + \\\"px\\\");\\n\\t// Refresh each of our child widgets\\n\\t$tw.utils.each(this.children,function(childWidget) {\\n\\t\\tchildWidget.refreshSelf();\\n\\t});\\n};\\n\\nEditBitmapWidget.prototype.loadCanvas = function() {\\n\\tvar tiddler = this.wiki.getTiddler(this.editTitle),\\n\\t\\tcurrImage = new Image();\\n\\t// Set up event handlers for loading the image\\n\\tvar self = this;\\n\\tcurrImage.onload = function() {\\n\\t\\t// Copy the image to the on-screen canvas\\n\\t\\tself.initCanvas(self.canvasDomNode,currImage.width,currImage.height,currImage);\\n\\t\\t// And also copy the current bitmap to the off-screen canvas\\n\\t\\tself.currCanvas = self.document.createElement(\\\"canvas\\\");\\n\\t\\tself.initCanvas(self.currCanvas,currImage.width,currImage.height,currImage);\\n\\t\\t// Set the width and height input boxes\\n\\t\\tself.refreshToolbar();\\n\\t};\\n\\tcurrImage.onerror = function() {\\n\\t\\t// Set the on-screen canvas size and clear it\\n\\t\\tself.initCanvas(self.canvasDomNode,DEFAULT_IMAGE_WIDTH,DEFAULT_IMAGE_HEIGHT);\\n\\t\\t// Set the off-screen canvas size and clear it\\n\\t\\tself.currCanvas = self.document.createElement(\\\"canvas\\\");\\n\\t\\tself.initCanvas(self.currCanvas,DEFAULT_IMAGE_WIDTH,DEFAULT_IMAGE_HEIGHT);\\n\\t\\t// Set the width and height input boxes\\n\\t\\tself.refreshToolbar();\\n\\t};\\n\\t// Get the current bitmap into an image object\\n\\tif(tiddler && tiddler.fields.type && tiddler.fields.text) {\\n\\t\\tcurrImage.src = \\\"data:\\\" + tiddler.fields.type + \\\";base64,\\\" + tiddler.fields.text;\\n\\t} else {\\n\\t\\tcurrImage.width = DEFAULT_IMAGE_WIDTH;\\n\\t\\tcurrImage.height = DEFAULT_IMAGE_HEIGHT;\\n\\t\\tcurrImage.onerror();\\n\\t}\\n};\\n\\nEditBitmapWidget.prototype.initCanvas = function(canvas,width,height,image) {\\n\\tcanvas.width = width;\\n\\tcanvas.height = height;\\n\\tvar ctx = canvas.getContext(\\\"2d\\\");\\n\\tif(image) {\\n\\t\\tctx.drawImage(image,0,0);\\n\\t} else {\\n\\t\\tctx.fillStyle = \\\"#fff\\\";\\n\\t\\tctx.fillRect(0,0,canvas.width,canvas.height);\\n\\t}\\n};\\n\\n/*\\n** Change the size of the canvas, preserving the current image\\n*/\\nEditBitmapWidget.prototype.changeCanvasSize = function(newWidth,newHeight) {\\n\\t// Create and size a new canvas\\n\\tvar newCanvas = this.document.createElement(\\\"canvas\\\");\\n\\tthis.initCanvas(newCanvas,newWidth,newHeight);\\n\\t// Copy the old image\\n\\tvar ctx = newCanvas.getContext(\\\"2d\\\");\\n\\tctx.drawImage(this.currCanvas,0,0);\\n\\t// Set the new canvas as the current one\\n\\tthis.currCanvas = newCanvas;\\n\\t// Set the size of the onscreen canvas\\n\\tthis.canvasDomNode.width = newWidth;\\n\\tthis.canvasDomNode.height = newHeight;\\n\\t// Paint the onscreen canvas with the offscreen canvas\\n\\tctx = this.canvasDomNode.getContext(\\\"2d\\\");\\n\\tctx.drawImage(this.currCanvas,0,0);\\n};\\n\\n/*\\n** Rotate the canvas left by 90 degrees\\n*/\\nEditBitmapWidget.prototype.rotateCanvasLeft = function() {\\n\\t// Get the current size of the image\\n\\tvar origWidth = this.currCanvas.width,\\n\\t\\torigHeight = this.currCanvas.height;\\n\\t// Create and size a new canvas\\n\\tvar newCanvas = this.document.createElement(\\\"canvas\\\"),\\n\\t\\tnewWidth = origHeight,\\n\\t\\tnewHeight = origWidth;\\n\\tthis.initCanvas(newCanvas,newWidth,newHeight);\\n\\t// Copy the old image\\n\\tvar ctx = newCanvas.getContext(\\\"2d\\\");\\n\\tctx.save();\\n\\tctx.translate(newWidth / 2,newHeight / 2);\\n\\tctx.rotate(-Math.PI / 2);\\n\\tctx.drawImage(this.currCanvas,-origWidth / 2,-origHeight / 2);\\n\\tctx.restore();\\n\\t// Set the new canvas as the current one\\n\\tthis.currCanvas = newCanvas;\\n\\t// Set the size of the onscreen canvas\\n\\tthis.canvasDomNode.width = newWidth;\\n\\tthis.canvasDomNode.height = newHeight;\\n\\t// Paint the onscreen canvas with the offscreen canvas\\n\\tctx = this.canvasDomNode.getContext(\\\"2d\\\");\\n\\tctx.drawImage(this.currCanvas,0,0);\\n};\\n\\nEditBitmapWidget.prototype.handleTouchStartEvent = function(event) {\\n\\tthis.brushDown = true;\\n\\tthis.strokeStart(event.touches[0].clientX,event.touches[0].clientY);\\n\\tevent.preventDefault();\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\nEditBitmapWidget.prototype.handleTouchMoveEvent = function(event) {\\n\\tif(this.brushDown) {\\n\\t\\tthis.strokeMove(event.touches[0].clientX,event.touches[0].clientY);\\n\\t}\\n\\tevent.preventDefault();\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\nEditBitmapWidget.prototype.handleTouchEndEvent = function(event) {\\n\\tif(this.brushDown) {\\n\\t\\tthis.brushDown = false;\\n\\t\\tthis.strokeEnd();\\n\\t}\\n\\tevent.preventDefault();\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\nEditBitmapWidget.prototype.handleMouseDownEvent = function(event) {\\n\\tthis.strokeStart(event.clientX,event.clientY);\\n\\tthis.brushDown = true;\\n\\tevent.preventDefault();\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\nEditBitmapWidget.prototype.handleMouseMoveEvent = function(event) {\\n\\tif(this.brushDown) {\\n\\t\\tthis.strokeMove(event.clientX,event.clientY);\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\t\\treturn false;\\n\\t}\\n\\treturn true;\\n};\\n\\nEditBitmapWidget.prototype.handleMouseUpEvent = function(event) {\\n\\tif(this.brushDown) {\\n\\t\\tthis.brushDown = false;\\n\\t\\tthis.strokeEnd();\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\t\\treturn false;\\n\\t}\\n\\treturn true;\\n};\\n\\nEditBitmapWidget.prototype.adjustCoordinates = function(x,y) {\\n\\tvar canvasRect = this.canvasDomNode.getBoundingClientRect(),\\n\\t\\tscale = this.canvasDomNode.width/canvasRect.width;\\n\\treturn {x: (x - canvasRect.left) * scale, y: (y - canvasRect.top) * scale};\\n};\\n\\nEditBitmapWidget.prototype.strokeStart = function(x,y) {\\n\\t// Start off a new stroke\\n\\tthis.stroke = [this.adjustCoordinates(x,y)];\\n};\\n\\nEditBitmapWidget.prototype.strokeMove = function(x,y) {\\n\\tvar ctx = this.canvasDomNode.getContext(\\\"2d\\\"),\\n\\t\\tt;\\n\\t// Add the new position to the end of the stroke\\n\\tthis.stroke.push(this.adjustCoordinates(x,y));\\n\\t// Redraw the previous image\\n\\tctx.drawImage(this.currCanvas,0,0);\\n\\t// Render the stroke\\n\\tctx.globalAlpha = parseFloat(this.wiki.getTiddlerText(LINE_OPACITY_TITLE,\\\"1.0\\\"));\\n\\tctx.strokeStyle = this.wiki.getTiddlerText(LINE_COLOUR_TITLE,\\\"#ff0\\\");\\n\\tctx.lineWidth = parseFloat(this.wiki.getTiddlerText(LINE_WIDTH_TITLE,\\\"3\\\"));\\n\\tctx.lineCap = \\\"round\\\";\\n\\tctx.lineJoin = \\\"round\\\";\\n\\tctx.beginPath();\\n\\tctx.moveTo(this.stroke[0].x,this.stroke[0].y);\\n\\tfor(t=1; t\u003Cthis.stroke.length-1; t++) {\\n\\t\\tvar s1 = this.stroke[t],\\n\\t\\t\\ts2 = this.stroke[t-1],\\n\\t\\t\\ttx = (s1.x + s2.x)/2,\\n\\t\\t\\tty = (s1.y + s2.y)/2;\\n\\t\\tctx.quadraticCurveTo(s2.x,s2.y,tx,ty);\\n\\t}\\n\\tctx.stroke();\\n};\\n\\nEditBitmapWidget.prototype.strokeEnd = function() {\\n\\t// Copy the bitmap to the off-screen canvas\\n\\tvar ctx = this.currCanvas.getContext(\\\"2d\\\");\\n\\tctx.drawImage(this.canvasDomNode,0,0);\\n\\t// Save the image into the tiddler\\n\\tthis.saveChanges();\\n};\\n\\nEditBitmapWidget.prototype.saveChanges = function() {\\n\\tvar tiddler = this.wiki.getTiddler(this.editTitle) || new $tw.Tiddler({title: this.editTitle,type: DEFAULT_IMAGE_TYPE});\\n\\t// data URIs look like \\\"data:\u003Ctype>;base64,\u003Ctext>\\\"\\n\\tvar dataURL = this.canvasDomNode.toDataURL(tiddler.fields.type),\\n\\t\\tposColon = dataURL.indexOf(\\\":\\\"),\\n\\t\\tposSemiColon = dataURL.indexOf(\\\";\\\"),\\n\\t\\tposComma = dataURL.indexOf(\\\",\\\"),\\n\\t\\ttype = dataURL.substring(posColon+1,posSemiColon),\\n\\t\\ttext = dataURL.substring(posComma+1);\\n\\tvar update = {type: type, text: text};\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(this.wiki.getModificationFields(),tiddler,update,this.wiki.getCreationFields()));\\n};\\n\\nexports[\\\"edit-bitmap\\\"] = EditBitmapWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/edit-shortcut.js\":{\"title\":\"$:/core/modules/widgets/edit-shortcut.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/edit-shortcut.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget to display an editable keyboard shortcut\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EditShortcutWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEditShortcutWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEditShortcutWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.inputNode = this.document.createElement(\\\"input\\\");\\n\\t// Assign classes\\n\\tif(this.shortcutClass) {\\n\\t\\tthis.inputNode.className = this.shortcutClass;\\n\\t}\\n\\t// Assign other attributes\\n\\tif(this.shortcutStyle) {\\n\\t\\tthis.inputNode.setAttribute(\\\"style\\\",this.shortcutStyle);\\n\\t}\\n\\tif(this.shortcutTooltip) {\\n\\t\\tthis.inputNode.setAttribute(\\\"title\\\",this.shortcutTooltip);\\n\\t}\\n\\tif(this.shortcutPlaceholder) {\\n\\t\\tthis.inputNode.setAttribute(\\\"placeholder\\\",this.shortcutPlaceholder);\\n\\t}\\n\\tif(this.shortcutAriaLabel) {\\n\\t\\tthis.inputNode.setAttribute(\\\"aria-label\\\",this.shortcutAriaLabel);\\n\\t}\\n\\t// Assign the current shortcut\\n\\tthis.updateInputNode();\\n\\t// Add event handlers\\n\\t$tw.utils.addEventListeners(this.inputNode,[\\n\\t\\t{name: \\\"keydown\\\", handlerObject: this, handlerMethod: \\\"handleKeydownEvent\\\"}\\n\\t]);\\n\\t// Link into the DOM\\n\\tparent.insertBefore(this.inputNode,nextSibling);\\n\\tthis.domNodes.push(this.inputNode);\\n\\t// Focus the input Node if focus === \\\"yes\\\" or focus === \\\"true\\\"\\n\\tif(this.shortcutFocus === \\\"yes\\\" || this.shortcutFocus === \\\"true\\\") {\\n\\t\\tthis.focus();\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEditShortcutWidget.prototype.execute = function() {\\n\\tthis.shortcutTiddler = this.getAttribute(\\\"tiddler\\\");\\n\\tthis.shortcutField = this.getAttribute(\\\"field\\\");\\n\\tthis.shortcutIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.shortcutPlaceholder = this.getAttribute(\\\"placeholder\\\");\\n\\tthis.shortcutDefault = this.getAttribute(\\\"default\\\",\\\"\\\");\\n\\tthis.shortcutClass = this.getAttribute(\\\"class\\\");\\n\\tthis.shortcutStyle = this.getAttribute(\\\"style\\\");\\n\\tthis.shortcutTooltip = this.getAttribute(\\\"tooltip\\\");\\n\\tthis.shortcutAriaLabel = this.getAttribute(\\\"aria-label\\\");\\n\\tthis.shortcutFocus = this.getAttribute(\\\"focus\\\");\\n};\\n\\n/*\\nUpdate the value of the input node\\n*/\\nEditShortcutWidget.prototype.updateInputNode = function() {\\n\\tif(this.shortcutField) {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.shortcutTiddler);\\n\\t\\tif(tiddler && $tw.utils.hop(tiddler.fields,this.shortcutField)) {\\n\\t\\t\\tthis.inputNode.value = tiddler.getFieldString(this.shortcutField);\\n\\t\\t} else {\\n\\t\\t\\tthis.inputNode.value = this.shortcutDefault;\\n\\t\\t}\\n\\t} else if(this.shortcutIndex) {\\n\\t\\tthis.inputNode.value = this.wiki.extractTiddlerDataItem(this.shortcutTiddler,this.shortcutIndex,this.shortcutDefault);\\n\\t} else {\\n\\t\\tthis.inputNode.value = this.wiki.getTiddlerText(this.shortcutTiddler,this.shortcutDefault);\\n\\t}\\n};\\n\\n/*\\nHandle a dom \\\"keydown\\\" event\\n*/\\nEditShortcutWidget.prototype.handleKeydownEvent = function(event) {\\n\\t// Ignore shift, ctrl, meta, alt\\n\\tif(event.keyCode && $tw.keyboardManager.getModifierKeys().indexOf(event.keyCode) === -1) {\\n\\t\\t// Get the shortcut text representation\\n\\t\\tvar value = $tw.keyboardManager.getPrintableShortcuts([{\\n\\t\\t\\tctrlKey: event.ctrlKey,\\n\\t\\t\\tshiftKey: event.shiftKey,\\n\\t\\t\\taltKey: event.altKey,\\n\\t\\t\\tmetaKey: event.metaKey,\\n\\t\\t\\tkeyCode: event.keyCode\\n\\t\\t}]);\\n\\t\\tif(value.length > 0) {\\n\\t\\t\\tthis.wiki.setText(this.shortcutTiddler,this.shortcutField,this.shortcutIndex,value[0]);\\n\\t\\t}\\n\\t\\t// Ignore the keydown if it was already handled\\n\\t\\tevent.preventDefault();\\n\\t\\tevent.stopPropagation();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\n/*\\nfocus the input node\\n*/\\nEditShortcutWidget.prototype.focus = function() {\\n\\tif(this.inputNode.focus && this.inputNode.select) {\\n\\t\\tthis.inputNode.focus();\\n\\t\\tthis.inputNode.select();\\n\\t}\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget needed re-rendering\\n*/\\nEditShortcutWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes.placeholder || changedAttributes[\\\"default\\\"] || changedAttributes[\\\"class\\\"] || changedAttributes.style || changedAttributes.tooltip || changedAttributes[\\\"aria-label\\\"] || changedAttributes.focus) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if(changedTiddlers[this.shortcutTiddler]) {\\n\\t\\tthis.updateInputNode();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports[\\\"edit-shortcut\\\"] = EditShortcutWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/edit-text.js\":{\"title\":\"$:/core/modules/widgets/edit-text.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/edit-text.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEdit-text widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar editTextWidgetFactory = require(\\\"$:/core/modules/editor/factory.js\\\").editTextWidgetFactory,\\n\\tFramedEngine = require(\\\"$:/core/modules/editor/engines/framed.js\\\").FramedEngine,\\n\\tSimpleEngine = require(\\\"$:/core/modules/editor/engines/simple.js\\\").SimpleEngine;\\n\\nexports[\\\"edit-text\\\"] = editTextWidgetFactory(FramedEngine,SimpleEngine);\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/edit.js\":{\"title\":\"$:/core/modules/widgets/edit.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/edit.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEdit widget is a meta-widget chooses the appropriate actual editting widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EditWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEditWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEditWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n// Mappings from content type to editor type are stored in tiddlers with this prefix\\nvar EDITOR_MAPPING_PREFIX = \\\"$:/config/EditorTypeMappings/\\\";\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEditWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.editTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.editField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\tthis.editIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.editClass = this.getAttribute(\\\"class\\\");\\n\\tthis.editPlaceholder = this.getAttribute(\\\"placeholder\\\");\\n\\tthis.editTabIndex = this.getAttribute(\\\"tabindex\\\");\\n\\tthis.editFocus = this.getAttribute(\\\"focus\\\",\\\"\\\");\\n\\tthis.editCancelPopups = this.getAttribute(\\\"cancelPopups\\\",\\\"\\\");\\n\\tthis.editInputActions = this.getAttribute(\\\"inputActions\\\");\\n\\tthis.editRefreshTitle = this.getAttribute(\\\"refreshTitle\\\");\\n\\tthis.editAutoComplete = this.getAttribute(\\\"autocomplete\\\");\\n\\t// Choose the appropriate edit widget\\n\\tthis.editorType = this.getEditorType();\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets([{\\n\\t\\ttype: \\\"edit-\\\" + this.editorType,\\n\\t\\tattributes: this.parseTreeNode.attributes,\\n\\t\\tchildren: this.parseTreeNode.children\\n\\t}]);\\n};\\n\\nEditWidget.prototype.getEditorType = function() {\\n\\t// Get the content type of the thing we're editing\\n\\tvar type;\\n\\tif(this.editField === \\\"text\\\") {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.editTitle);\\n\\t\\tif(tiddler) {\\n\\t\\t\\ttype = tiddler.fields.type;\\n\\t\\t}\\n\\t}\\n\\ttype = type || \\\"text/vnd.tiddlywiki\\\";\\n\\tvar editorType = this.wiki.getTiddlerText(EDITOR_MAPPING_PREFIX + type);\\n\\tif(!editorType) {\\n\\t\\tvar typeInfo = $tw.config.contentTypeInfo[type];\\n\\t\\tif(typeInfo && typeInfo.encoding === \\\"base64\\\") {\\n\\t\\t\\teditorType = \\\"binary\\\";\\n\\t\\t} else {\\n\\t\\t\\teditorType = \\\"text\\\";\\n\\t\\t}\\n\\t}\\n\\treturn editorType;\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nEditWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// Refresh if an attribute has changed, or the type associated with the target tiddler has changed\\n\\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes.tabindex || changedAttributes.cancelPopups || changedAttributes.inputActions || changedAttributes.refreshTitle || changedAttributes.autocomplete || (changedTiddlers[this.editTitle] && this.getEditorType() !== this.editorType)) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.edit = EditWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/element.js\":{\"title\":\"$:/core/modules/widgets/element.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/element.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nElement widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ElementWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nElementWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nElementWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\t// Neuter blacklisted elements\\n\\tthis.tag = this.parseTreeNode.tag;\\n\\tif($tw.config.htmlUnsafeElements.indexOf(this.tag) !== -1) {\\n\\t\\tthis.tag = \\\"safe-\\\" + this.tag;\\n\\t}\\n\\t// Adjust headings by the current base level\\n\\tvar headingLevel = [\\\"h1\\\",\\\"h2\\\",\\\"h3\\\",\\\"h4\\\",\\\"h5\\\",\\\"h6\\\"].indexOf(this.tag);\\n\\tif(headingLevel !== -1) {\\n\\t\\tvar baseLevel = parseInt(this.getVariable(\\\"tv-adjust-heading-level\\\",\\\"0\\\"),10) || 0;\\n\\t\\theadingLevel = Math.min(Math.max(headingLevel + 1 + baseLevel,1),6);\\n\\t\\tthis.tag = \\\"h\\\" + headingLevel;\\n\\t}\\n\\t// Select the namespace for the tag\\n\\tvar tagNamespaces = {\\n\\t\\t\\tsvg: \\\"http://www.w3.org/2000/svg\\\",\\n\\t\\t\\tmath: \\\"http://www.w3.org/1998/Math/MathML\\\",\\n\\t\\t\\tbody: \\\"http://www.w3.org/1999/xhtml\\\"\\n\\t\\t};\\n\\tthis.namespace = tagNamespaces[this.tag];\\n\\tif(this.namespace) {\\n\\t\\tthis.setVariable(\\\"namespace\\\",this.namespace);\\n\\t} else {\\n\\t\\tthis.namespace = this.getVariable(\\\"namespace\\\",{defaultValue: \\\"http://www.w3.org/1999/xhtml\\\"});\\n\\t}\\n\\t// Invoke the th-rendering-element hook\\n\\tvar parseTreeNodes = $tw.hooks.invokeHook(\\\"th-rendering-element\\\",null,this);\\n\\tthis.isReplaced = !!parseTreeNodes;\\n\\tif(parseTreeNodes) {\\n\\t\\t// Use the parse tree nodes provided by the hook\\n\\t\\tthis.makeChildWidgets(parseTreeNodes);\\n\\t\\tthis.renderChildren(this.parentDomNode,null);\\n\\t\\treturn;\\n\\t}\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n\\t// Create the DOM node and render children\\n\\tvar domNode = this.document.createElementNS(this.namespace,this.tag);\\n\\tthis.assignAttributes(domNode,{excludeEventAttributes: true});\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nElementWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes(),\\n\\t\\thasChangedAttributes = $tw.utils.count(changedAttributes) > 0;\\n\\tif(hasChangedAttributes) {\\n\\t\\tif(!this.isReplaced) {\\n\\t\\t\\t// Update our attributes\\n\\t\\t\\tthis.assignAttributes(this.domNodes[0],{excludeEventAttributes: true});\\n\\t\\t} else {\\n\\t\\t\\t// If we were replaced then completely refresh ourselves\\n\\t\\t\\treturn this.refreshSelf();\\n\\t\\t}\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers) || hasChangedAttributes;\\n};\\n\\nexports.element = ElementWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/encrypt.js\":{\"title\":\"$:/core/modules/widgets/encrypt.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/encrypt.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEncrypt widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EncryptWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEncryptWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEncryptWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar textNode = this.document.createTextNode(this.encryptedText);\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEncryptWidget.prototype.execute = function() {\\n\\t// Get parameters from our attributes\\n\\tthis.filter = this.getAttribute(\\\"filter\\\",\\\"[!is[system]]\\\");\\n\\t// Encrypt the filtered tiddlers\\n\\tvar tiddlers = this.wiki.filterTiddlers(this.filter),\\n\\t\\tjson = {},\\n\\t\\tself = this;\\n\\t$tw.utils.each(tiddlers,function(title) {\\n\\t\\tvar tiddler = self.wiki.getTiddler(title),\\n\\t\\t\\tjsonTiddler = {};\\n\\t\\tfor(var f in tiddler.fields) {\\n\\t\\t\\tjsonTiddler[f] = tiddler.getFieldString(f);\\n\\t\\t}\\n\\t\\tjson[title] = jsonTiddler;\\n\\t});\\n\\tthis.encryptedText = $tw.utils.htmlEncode($tw.crypto.encrypt(JSON.stringify(json)));\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nEncryptWidget.prototype.refresh = function(changedTiddlers) {\\n\\t// We don't need to worry about refreshing because the encrypt widget isn't for interactive use\\n\\treturn false;\\n};\\n\\nexports.encrypt = EncryptWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/entity.js\":{\"title\":\"$:/core/modules/widgets/entity.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/entity.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nHTML entity widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EntityWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEntityWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEntityWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar entityString = this.getAttribute(\\\"entity\\\",this.parseTreeNode.entity || \\\"\\\"),\\n\\t\\ttextNode = this.document.createTextNode($tw.utils.entityDecode(entityString));\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEntityWidget.prototype.execute = function() {\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nEntityWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.entity) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.entity = EntityWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/eventcatcher.js\":{\"title\":\"$:/core/modules/widgets/eventcatcher.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/eventcatcher.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nEvent handler widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EventWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nEventWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nEventWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create element\\n\\tvar tag = this.parseTreeNode.isBlock ? \\\"div\\\" : \\\"span\\\";\\n\\tif(this.elementTag && $tw.config.htmlUnsafeElements.indexOf(this.elementTag) === -1) {\\n\\t\\ttag = this.elementTag;\\n\\t}\\n\\tvar domNode = this.document.createElement(tag);\\n\\tthis.domNode = domNode;\\n\\t// Assign classes\\n\\tthis.assignDomNodeClasses();\\n\\t// Add our event handler\\n\\t$tw.utils.each(this.types,function(type) {\\n\\t\\tdomNode.addEventListener(type,function(event) {\\n\\t\\t\\tvar selector = self.getAttribute(\\\"selector\\\"),\\n\\t\\t\\t\\tmatchSelector = self.getAttribute(\\\"matchSelector\\\"),\\n\\t\\t\\t\\tactions = self.getAttribute(\\\"$\\\"+type) || self.getAttribute(\\\"actions-\\\"+type),\\n\\t\\t\\t\\tstopPropagation = self.getAttribute(\\\"stopPropagation\\\",\\\"onaction\\\"),\\n\\t\\t\\t\\tselectedNode = event.target,\\n\\t\\t\\t\\tselectedNodeRect,\\n\\t\\t\\t\\tcatcherNodeRect,\\n\\t\\t\\t\\tvariables = {};\\n\\t\\t\\t// Firefox can fire dragover and dragenter events on text nodes instead of their parents\\n\\t\\t\\tif(selectedNode.nodeType === 3) {\\n\\t\\t\\t\\tselectedNode = selectedNode.parentNode;\\n\\t\\t\\t}\\n\\t\\t\\t// Check that the selected node matches any matchSelector\\n\\t\\t\\tif(matchSelector && !$tw.utils.domMatchesSelector(selectedNode,matchSelector)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tif(selector) {\\n\\t\\t\\t\\t// Search ancestors for a node that matches the selector\\n\\t\\t\\t\\twhile(!$tw.utils.domMatchesSelector(selectedNode,selector) && selectedNode !== domNode) {\\n\\t\\t\\t\\t\\tselectedNode = selectedNode.parentNode;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Exit if we didn't find one\\n\\t\\t\\t\\tif(selectedNode === domNode) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Only set up variables if we have actions to invoke\\n\\t\\t\\t\\tif(actions) {\\n\\t\\t\\t\\t\\t$tw.utils.each(selectedNode.attributes,function(attribute) {\\n\\t\\t\\t\\t\\t\\tvariables[\\\"dom-\\\" + attribute.name] = attribute.value.toString();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t//Add a variable with a popup coordinate string for the selected node\\n\\t\\t\\t\\t\\tvariables[\\\"tv-popup-coords\\\"] = \\\"(\\\" + selectedNode.offsetLeft + \\\",\\\" + selectedNode.offsetTop +\\\",\\\" + selectedNode.offsetWidth + \\\",\\\" + selectedNode.offsetHeight + \\\")\\\";\\n\\n\\t\\t\\t\\t\\t//Add variables for offset of selected node\\n\\t\\t\\t\\t\\tvariables[\\\"tv-selectednode-posx\\\"] = selectedNode.offsetLeft.toString();\\n\\t\\t\\t\\t\\tvariables[\\\"tv-selectednode-posy\\\"] = selectedNode.offsetTop.toString();\\n\\t\\t\\t\\t\\tvariables[\\\"tv-selectednode-width\\\"] = selectedNode.offsetWidth.toString();\\n\\t\\t\\t\\t\\tvariables[\\\"tv-selectednode-height\\\"] = selectedNode.offsetHeight.toString();\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tif(event.clientX && event.clientY) {\\n\\t\\t\\t\\t\\t\\t//Add variables for event X and Y position relative to selected node\\n\\t\\t\\t\\t\\t\\tselectedNodeRect = selectedNode.getBoundingClientRect();\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-fromselected-posx\\\"] = (event.clientX - selectedNodeRect.left).toString();\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-fromselected-posy\\\"] = (event.clientY - selectedNodeRect.top).toString();\\n\\n\\t\\t\\t\\t\\t\\t//Add variables for event X and Y position relative to event catcher node\\n\\t\\t\\t\\t\\t\\tcatcherNodeRect = self.domNode.getBoundingClientRect();\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-fromcatcher-posx\\\"] = (event.clientX - catcherNodeRect.left).toString();\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-fromcatcher-posy\\\"] = (event.clientY - catcherNodeRect.top).toString();\\n\\n\\t\\t\\t\\t\\t\\t//Add variables for event X and Y position relative to the viewport\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-fromviewport-posx\\\"] = event.clientX.toString();\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-fromviewport-posy\\\"] = event.clientY.toString();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Execute our actions with the variables\\n\\t\\t\\tif(actions) {\\n\\t\\t\\t\\t// Add a variable for the modifier key\\n\\t\\t\\t\\tvariables.modifier = $tw.keyboardManager.getEventModifierKeyDescriptor(event);\\n\\t\\t\\t\\t// Add a variable for the mouse button\\n\\t\\t\\t\\tif(\\\"button\\\" in event) {\\n\\t\\t\\t\\t\\tif(event.button === 0) {\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-mousebutton\\\"] = \\\"left\\\";\\n\\t\\t\\t\\t\\t} else if(event.button === 1) {\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-mousebutton\\\"] = \\\"middle\\\";\\n\\t\\t\\t\\t\\t} else if(event.button === 2) {\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-mousebutton\\\"] = \\\"right\\\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvariables[\\\"event-type\\\"] = event.type.toString();\\n\\t\\t\\t\\tif(typeof event.detail === \\\"object\\\" && !!event.detail) {\\n\\t\\t\\t\\t\\t$tw.utils.each(event.detail,function(detailValue,detail) {\\n\\t\\t\\t\\t\\t\\tvariables[\\\"event-detail-\\\" + detail] = detailValue.toString();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else if(!!event.detail) {\\n\\t\\t\\t\\t\\tvariables[\\\"event-detail\\\"] = event.detail.toString();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tself.invokeActionString(actions,self,event,variables);\\n\\t\\t\\t}\\n\\t\\t\\tif((actions && stopPropagation === \\\"onaction\\\") || stopPropagation === \\\"always\\\") {\\n\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t},false);\\n\\t});\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nEventWidget.prototype.execute = function() {\\n\\tvar self = this;\\n\\t// Get attributes that require a refresh on change\\n\\tthis.types = [];\\n\\t$tw.utils.each(this.attributes,function(value,key) {\\n\\t\\tif(key.charAt(0) === \\\"$\\\") {\\n\\t\\t\\tself.types.push(key.slice(1));\\n\\t\\t}\\n\\t});\\n\\tif(!this.types.length) {\\n\\t\\tthis.types = this.getAttribute(\\\"events\\\",\\\"\\\").split(\\\" \\\");\\n\\t}\\n\\tthis.elementTag = this.getAttribute(\\\"tag\\\");\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\nEventWidget.prototype.assignDomNodeClasses = function() {\\n\\tvar classes = this.getAttribute(\\\"class\\\",\\\"\\\").split(\\\" \\\");\\n\\tclasses.push(\\\"tc-eventcatcher\\\");\\n\\tthis.domNode.className = classes.join(\\\" \\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nEventWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes(),\\n\\t\\tchangedAttributesCount = $tw.utils.count(changedAttributes);\\n\\tif(changedAttributesCount === 1 && changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.assignDomNodeClasses();\\n\\t} else if(changedAttributesCount > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.eventcatcher = EventWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/fieldmangler.js\":{\"title\":\"$:/core/modules/widgets/fieldmangler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/fieldmangler.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nField mangler widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar FieldManglerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nFieldManglerWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nFieldManglerWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"tm-remove-field\\\", handler: \\\"handleRemoveFieldEvent\\\"},\\n\\t\\t{type: \\\"tm-add-field\\\", handler: \\\"handleAddFieldEvent\\\"},\\n\\t\\t{type: \\\"tm-remove-tag\\\", handler: \\\"handleRemoveTagEvent\\\"},\\n\\t\\t{type: \\\"tm-add-tag\\\", handler: \\\"handleAddTagEvent\\\"}\\n\\t]);\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nFieldManglerWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.mangleTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nFieldManglerWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nFieldManglerWidget.prototype.handleRemoveFieldEvent = function(event) {\\n\\tvar tiddler = this.wiki.getTiddler(this.mangleTitle),\\n\\t\\tdeletion = {};\\n\\tdeletion[event.param] = undefined;\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,deletion));\\n\\treturn false;\\n};\\n\\nFieldManglerWidget.prototype.handleAddFieldEvent = function(event) {\\n\\tvar tiddler = this.wiki.getTiddler(this.mangleTitle),\\n\\t\\taddition = this.wiki.getModificationFields(),\\n\\t\\taddField = function(name,value) {\\n\\t\\t\\tvar trimmedName = name.trim();\\n\\t\\t\\tif(!value && tiddler) {\\n\\t\\t\\t\\tvalue = tiddler.fields[trimmedName];\\n\\t\\t\\t}\\n\\t\\t\\taddition[trimmedName] = value || \\\"\\\";\\n\\t\\t\\treturn;\\n\\t\\t};\\n\\taddition.title = this.mangleTitle;\\n\\tif(typeof event.param === \\\"string\\\") {\\n\\t\\taddField(event.param,\\\"\\\");\\n\\t}\\n\\tif(typeof event.paramObject === \\\"object\\\") {\\n\\t\\tfor(var name in event.paramObject) {\\n\\t\\t\\taddField(name,event.paramObject[name]);\\n\\t\\t}\\n\\t}\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,addition));\\n\\treturn false;\\n};\\n\\nFieldManglerWidget.prototype.handleRemoveTagEvent = function(event) {\\n\\tvar tiddler = this.wiki.getTiddler(this.mangleTitle),\\n\\t\\tmodification = this.wiki.getModificationFields();\\n\\tif(tiddler && tiddler.fields.tags) {\\n\\t\\tvar p = tiddler.fields.tags.indexOf(event.param);\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tmodification.tags = (tiddler.fields.tags || []).slice(0);\\n\\t\\t\\tmodification.tags.splice(p,1);\\n\\t\\t\\tif(modification.tags.length === 0) {\\n\\t\\t\\t\\tmodification.tags = undefined;\\n\\t\\t\\t}\\n\\t\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\nFieldManglerWidget.prototype.handleAddTagEvent = function(event) {\\n\\tvar tiddler = this.wiki.getTiddler(this.mangleTitle),\\n\\t\\tmodification = this.wiki.getModificationFields();\\n\\tif(tiddler && typeof event.param === \\\"string\\\") {\\n\\t\\tvar tag = event.param.trim();\\n\\t\\tif(tag !== \\\"\\\") {\\n\\t\\t\\tmodification.tags = (tiddler.fields.tags || []).slice(0);\\n\\t\\t\\t$tw.utils.pushTop(modification.tags,tag);\\n\\t\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));\\n\\t\\t}\\n\\t} else if(typeof event.param === \\\"string\\\" && event.param.trim() !== \\\"\\\" && this.mangleTitle.trim() !== \\\"\\\") {\\n\\t\\tvar tag = [];\\n\\t\\ttag.push(event.param.trim());\\n\\t\\tthis.wiki.addTiddler(new $tw.Tiddler({title: this.mangleTitle, tags: tag},modification));\\n\\t}\\n\\treturn false;\\n};\\n\\nexports.fieldmangler = FieldManglerWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/fields.js\":{\"title\":\"$:/core/modules/widgets/fields.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/fields.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nFields widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar FieldsWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nFieldsWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nFieldsWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar textNode = this.document.createTextNode(this.text);\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nFieldsWidget.prototype.execute = function() {\\n\\t// Get parameters from our attributes\\n\\tthis.tiddlerTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.template = this.getAttribute(\\\"template\\\");\\n\\tthis.sort = this.getAttribute(\\\"sort\\\",\\\"yes\\\") === \\\"yes\\\";\\n\\tthis.sortReverse = this.getAttribute(\\\"sortReverse\\\",\\\"no\\\") === \\\"yes\\\";\\n\\tthis.exclude = this.getAttribute(\\\"exclude\\\");\\n\\tthis.include = this.getAttribute(\\\"include\\\",null);\\n\\tthis.stripTitlePrefix = this.getAttribute(\\\"stripTitlePrefix\\\",\\\"no\\\") === \\\"yes\\\";\\n\\t// Get the value to display\\n\\tvar tiddler = this.wiki.getTiddler(this.tiddlerTitle);\\n\\n\\t// Get the inclusion and exclusion list\\n\\tvar excludeArr = (this.exclude) ? this.exclude.split(\\\" \\\") : [\\\"text\\\"];\\n\\t// Include takes precedence\\n\\tvar includeArr = (this.include) ? this.include.split(\\\" \\\") : null;\\n\\n\\t// Compose the template\\n\\tvar text = [];\\n\\tif(this.template && tiddler) {\\n\\t\\tvar fields = [];\\n\\t\\tif (includeArr) { // Include takes precedence\\n\\t\\t\\tfor(var i=0; i\u003CincludeArr.length; i++) {\\n\\t\\t\\t\\tif(tiddler.fields[includeArr[i]]) {\\n\\t\\t\\t\\t\\tfields.push(includeArr[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tfor(var fieldName in tiddler.fields) {\\n\\t\\t\\t\\tif(excludeArr.indexOf(fieldName) === -1) {\\n\\t\\t\\t\\t\\tfields.push(fieldName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (this.sort) fields.sort();\\n\\t\\tif (this.sortReverse) fields.reverse();\\n\\t\\tfor(var f=0, fmax=fields.length; f\u003Cfmax; f++) {\\n\\t\\t\\tfieldName = fields[f];\\n\\t\\t\\tvar row = this.template,\\n\\t\\t\\t\\tvalue = tiddler.getFieldString(fieldName);\\n\\t\\t\\tif(this.stripTitlePrefix && fieldName === \\\"title\\\") {\\n\\t\\t\\t\\tvar reStrip = /^\\\\{[^\\\\}]+\\\\}(.+)/mg,\\n\\t\\t\\t\\t\\treMatch = reStrip.exec(value);\\n\\t\\t\\t\\tif(reMatch) {\\n\\t\\t\\t\\t\\tvalue = reMatch[1];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trow = $tw.utils.replaceString(row,\\\"$name$\\\",fieldName);\\n\\t\\t\\trow = $tw.utils.replaceString(row,\\\"$value$\\\",value);\\n\\t\\t\\trow = $tw.utils.replaceString(row,\\\"$encoded_value$\\\",$tw.utils.htmlEncode(value));\\n\\t\\t\\ttext.push(row);\\n\\t\\t}\\n\\t}\\n\\tthis.text = text.join(\\\"\\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nFieldsWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif( changedAttributes.tiddler || changedAttributes.template || changedAttributes.exclude ||\\n\\t\\tchangedAttributes.include || changedAttributes.sort || changedAttributes.sortReverse ||\\n\\t\\tchangedTiddlers[this.tiddlerTitle] || changedAttributes.stripTitlePrefix) {\\n\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.fields = FieldsWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/image.js\":{\"title\":\"$:/core/modules/widgets/image.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/image.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nThe image widget displays an image referenced with an external URI or with a local tiddler title.\\n\\n```\\n\u003C$image src=\\\"TiddlerTitle\\\" width=\\\"320\\\" height=\\\"400\\\" class=\\\"classnames\\\">\\n```\\n\\nThe image source can be the title of an existing tiddler or the URL of an external image.\\n\\nExternal images always generate an HTML `\u003Cimg>` tag.\\n\\nTiddlers that have a _canonical_uri field generate an HTML `\u003Cimg>` tag with the src attribute containing the URI.\\n\\nTiddlers that contain image data generate an HTML `\u003Cimg>` tag with the src attribute containing a base64 representation of the image.\\n\\nTiddlers that contain wikitext could be rendered to a DIV of the usual size of a tiddler, and then transformed to the size requested.\\n\\nThe width and height attributes are interpreted as a number of pixels, and do not need to include the \\\"px\\\" suffix.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ImageWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nImageWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nImageWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create element\\n\\t// Determine what type of image it is\\n\\tvar tag = \\\"img\\\", src = \\\"\\\",\\n\\t\\ttiddler = this.wiki.getTiddler(this.imageSource);\\n\\tif(!tiddler) {\\n\\t\\t// The source isn't the title of a tiddler, so we'll assume it's a URL\\n\\t\\tsrc = this.getVariable(\\\"tv-get-export-image-link\\\",{params: [{name: \\\"src\\\",value: this.imageSource}],defaultValue: this.imageSource});\\n\\t} else {\\n\\t\\t// Check if it is an image tiddler\\n\\t\\tif(this.wiki.isImageTiddler(this.imageSource)) {\\n\\t\\t\\tvar type = tiddler.fields.type,\\n\\t\\t\\t\\ttext = tiddler.fields.text,\\n\\t\\t\\t\\t_canonical_uri = tiddler.fields._canonical_uri;\\n\\t\\t\\t// If the tiddler has body text then it doesn't need to be lazily loaded\\n\\t\\t\\tif(text) {\\n\\t\\t\\t\\t// Render the appropriate element for the image type\\n\\t\\t\\t\\tswitch(type) {\\n\\t\\t\\t\\t\\tcase \\\"application/pdf\\\":\\n\\t\\t\\t\\t\\t\\ttag = \\\"embed\\\";\\n\\t\\t\\t\\t\\t\\tsrc = \\\"data:application/pdf;base64,\\\" + text;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase \\\"image/svg+xml\\\":\\n\\t\\t\\t\\t\\t\\tsrc = \\\"data:image/svg+xml,\\\" + encodeURIComponent(text);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tsrc = \\\"data:\\\" + type + \\\";base64,\\\" + text;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if(_canonical_uri) {\\n\\t\\t\\t\\tswitch(type) {\\n\\t\\t\\t\\t\\tcase \\\"application/pdf\\\":\\n\\t\\t\\t\\t\\t\\ttag = \\\"embed\\\";\\n\\t\\t\\t\\t\\t\\tsrc = _canonical_uri;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tcase \\\"image/svg+xml\\\":\\n\\t\\t\\t\\t\\t\\tsrc = _canonical_uri;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tsrc = _canonical_uri;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Just trigger loading of the tiddler\\n\\t\\t\\t\\tthis.wiki.getTiddlerText(this.imageSource);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Create the element and assign the attributes\\n\\tvar domNode = this.document.createElement(tag);\\n\\tdomNode.setAttribute(\\\"src\\\",src);\\n\\tif(this.imageClass) {\\n\\t\\tdomNode.setAttribute(\\\"class\\\",this.imageClass);\\n\\t}\\n\\tif(this.imageWidth) {\\n\\t\\tdomNode.setAttribute(\\\"width\\\",this.imageWidth);\\n\\t}\\n\\tif(this.imageHeight) {\\n\\t\\tdomNode.setAttribute(\\\"height\\\",this.imageHeight);\\n\\t}\\n\\tif(this.imageTooltip) {\\n\\t\\tdomNode.setAttribute(\\\"title\\\",this.imageTooltip);\\n\\t}\\n\\tif(this.imageAlt) {\\n\\t\\tdomNode.setAttribute(\\\"alt\\\",this.imageAlt);\\n\\t}\\n\\t// Add classes when the image loads or fails\\n\\t$tw.utils.addClass(domNode,\\\"tc-image-loading\\\");\\n\\tdomNode.addEventListener(\\\"load\\\",function() {\\n\\t\\t$tw.utils.removeClass(domNode,\\\"tc-image-loading\\\");\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-image-loaded\\\");\\n\\t},false);\\n\\tdomNode.addEventListener(\\\"error\\\",function() {\\n\\t\\t$tw.utils.removeClass(domNode,\\\"tc-image-loading\\\");\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-image-error\\\");\\n\\t},false);\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nImageWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.imageSource = this.getAttribute(\\\"source\\\");\\n\\tthis.imageWidth = this.getAttribute(\\\"width\\\");\\n\\tthis.imageHeight = this.getAttribute(\\\"height\\\");\\n\\tthis.imageClass = this.getAttribute(\\\"class\\\");\\n\\tthis.imageTooltip = this.getAttribute(\\\"tooltip\\\");\\n\\tthis.imageAlt = this.getAttribute(\\\"alt\\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nImageWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.source || changedAttributes.width || changedAttributes.height || changedAttributes[\\\"class\\\"] || changedAttributes.tooltip || changedTiddlers[this.imageSource]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.image = ImageWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/importvariables.js\":{\"title\":\"$:/core/modules/widgets/importvariables.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/importvariables.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nImport variable definitions from other tiddlers\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ImportVariablesWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nImportVariablesWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nImportVariablesWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nImportVariablesWidget.prototype.execute = function(tiddlerList) {\\n\\tvar widgetPointer = this;\\n\\t// Got to flush all the accumulated variables\\n\\tthis.variables = new this.variablesConstructor();\\n\\t// Get our parameters\\n\\tthis.filter = this.getAttribute(\\\"filter\\\");\\n\\t// Compute the filter\\n\\tthis.tiddlerList = tiddlerList || this.wiki.filterTiddlers(this.filter,this);\\n\\t// Accumulate the \u003C$set> widgets from each tiddler\\n\\t$tw.utils.each(this.tiddlerList,function(title) {\\n\\t\\tvar parser = widgetPointer.wiki.parseTiddler(title,{parseAsInline:true});\\n\\t\\tif(parser) {\\n\\t\\t\\tvar parseTreeNode = parser.tree[0];\\n\\t\\t\\twhile(parseTreeNode && parseTreeNode.type === \\\"set\\\") {\\n\\t\\t\\t\\tvar node = {\\n\\t\\t\\t\\t\\ttype: \\\"set\\\",\\n\\t\\t\\t\\t\\tattributes: parseTreeNode.attributes,\\n\\t\\t\\t\\t\\tparams: parseTreeNode.params,\\n\\t\\t\\t\\t\\tisMacroDefinition: parseTreeNode.isMacroDefinition\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\tif (parseTreeNode.isMacroDefinition) {\\n\\t\\t\\t\\t\\t// Macro definitions can be folded into\\n\\t\\t\\t\\t\\t// current widget instead of adding\\n\\t\\t\\t\\t\\t// another link to the chain.\\n\\t\\t\\t\\t\\tvar widget = widgetPointer.makeChildWidget(node);\\n\\t\\t\\t\\t\\twidget.computeAttributes();\\n\\t\\t\\t\\t\\twidget.execute();\\n\\t\\t\\t\\t\\t// We SHALLOW copy over all variables\\n\\t\\t\\t\\t\\t// in widget. We can't use\\n\\t\\t\\t\\t\\t// $tw.utils.assign, because that copies\\n\\t\\t\\t\\t\\t// up the prototype chain, which we\\n\\t\\t\\t\\t\\t// don't want.\\n\\t\\t\\t\\t\\t$tw.utils.each(Object.keys(widget.variables), function(key) {\\n\\t\\t\\t\\t\\t\\twidgetPointer.variables[key] = widget.variables[key];\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\twidgetPointer.children = [widgetPointer.makeChildWidget(node)];\\n\\t\\t\\t\\t\\t// No more regenerating children for\\n\\t\\t\\t\\t\\t// this widget. If it needs to refresh,\\n\\t\\t\\t\\t\\t// it'll do so along with the the whole\\n\\t\\t\\t\\t\\t// importvariable tree.\\n\\t\\t\\t\\t\\tif (widgetPointer != this) {\\n\\t\\t\\t\\t\\t\\twidgetPointer.makeChildWidgets = function(){};\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\twidgetPointer = widgetPointer.children[0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tparseTreeNode = parseTreeNode.children && parseTreeNode.children[0];\\n\\t\\t\\t}\\n\\t\\t} \\n\\t});\\n\\n\\tif (widgetPointer != this) {\\n\\t\\twidgetPointer.parseTreeNode.children = this.parseTreeNode.children;\\n\\t} else {\\n\\t\\twidgetPointer.makeChildWidgets();\\n\\t}\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nImportVariablesWidget.prototype.refresh = function(changedTiddlers) {\\n\\t// Recompute our attributes and the filter list\\n\\tvar changedAttributes = this.computeAttributes(),\\n\\t\\ttiddlerList = this.wiki.filterTiddlers(this.getAttribute(\\\"filter\\\"),this);\\n\\t// Refresh if the filter has changed, or the list of tiddlers has changed, or any of the tiddlers in the list has changed\\n\\tfunction haveListedTiddlersChanged() {\\n\\t\\tvar changed = false;\\n\\t\\ttiddlerList.forEach(function(title) {\\n\\t\\t\\tif(changedTiddlers[title]) {\\n\\t\\t\\t\\tchanged = true;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn changed;\\n\\t}\\n\\tif(changedAttributes.filter || !$tw.utils.isArrayEqual(this.tiddlerList,tiddlerList) || haveListedTiddlersChanged()) {\\n\\t\\t// Compute the filter\\n\\t\\tthis.removeChildDomNodes();\\n\\t\\tthis.execute(tiddlerList);\\n\\t\\tthis.renderChildren(this.parentDomNode,this.findNextSiblingDomNode());\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.importvariables = ImportVariablesWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/jsontiddler.js\":{\"title\":\"$:/core/modules/widgets/jsontiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/jsontiddler.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nRender a tiddler as JSON text\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar JSONTiddlerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nJSONTiddlerWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nJSONTiddlerWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Collect the fields from the optional base tiddler\\n\\tvar fields = this.getTiddlerFields();\\n\\t// Add custom fields specified in attributes starting with $\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\tif(name.charAt(0) === \\\"$\\\") {\\n\\t\\t\\tfields[name.slice(1)] = attribute;\\n\\t\\t}\\n\\t});\\n\\t// JSONify\\n\\tvar json = JSON.stringify(fields);\\n\\t// Escape unsafe script characters\\n\\tif(this.attEscapeUnsafeScriptChars) {\\n\\t\\tjson = json.replace(/\u003C/g,\\\"\\\\\\\\u003C\\\");\\n\\t}\\n\\t// Update the DOM\\n\\tvar textNode = this.document.createTextNode(json);\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nJSONTiddlerWidget.prototype.execute = function() {\\n\\tthis.attTiddler = this.getAttribute(\\\"tiddler\\\");\\n\\tthis.attExclude = this.getAttribute(\\\"exclude\\\",\\\"\\\");\\n\\tthis.attEscapeUnsafeScriptChars = this.getAttribute(\\\"escapeUnsafeScriptChars\\\",\\\"no\\\") === \\\"yes\\\";\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nJSONTiddlerWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0 || (this.attTiddler && changedTiddlers[this.attTiddler])) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nJSONTiddlerWidget.prototype.getTiddlerFields = function() {\\n\\tvar fields = {};\\n\\tif(this.attTiddler) {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.attTiddler);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tfields = tiddler.getFieldStrings({exclude: this.attExclude.split(\\\" \\\")});\\n\\t\\t} else {\\n\\t\\t\\tfields = {title: this.attTiddler};\\n\\t\\t}\\n\\t}\\n\\treturn fields;\\n};\\n\\nexports.jsontiddler = JSONTiddlerWidget;\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/keyboard.js\":{\"title\":\"$:/core/modules/widgets/keyboard.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/keyboard.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nKeyboard shortcut widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar KeyboardWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nKeyboardWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nKeyboardWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar tag = this.parseTreeNode.isBlock ? \\\"div\\\" : \\\"span\\\";\\n\\tif(this.tag && $tw.config.htmlUnsafeElements.indexOf(this.tag) === -1) {\\n\\t\\ttag = this.tag;\\n\\t}\\n\\t// Create element\\n\\tvar domNode = this.document.createElement(tag);\\n\\t// Assign classes\\n\\tthis.domNode = domNode;\\n\\tthis.assignDomNodeClasses();\\n\\t// Add a keyboard event handler\\n\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t{name: \\\"keydown\\\", handlerObject: this, handlerMethod: \\\"handleChangeEvent\\\"}\\n\\t]);\\n\\t// Insert element\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nKeyboardWidget.prototype.handleChangeEvent = function(event) {\\n\\tvar keyInfo = $tw.keyboardManager.getMatchingKeyDescriptor(event,this.keyInfoArray);\\n\\tif(keyInfo) {\\n\\t\\tvar handled = this.invokeActions(this,event);\\n\\t\\tif(this.actions) {\\n\\t\\t\\tvar variables = {\\n\\t\\t\\t\\t\\t\\\"event-key\\\": event.key,\\n\\t\\t\\t\\t\\t\\\"event-code\\\": event.code,\\n\\t\\t\\t\\t\\t\\\"modifier\\\": $tw.keyboardManager.getEventModifierKeyDescriptor(event)\\n\\t\\t\\t\\t};\\n\\t\\t\\tif(keyInfo.keyDescriptor) {\\n\\t\\t\\t\\tvariables[\\\"event-key-descriptor\\\"] = keyInfo.keyDescriptor;\\n\\t\\t\\t}\\n\\t\\t\\tthis.invokeActionString(this.actions,this,event,variables);\\n\\t\\t}\\n\\t\\tthis.dispatchMessage(event);\\n\\t\\tif(handled || this.actions || this.message) {\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopPropagation();\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nKeyboardWidget.prototype.dispatchMessage = function(event) {\\n\\tthis.dispatchEvent({type: this.message, param: this.param, tiddlerTitle: this.getVariable(\\\"currentTiddler\\\")});\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nKeyboardWidget.prototype.execute = function() {\\n\\tvar self = this;\\n\\t// Get attributes\\n\\tthis.actions = this.getAttribute(\\\"actions\\\",\\\"\\\");\\n\\tthis.message = this.getAttribute(\\\"message\\\",\\\"\\\");\\n\\tthis.param = this.getAttribute(\\\"param\\\",\\\"\\\");\\n\\tthis.key = this.getAttribute(\\\"key\\\",\\\"\\\");\\n\\tthis.tag = this.getAttribute(\\\"tag\\\",\\\"\\\");\\n\\tthis.keyInfoArray = $tw.keyboardManager.parseKeyDescriptors(this.key);\\n\\tif(this.key.substr(0,2) === \\\"((\\\" && this.key.substr(-2,2) === \\\"))\\\") {\\n\\t\\tthis.shortcutTiddlers = [];\\n\\t\\tvar name = this.key.substring(2,this.key.length -2);\\n\\t\\t$tw.utils.each($tw.keyboardManager.lookupNames,function(platformDescriptor) {\\n\\t\\t\\tself.shortcutTiddlers.push(\\\"$:/config/\\\" + platformDescriptor + \\\"/\\\" + name);\\n\\t\\t});\\n\\t}\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\nKeyboardWidget.prototype.assignDomNodeClasses = function() {\\n\\tvar classes = this.getAttribute(\\\"class\\\",\\\"\\\").split(\\\" \\\");\\n\\tclasses.push(\\\"tc-keyboard\\\");\\n\\tthis.domNode.className = classes.join(\\\" \\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nKeyboardWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.message || changedAttributes.param || changedAttributes.key || changedAttributes.tag) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if(changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.assignDomNodeClasses();\\n\\t}\\n\\t// Update the keyInfoArray if one of its shortcut-config-tiddlers has changed\\n\\tif(this.shortcutTiddlers && $tw.utils.hopArray(changedTiddlers,this.shortcutTiddlers)) {\\n\\t\\tthis.keyInfoArray = $tw.keyboardManager.parseKeyDescriptors(this.key);\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.keyboard = KeyboardWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/let.js\":{\"title\":\"$:/core/modules/widgets/let.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/let.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nThis widget allows defining multiple variables at once, while allowing\\nthe later variables to depend upon the earlier ones.\\n\\n```\\n\\\\define helloworld() Hello world!\\n\u003C$let currentTiddler=\\\"target\\\" value={{!!value}} currentTiddler=\\\"different\\\">\\n  {{!!value}} will be different from \u003C\u003Cvalue>>\\n\u003C/$let>\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar LetWidget = function(parseTreeNode,options) {\\n\\t// Initialise\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nLetWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLetWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\nLetWidget.prototype.computeAttributes = function() {\\n\\t// Before computing attributes, we must make clear that none of the\\n\\t// existing attributes are staged for lookup, even on a refresh\\n\\tvar changedAttributes = {},\\n\\t\\tself = this;\\n\\tthis.currentValueFor = Object.create(null);\\n\\t$tw.utils.each(this.parseTreeNode.orderedAttributes,function(attribute,index) {\\n\\t\\tvar value = self.computeAttribute(attribute),\\n\\t\\t\\tname = attribute.name;\\n\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\n\\t\\t\\t// Now that it's prepped, we're allowed to look this variable up\\n\\t\\t\\t// when defining later variables\\n\\t\\t\\tself.currentValueFor[name] = value;\\n\\t\\t}\\n\\t});\\n\\t// Run through again, setting variables and looking for differences\\n\\t$tw.utils.each(this.currentValueFor,function(value,name) {\\n\\t\\tif (self.attributes[name] !== value) {\\n\\t\\t\\tself.attributes[name] = value;\\n\\t\\t\\tself.setVariable(name,value);\\n\\t\\t\\tchangedAttributes[name] = true;\\n\\t\\t}\\n\\t});\\n\\treturn changedAttributes;\\n};\\n\\nLetWidget.prototype.getVariableInfo = function(name,options) {\\n\\t// Special handling: If this variable exists in this very $let, we can\\n\\t// use it, but only if it's been staged.\\n\\tif ($tw.utils.hop(this.currentValueFor,name)) {\\n\\t\\treturn {\\n\\t\\t\\ttext: this.currentValueFor[name]\\n\\t\\t};\\n\\t}\\n\\treturn Widget.prototype.getVariableInfo.call(this,name,options);\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nLetWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"let\\\"] = LetWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/link.js\":{\"title\":\"$:/core/modules/widgets/link.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/link.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nLink widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar LinkWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nLinkWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLinkWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Get the value of the tv-wikilinks configuration macro\\n\\tvar wikiLinksMacro = this.getVariable(\\\"tv-wikilinks\\\"),\\n\\t\\tuseWikiLinks = wikiLinksMacro ? (wikiLinksMacro.trim() !== \\\"no\\\") : true,\\n\\t\\tmissingLinksEnabled = !(this.hideMissingLinks && this.isMissing && !this.isShadow);\\n\\t// Render the link if required\\n\\tif(useWikiLinks && missingLinksEnabled) {\\n\\t\\tthis.renderLink(parent,nextSibling);\\n\\t} else {\\n\\t\\t// Just insert the link text\\n\\t\\tvar domNode = this.document.createElement(\\\"span\\\");\\n\\t\\tparent.insertBefore(domNode,nextSibling);\\n\\t\\tthis.renderChildren(domNode,null);\\n\\t\\tthis.domNodes.push(domNode);\\n\\t}\\n};\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLinkWidget.prototype.renderLink = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Sanitise the specified tag\\n\\tvar tag = this.linkTag;\\n\\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\\n\\t\\ttag = \\\"a\\\";\\n\\t}\\n\\t// Create our element\\n\\tvar namespace = this.getVariable(\\\"namespace\\\",{defaultValue: \\\"http://www.w3.org/1999/xhtml\\\"}),\\n\\t\\tdomNode = this.document.createElementNS(namespace,tag);\\n\\t// Assign classes\\n\\tvar classes = [];\\n\\tif(this.overrideClasses === undefined) {\\n\\t\\tclasses.push(\\\"tc-tiddlylink\\\");\\n\\t\\tif(this.isShadow) {\\n\\t\\t\\tclasses.push(\\\"tc-tiddlylink-shadow\\\");\\n\\t\\t}\\n\\t\\tif(this.isMissing && !this.isShadow) {\\n\\t\\t\\tclasses.push(\\\"tc-tiddlylink-missing\\\");\\n\\t\\t} else {\\n\\t\\t\\tif(!this.isMissing) {\\n\\t\\t\\t\\tclasses.push(\\\"tc-tiddlylink-resolves\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(this.linkClasses) {\\n\\t\\t\\tclasses.push(this.linkClasses);\\n\\t\\t}\\n\\t} else if(this.overrideClasses !== \\\"\\\") {\\n\\t\\tclasses.push(this.overrideClasses)\\n\\t}\\n\\tif(classes.length > 0) {\\n\\t\\tdomNode.setAttribute(\\\"class\\\",classes.join(\\\" \\\"));\\n\\t}\\n\\t// Set an href\\n\\tvar wikilinkTransformFilter = this.getVariable(\\\"tv-filter-export-link\\\"),\\n\\t\\twikiLinkText;\\n\\tif(wikilinkTransformFilter) {\\n\\t\\t// Use the filter to construct the href\\n\\t\\twikiLinkText = this.wiki.filterTiddlers(wikilinkTransformFilter,this,function(iterator) {\\n\\t\\t\\titerator(self.wiki.getTiddler(self.to),self.to)\\n\\t\\t})[0];\\n\\t} else {\\n\\t\\t// Expand the tv-wikilink-template variable to construct the href\\n\\t\\tvar wikiLinkTemplateMacro = this.getVariable(\\\"tv-wikilink-template\\\"),\\n\\t\\t\\twikiLinkTemplate = wikiLinkTemplateMacro ? wikiLinkTemplateMacro.trim() : \\\"#$uri_encoded$\\\";\\n\\t\\twikiLinkText = $tw.utils.replaceString(wikiLinkTemplate,\\\"$uri_encoded$\\\",encodeURIComponent(this.to));\\n\\t\\twikiLinkText = $tw.utils.replaceString(wikiLinkText,\\\"$uri_doubleencoded$\\\",encodeURIComponent(encodeURIComponent(this.to)));\\n\\t}\\n\\t// Override with the value of tv-get-export-link if defined\\n\\twikiLinkText = this.getVariable(\\\"tv-get-export-link\\\",{params: [{name: \\\"to\\\",value: this.to}],defaultValue: wikiLinkText});\\n\\tif(tag === \\\"a\\\") {\\n\\t\\tvar namespaceHref = (namespace === \\\"http://www.w3.org/2000/svg\\\") ? \\\"http://www.w3.org/1999/xlink\\\" : undefined;\\n\\t\\tdomNode.setAttributeNS(namespaceHref,\\\"href\\\",wikiLinkText);\\n\\t}\\n\\t// Set the tabindex\\n\\tif(this.tabIndex) {\\n\\t\\tdomNode.setAttribute(\\\"tabindex\\\",this.tabIndex);\\n\\t}\\n\\t// Set the tooltip\\n\\t// HACK: Performance issues with re-parsing the tooltip prevent us defaulting the tooltip to \\\"\u003C$transclude field='tooltip'>\u003C$transclude field='title'/>\u003C/$transclude>\\\"\\n\\tvar tooltipWikiText = this.tooltip || this.getVariable(\\\"tv-wikilink-tooltip\\\");\\n\\tif(tooltipWikiText) {\\n\\t\\tvar tooltipText = this.wiki.renderText(\\\"text/plain\\\",\\\"text/vnd.tiddlywiki\\\",tooltipWikiText,{\\n\\t\\t\\t\\tparseAsInline: true,\\n\\t\\t\\t\\tvariables: {\\n\\t\\t\\t\\t\\tcurrentTiddler: this.to\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tparentWidget: this\\n\\t\\t\\t});\\n\\t\\tdomNode.setAttribute(\\\"title\\\",tooltipText);\\n\\t}\\n\\tif(this[\\\"aria-label\\\"]) {\\n\\t\\tdomNode.setAttribute(\\\"aria-label\\\",this[\\\"aria-label\\\"]);\\n\\t}\\n\\t// Add a click event handler\\n\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t{name: \\\"click\\\", handlerObject: this, handlerMethod: \\\"handleClickEvent\\\"},\\n\\t]);\\n\\t// Make the link draggable if required\\n\\tif(this.draggable === \\\"yes\\\") {\\n\\t\\t$tw.utils.makeDraggable({\\n\\t\\t\\tdomNode: domNode,\\n\\t\\t\\tdragTiddlerFn: function() {return self.to;},\\n\\t\\t\\twidget: this\\n\\t\\t});\\n\\t}\\n\\t// Insert the link into the DOM and render any children\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nLinkWidget.prototype.handleClickEvent = function(event) {\\n\\t// Send the click on its way as a navigate event\\n\\tvar bounds = this.domNodes[0].getBoundingClientRect();\\n\\tthis.dispatchEvent({\\n\\t\\ttype: \\\"tm-navigate\\\",\\n\\t\\tnavigateTo: this.to,\\n\\t\\tnavigateFromTitle: this.getVariable(\\\"storyTiddler\\\"),\\n\\t\\tnavigateFromNode: this,\\n\\t\\tnavigateFromClientRect: { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\\n\\t\\t},\\n\\t\\tnavigateFromClientTop: bounds.top,\\n\\t\\tnavigateFromClientLeft: bounds.left,\\n\\t\\tnavigateFromClientWidth: bounds.width,\\n\\t\\tnavigateFromClientRight: bounds.right,\\n\\t\\tnavigateFromClientBottom: bounds.bottom,\\n\\t\\tnavigateFromClientHeight: bounds.height,\\n\\t\\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey || (event.button === 1),\\n\\t\\tmetaKey: event.metaKey,\\n\\t\\tctrlKey: event.ctrlKey,\\n\\t\\taltKey: event.altKey,\\n\\t\\tshiftKey: event.shiftKey,\\n\\t\\tevent: event\\n\\t});\\n\\tif(this.domNodes[0].hasAttribute(\\\"href\\\")) {\\n\\t\\tevent.preventDefault();\\n\\t}\\n\\tevent.stopPropagation();\\n\\treturn false;\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nLinkWidget.prototype.execute = function() {\\n\\t// Pick up our attributes\\n\\tthis.to = this.getAttribute(\\\"to\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.tooltip = this.getAttribute(\\\"tooltip\\\");\\n\\tthis[\\\"aria-label\\\"] = this.getAttribute(\\\"aria-label\\\");\\n\\tthis.linkClasses = this.getAttribute(\\\"class\\\");\\n\\tthis.overrideClasses = this.getAttribute(\\\"overrideClass\\\");\\n\\tthis.tabIndex = this.getAttribute(\\\"tabindex\\\");\\n\\tthis.draggable = this.getAttribute(\\\"draggable\\\",\\\"yes\\\");\\n\\tthis.linkTag = this.getAttribute(\\\"tag\\\",\\\"a\\\");\\n\\t// Determine the link characteristics\\n\\tthis.isMissing = !this.wiki.tiddlerExists(this.to);\\n\\tthis.isShadow = this.wiki.isShadowTiddler(this.to);\\n\\tthis.hideMissingLinks = (this.getVariable(\\\"tv-show-missing-links\\\") || \\\"yes\\\") === \\\"no\\\";\\n\\t// Make the child widgets\\n\\tvar templateTree;\\n\\tif(this.parseTreeNode.children && this.parseTreeNode.children.length > 0) {\\n\\t\\ttemplateTree = this.parseTreeNode.children;\\n\\t} else {\\n\\t\\t// Default template is a link to the title\\n\\t\\ttemplateTree = [{type: \\\"text\\\", text: this.to}];\\n\\t}\\n\\tthis.makeChildWidgets(templateTree);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nLinkWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.to || changedTiddlers[this.to] || changedAttributes[\\\"aria-label\\\"] || changedAttributes.tooltip ||\\n\\t\\tchangedAttributes[\\\"class\\\"] || changedAttributes.tabindex || changedAttributes.draggable || changedAttributes.tag) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.link = LinkWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/linkcatcher.js\":{\"title\":\"$:/core/modules/widgets/linkcatcher.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/linkcatcher.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nLinkcatcher widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar LinkCatcherWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nLinkCatcherWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nLinkCatcherWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"tm-navigate\\\", handler: \\\"handleNavigateEvent\\\"}\\n\\t]);\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nLinkCatcherWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.catchTo = this.getAttribute(\\\"to\\\");\\n\\tthis.catchMessage = this.getAttribute(\\\"message\\\");\\n\\tthis.catchSet = this.getAttribute(\\\"set\\\");\\n\\tthis.catchSetTo = this.getAttribute(\\\"setTo\\\");\\n\\tthis.catchActions = this.getAttribute(\\\"actions\\\");\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n\\t// When executing actions we avoid trapping navigate events, so that we don't trigger ourselves recursively\\n\\tthis.executingActions = false;\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nLinkCatcherWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.to || changedAttributes.message || changedAttributes.set || changedAttributes.setTo) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\n/*\\nHandle a tm-navigate event\\n*/\\nLinkCatcherWidget.prototype.handleNavigateEvent = function(event) {\\n\\tif(!this.executingActions) {\\n\\t\\t// Execute the actions\\n\\t\\tif(this.catchTo) {\\n\\t\\t\\tthis.wiki.setTextReference(this.catchTo,event.navigateTo,this.getVariable(\\\"currentTiddler\\\"));\\n\\t\\t}\\n\\t\\tif(this.catchMessage && this.parentWidget) {\\n\\t\\t\\tthis.parentWidget.dispatchEvent({\\n\\t\\t\\t\\ttype: this.catchMessage,\\n\\t\\t\\t\\tparam: event.navigateTo,\\n\\t\\t\\t\\tnavigateTo: event.navigateTo\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif(this.catchSet) {\\n\\t\\t\\tvar tiddler = this.wiki.getTiddler(this.catchSet);\\n\\t\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(tiddler,{title: this.catchSet, text: this.catchSetTo}));\\n\\t\\t}\\n\\t\\tif(this.catchActions) {\\n\\t\\t\\tthis.executingActions = true;\\n\\t\\t\\tvar modifierKey = $tw.keyboardManager.getEventModifierKeyDescriptor(event);\\n\\t\\t\\tthis.invokeActionString(this.catchActions,this,event,{navigateTo: event.navigateTo, modifier: modifierKey});\\n\\t\\t\\tthis.executingActions = false;\\n\\t\\t}\\n\\t} else {\\n\\t\\t// This is a navigate event generated by the actions of this linkcatcher, so we don't trap it again, but just pass it to the parent\\n\\t\\tthis.parentWidget.dispatchEvent({\\n\\t\\t\\ttype: \\\"tm-navigate\\\",\\n\\t\\t\\tparam: event.navigateTo,\\n\\t\\t\\tnavigateTo: event.navigateTo\\n\\t\\t});\\n\\t}\\n\\treturn false;\\n};\\n\\nexports.linkcatcher = LinkCatcherWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/list.js\":{\"title\":\"$:/core/modules/widgets/list.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/list.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nList and list item widgets\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\n/*\\nThe list widget creates list element sub-widgets that reach back into the list widget for their configuration\\n*/\\n\\nvar ListWidget = function(parseTreeNode,options) {\\n\\t// Main initialisation inherited from widget.js\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nListWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nListWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Initialise the storyviews if they've not been done already\\n\\tif(!this.storyViews) {\\n\\t\\tListWidget.prototype.storyViews = {};\\n\\t\\t$tw.modules.applyMethods(\\\"storyview\\\",this.storyViews);\\n\\t}\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n\\t// Construct the storyview\\n\\tvar StoryView = this.storyViews[this.storyViewName];\\n\\tif(this.storyViewName && !StoryView) {\\n\\t\\tStoryView = this.storyViews[\\\"classic\\\"];\\n\\t}\\n\\tif(StoryView && !this.document.isTiddlyWikiFakeDom) {\\n\\t\\tthis.storyview = new StoryView(this);\\n\\t} else {\\n\\t\\tthis.storyview = null;\\n\\t}\\n\\tif(this.storyview && this.storyview.renderEnd) {\\n\\t\\tthis.storyview.renderEnd();\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nListWidget.prototype.execute = function() {\\n\\t// Get our attributes\\n\\tthis.template = this.getAttribute(\\\"template\\\");\\n\\tthis.editTemplate = this.getAttribute(\\\"editTemplate\\\");\\n\\tthis.variableName = this.getAttribute(\\\"variable\\\",\\\"currentTiddler\\\");\\n\\tthis.counterName = this.getAttribute(\\\"counter\\\");\\n\\tthis.storyViewName = this.getAttribute(\\\"storyview\\\");\\n\\tthis.historyTitle = this.getAttribute(\\\"history\\\");\\n\\t// Compose the list elements\\n\\tthis.list = this.getTiddlerList();\\n\\tvar members = [],\\n\\t\\tself = this;\\n\\t// Check for an empty list\\n\\tif(this.list.length === 0) {\\n\\t\\tmembers = this.getEmptyMessage();\\n\\t} else {\\n\\t\\t$tw.utils.each(this.list,function(title,index) {\\n\\t\\t\\tmembers.push(self.makeItemTemplate(title,index));\\n\\t\\t});\\n\\t}\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets(members);\\n\\t// Clear the last history\\n\\tthis.history = [];\\n};\\n\\nListWidget.prototype.getTiddlerList = function() {\\n\\tvar defaultFilter = \\\"[!is[system]sort[title]]\\\";\\n\\treturn this.wiki.filterTiddlers(this.getAttribute(\\\"filter\\\",defaultFilter),this);\\n};\\n\\nListWidget.prototype.getEmptyMessage = function() {\\n\\tvar parser,\\n\\t\\temptyMessage = this.getAttribute(\\\"emptyMessage\\\",\\\"\\\");\\n\\t// this.wiki.parseText() calls \\n\\t// new Parser(..), which should only be done, if needed, because it's heavy!\\n\\tif (emptyMessage === \\\"\\\") {\\n\\t\\treturn [];\\n\\t}\\n\\tparser = this.wiki.parseText(\\\"text/vnd.tiddlywiki\\\",emptyMessage,{parseAsInline: true});\\n\\tif(parser) {\\n\\t\\treturn parser.tree;\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n};\\n\\n/*\\nCompose the template for a list item\\n*/\\nListWidget.prototype.makeItemTemplate = function(title,index) {\\n\\t// Check if the tiddler is a draft\\n\\tvar tiddler = this.wiki.getTiddler(title),\\n\\t\\tisDraft = tiddler && tiddler.hasField(\\\"draft.of\\\"),\\n\\t\\ttemplate = this.template,\\n\\t\\ttemplateTree;\\n\\tif(isDraft && this.editTemplate) {\\n\\t\\ttemplate = this.editTemplate;\\n\\t}\\n\\t// Compose the transclusion of the template\\n\\tif(template) {\\n\\t\\ttemplateTree = [{type: \\\"transclude\\\", attributes: {tiddler: {type: \\\"string\\\", value: template}}}];\\n\\t} else {\\n\\t\\tif(this.parseTreeNode.children && this.parseTreeNode.children.length > 0) {\\n\\t\\t\\ttemplateTree = this.parseTreeNode.children;\\n\\t\\t} else {\\n\\t\\t\\t// Default template is a link to the title\\n\\t\\t\\ttemplateTree = [{type: \\\"element\\\", tag: this.parseTreeNode.isBlock ? \\\"div\\\" : \\\"span\\\", children: [{type: \\\"link\\\", attributes: {to: {type: \\\"string\\\", value: title}}, children: [\\n\\t\\t\\t\\t\\t{type: \\\"text\\\", text: title}\\n\\t\\t\\t]}]}];\\n\\t\\t}\\n\\t}\\n\\t// Return the list item\\n\\tvar parseTreeNode = {type: \\\"listitem\\\", itemTitle: title, variableName: this.variableName, children: templateTree};\\n\\tif(this.counterName) {\\n\\t\\tparseTreeNode.counter = (index + 1).toString();\\n\\t\\tparseTreeNode.counterName = this.counterName;\\n\\t\\tparseTreeNode.isFirst = index === 0;\\n\\t\\tparseTreeNode.isLast = index === this.list.length - 1;\\n\\t}\\n\\treturn parseTreeNode;\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nListWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes(),\\n\\t\\tresult;\\n\\t// Call the storyview\\n\\tif(this.storyview && this.storyview.refreshStart) {\\n\\t\\tthis.storyview.refreshStart(changedTiddlers,changedAttributes);\\n\\t}\\n\\t// Completely refresh if any of our attributes have changed\\n\\tif(changedAttributes.filter || changedAttributes.variable || changedAttributes.counter || changedAttributes.template || changedAttributes.editTemplate || changedAttributes.emptyMessage || changedAttributes.storyview || changedAttributes.history) {\\n\\t\\tthis.refreshSelf();\\n\\t\\tresult = true;\\n\\t} else {\\n\\t\\t// Handle any changes to the list\\n\\t\\tresult = this.handleListChanges(changedTiddlers);\\n\\t\\t// Handle any changes to the history stack\\n\\t\\tif(this.historyTitle && changedTiddlers[this.historyTitle]) {\\n\\t\\t\\tthis.handleHistoryChanges();\\n\\t\\t}\\n\\t}\\n\\t// Call the storyview\\n\\tif(this.storyview && this.storyview.refreshEnd) {\\n\\t\\tthis.storyview.refreshEnd(changedTiddlers,changedAttributes);\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nHandle any changes to the history list\\n*/\\nListWidget.prototype.handleHistoryChanges = function() {\\n\\t// Get the history data\\n\\tvar newHistory = this.wiki.getTiddlerDataCached(this.historyTitle,[]);\\n\\t// Ignore any entries of the history that match the previous history\\n\\tvar entry = 0;\\n\\twhile(entry \u003C newHistory.length && entry \u003C this.history.length && newHistory[entry].title === this.history[entry].title) {\\n\\t\\tentry++;\\n\\t}\\n\\t// Navigate forwards to each of the new tiddlers\\n\\twhile(entry \u003C newHistory.length) {\\n\\t\\tif(this.storyview && this.storyview.navigateTo) {\\n\\t\\t\\tthis.storyview.navigateTo(newHistory[entry]);\\n\\t\\t}\\n\\t\\tentry++;\\n\\t}\\n\\t// Update the history\\n\\tthis.history = newHistory;\\n};\\n\\n/*\\nProcess any changes to the list\\n*/\\nListWidget.prototype.handleListChanges = function(changedTiddlers) {\\n\\t// Get the new list\\n\\tvar prevList = this.list;\\n\\tthis.list = this.getTiddlerList();\\n\\t// Check for an empty list\\n\\tif(this.list.length === 0) {\\n\\t\\t// Check if it was empty before\\n\\t\\tif(prevList.length === 0) {\\n\\t\\t\\t// If so, just refresh the empty message\\n\\t\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t\\t} else {\\n\\t\\t\\t// Replace the previous content with the empty message\\n\\t\\t\\tfor(t=this.children.length-1; t>=0; t--) {\\n\\t\\t\\t\\tthis.removeListItem(t);\\n\\t\\t\\t}\\n\\t\\t\\tvar nextSibling = this.findNextSiblingDomNode();\\n\\t\\t\\tthis.makeChildWidgets(this.getEmptyMessage());\\n\\t\\t\\tthis.renderChildren(this.parentDomNode,nextSibling);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t} else {\\n\\t\\t// If the list was empty then we need to remove the empty message\\n\\t\\tif(prevList.length === 0) {\\n\\t\\t\\tthis.removeChildDomNodes();\\n\\t\\t\\tthis.children = [];\\n\\t\\t}\\n\\t\\t// If we are providing an counter variable then we must refresh the items, otherwise we can rearrange them\\n\\t\\tvar hasRefreshed = false,t;\\n\\t\\tif(this.counterName) {\\n\\t\\t\\t// Cycle through the list and remove and re-insert the first item that has changed, and all the remaining items\\n\\t\\t\\tfor(t=0; t\u003Cthis.list.length; t++) {\\n\\t\\t\\t\\tif(hasRefreshed || !this.children[t] || this.children[t].parseTreeNode.itemTitle !== this.list[t]) {\\n\\t\\t\\t\\t\\tif(this.children[t]) {\\n\\t\\t\\t\\t\\t\\tthis.removeListItem(t);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tthis.insertListItem(t,this.list[t]);\\n\\t\\t\\t\\t\\thasRefreshed = true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Refresh the item we're reusing\\n\\t\\t\\t\\t\\tvar refreshed = this.children[t].refresh(changedTiddlers);\\n\\t\\t\\t\\t\\thasRefreshed = hasRefreshed || refreshed;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// If there are items to remove and we have not refreshed then recreate the item that will now be at the last position\\n\\t\\t\\tif(!hasRefreshed && this.children.length > this.list.length) {\\n\\t\\t\\t\\tthis.removeListItem(this.list.length-1);\\n\\t\\t\\t\\tthis.insertListItem(this.list.length-1,this.list[this.list.length-1]);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Cycle through the list, inserting and removing list items as needed\\n\\t\\t\\tfor(t=0; t\u003Cthis.list.length; t++) {\\n\\t\\t\\t\\tvar index = this.findListItem(t,this.list[t]);\\n\\t\\t\\t\\tif(index === undefined) {\\n\\t\\t\\t\\t\\t// The list item must be inserted\\n\\t\\t\\t\\t\\tthis.insertListItem(t,this.list[t]);\\n\\t\\t\\t\\t\\thasRefreshed = true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// There are intervening list items that must be removed\\n\\t\\t\\t\\t\\tfor(var n=index-1; n>=t; n--) {\\n\\t\\t\\t\\t\\t\\tthis.removeListItem(n);\\n\\t\\t\\t\\t\\t\\thasRefreshed = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Refresh the item we're reusing\\n\\t\\t\\t\\t\\tvar refreshed = this.children[t].refresh(changedTiddlers);\\n\\t\\t\\t\\t\\thasRefreshed = hasRefreshed || refreshed;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Remove any left over items\\n\\t\\tfor(t=this.children.length-1; t>=this.list.length; t--) {\\n\\t\\t\\tthis.removeListItem(t);\\n\\t\\t\\thasRefreshed = true;\\n\\t\\t}\\n\\t\\treturn hasRefreshed;\\n\\t}\\n};\\n\\n/*\\nFind the list item with a given title, starting from a specified position\\n*/\\nListWidget.prototype.findListItem = function(startIndex,title) {\\n\\twhile(startIndex \u003C this.children.length) {\\n\\t\\tif(this.children[startIndex].parseTreeNode.itemTitle === title) {\\n\\t\\t\\treturn startIndex;\\n\\t\\t}\\n\\t\\tstartIndex++;\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/*\\nInsert a new list item at the specified index\\n*/\\nListWidget.prototype.insertListItem = function(index,title) {\\n\\t// Create, insert and render the new child widgets\\n\\tvar widget = this.makeChildWidget(this.makeItemTemplate(title,index));\\n\\twidget.parentDomNode = this.parentDomNode; // Hack to enable findNextSiblingDomNode() to work\\n\\tthis.children.splice(index,0,widget);\\n\\tvar nextSibling = widget.findNextSiblingDomNode();\\n\\twidget.render(this.parentDomNode,nextSibling);\\n\\t// Animate the insertion if required\\n\\tif(this.storyview && this.storyview.insert) {\\n\\t\\tthis.storyview.insert(widget);\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nRemove the specified list item\\n*/\\nListWidget.prototype.removeListItem = function(index) {\\n\\tvar widget = this.children[index];\\n\\t// Animate the removal if required\\n\\tif(this.storyview && this.storyview.remove) {\\n\\t\\tthis.storyview.remove(widget);\\n\\t} else {\\n\\t\\twidget.removeChildDomNodes();\\n\\t}\\n\\t// Remove the child widget\\n\\tthis.children.splice(index,1);\\n};\\n\\nexports.list = ListWidget;\\n\\nvar ListItemWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nListItemWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nListItemWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nListItemWidget.prototype.execute = function() {\\n\\t// Set the current list item title\\n\\tthis.setVariable(this.parseTreeNode.variableName,this.parseTreeNode.itemTitle);\\n\\tif(this.parseTreeNode.counterName) {\\n\\t\\tthis.setVariable(this.parseTreeNode.counterName,this.parseTreeNode.counter);\\n\\t\\tthis.setVariable(this.parseTreeNode.counterName + \\\"-first\\\",this.parseTreeNode.isFirst ? \\\"yes\\\" : \\\"no\\\");\\n\\t\\tthis.setVariable(this.parseTreeNode.counterName + \\\"-last\\\",this.parseTreeNode.isLast ? \\\"yes\\\" : \\\"no\\\");\\n\\t}\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nListItemWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.listitem = ListItemWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/log.js\":{\"title\":\"$:/core/modules/widgets/log.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/log.js\\ntype: application/javascript\\nmodule-type: widget-subclass\\n\\nWidget to log debug messages\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.baseClass = \\\"action-log\\\";\\n\\nexports.name = \\\"log\\\";\\n\\nexports.constructor = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n}\\n\\nexports.prototype = {};\\n\\nexports.prototype.render = function(event) {\\n\\tObject.getPrototypeOf(Object.getPrototypeOf(this)).render.call(this,event);\\n\\tObject.getPrototypeOf(Object.getPrototypeOf(this)).log.call(this);\\n}\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget-subclass\"},\"$:/core/modules/widgets/macrocall.js\":{\"title\":\"$:/core/modules/widgets/macrocall.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/macrocall.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nMacrocall widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar MacroCallWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nMacroCallWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nMacroCallWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nMacroCallWidget.prototype.execute = function() {\\n\\t// Get the parse type if specified\\n\\tthis.parseType = this.getAttribute(\\\"$type\\\",\\\"text/vnd.tiddlywiki\\\");\\n\\tthis.renderOutput = this.getAttribute(\\\"$output\\\",\\\"text/html\\\");\\n\\t// Merge together the parameters specified in the parse tree with the specified attributes\\n\\tvar params = this.parseTreeNode.params ? this.parseTreeNode.params.slice(0) : [];\\n\\t$tw.utils.each(this.attributes,function(attribute,name) {\\n\\t\\tif(name.charAt(0) !== \\\"$\\\") {\\n\\t\\t\\tparams.push({name: name, value: attribute});\\n\\t\\t}\\n\\t});\\n\\t// Get the macro value\\n\\tvar macroName = this.parseTreeNode.name || this.getAttribute(\\\"$name\\\"),\\n\\t\\tvariableInfo = this.getVariableInfo(macroName,{params: params}),\\n\\t\\ttext = variableInfo.text,\\n\\t\\tparseTreeNodes;\\n\\t// Are we rendering to HTML?\\n\\tif(this.renderOutput === \\\"text/html\\\") {\\n\\t\\t// If so we'll return the parsed macro\\n\\t\\t// Check if we've already cached parsing this macro\\n\\t\\tvar mode = this.parseTreeNode.isBlock ? \\\"blockParser\\\" : \\\"inlineParser\\\",\\n\\t\\t\\tparser;\\n\\t\\tif(variableInfo.srcVariable && variableInfo.srcVariable[mode]) {\\n\\t\\t\\tparser = variableInfo.srcVariable[mode];\\n\\t\\t} else {\\n\\t\\t\\tparser = this.wiki.parseText(this.parseType,text,\\n\\t\\t\\t\\t\\t\\t\\t\\t{parseAsInline: !this.parseTreeNode.isBlock});\\n\\t\\t\\tif(variableInfo.isCacheable && variableInfo.srcVariable) {\\n\\t\\t\\t\\tvariableInfo.srcVariable[mode] = parser;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvar parseTreeNodes = parser ? parser.tree : [];\\n\\t\\t// Wrap the parse tree in a vars widget assigning the parameters to variables named \\\"__paramname__\\\"\\n\\t\\tvar attributes = {};\\n\\t\\t$tw.utils.each(variableInfo.params,function(param) {\\n\\t\\t\\tvar name = \\\"__\\\" + param.name + \\\"__\\\";\\n\\t\\t\\tattributes[name] = {\\n\\t\\t\\t\\tname: name,\\n\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\tvalue: param.value\\n\\t\\t\\t};\\n\\t\\t});\\n\\t\\tparseTreeNodes = [{\\n\\t\\t\\ttype: \\\"vars\\\",\\n\\t\\t\\tattributes: attributes,\\n\\t\\t\\tchildren: parseTreeNodes\\n\\t\\t}];\\n\\t} else if(this.renderOutput === \\\"text/raw\\\") {\\n\\t\\tparseTreeNodes = [{type: \\\"text\\\", text: text}];\\n\\t} else {\\n\\t\\t// Otherwise, we'll render the text\\n\\t\\tvar plainText = this.wiki.renderText(\\\"text/plain\\\",this.parseType,text,{parentWidget: this});\\n\\t\\tparseTreeNodes = [{type: \\\"text\\\", text: plainText}];\\n\\t}\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nMacroCallWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\t// Rerender ourselves\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.macrocall = MacroCallWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/messagecatcher.js\":{\"title\":\"$:/core/modules/widgets/messagecatcher.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/messagecatcher.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nMessage catcher widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar MessageCatcherWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nMessageCatcherWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nMessageCatcherWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Helper to add an event handler\\n\\tvar addEventHandler = function(type,actions) {\\n\\t\\tif(type && actions) {\\n\\t\\t\\tvar isActionStringExecuting = false;\\n\\t\\t\\tself.addEventListener(\\n\\t\\t\\t\\ttype,\\n\\t\\t\\t\\tfunction(event) {\\n\\t\\t\\t\\t\\t// Don't trap the event if it came from one of our action handlers\\n\\t\\t\\t\\t\\tif(isActionStringExecuting) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Collect all the event properties into variables\\n\\t\\t\\t\\t\\tvar collectProps = function(obj,prefix) {\\n\\t\\t\\t\\t\\t\\tprefix = prefix || \\\"\\\";\\n\\t\\t\\t\\t\\t\\tvar props = {},\\n\\t\\t\\t\\t\\t\\t\\tnames = [];\\n\\t\\t\\t\\t\\t\\t$tw.utils.each(obj,function(value,name) {\\n\\t\\t\\t\\t\\t\\t\\tif([\\\"string\\\",\\\"boolean\\\",\\\"number\\\"].indexOf(typeof value) !== -1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tnames.push(name);\\n\\t\\t\\t\\t\\t\\t\\t\\tprops[prefix + \\\"-\\\" + name] = value.toString();\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\tprops[\\\"list-\\\" + prefix] = $tw.utils.stringifyList(names);\\n\\t\\t\\t\\t\\t\\treturn props;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\tvar variables = $tw.utils.extend(\\n\\t\\t\\t\\t\\t\\t{},\\n\\t\\t\\t\\t\\t\\tcollectProps(event.paramObject,\\\"event-paramObject\\\"),\\n\\t\\t\\t\\t\\t\\tcollectProps(event,\\\"event\\\"),\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tmodifier: $tw.keyboardManager.getEventModifierKeyDescriptor(event)\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tisActionStringExecuting = true;\\n\\t\\t\\t\\t\\tself.invokeActionString(actions,self,event,variables);\\n\\t\\t\\t\\t\\tisActionStringExecuting = false;\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\t// Add the main event handler\\n\\taddEventHandler(this.getAttribute(\\\"type\\\"),this.getAttribute(\\\"actions\\\"));\\n\\t// Add any other event handlers\\n\\t$tw.utils.each(this.attributes,function(value,key) {\\n\\t\\tif(key.charAt(0) === \\\"$\\\") {\\n\\t\\t\\taddEventHandler(key.slice(1),value);\\n\\t\\t}\\n\\t});\\n\\t// Render children\\n\\tthis.renderChildren(parent,null);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nMessageCatcherWidget.prototype.execute = function() {\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nMessageCatcherWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.messagecatcher = MessageCatcherWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/navigator.js\":{\"title\":\"$:/core/modules/widgets/navigator.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/navigator.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nNavigator widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar IMPORT_TITLE = \\\"$:/Import\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar NavigatorWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nNavigatorWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nNavigatorWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"tm-navigate\\\", handler: \\\"handleNavigateEvent\\\"},\\n\\t\\t{type: \\\"tm-edit-tiddler\\\", handler: \\\"handleEditTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-delete-tiddler\\\", handler: \\\"handleDeleteTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-save-tiddler\\\", handler: \\\"handleSaveTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-cancel-tiddler\\\", handler: \\\"handleCancelTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-close-tiddler\\\", handler: \\\"handleCloseTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-close-all-tiddlers\\\", handler: \\\"handleCloseAllTiddlersEvent\\\"},\\n\\t\\t{type: \\\"tm-close-other-tiddlers\\\", handler: \\\"handleCloseOtherTiddlersEvent\\\"},\\n\\t\\t{type: \\\"tm-new-tiddler\\\", handler: \\\"handleNewTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-import-tiddlers\\\", handler: \\\"handleImportTiddlersEvent\\\"},\\n\\t\\t{type: \\\"tm-perform-import\\\", handler: \\\"handlePerformImportEvent\\\"},\\n\\t\\t{type: \\\"tm-fold-tiddler\\\", handler: \\\"handleFoldTiddlerEvent\\\"},\\n\\t\\t{type: \\\"tm-fold-other-tiddlers\\\", handler: \\\"handleFoldOtherTiddlersEvent\\\"},\\n\\t\\t{type: \\\"tm-fold-all-tiddlers\\\", handler: \\\"handleFoldAllTiddlersEvent\\\"},\\n\\t\\t{type: \\\"tm-unfold-all-tiddlers\\\", handler: \\\"handleUnfoldAllTiddlersEvent\\\"}\\n\\t]);\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nNavigatorWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.storyTitle = this.getAttribute(\\\"story\\\");\\n\\tthis.historyTitle = this.getAttribute(\\\"history\\\");\\n\\tthis.setVariable(\\\"tv-story-list\\\",this.storyTitle);\\n\\tthis.setVariable(\\\"tv-history-list\\\",this.historyTitle);\\n\\tthis.story = new $tw.Story({\\n\\t\\twiki: this.wiki,\\n\\t\\tstoryTitle: this.storyTitle,\\n\\t\\thistoryTitle: this.historyTitle\\n\\t});\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nNavigatorWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.story || changedAttributes.history) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nNavigatorWidget.prototype.getStoryList = function() {\\n\\treturn this.storyTitle ? this.wiki.getTiddlerList(this.storyTitle) : null;\\n};\\n\\nNavigatorWidget.prototype.saveStoryList = function(storyList) {\\n\\tif(this.storyTitle) {\\n\\t\\tvar storyTiddler = this.wiki.getTiddler(this.storyTitle);\\n\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(\\n\\t\\t\\t{title: this.storyTitle},\\n\\t\\t\\tstoryTiddler,\\n\\t\\t\\t{list: storyList}\\n\\t\\t));\\n\\t}\\n};\\n\\nNavigatorWidget.prototype.removeTitleFromStory = function(storyList,title) {\\n\\tif(storyList) {\\n\\t\\tvar p = storyList.indexOf(title);\\n\\t\\twhile(p !== -1) {\\n\\t\\t\\tstoryList.splice(p,1);\\n\\t\\t\\tp = storyList.indexOf(title);\\n\\t\\t}\\n\\t}\\n};\\n\\nNavigatorWidget.prototype.replaceFirstTitleInStory = function(storyList,oldTitle,newTitle) {\\n\\tif(storyList) {\\n\\t\\tvar pos = storyList.indexOf(oldTitle);\\n\\t\\tif(pos !== -1) {\\n\\t\\t\\tstoryList[pos] = newTitle;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tpos = storyList.indexOf(oldTitle,pos + 1);\\n\\t\\t\\t\\tif(pos !== -1) {\\n\\t\\t\\t\\t\\tstoryList.splice(pos,1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} while(pos !== -1);\\n\\t\\t} else {\\n\\t\\t\\tstoryList.splice(0,0,newTitle);\\n\\t\\t}\\n\\t}\\n};\\n\\nNavigatorWidget.prototype.addToStory = function(title,fromTitle) {\\n\\tif(this.storyTitle) {\\n\\t\\tthis.story.addToStory(title,fromTitle,{\\n\\t\\t\\topenLinkFromInsideRiver: this.getAttribute(\\\"openLinkFromInsideRiver\\\",\\\"top\\\"),\\n\\t\\t\\topenLinkFromOutsideRiver: this.getAttribute(\\\"openLinkFromOutsideRiver\\\",\\\"top\\\")\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nAdd a new record to the top of the history stack\\ntitle: a title string or an array of title strings\\nfromPageRect: page coordinates of the origin of the navigation\\n*/\\nNavigatorWidget.prototype.addToHistory = function(title,fromPageRect) {\\n\\tthis.story.addToHistory(title,fromPageRect,this.historyTitle);\\n};\\n\\n/*\\nHandle a tm-navigate event\\n*/\\nNavigatorWidget.prototype.handleNavigateEvent = function(event) {\\n\\tevent = $tw.hooks.invokeHook(\\\"th-navigating\\\",event);\\n\\tif(event.navigateTo) {\\n\\t\\tthis.addToStory(event.navigateTo,event.navigateFromTitle);\\n\\t\\tif(!event.navigateSuppressNavigation) {\\n\\t\\t\\tthis.addToHistory(event.navigateTo,event.navigateFromClientRect);\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\n// Close a specified tiddler\\nNavigatorWidget.prototype.handleCloseTiddlerEvent = function(event) {\\n\\tevent = $tw.hooks.invokeHook(\\\"th-closing-tiddler\\\",event);\\n\\tvar title = event.param || event.tiddlerTitle,\\n\\t\\tstoryList = this.getStoryList();\\n\\t// Look for tiddlers with this title to close\\n\\tthis.removeTitleFromStory(storyList,title);\\n\\tthis.saveStoryList(storyList);\\n\\treturn false;\\n};\\n\\n// Close all tiddlers\\nNavigatorWidget.prototype.handleCloseAllTiddlersEvent = function(event) {\\n\\tthis.saveStoryList([]);\\n\\treturn false;\\n};\\n\\n// Close other tiddlers\\nNavigatorWidget.prototype.handleCloseOtherTiddlersEvent = function(event) {\\n\\tvar title = event.param || event.tiddlerTitle;\\n\\tthis.saveStoryList([title]);\\n\\treturn false;\\n};\\n\\n// Place a tiddler in edit mode\\nNavigatorWidget.prototype.handleEditTiddlerEvent = function(event) {\\n\\tvar editTiddler = $tw.hooks.invokeHook(\\\"th-editing-tiddler\\\",event),\\n\\t    win = event.event && event.event.view ? event.event.view : window;\\n\\tif(!editTiddler) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar self = this;\\n\\tfunction isUnmodifiedShadow(title) {\\n\\t\\treturn self.wiki.isShadowTiddler(title) && !self.wiki.tiddlerExists(title);\\n\\t}\\n\\tfunction confirmEditShadow(title) {\\n\\t\\treturn win.confirm($tw.language.getString(\\n\\t\\t\\t\\\"ConfirmEditShadowTiddler\\\",\\n\\t\\t\\t{variables:\\n\\t\\t\\t\\t{title: title}\\n\\t\\t\\t}\\n\\t\\t));\\n\\t}\\n\\tvar title = event.param || event.tiddlerTitle;\\n\\tif(isUnmodifiedShadow(title) && !confirmEditShadow(title)) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Replace the specified tiddler with a draft in edit mode\\n\\tvar draftTiddler = this.makeDraftTiddler(title);\\n\\t// Update the story and history if required\\n\\tif(!event.paramObject || event.paramObject.suppressNavigation !== \\\"yes\\\") {\\n\\t\\tvar draftTitle = draftTiddler.fields.title,\\n\\t\\t\\tstoryList = this.getStoryList();\\n\\t\\tthis.removeTitleFromStory(storyList,draftTitle);\\n\\t\\tthis.replaceFirstTitleInStory(storyList,title,draftTitle);\\n\\t\\tthis.addToHistory(draftTitle,event.navigateFromClientRect);\\n\\t\\tthis.saveStoryList(storyList);\\n\\t\\treturn false;\\n\\t}\\n};\\n\\n// Delete a tiddler\\nNavigatorWidget.prototype.handleDeleteTiddlerEvent = function(event) {\\n\\t// Get the tiddler we're deleting\\n\\tvar title = event.param || event.tiddlerTitle,\\n\\t\\ttiddler = this.wiki.getTiddler(title),\\n\\t\\tstoryList = this.getStoryList(),\\n\\t\\toriginalTitle = tiddler ? tiddler.fields[\\\"draft.of\\\"] : \\\"\\\",\\n\\t\\toriginalTiddler = originalTitle ? this.wiki.getTiddler(originalTitle) : undefined,\\n\\t\\tconfirmationTitle,\\n\\t    \\twin = event.event && event.event.view ? event.event.view : window;\\n\\tif(!tiddler) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Check if the tiddler we're deleting is in draft mode\\n\\tif(originalTitle) {\\n\\t\\t// If so, we'll prompt for confirmation referencing the original tiddler\\n\\t\\tconfirmationTitle = originalTitle;\\n\\t} else {\\n\\t\\t// If not a draft, then prompt for confirmation referencing the specified tiddler\\n\\t\\tconfirmationTitle = title;\\n\\t}\\n\\t// Seek confirmation\\n\\tif((this.wiki.getTiddler(originalTitle) || (tiddler.fields.text || \\\"\\\") !== \\\"\\\") && !win.confirm($tw.language.getString(\\n\\t\\t\\t\\t\\\"ConfirmDeleteTiddler\\\",\\n\\t\\t\\t\\t{variables:\\n\\t\\t\\t\\t\\t{title: confirmationTitle}\\n\\t\\t\\t\\t}\\n\\t\\t\\t))) {\\n\\t\\treturn false;\\n\\t}\\n\\t// Delete the original tiddler\\n\\tif(originalTitle) {\\n\\t\\tif(originalTiddler) {\\n\\t\\t\\t$tw.hooks.invokeHook(\\\"th-deleting-tiddler\\\",originalTiddler);\\n\\t\\t}\\n\\t\\tthis.wiki.deleteTiddler(originalTitle);\\n\\t\\tthis.removeTitleFromStory(storyList,originalTitle);\\n\\t}\\n\\t// Invoke the hook function and delete this tiddler\\n\\t$tw.hooks.invokeHook(\\\"th-deleting-tiddler\\\",tiddler);\\n\\tthis.wiki.deleteTiddler(title);\\n\\t// Remove the closed tiddler from the story\\n\\tthis.removeTitleFromStory(storyList,title);\\n\\tthis.saveStoryList(storyList);\\n\\t// Trigger an autosave\\n\\t$tw.rootWidget.dispatchEvent({type: \\\"tm-auto-save-wiki\\\"});\\n\\treturn false;\\n};\\n\\n/*\\nCreate/reuse the draft tiddler for a given title\\n*/\\nNavigatorWidget.prototype.makeDraftTiddler = function(targetTitle) {\\n\\t// See if there is already a draft tiddler for this tiddler\\n\\tvar draftTitle = this.wiki.findDraft(targetTitle);\\n\\tif(draftTitle) {\\n\\t\\treturn this.wiki.getTiddler(draftTitle);\\n\\t}\\n\\t// Get the current value of the tiddler we're editing\\n\\tvar tiddler = this.wiki.getTiddler(targetTitle);\\n\\t// Save the initial value of the draft tiddler\\n\\tdraftTitle = this.generateDraftTitle(targetTitle);\\n\\tvar draftTiddler = new $tw.Tiddler({\\n\\t\\t\\t\\ttext: \\\"\\\",\\n\\t\\t\\t},\\n\\t\\t\\ttiddler,\\n\\t\\t\\t{\\n\\t\\t\\t\\ttitle: draftTitle,\\n\\t\\t\\t\\t\\\"draft.title\\\": targetTitle,\\n\\t\\t\\t\\t\\\"draft.of\\\": targetTitle\\n\\t\\t\\t},\\n\\t\\t\\tthis.wiki.getModificationFields()\\n\\t\\t);\\n\\tthis.wiki.addTiddler(draftTiddler);\\n\\treturn draftTiddler;\\n};\\n\\n/*\\nGenerate a title for the draft of a given tiddler\\n*/\\nNavigatorWidget.prototype.generateDraftTitle = function(title) {\\n\\treturn this.wiki.generateDraftTitle(title);\\n};\\n\\n// Take a tiddler out of edit mode, saving the changes\\nNavigatorWidget.prototype.handleSaveTiddlerEvent = function(event) {\\n\\tvar title = event.param || event.tiddlerTitle,\\n\\t\\ttiddler = this.wiki.getTiddler(title),\\n\\t\\tstoryList = this.getStoryList(),\\n\\t    \\twin = event.event && event.event.view ? event.event.view : window;\\n\\t// Replace the original tiddler with the draft\\n\\tif(tiddler) {\\n\\t\\tvar draftTitle = (tiddler.fields[\\\"draft.title\\\"] || \\\"\\\").trim(),\\n\\t\\t\\tdraftOf = (tiddler.fields[\\\"draft.of\\\"] || \\\"\\\").trim();\\n\\t\\tif(draftTitle) {\\n\\t\\t\\tvar isRename = draftOf !== draftTitle,\\n\\t\\t\\t\\tisConfirmed = true;\\n\\t\\t\\tif(isRename && this.wiki.tiddlerExists(draftTitle)) {\\n\\t\\t\\t\\tisConfirmed = win.confirm($tw.language.getString(\\n\\t\\t\\t\\t\\t\\\"ConfirmOverwriteTiddler\\\",\\n\\t\\t\\t\\t\\t{variables:\\n\\t\\t\\t\\t\\t\\t{title: draftTitle}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t));\\n\\t\\t\\t}\\n\\t\\t\\tif(isConfirmed) {\\n\\t\\t\\t\\t// Create the new tiddler and pass it through the th-saving-tiddler hook\\n\\t\\t\\t\\tvar newTiddler = new $tw.Tiddler(this.wiki.getCreationFields(),tiddler,{\\n\\t\\t\\t\\t\\ttitle: draftTitle,\\n\\t\\t\\t\\t\\t\\\"draft.title\\\": undefined,\\n\\t\\t\\t\\t\\t\\\"draft.of\\\": undefined\\n\\t\\t\\t\\t},this.wiki.getModificationFields());\\n\\t\\t\\t\\tnewTiddler = $tw.hooks.invokeHook(\\\"th-saving-tiddler\\\",newTiddler,tiddler);\\n\\t\\t\\t\\tthis.wiki.addTiddler(newTiddler);\\n\\t\\t\\t\\t// If enabled, relink references to renamed tiddler\\n\\t\\t\\t\\tvar shouldRelink = this.getAttribute(\\\"relinkOnRename\\\",\\\"no\\\").toLowerCase().trim() === \\\"yes\\\";\\n\\t\\t\\t\\tif(isRename && shouldRelink && this.wiki.tiddlerExists(draftOf)) {\\n\\t\\t\\t\\t\\tthis.wiki.relinkTiddler(draftOf,draftTitle);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Remove the draft tiddler\\n\\t\\t\\t\\tthis.wiki.deleteTiddler(title);\\n\\t\\t\\t\\t// Remove the original tiddler if we're renaming it\\n\\t\\t\\t\\tif(isRename) {\\n\\t\\t\\t\\t\\tthis.wiki.deleteTiddler(draftOf);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// #2381 always remove new title & old\\n\\t\\t\\t\\tthis.removeTitleFromStory(storyList,draftTitle);\\n\\t\\t\\t\\tthis.removeTitleFromStory(storyList,draftOf);\\n\\t\\t\\t\\tif(!event.paramObject || event.paramObject.suppressNavigation !== \\\"yes\\\") {\\n\\t\\t\\t\\t\\t// Replace the draft in the story with the original\\n\\t\\t\\t\\t\\tthis.replaceFirstTitleInStory(storyList,title,draftTitle);\\n\\t\\t\\t\\t\\tthis.addToHistory(draftTitle,event.navigateFromClientRect);\\n\\t\\t\\t\\t\\tif(draftTitle !== this.storyTitle) {\\n\\t\\t\\t\\t\\t\\tthis.saveStoryList(storyList);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Trigger an autosave\\n\\t\\t\\t\\t$tw.rootWidget.dispatchEvent({type: \\\"tm-auto-save-wiki\\\"});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\n// Take a tiddler out of edit mode without saving the changes\\nNavigatorWidget.prototype.handleCancelTiddlerEvent = function(event) {\\n\\tevent = $tw.hooks.invokeHook(\\\"th-cancelling-tiddler\\\", event);\\n\\tvar win = event.event && event.event.view ? event.event.view : window;\\n\\t// Flip the specified tiddler from draft back to the original\\n\\tvar draftTitle = event.param || event.tiddlerTitle,\\n\\t\\tdraftTiddler = this.wiki.getTiddler(draftTitle),\\n\\t\\toriginalTitle = draftTiddler && draftTiddler.fields[\\\"draft.of\\\"];\\n\\tif(draftTiddler && originalTitle) {\\n\\t\\t// Ask for confirmation if the tiddler text has changed\\n\\t\\tvar isConfirmed = true,\\n\\t\\t\\toriginalTiddler = this.wiki.getTiddler(originalTitle),\\n\\t\\t\\tstoryList = this.getStoryList();\\n\\t\\tif(this.wiki.isDraftModified(draftTitle)) {\\n\\t\\t\\tisConfirmed = win.confirm($tw.language.getString(\\n\\t\\t\\t\\t\\\"ConfirmCancelTiddler\\\",\\n\\t\\t\\t\\t{variables:\\n\\t\\t\\t\\t\\t{title: draftTitle}\\n\\t\\t\\t\\t}\\n\\t\\t\\t));\\n\\t\\t}\\n\\t\\t// Remove the draft tiddler\\n\\t\\tif(isConfirmed) {\\n\\t\\t\\tthis.wiki.deleteTiddler(draftTitle);\\n\\t\\t\\tif(!event.paramObject || event.paramObject.suppressNavigation !== \\\"yes\\\") {\\n\\t\\t\\t\\tif(originalTiddler) {\\n\\t\\t\\t\\t\\tthis.replaceFirstTitleInStory(storyList,draftTitle,originalTitle);\\n\\t\\t\\t\\t\\tthis.addToHistory(originalTitle,event.navigateFromClientRect);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthis.removeTitleFromStory(storyList,draftTitle);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.saveStoryList(storyList);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\n// Create a new draft tiddler\\n// event.param can either be the title of a template tiddler, or a hashmap of fields.\\n//\\n// The title of the newly created tiddler follows these rules:\\n// * If a hashmap was used and a title field was specified, use that title\\n// * If a hashmap was used without a title field, use a default title, if necessary making it unique with a numeric suffix\\n// * If a template tiddler was used, use the title of the template, if necessary making it unique with a numeric suffix\\n//\\n// If a draft of the target tiddler already exists then it is reused\\nNavigatorWidget.prototype.handleNewTiddlerEvent = function(event) {\\n\\tevent = $tw.hooks.invokeHook(\\\"th-new-tiddler\\\", event);\\n\\t// Get the story details\\n\\tvar storyList = this.getStoryList(),\\n\\t\\ttemplateTiddler, additionalFields, title, draftTitle, existingTiddler;\\n\\t// Get the template tiddler (if any)\\n\\tif(typeof event.param === \\\"string\\\") {\\n\\t\\t// Get the template tiddler\\n\\t\\ttemplateTiddler = this.wiki.getTiddler(event.param);\\n\\t\\t// Generate a new title\\n\\t\\ttitle = this.wiki.generateNewTitle(event.param || $tw.language.getString(\\\"DefaultNewTiddlerTitle\\\"));\\n\\t}\\n\\t// Get the specified additional fields\\n\\tif(typeof event.paramObject === \\\"object\\\") {\\n\\t\\tadditionalFields = event.paramObject;\\n\\t}\\n\\tif(typeof event.param === \\\"object\\\") { // Backwards compatibility with 5.1.3\\n\\t\\tadditionalFields = event.param;\\n\\t}\\n\\tif(additionalFields && additionalFields.title) {\\n\\t\\ttitle = additionalFields.title;\\n\\t}\\n\\t// Make a copy of the additional fields excluding any blank ones\\n\\tvar filteredAdditionalFields = $tw.utils.extend({},additionalFields);\\n\\tObject.keys(filteredAdditionalFields).forEach(function(fieldName) {\\n\\t\\tif(filteredAdditionalFields[fieldName] === \\\"\\\") {\\n\\t\\t\\tdelete filteredAdditionalFields[fieldName];\\n\\t\\t}\\n\\t});\\n\\t// Generate a title if we don't have one\\n\\ttitle = title || this.wiki.generateNewTitle($tw.language.getString(\\\"DefaultNewTiddlerTitle\\\"));\\n\\t// Find any existing draft for this tiddler\\n\\tdraftTitle = this.wiki.findDraft(title);\\n\\t// Pull in any existing tiddler\\n\\tif(draftTitle) {\\n\\t\\texistingTiddler = this.wiki.getTiddler(draftTitle);\\n\\t} else {\\n\\t\\tdraftTitle = this.generateDraftTitle(title);\\n\\t\\texistingTiddler = this.wiki.getTiddler(title);\\n\\t}\\n\\t// Merge the tags\\n\\tvar mergedTags = [];\\n\\tif(existingTiddler && existingTiddler.fields.tags) {\\n\\t\\t$tw.utils.pushTop(mergedTags,existingTiddler.fields.tags);\\n\\t}\\n\\tif(additionalFields && additionalFields.tags) {\\n\\t\\t// Merge tags\\n\\t\\tmergedTags = $tw.utils.pushTop(mergedTags,$tw.utils.parseStringArray(additionalFields.tags));\\n\\t}\\n\\tif(templateTiddler && templateTiddler.fields.tags) {\\n\\t\\t// Merge tags\\n\\t\\tmergedTags = $tw.utils.pushTop(mergedTags,templateTiddler.fields.tags);\\n\\t}\\n\\t// Save the draft tiddler\\n\\tvar draftTiddler = new $tw.Tiddler({\\n\\t\\t\\ttext: \\\"\\\",\\n\\t\\t\\t\\\"draft.title\\\": title\\n\\t\\t},\\n\\t\\ttemplateTiddler,\\n\\t\\tadditionalFields,\\n\\t\\tthis.wiki.getCreationFields(),\\n\\t\\texistingTiddler,\\n\\t\\tfilteredAdditionalFields,\\n\\t\\t{\\n\\t\\t\\ttitle: draftTitle,\\n\\t\\t\\t\\\"draft.of\\\": title,\\n\\t\\t\\ttags: mergedTags\\n\\t\\t},this.wiki.getModificationFields());\\n\\tthis.wiki.addTiddler(draftTiddler);\\n\\t// Update the story to insert the new draft at the top and remove any existing tiddler\\n\\tif(storyList && storyList.indexOf(draftTitle) === -1) {\\n\\t\\tvar slot = storyList.indexOf(event.navigateFromTitle);\\n\\t\\tif(slot === -1) {\\n\\t\\t\\tslot = this.getAttribute(\\\"openLinkFromOutsideRiver\\\",\\\"top\\\") === \\\"bottom\\\" ? storyList.length - 1 : slot;\\n\\t\\t}\\n\\t\\tstoryList.splice(slot + 1,0,draftTitle);\\n\\t}\\n\\tif(storyList && storyList.indexOf(title) !== -1) {\\n\\t\\tstoryList.splice(storyList.indexOf(title),1);\\n\\t}\\n\\tthis.saveStoryList(storyList);\\n\\t// Add a new record to the top of the history stack\\n\\tthis.addToHistory(draftTitle);\\n\\treturn false;\\n};\\n\\n// Import JSON tiddlers into a pending import tiddler\\nNavigatorWidget.prototype.handleImportTiddlersEvent = function(event) {\\n\\t// Get the tiddlers\\n\\tvar tiddlers = $tw.utils.parseJSONSafe(event.param,[]);\\n\\t// Get the current $:/Import tiddler\\n\\tvar importTitle = event.importTitle ? event.importTitle : IMPORT_TITLE,\\n\\t\\timportTiddler = this.wiki.getTiddler(importTitle),\\n\\t\\timportData = this.wiki.getTiddlerData(importTitle,{}),\\n\\t\\tnewFields = new Object({\\n\\t\\t\\ttitle: importTitle,\\n\\t\\t\\ttype: \\\"application/json\\\",\\n\\t\\t\\t\\\"plugin-type\\\": \\\"import\\\",\\n\\t\\t\\t\\\"status\\\": \\\"pending\\\"\\n\\t\\t}),\\n\\t\\tincomingTiddlers = [];\\n\\t// Process each tiddler\\n\\timportData.tiddlers = importData.tiddlers || {};\\n\\t$tw.utils.each(tiddlers,function(tiddlerFields) {\\n\\t\\ttiddlerFields.title = $tw.utils.trim(tiddlerFields.title);\\n\\t\\tvar title = tiddlerFields.title;\\n\\t\\tif(title) {\\n\\t\\t\\tincomingTiddlers.push(title);\\n\\t\\t\\timportData.tiddlers[title] = tiddlerFields;\\n\\t\\t}\\n\\t});\\n\\t// Give the active upgrader modules a chance to process the incoming tiddlers\\n\\tvar messages = this.wiki.invokeUpgraders(incomingTiddlers,importData.tiddlers);\\n\\t// Deselect any disabled, but _not_ suppressed tiddlers\\n\\tvar systemMessage = $tw.language.getString(\\\"Import/Upgrader/Tiddler/Unselected\\\");\\n\\t$tw.utils.each(messages,function(message,title) {\\n\\t\\tnewFields[\\\"message-\\\" + title] = message;\\n\\t\\tif (message.indexOf(systemMessage) !== -1) {\\n\\t\\t\\tnewFields[\\\"selection-\\\" + title] = \\\"unchecked\\\";\\n\\t\\t}\\n\\t});\\n\\t// Deselect suppressed tiddlers ... they have been removed and can't be selected anymore\\n\\t$tw.utils.each(importData.tiddlers,function(tiddler,title) {\\n\\t\\tif($tw.utils.count(tiddler) === 0) {\\n\\t\\t\\tnewFields[\\\"selection-\\\" + title] = \\\"unchecked\\\";\\n\\t\\t\\tnewFields[\\\"suppressed-\\\" + title] = \\\"yes\\\";\\n\\t\\t}\\n\\t});\\n\\t// Save the $:/Import tiddler\\n\\tnewFields.text = JSON.stringify(importData,null,$tw.config.preferences.jsonSpaces);\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(importTiddler,newFields));\\n\\t// Update the story and history details\\n\\tvar autoOpenOnImport = event.autoOpenOnImport ? event.autoOpenOnImport : this.getVariable(\\\"tv-auto-open-on-import\\\");  \\n\\tif(autoOpenOnImport !== \\\"no\\\") {\\n\\t\\tvar storyList = this.getStoryList(),\\n\\t\\t\\thistory = [];\\n\\t\\t// Add it to the story\\n\\t\\tif(storyList && storyList.indexOf(importTitle) === -1) {\\n\\t\\t\\tstoryList.unshift(importTitle);\\n\\t\\t}\\n\\t\\t// And to history\\n\\t\\thistory.push(importTitle);\\n\\t\\t// Save the updated story and history\\n\\t\\tthis.saveStoryList(storyList);\\n\\t\\tthis.addToHistory(history);\\n\\t}\\n\\treturn false;\\n};\\n\\n//\\nNavigatorWidget.prototype.handlePerformImportEvent = function(event) {\\n\\tvar self = this,\\n\\t\\timportTiddler = this.wiki.getTiddler(event.param),\\n\\t\\timportData,\\n\\t\\timportReport = [];\\n\\timportReport.push($tw.language.getString(\\\"Import/Imported/Hint\\\") + \\\"\\\\n\\\");\\n\\t// If you need to modify the import tiddler payload then consider th-importing-tiddler instead\\n\\timportTiddler = $tw.hooks.invokeHook(\\\"th-before-importing\\\",importTiddler);\\n\\timportData = this.wiki.getTiddlerDataCached(event.param,{tiddlers: {}}),\\n\\t$tw.utils.each(importData.tiddlers,function(tiddlerFields) {\\n\\t\\tvar title = tiddlerFields.title;\\n\\t\\tif(title && importTiddler && importTiddler.fields[\\\"selection-\\\" + title] !== \\\"unchecked\\\") {\\n\\t\\t\\tif($tw.utils.hop(importTiddler.fields,[\\\"rename-\\\" + title])) {\\n\\t\\t\\t\\tvar tiddler = new $tw.Tiddler(tiddlerFields,{title : importTiddler.fields[\\\"rename-\\\" + title]});\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar tiddler = new $tw.Tiddler(tiddlerFields);\\n\\t\\t\\t}\\n\\t\\t\\t// th-importing-tiddler doesn't allow user interaction by default\\n\\t\\t\\t// If you want to use the default UI then use: $:/core/modules/upgraders/ instead\\n\\t\\t\\ttiddler = $tw.hooks.invokeHook(\\\"th-importing-tiddler\\\",tiddler);\\n\\t\\t\\t// Add the tiddlers to the store\\n\\t\\t\\tself.wiki.addTiddler(tiddler);\\n\\t\\t\\timportReport.push(\\\"# [[\\\" + tiddler.fields.title + \\\"]]\\\");\\n\\t\\t}\\n\\t});\\n\\t// Replace the $:/Import tiddler with an import report\\n\\tthis.wiki.addTiddler(new $tw.Tiddler({\\n\\t\\ttitle: event.param,\\n\\t\\ttext: importReport.join(\\\"\\\\n\\\"),\\n\\t\\t\\\"status\\\": \\\"complete\\\"\\n\\t}));\\n\\t// Navigate to the $:/Import tiddler\\n\\tthis.addToHistory([event.param]);\\n\\t// Trigger an autosave\\n\\t$tw.rootWidget.dispatchEvent({type: \\\"tm-auto-save-wiki\\\"});\\n};\\n\\nNavigatorWidget.prototype.handleFoldTiddlerEvent = function(event) {\\n\\tvar paramObject = event.paramObject || {};\\n\\tif(paramObject.foldedState) {\\n\\t\\tvar foldedState = this.wiki.getTiddlerText(paramObject.foldedState,\\\"show\\\") === \\\"show\\\" ? \\\"hide\\\" : \\\"show\\\";\\n\\t\\tthis.wiki.setText(paramObject.foldedState,\\\"text\\\",null,foldedState);\\n\\t}\\n};\\n\\nNavigatorWidget.prototype.handleFoldOtherTiddlersEvent = function(event) {\\n\\tvar self = this,\\n\\t\\tparamObject = event.paramObject || {},\\n\\t\\tprefix = paramObject.foldedStatePrefix;\\n\\t$tw.utils.each(this.getStoryList(),function(title) {\\n\\t\\tself.wiki.setText(prefix + title,\\\"text\\\",null,event.param === title ? \\\"show\\\" : \\\"hide\\\");\\n\\t});\\n};\\n\\nNavigatorWidget.prototype.handleFoldAllTiddlersEvent = function(event) {\\n\\tvar self = this,\\n\\t\\tparamObject = event.paramObject || {},\\n\\t\\tprefix = paramObject.foldedStatePrefix || \\\"$:/state/folded/\\\";\\n\\t$tw.utils.each(this.getStoryList(),function(title) {\\n\\t\\tself.wiki.setText(prefix + title,\\\"text\\\",null,\\\"hide\\\");\\n\\t});\\n};\\n\\nNavigatorWidget.prototype.handleUnfoldAllTiddlersEvent = function(event) {\\n\\tvar self = this,\\n\\t\\tparamObject = event.paramObject || {},\\n\\t\\tprefix = paramObject.foldedStatePrefix;\\n\\t$tw.utils.each(this.getStoryList(),function(title) {\\n\\t\\tself.wiki.setText(prefix + title,\\\"text\\\",null,\\\"show\\\");\\n\\t});\\n};\\n\\nexports.navigator = NavigatorWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/password.js\":{\"title\":\"$:/core/modules/widgets/password.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/password.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nPassword widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar PasswordWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nPasswordWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nPasswordWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Get the current password\\n\\tvar password = $tw.browser ? $tw.utils.getPassword(this.passwordName) || \\\"\\\" : \\\"\\\";\\n\\t// Create our element\\n\\tvar domNode = this.document.createElement(\\\"input\\\");\\n\\tdomNode.setAttribute(\\\"type\\\",\\\"password\\\");\\n\\tdomNode.setAttribute(\\\"value\\\",password);\\n\\t// Add a click event handler\\n\\t$tw.utils.addEventListeners(domNode,[\\n\\t\\t{name: \\\"change\\\", handlerObject: this, handlerMethod: \\\"handleChangeEvent\\\"}\\n\\t]);\\n\\t// Insert the label into the DOM and render any children\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nPasswordWidget.prototype.handleChangeEvent = function(event) {\\n\\tvar password = this.domNodes[0].value;\\n\\treturn $tw.utils.savePassword(this.passwordName,password);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nPasswordWidget.prototype.execute = function() {\\n\\t// Get the parameters from the attributes\\n\\tthis.passwordName = this.getAttribute(\\\"name\\\",\\\"\\\");\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nPasswordWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.name) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.password = PasswordWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/qualify.js\":{\"title\":\"$:/core/modules/widgets/qualify.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/qualify.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nQualify text to a variable \\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar QualifyWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nQualifyWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nQualifyWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nQualifyWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.qualifyName = this.getAttribute(\\\"name\\\");\\n\\tthis.qualifyTitle = this.getAttribute(\\\"title\\\");\\n\\t// Set context variable\\n\\tif(this.qualifyName) {\\n\\t\\tthis.setVariable(this.qualifyName,this.qualifyTitle + \\\"-\\\" + this.getStateQualifier());\\n\\t}\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nQualifyWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.name || changedAttributes.title) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.qualify = QualifyWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/radio.js\":{\"title\":\"$:/core/modules/widgets/radio.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/radio.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nSet a field or index at a given tiddler via radio buttons\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar RadioWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRadioWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRadioWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\tvar isChecked = this.getValue() === this.radioValue;\\n\\t// Create our elements\\n\\tthis.labelDomNode = this.document.createElement(\\\"label\\\");\\n\\tthis.labelDomNode.setAttribute(\\\"class\\\",\\n\\t\\t\\\"tc-radio \\\" + this.radioClass + (isChecked ? \\\" tc-radio-selected\\\" : \\\"\\\")\\n\\t);\\n\\tthis.inputDomNode = this.document.createElement(\\\"input\\\");\\n\\tthis.inputDomNode.setAttribute(\\\"type\\\",\\\"radio\\\");\\n\\tif(isChecked) {\\n\\t\\tthis.inputDomNode.checked = true;\\n\\t}\\n\\tif(this.isDisabled === \\\"yes\\\") {\\n\\t\\tthis.inputDomNode.setAttribute(\\\"disabled\\\",true);\\n\\t}\\n\\tthis.labelDomNode.appendChild(this.inputDomNode);\\n\\tthis.spanDomNode = this.document.createElement(\\\"span\\\");\\n\\tthis.labelDomNode.appendChild(this.spanDomNode);\\n\\t// Add a click event handler\\n\\t$tw.utils.addEventListeners(this.inputDomNode,[\\n\\t\\t{name: \\\"change\\\", handlerObject: this, handlerMethod: \\\"handleChangeEvent\\\"}\\n\\t]);\\n\\t// Insert the label into the DOM and render any children\\n\\tparent.insertBefore(this.labelDomNode,nextSibling);\\n\\tthis.renderChildren(this.spanDomNode,null);\\n\\tthis.domNodes.push(this.labelDomNode);\\n};\\n\\nRadioWidget.prototype.getValue = function() {\\n\\tvar value,\\n\\t\\ttiddler = this.wiki.getTiddler(this.radioTitle);\\n\\tif(tiddler) {\\n\\t\\tif(this.radioIndex) {\\n\\t\\t\\tvalue = this.wiki.extractTiddlerDataItem(this.radioTitle,this.radioIndex,this.radioDefault);\\n\\t\\t} else {\\n\\t\\t\\tvalue = tiddler.getFieldString(this.radioField,this.radioDefault);\\n\\t\\t}\\n\\t} else {\\n\\t\\tvalue = this.radioDefault;\\n\\t}\\n\\treturn value;\\n};\\n\\nRadioWidget.prototype.setValue = function() {\\n\\tif(this.radioIndex) {\\n\\t\\tthis.wiki.setText(this.radioTitle,\\\"\\\",this.radioIndex,this.radioValue);\\n\\t} else {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.radioTitle),\\n\\t\\t\\taddition = {};\\n\\t\\taddition[this.radioField] = this.radioValue;\\n\\t\\tthis.wiki.addTiddler(new $tw.Tiddler(this.wiki.getCreationFields(),{title: this.radioTitle},tiddler,addition,this.wiki.getModificationFields()));\\n\\t}\\n};\\n\\nRadioWidget.prototype.handleChangeEvent = function(event) {\\n\\tif(this.inputDomNode.checked) {\\n\\t\\tthis.setValue();\\n\\t}\\n\\t// Trigger actions\\n\\tif(this.radioActions) {\\n\\t\\tthis.invokeActionString(this.radioActions,this,event,{\\\"actionValue\\\": this.radioValue});\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRadioWidget.prototype.execute = function() {\\n\\t// Get the parameters from the attributes\\n\\tthis.radioTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.radioField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\tthis.radioIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.radioValue = this.getAttribute(\\\"value\\\");\\n\\tthis.radioClass = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\tthis.radioDefault = this.getAttribute(\\\"default\\\");\\n\\tthis.isDisabled = this.getAttribute(\\\"disabled\\\",\\\"no\\\");\\n\\tthis.radioActions = this.getAttribute(\\\"actions\\\",\\\"\\\");\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nRadioWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(($tw.utils.count(changedAttributes) > 0)) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if(changedTiddlers[this.radioTitle]) {\\n\\t\\tthis.inputDomNode.checked = this.getValue() === this.radioValue;\\n\\t\\t$tw.utils.toggleClass(this.labelDomNode,\\\"tc-radio-selected\\\",this.inputDomNode.checked);\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.radio = RadioWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/range.js\":{\"title\":\"$:/core/modules/widgets/range.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/range.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nRange widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RangeWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRangeWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRangeWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\t// Create our elements\\n\\tthis.inputDomNode = this.document.createElement(\\\"input\\\");\\n\\tthis.inputDomNode.setAttribute(\\\"type\\\",\\\"range\\\");\\n\\tthis.inputDomNode.setAttribute(\\\"class\\\",this.elementClass);\\n\\tif(this.minValue){\\n\\t\\tthis.inputDomNode.setAttribute(\\\"min\\\", this.minValue);\\n\\t}\\n\\tif(this.maxValue){\\n\\t\\tthis.inputDomNode.setAttribute(\\\"max\\\", this.maxValue);\\n\\t}\\n\\tif(this.increment){\\n\\t\\tthis.inputDomNode.setAttribute(\\\"step\\\", this.increment);\\n\\t}\\n\\tif(this.isDisabled === \\\"yes\\\") {\\n\\t\\tthis.inputDomNode.setAttribute(\\\"disabled\\\",true);\\n\\t}\\n\\tthis.inputDomNode.value = this.getValue();\\n\\t// Add a click event handler\\n\\t$tw.utils.addEventListeners(this.inputDomNode,[\\n\\t\\t{name:\\\"mousedown\\\", handlerObject:this, handlerMethod:\\\"handleMouseDownEvent\\\"},\\n\\t\\t{name:\\\"mouseup\\\",   handlerObject:this, handlerMethod:\\\"handleMouseUpEvent\\\"},\\n\\t\\t{name:\\\"change\\\",    handlerObject:this, handlerMethod:\\\"handleChangeEvent\\\"},\\n\\t\\t{name:\\\"input\\\",     handlerObject:this, handlerMethod:\\\"handleInputEvent\\\"},\\n\\t]);\\n\\t// Insert the label into the DOM and render any children\\n\\tparent.insertBefore(this.inputDomNode,nextSibling);\\n\\tthis.domNodes.push(this.inputDomNode);\\n};\\n\\nRangeWidget.prototype.getValue = function() {\\n\\tvar tiddler = this.wiki.getTiddler(this.tiddlerTitle),\\n\\t\\tfieldName = this.tiddlerField,\\n\\t\\tvalue = this.defaultValue;\\n\\tif(tiddler) {\\n\\t\\tif(this.tiddlerIndex) {\\n\\t\\t\\tvalue = this.wiki.extractTiddlerDataItem(tiddler,this.tiddlerIndex,this.defaultValue);\\n\\t\\t} else {\\n\\t\\t\\tif($tw.utils.hop(tiddler.fields,fieldName)) {\\n\\t\\t\\t\\tvalue = tiddler.fields[fieldName] || \\\"\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvalue = this.defaultValue;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn value;\\n};\\n\\nRangeWidget.prototype.getActionVariables = function(options) {\\n\\toptions = options || {};\\n\\tvar hasChanged = (this.startValue !== this.inputDomNode.value) ? \\\"yes\\\" : \\\"no\\\";\\n\\t// Trigger actions. Use variables = {key:value, key:value ...}\\n\\t// the \\\"value\\\" is needed.\\n\\treturn $tw.utils.extend({\\\"actionValue\\\": this.inputDomNode.value, \\\"actionValueHasChanged\\\": hasChanged}, options);\\n}\\n\\n// actionsStart\\nRangeWidget.prototype.handleMouseDownEvent = function(event) {\\n\\tthis.mouseDown = true; // TODO remove once IE is gone.\\n\\tthis.startValue = this.inputDomNode.value; // TODO remove this line once IE is gone!\\n\\tthis.handleEvent(event);\\n\\t// Trigger actions\\n\\tif(this.actionsMouseDown) {\\n\\t\\tvar variables = this.getActionVariables() // TODO this line will go into the function call below.\\n\\t\\tthis.invokeActionString(this.actionsMouseDown,this,event,variables);\\n\\t}\\n}\\n\\n// actionsStop\\nRangeWidget.prototype.handleMouseUpEvent = function(event) {\\n\\tthis.mouseDown = false; // TODO remove once IE is gone.\\n\\tthis.handleEvent(event);\\n\\t// Trigger actions\\n\\tif(this.actionsMouseUp) {\\n\\t\\tvar variables = this.getActionVariables()\\n\\t\\tthis.invokeActionString(this.actionsMouseUp,this,event,variables);\\n\\t}\\n\\t// TODO remove the following if() once IE is gone!\\n\\tif ($tw.browser.isIE) {\\n\\t\\tif (this.startValue !== this.inputDomNode.value) {\\n\\t\\t\\tthis.handleChangeEvent(event);\\n\\t\\t\\tthis.startValue = this.inputDomNode.value;\\n\\t\\t}\\n\\t}\\n}\\n\\nRangeWidget.prototype.handleChangeEvent = function(event) {\\n\\tif (this.mouseDown) {  // TODO refactor this function once IE is gone.\\n\\t\\tthis.handleInputEvent(event);\\n\\t}\\n};\\n\\nRangeWidget.prototype.handleInputEvent = function(event) {\\n\\tthis.handleEvent(event);\\n\\t// Trigger actions\\n\\tif(this.actionsInput) {\\n\\t\\t// \\\"tiddler\\\" parameter may be missing. See .execute() below\\n\\t\\tvar variables = this.getActionVariables({\\\"actionValueHasChanged\\\": \\\"yes\\\"}) // TODO this line will go into the function call below.\\n\\t\\tthis.invokeActionString(this.actionsInput,this,event,variables);\\n\\t}\\n};\\n\\nRangeWidget.prototype.handleEvent = function(event) {\\n\\tif(this.getValue() !== this.inputDomNode.value) {\\n\\t\\tif(this.tiddlerIndex) {\\n\\t\\t\\tthis.wiki.setText(this.tiddlerTitle,\\\"\\\",this.tiddlerIndex,this.inputDomNode.value);\\n\\t\\t} else {\\n\\t\\t\\tthis.wiki.setText(this.tiddlerTitle,this.tiddlerField,null,this.inputDomNode.value);\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRangeWidget.prototype.execute = function() {\\n\\t// TODO remove the next 1 lines once IE is gone!\\n\\tthis.mouseUp = true; // Needed for IE10\\n\\t// Get the parameters from the attributes\\n\\tthis.tiddlerTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.tiddlerField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\tthis.tiddlerIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.minValue = this.getAttribute(\\\"min\\\");\\n\\tthis.maxValue = this.getAttribute(\\\"max\\\");\\n\\tthis.increment = this.getAttribute(\\\"increment\\\");\\n\\tthis.defaultValue = this.getAttribute(\\\"default\\\",\\\"\\\");\\n\\tthis.elementClass = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\tthis.isDisabled = this.getAttribute(\\\"disabled\\\",\\\"no\\\");\\n\\t// Actions since 5.1.23\\n\\t// Next 2 only fire once!\\n\\tthis.actionsMouseDown = this.getAttribute(\\\"actionsStart\\\",\\\"\\\");\\n\\tthis.actionsMouseUp = this.getAttribute(\\\"actionsStop\\\",\\\"\\\");\\n\\t// Input fires very often!\\n\\tthis.actionsInput = this.getAttribute(\\\"actions\\\",\\\"\\\");\\n\\t// Make the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nRangeWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tvar refreshed = false;\\n\\t\\tif(changedTiddlers[this.tiddlerTitle]) {\\n\\t\\t\\tvar value = this.getValue();\\n\\t\\t\\tif(this.inputDomNode.value !== value) {\\n\\t\\t\\t\\tthis.inputDomNode.value = value;\\n\\t\\t\\t}\\n\\t\\t\\trefreshed = true;\\n\\t\\t}\\n\\t\\treturn this.refreshChildren(changedTiddlers) || refreshed;\\n\\t}\\n};\\n\\nexports.range = RangeWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/raw.js\":{\"title\":\"$:/core/modules/widgets/raw.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/raw.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nRaw widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RawWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRawWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRawWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.execute();\\n\\tvar div = this.document.createElement(\\\"div\\\");\\n\\tdiv.innerHTML=this.parseTreeNode.html;\\n\\tparent.insertBefore(div,nextSibling);\\n\\tthis.domNodes.push(div);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRawWidget.prototype.execute = function() {\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nRawWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn false;\\n};\\n\\nexports.raw = RawWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/reveal.js\":{\"title\":\"$:/core/modules/widgets/reveal.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/reveal.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nReveal widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RevealWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRevealWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRevealWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar tag = this.parseTreeNode.isBlock ? \\\"div\\\" : \\\"span\\\";\\n\\tif(this.revealTag && $tw.config.htmlUnsafeElements.indexOf(this.revealTag) === -1) {\\n\\t\\ttag = this.revealTag;\\n\\t}\\n\\tvar domNode = this.document.createElement(tag);\\n\\tthis.domNode = domNode;\\n\\tthis.assignDomNodeClasses();\\n\\tif(this.style) {\\n\\t\\tdomNode.setAttribute(\\\"style\\\",this.style);\\n\\t}\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tif(!domNode.isTiddlyWikiFakeDom && this.type === \\\"popup\\\" && this.isOpen) {\\n\\t\\tthis.positionPopup(domNode);\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-popup\\\"); // Make sure that clicks don't dismiss popups within the revealed content\\n\\t}\\n\\tif(!this.isOpen) {\\n\\t\\tdomNode.setAttribute(\\\"hidden\\\",\\\"true\\\");\\n\\t}\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nRevealWidget.prototype.positionPopup = function(domNode) {\\n\\tdomNode.style.position = \\\"absolute\\\";\\n\\tdomNode.style.zIndex = \\\"1000\\\";\\n\\tvar left,top;\\n\\tswitch(this.position) {\\n\\t\\tcase \\\"left\\\":\\n\\t\\t\\tleft = this.popup.left - domNode.offsetWidth;\\n\\t\\t\\ttop = this.popup.top;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"above\\\":\\n\\t\\t\\tleft = this.popup.left;\\n\\t\\t\\ttop = this.popup.top - domNode.offsetHeight;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"aboveright\\\":\\n\\t\\t\\tleft = this.popup.left + this.popup.width;\\n\\t\\t\\ttop = this.popup.top + this.popup.height - domNode.offsetHeight;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"belowright\\\":\\n\\t\\t\\tleft = this.popup.left + this.popup.width;\\n\\t\\t\\ttop = this.popup.top + this.popup.height;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"right\\\":\\n\\t\\t\\tleft = this.popup.left + this.popup.width;\\n\\t\\t\\ttop = this.popup.top;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"belowleft\\\":\\n\\t\\t\\tleft = this.popup.left + this.popup.width - domNode.offsetWidth;\\n\\t\\t\\ttop = this.popup.top + this.popup.height;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"aboveleft\\\":\\n\\t\\t\\tleft = this.popup.left - domNode.offsetWidth;\\n\\t\\t\\ttop = this.popup.top - domNode.offsetHeight;\\n\\t\\t\\tbreak;\\n\\t\\tdefault: // Below\\n\\t\\t\\tleft = this.popup.left;\\n\\t\\t\\ttop = this.popup.top + this.popup.height;\\n\\t\\t\\tbreak;\\n\\t}\\n\\tif(!this.positionAllowNegative) {\\n\\t\\tleft = Math.max(0,left);\\n\\t\\ttop = Math.max(0,top);\\n\\t}\\n\\tdomNode.style.left = left + \\\"px\\\";\\n\\tdomNode.style.top = top + \\\"px\\\";\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRevealWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.state = this.getAttribute(\\\"state\\\");\\n\\tthis.revealTag = this.getAttribute(\\\"tag\\\");\\n\\tthis.type = this.getAttribute(\\\"type\\\");\\n\\tthis.text = this.getAttribute(\\\"text\\\");\\n\\tthis.position = this.getAttribute(\\\"position\\\");\\n\\tthis.positionAllowNegative = this.getAttribute(\\\"positionAllowNegative\\\") === \\\"yes\\\";\\n\\t// class attribute handled in assignDomNodeClasses()\\n\\tthis.style = this.getAttribute(\\\"style\\\",\\\"\\\");\\n\\tthis[\\\"default\\\"] = this.getAttribute(\\\"default\\\",\\\"\\\");\\n\\tthis.animate = this.getAttribute(\\\"animate\\\",\\\"no\\\");\\n\\tthis.retain = this.getAttribute(\\\"retain\\\",\\\"no\\\");\\n\\tthis.openAnimation = this.animate === \\\"no\\\" ? undefined : \\\"open\\\";\\n\\tthis.closeAnimation = this.animate === \\\"no\\\" ? undefined : \\\"close\\\";\\n\\tthis.updatePopupPosition = this.getAttribute(\\\"updatePopupPosition\\\",\\\"no\\\") === \\\"yes\\\";\\n\\t// Compute the title of the state tiddler and read it\\n\\tthis.stateTiddlerTitle = this.state;\\n\\tthis.stateTitle = this.getAttribute(\\\"stateTitle\\\");\\n\\tthis.stateField = this.getAttribute(\\\"stateField\\\");\\n\\tthis.stateIndex = this.getAttribute(\\\"stateIndex\\\");\\n\\tthis.readState();\\n\\t// Construct the child widgets\\n\\tvar childNodes = this.isOpen ? this.parseTreeNode.children : [];\\n\\tthis.hasChildNodes = this.isOpen;\\n\\tthis.makeChildWidgets(childNodes);\\n};\\n\\n/*\\nRead the state tiddler\\n*/\\nRevealWidget.prototype.readState = function() {\\n\\t// Read the information from the state tiddler\\n\\tvar state,\\n\\t    defaultState = this[\\\"default\\\"];\\n\\tif(this.stateTitle) {\\n\\t\\tvar stateTitleTiddler = this.wiki.getTiddler(this.stateTitle);\\n\\t\\tif(this.stateField) {\\n\\t\\t\\tstate = stateTitleTiddler ? stateTitleTiddler.getFieldString(this.stateField) || defaultState : defaultState;\\n\\t\\t} else if(this.stateIndex) {\\n\\t\\t\\tstate = stateTitleTiddler ? this.wiki.extractTiddlerDataItem(this.stateTitle,this.stateIndex) || defaultState : defaultState;\\n\\t\\t} else if(stateTitleTiddler) {\\n\\t\\t\\tstate = this.wiki.getTiddlerText(this.stateTitle) || defaultState;\\n\\t\\t} else {\\n\\t\\t\\tstate = defaultState;\\n\\t\\t}\\n\\t} else {\\n\\t\\tstate = this.stateTiddlerTitle ? this.wiki.getTextReference(this.state,this[\\\"default\\\"],this.getVariable(\\\"currentTiddler\\\")) : this[\\\"default\\\"];\\n\\t}\\n\\tif(state === null) {\\n\\t\\tstate = this[\\\"default\\\"];\\n\\t}\\n\\tswitch(this.type) {\\n\\t\\tcase \\\"popup\\\":\\n\\t\\t\\tthis.readPopupState(state);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"match\\\":\\n\\t\\t\\tthis.isOpen = this.text === state;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"nomatch\\\":\\n\\t\\t\\tthis.isOpen = this.text !== state;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"lt\\\":\\n\\t\\t\\tthis.isOpen = !!(this.compareStateText(state) \u003C 0);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"gt\\\":\\n\\t\\t\\tthis.isOpen = !!(this.compareStateText(state) > 0);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"lteq\\\":\\n\\t\\t\\tthis.isOpen = !(this.compareStateText(state) > 0);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"gteq\\\":\\n\\t\\t\\tthis.isOpen = !(this.compareStateText(state) \u003C 0);\\n\\t\\t\\tbreak;\\n\\t}\\n};\\n\\nRevealWidget.prototype.compareStateText = function(state) {\\n\\treturn state.localeCompare(this.text,undefined,{numeric: true,sensitivity: \\\"case\\\"});\\n};\\n\\nRevealWidget.prototype.readPopupState = function(state) {\\n\\tvar popupLocationRegExp = /^\\\\((-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+)\\\\)$/,\\n\\t\\tmatch = popupLocationRegExp.exec(state);\\n\\t// Check if the state matches the location regexp\\n\\tif(match) {\\n\\t\\t// If so, we're open\\n\\t\\tthis.isOpen = true;\\n\\t\\t// Get the location\\n\\t\\tthis.popup = {\\n\\t\\t\\tleft: parseFloat(match[1]),\\n\\t\\t\\ttop: parseFloat(match[2]),\\n\\t\\t\\twidth: parseFloat(match[3]),\\n\\t\\t\\theight: parseFloat(match[4])\\n\\t\\t};\\n\\t} else {\\n\\t\\t// If not, we're closed\\n\\t\\tthis.isOpen = false;\\n\\t}\\n};\\n\\nRevealWidget.prototype.assignDomNodeClasses = function() {\\n\\tvar classes = this.getAttribute(\\\"class\\\",\\\"\\\").split(\\\" \\\");\\n\\tclasses.push(\\\"tc-reveal\\\");\\n\\tthis.domNode.className = classes.join(\\\" \\\");\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nRevealWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.state || changedAttributes.type || changedAttributes.text || changedAttributes.position || changedAttributes.positionAllowNegative || changedAttributes[\\\"default\\\"] || changedAttributes.animate || changedAttributes.stateTitle || changedAttributes.stateField || changedAttributes.stateIndex) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tvar currentlyOpen = this.isOpen;\\n\\t\\tthis.readState();\\n\\t\\tif(this.isOpen !== currentlyOpen) {\\n\\t\\t\\tif(this.retain === \\\"yes\\\") {\\n\\t\\t\\t\\tthis.updateState();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t} else if(this.type === \\\"popup\\\" && this.isOpen && this.updatePopupPosition && (changedTiddlers[this.state] || changedTiddlers[this.stateTitle])) {\\n\\t\\t\\tthis.positionPopup(this.domNode);\\n\\t\\t}\\n\\t\\tif(changedAttributes.style) {\\n\\t\\t\\tthis.domNode.style = this.getAttribute(\\\"style\\\",\\\"\\\");\\n\\t\\t}\\n\\t\\tif(changedAttributes[\\\"class\\\"]) {\\n\\t\\t\\tthis.assignDomNodeClasses();\\n\\t\\t}\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\n/*\\nCalled by refresh() to dynamically show or hide the content\\n*/\\nRevealWidget.prototype.updateState = function() {\\n\\tvar self = this;\\n\\t// Read the current state\\n\\tthis.readState();\\n\\t// Construct the child nodes if needed\\n\\tvar domNode = this.domNodes[0];\\n\\tif(this.isOpen && !this.hasChildNodes) {\\n\\t\\tthis.hasChildNodes = true;\\n\\t\\tthis.makeChildWidgets(this.parseTreeNode.children);\\n\\t\\tthis.renderChildren(domNode,null);\\n\\t}\\n\\t// Animate our DOM node\\n\\tif(!domNode.isTiddlyWikiFakeDom && this.type === \\\"popup\\\" && this.isOpen) {\\n\\t\\tthis.positionPopup(domNode);\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-popup\\\"); // Make sure that clicks don't dismiss popups within the revealed content\\n\\n\\t}\\n\\tif(this.isOpen) {\\n\\t\\tdomNode.removeAttribute(\\\"hidden\\\");\\n        $tw.anim.perform(this.openAnimation,domNode);\\n\\t} else {\\n\\t\\t$tw.anim.perform(this.closeAnimation,domNode,{callback: function() {\\n\\t\\t\\t//make sure that the state hasn't changed during the close animation\\n\\t\\t\\tself.readState()\\n\\t\\t\\tif(!self.isOpen) {\\n\\t\\t\\t\\tdomNode.setAttribute(\\\"hidden\\\",\\\"true\\\");\\n\\t\\t\\t}\\n\\t\\t}});\\n\\t}\\n};\\n\\nexports.reveal = RevealWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/scrollable.js\":{\"title\":\"$:/core/modules/widgets/scrollable.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/scrollable.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nScrollable widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ScrollableWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nScrollableWidget.prototype = new Widget();\\n\\nScrollableWidget.prototype.cancelScroll = function() {\\n\\tif(this.idRequestFrame) {\\n\\t\\tthis.cancelAnimationFrame.call(window,this.idRequestFrame);\\n\\t\\tthis.idRequestFrame = null;\\n\\t}\\n};\\n\\n/*\\nHandle a scroll event\\n*/\\nScrollableWidget.prototype.handleScrollEvent = function(event) {\\n\\t// Pass the scroll event through if our offsetsize is larger than our scrollsize\\n\\tif(this.outerDomNode.scrollWidth \u003C= this.outerDomNode.offsetWidth && this.outerDomNode.scrollHeight \u003C= this.outerDomNode.offsetHeight && this.fallthrough === \\\"yes\\\") {\\n\\t\\treturn true;\\n\\t}\\n\\tvar options = {};\\n\\tif($tw.utils.hop(event.paramObject,\\\"animationDuration\\\")) {\\n\\t\\toptions.animationDuration = event.paramObject.animationDuration;\\n\\t}\\n\\tif(event.paramObject && event.paramObject.selector) {\\n\\t\\tthis.scrollSelectorIntoView(null,event.paramObject.selector,null,options);\\n\\t} else {\\n\\t\\tthis.scrollIntoView(event.target,null,options);\\n\\t}\\n\\treturn false; // Handled event\\n};\\n\\n/*\\nScroll an element into view\\n*/\\nScrollableWidget.prototype.scrollIntoView = function(element,callback,options) {\\n\\tvar duration = $tw.utils.hop(options,\\\"animationDuration\\\") ? parseInt(options.animationDuration) : $tw.utils.getAnimationDuration(),\\n\\t\\tsrcWindow = element ? element.ownerDocument.defaultView : window;\\n\\tthis.cancelScroll();\\n\\tthis.startTime = Date.now();\\n\\tvar scrollPosition = {\\n\\t\\tx: this.outerDomNode.scrollLeft,\\n\\t\\ty: this.outerDomNode.scrollTop\\n\\t};\\n\\t// Get the client bounds of the element and adjust by the scroll position\\n\\tvar scrollableBounds = this.outerDomNode.getBoundingClientRect(),\\n\\t\\tclientTargetBounds = element.getBoundingClientRect(),\\n\\t\\tbounds = {\\n\\t\\t\\tleft: clientTargetBounds.left + scrollPosition.x - scrollableBounds.left,\\n\\t\\t\\ttop: clientTargetBounds.top + scrollPosition.y - scrollableBounds.top,\\n\\t\\t\\twidth: clientTargetBounds.width,\\n\\t\\t\\theight: clientTargetBounds.height\\n\\t\\t};\\n\\t// We'll consider the horizontal and vertical scroll directions separately via this function\\n\\tvar getEndPos = function(targetPos,targetSize,currentPos,currentSize) {\\n\\t\\t\\t// If the target is already visible then stay where we are\\n\\t\\t\\tif(targetPos >= currentPos && (targetPos + targetSize) \u003C= (currentPos + currentSize)) {\\n\\t\\t\\t\\treturn currentPos;\\n\\t\\t\\t// If the target is above/left of the current view, then scroll to its top/left\\n\\t\\t\\t} else if(targetPos \u003C= currentPos) {\\n\\t\\t\\t\\treturn targetPos;\\n\\t\\t\\t// If the target is smaller than the window and the scroll position is too far up, then scroll till the target is at the bottom of the window\\n\\t\\t\\t} else if(targetSize \u003C currentSize && currentPos \u003C (targetPos + targetSize - currentSize)) {\\n\\t\\t\\t\\treturn targetPos + targetSize - currentSize;\\n\\t\\t\\t// If the target is big, then just scroll to the top\\n\\t\\t\\t} else if(currentPos \u003C targetPos) {\\n\\t\\t\\t\\treturn targetPos;\\n\\t\\t\\t// Otherwise, stay where we are\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn currentPos;\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tendX = getEndPos(bounds.left,bounds.width,scrollPosition.x,this.outerDomNode.offsetWidth),\\n\\t\\tendY = getEndPos(bounds.top,bounds.height,scrollPosition.y,this.outerDomNode.offsetHeight);\\n\\t// Only scroll if necessary\\n\\tif(endX !== scrollPosition.x || endY !== scrollPosition.y) {\\n\\t\\tvar self = this,\\n\\t\\t\\tdrawFrame;\\n\\t\\tdrawFrame = function () {\\n\\t\\t\\tvar t;\\n\\t\\t\\tif(duration \u003C= 0) {\\n\\t\\t\\t\\tt = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tt = ((Date.now()) - self.startTime) / duration;\\n\\t\\t\\t}\\n\\t\\t\\tif(t >= 1) {\\n\\t\\t\\t\\tself.cancelScroll();\\n\\t\\t\\t\\tt = 1;\\n\\t\\t\\t}\\n\\t\\t\\tt = $tw.utils.slowInSlowOut(t);\\n\\t\\t\\tself.outerDomNode.scrollLeft = scrollPosition.x + (endX - scrollPosition.x) * t;\\n\\t\\t\\tself.outerDomNode.scrollTop = scrollPosition.y + (endY - scrollPosition.y) * t;\\n\\t\\t\\tif(t \u003C 1) {\\n\\t\\t\\t\\tself.idRequestFrame = self.requestAnimationFrame.call(srcWindow,drawFrame);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tdrawFrame();\\n\\t}\\n};\\n\\nScrollableWidget.prototype.scrollSelectorIntoView = function(baseElement,selector,callback,options) {\\n\\tbaseElement = baseElement || document.body;\\n\\tvar element = baseElement.querySelector(selector);\\n\\tif(element) {\\n\\t\\tthis.scrollIntoView(element,callback,options);\\n\\t}\\n};\\n\\n/*\\nRender this widget into the DOM\\n*/\\nScrollableWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\tthis.scaleFactor = 1;\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"tm-scroll\\\", handler: \\\"handleScrollEvent\\\"}\\n\\t]);\\n\\tif($tw.browser) {\\n\\t\\tthis.requestAnimationFrame = window.requestAnimationFrame ||\\n\\t\\t\\twindow.webkitRequestAnimationFrame ||\\n\\t\\t\\twindow.mozRequestAnimationFrame ||\\n\\t\\t\\tfunction(callback) {\\n\\t\\t\\t\\treturn window.setTimeout(callback, 1000/60);\\n\\t\\t\\t};\\n\\t\\tthis.cancelAnimationFrame = window.cancelAnimationFrame ||\\n\\t\\t\\twindow.webkitCancelAnimationFrame ||\\n\\t\\t\\twindow.webkitCancelRequestAnimationFrame ||\\n\\t\\t\\twindow.mozCancelAnimationFrame ||\\n\\t\\t\\twindow.mozCancelRequestAnimationFrame ||\\n\\t\\t\\tfunction(id) {\\n\\t\\t\\t\\twindow.clearTimeout(id);\\n\\t\\t\\t};\\n\\t}\\n\\t// Remember parent\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes and execute state\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\t// Create elements\\n\\tthis.outerDomNode = this.document.createElement(\\\"div\\\");\\n\\t$tw.utils.setStyle(this.outerDomNode,[\\n\\t\\t{webkitOverflowScrolling: \\\"touch\\\"}\\n\\t]);\\n\\tthis.innerDomNode = this.document.createElement(\\\"div\\\");\\n\\tthis.outerDomNode.appendChild(this.innerDomNode);\\n\\t// Assign classes\\n\\tthis.outerDomNode.className = this[\\\"class\\\"] || \\\"\\\";\\n\\t// Insert element\\n\\tparent.insertBefore(this.outerDomNode,nextSibling);\\n\\tthis.renderChildren(this.innerDomNode,null);\\n\\tthis.domNodes.push(this.outerDomNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nScrollableWidget.prototype.execute = function() {\\n\\t// Get attributes\\n\\tthis.fallthrough = this.getAttribute(\\\"fallthrough\\\",\\\"yes\\\");\\n\\tthis[\\\"class\\\"] = this.getAttribute(\\\"class\\\");\\n\\t// Make child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nScrollableWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports.scrollable = ScrollableWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/select.js\":{\"title\":\"$:/core/modules/widgets/select.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/select.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nSelect widget:\\n\\n```\\n\u003C$select tiddler=\\\"MyTiddler\\\" field=\\\"text\\\">\\n\u003C$list filter=\\\"[tag[chapter]]\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>\\n\u003C$view field=\\\"description\\\"/>\\n\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar SelectWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nSelectWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nSelectWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n\\tthis.setSelectValue();\\n\\t$tw.utils.addEventListeners(this.getSelectDomNode(),[\\n\\t\\t{name: \\\"change\\\", handlerObject: this, handlerMethod: \\\"handleChangeEvent\\\"}\\n\\t]);\\n};\\n\\n/*\\nHandle a change event\\n*/\\nSelectWidget.prototype.handleChangeEvent = function(event) {\\n\\t// Get the new value and assign it to the tiddler\\n\\tif(this.selectMultiple == false) {\\n\\t\\tvar value = this.getSelectDomNode().value;\\n\\t} else {\\n\\t\\tvar value = this.getSelectValues()\\n\\t\\t\\t\\tvalue = $tw.utils.stringifyList(value);\\n\\t}\\n\\tthis.wiki.setText(this.selectTitle,this.selectField,this.selectIndex,value);\\n\\t// Trigger actions\\n\\tif(this.selectActions) {\\n\\t\\tthis.invokeActionString(this.selectActions,this,event);\\n\\t}\\n};\\n\\n/*\\nIf necessary, set the value of the select element to the current value\\n*/\\nSelectWidget.prototype.setSelectValue = function() {\\n\\tvar value = this.selectDefault;\\n\\t// Get the value\\n\\tif(this.selectIndex) {\\n\\t\\tvalue = this.wiki.extractTiddlerDataItem(this.selectTitle,this.selectIndex,value);\\n\\t} else {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.selectTitle);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tif(this.selectField === \\\"text\\\") {\\n\\t\\t\\t\\t// Calling getTiddlerText() triggers lazy loading of skinny tiddlers\\n\\t\\t\\t\\tvalue = this.wiki.getTiddlerText(this.selectTitle);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif($tw.utils.hop(tiddler.fields,this.selectField)) {\\n\\t\\t\\t\\t\\tvalue = tiddler.getFieldString(this.selectField);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif(this.selectField === \\\"title\\\") {\\n\\t\\t\\t\\tvalue = this.selectTitle;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Assign it to the select element if it's different than the current value\\n\\tif (this.selectMultiple) {\\n\\t\\tvalue = value === undefined ? \\\"\\\" : value;\\n\\t\\tvar select = this.getSelectDomNode();\\n\\t\\tvar values = Array.isArray(value) ? value : $tw.utils.parseStringArray(value);\\n\\t\\tfor(var i=0; i \u003C select.children.length; i++){\\n\\t\\t\\tselect.children[i].selected = values.indexOf(select.children[i].value) !== -1\\n\\t\\t}\\n\\t} else {\\n\\t\\tvar domNode = this.getSelectDomNode();\\n\\t\\tif(domNode.value !== value) {\\n\\t\\t\\tdomNode.value = value;\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nGet the DOM node of the select element\\n*/\\nSelectWidget.prototype.getSelectDomNode = function() {\\n\\treturn this.children[0].domNodes[0];\\n};\\n\\n// Return an array of the selected opion values\\n// select is an HTML select element\\nSelectWidget.prototype.getSelectValues = function() {\\n\\tvar select, result, options, opt;\\n\\tselect = this.getSelectDomNode();\\n\\tresult = [];\\n\\toptions = select && select.options;\\n\\tfor (var i=0; i\u003Coptions.length; i++) {\\n\\t\\topt = options[i];\\n\\t\\tif (opt.selected) {\\n\\t\\t\\tresult.push(opt.value || opt.text);\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n}\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nSelectWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.selectActions = this.getAttribute(\\\"actions\\\");\\n\\tthis.selectTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.selectField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\tthis.selectIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.selectClass = this.getAttribute(\\\"class\\\");\\n\\tthis.selectDefault = this.getAttribute(\\\"default\\\");\\n\\tthis.selectMultiple = this.getAttribute(\\\"multiple\\\", false);\\n\\tthis.selectSize = this.getAttribute(\\\"size\\\");\\n\\tthis.selectTooltip = this.getAttribute(\\\"tooltip\\\");\\n\\t// Make the child widgets\\n\\tvar selectNode = {\\n\\t\\ttype: \\\"element\\\",\\n\\t\\ttag: \\\"select\\\",\\n\\t\\tchildren: this.parseTreeNode.children\\n\\t};\\n\\tif(this.selectClass) {\\n\\t\\t$tw.utils.addAttributeToParseTreeNode(selectNode,\\\"class\\\",this.selectClass);\\n\\t}\\n\\tif(this.selectMultiple) {\\n\\t\\t$tw.utils.addAttributeToParseTreeNode(selectNode,\\\"multiple\\\",\\\"multiple\\\");\\n\\t}\\n\\tif(this.selectSize) {\\n\\t\\t$tw.utils.addAttributeToParseTreeNode(selectNode,\\\"size\\\",this.selectSize);\\n\\t}\\n\\tif(this.selectTooltip) {\\n\\t\\t$tw.utils.addAttributeToParseTreeNode(selectNode,\\\"title\\\",this.selectTooltip);\\n\\t}\\n\\tthis.makeChildWidgets([selectNode]);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nSelectWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// If we're using a different tiddler/field/index then completely refresh ourselves\\n\\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes.tooltip) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t// If the target tiddler value has changed, just update setting and refresh the children\\n\\t} else {\\n\\t\\tvar childrenRefreshed = this.refreshChildren(changedTiddlers);\\n\\t\\tif(changedTiddlers[this.selectTitle] || childrenRefreshed) {\\n\\t\\t\\tthis.setSelectValue();\\n\\t\\t} \\n\\t\\treturn childrenRefreshed;\\n\\t}\\n};\\n\\nexports.select = SelectWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/setmultiplevariables.js\":{\"title\":\"$:/core/modules/widgets/setmultiplevariables.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/setmultiplevariables.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget to set multiple variables at once from a list of names and a list of values\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar SetMultipleVariablesWidget = function(parseTreeNode,options) {\\n    this.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nSetMultipleVariablesWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nSetMultipleVariablesWidget.prototype.render = function(parent,nextSibling) {\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n    this.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nSetMultipleVariablesWidget.prototype.execute = function() {\\n    // Setup our variables\\n    this.setVariables();\\n    // Construct the child widgets\\n    this.makeChildWidgets();\\n};\\n\\n\\nSetMultipleVariablesWidget.prototype.setVariables = function() {\\n    // Set the variables\\n    var self = this,\\n        filterNames = this.getAttribute(\\\"$names\\\",\\\"\\\"),\\n        filterValues = this.getAttribute(\\\"$values\\\",\\\"\\\");\\n    this.variableNames = [];\\n    this.variableValues = [];\\n    if(filterNames && filterValues) {\\n        this.variableNames = this.wiki.filterTiddlers(filterNames,this);\\n        this.variableValues = this.wiki.filterTiddlers(filterValues,this);\\n        $tw.utils.each(this.variableNames,function(varname,index) {\\n            self.setVariable(varname,self.variableValues[index]);\\n        });\\n    }\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nSetMultipleVariablesWidget.prototype.refresh = function(changedTiddlers) {\\n    var filterNames = this.getAttribute(\\\"$names\\\",\\\"\\\"),\\n        filterValues = this.getAttribute(\\\"$values\\\",\\\"\\\"),\\n        variableNames = this.wiki.filterTiddlers(filterNames,this),\\n        variableValues = this.wiki.filterTiddlers(filterValues,this);\\n    if(!$tw.utils.isArrayEqual(this.variableNames,variableNames) || !$tw.utils.isArrayEqual(this.variableValues,variableValues)) {\\n        this.refreshSelf();\\n        return true;\\n    }\\n    return this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"setmultiplevariables\\\"] = SetMultipleVariablesWidget;\\n\\n})();\\n        \",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/set.js\":{\"title\":\"$:/core/modules/widgets/set.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/set.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nSet variable widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar SetWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nSetWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nSetWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nSetWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.setName = this.getAttribute(\\\"name\\\",\\\"currentTiddler\\\");\\n\\tthis.setFilter = this.getAttribute(\\\"filter\\\");\\n\\tthis.setSelect = this.getAttribute(\\\"select\\\");\\n\\tthis.setTiddler = this.getAttribute(\\\"tiddler\\\");\\n\\tthis.setSubTiddler = this.getAttribute(\\\"subtiddler\\\");\\n\\tthis.setField = this.getAttribute(\\\"field\\\");\\n\\tthis.setIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.setValue = this.getAttribute(\\\"value\\\");\\n\\tthis.setEmptyValue = this.getAttribute(\\\"emptyValue\\\");\\n\\t// Set context variable\\n\\tthis.setVariable(this.setName,this.getValue(),this.parseTreeNode.params,!!this.parseTreeNode.isMacroDefinition);\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nGet the value to be assigned\\n*/\\nSetWidget.prototype.getValue = function() {\\n\\tvar value = this.setValue;\\n\\tif(this.setTiddler) {\\n\\t\\tvar tiddler;\\n\\t\\tif(this.setSubTiddler) {\\n\\t\\t\\ttiddler = this.wiki.getSubTiddler(this.setTiddler,this.setSubTiddler);\\n\\t\\t} else {\\n\\t\\t\\ttiddler = this.wiki.getTiddler(this.setTiddler);\\n\\t\\t}\\n\\t\\tif(!tiddler) {\\n\\t\\t\\tvalue = this.setEmptyValue;\\n\\t\\t} else if(this.setField) {\\n\\t\\t\\tvalue = tiddler.getFieldString(this.setField) || this.setEmptyValue;\\n\\t\\t} else if(this.setIndex) {\\n\\t\\t\\tvalue = this.wiki.extractTiddlerDataItem(this.setTiddler,this.setIndex,this.setEmptyValue);\\n\\t\\t} else {\\n\\t\\t\\tvalue = tiddler.fields.text || this.setEmptyValue ;\\n\\t\\t}\\n\\t} else if(this.setFilter) {\\n\\t\\tvar results = this.wiki.filterTiddlers(this.setFilter,this);\\n\\t\\tif(this.setValue == null) {\\n\\t\\t\\tvar select;\\n\\t\\t\\tif(this.setSelect) {\\n\\t\\t\\t\\tselect = parseInt(this.setSelect,10);\\n\\t\\t\\t}\\n\\t\\t\\tif(select !== undefined) {\\n\\t\\t\\t\\tvalue = results[select] || \\\"\\\";\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvalue = $tw.utils.stringifyList(results);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(results.length === 0 && this.setEmptyValue !== undefined) {\\n\\t\\t\\tvalue = this.setEmptyValue;\\n\\t\\t}\\n\\t} else if(!value && this.setEmptyValue) {\\n\\t\\tvalue = this.setEmptyValue;\\n\\t}\\n\\treturn value || \\\"\\\";\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nSetWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.name || changedAttributes.filter || changedAttributes.select || changedAttributes.tiddler || (this.setTiddler && changedTiddlers[this.setTiddler]) || changedAttributes.field || changedAttributes.index || changedAttributes.value || changedAttributes.emptyValue ||\\n\\t   (this.setFilter && this.getValue() != this.variables[this.setName].value)) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.setvariable = SetWidget;\\nexports.set = SetWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/text.js\":{\"title\":\"$:/core/modules/widgets/text.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/text.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nText node widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar TextNodeWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nTextNodeWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nTextNodeWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar text = this.getAttribute(\\\"text\\\",this.parseTreeNode.text || \\\"\\\");\\n\\ttext = text.replace(/\\\\r/mg,\\\"\\\");\\n\\tvar textNode = this.document.createTextNode(text);\\n\\tparent.insertBefore(textNode,nextSibling);\\n\\tthis.domNodes.push(textNode);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nTextNodeWidget.prototype.execute = function() {\\n\\t// Nothing to do for a text node\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nTextNodeWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.text) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.text = TextNodeWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/tiddler.js\":{\"title\":\"$:/core/modules/widgets/tiddler.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/tiddler.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nTiddler widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar TiddlerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nTiddlerWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nTiddlerWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nTiddlerWidget.prototype.execute = function() {\\n\\tthis.tiddlerState = this.computeTiddlerState();\\n\\tthis.setVariable(\\\"currentTiddler\\\",this.tiddlerState.currentTiddler);\\n\\tthis.setVariable(\\\"missingTiddlerClass\\\",this.tiddlerState.missingTiddlerClass);\\n\\tthis.setVariable(\\\"shadowTiddlerClass\\\",this.tiddlerState.shadowTiddlerClass);\\n\\tthis.setVariable(\\\"systemTiddlerClass\\\",this.tiddlerState.systemTiddlerClass);\\n\\tthis.setVariable(\\\"tiddlerTagClasses\\\",this.tiddlerState.tiddlerTagClasses);\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nCompute the tiddler state flags\\n*/\\nTiddlerWidget.prototype.computeTiddlerState = function() {\\n\\t// Get our parameters\\n\\tthis.tiddlerTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\t// Compute the state\\n\\tvar state = {\\n\\t\\tcurrentTiddler: this.tiddlerTitle || \\\"\\\",\\n\\t\\tmissingTiddlerClass: (this.wiki.tiddlerExists(this.tiddlerTitle) || this.wiki.isShadowTiddler(this.tiddlerTitle)) ? \\\"tc-tiddler-exists\\\" : \\\"tc-tiddler-missing\\\",\\n\\t\\tshadowTiddlerClass: this.wiki.isShadowTiddler(this.tiddlerTitle) ? \\\"tc-tiddler-shadow\\\" : \\\"\\\",\\n\\t\\tsystemTiddlerClass: this.wiki.isSystemTiddler(this.tiddlerTitle) ? \\\"tc-tiddler-system\\\" : \\\"\\\",\\n\\t\\ttiddlerTagClasses: this.getTagClasses()\\n\\t};\\n\\t// Compute a simple hash to make it easier to detect changes\\n\\tstate.hash = state.currentTiddler + state.missingTiddlerClass + state.shadowTiddlerClass + state.systemTiddlerClass + state.tiddlerTagClasses;\\n\\treturn state;\\n};\\n\\n/*\\nCreate a string of CSS classes derived from the tags of the current tiddler\\n*/\\nTiddlerWidget.prototype.getTagClasses = function() {\\n\\tvar tiddler = this.wiki.getTiddler(this.tiddlerTitle);\\n\\tif(tiddler) {\\n\\t\\tvar tags = [];\\n\\t\\t$tw.utils.each(tiddler.fields.tags,function(tag) {\\n\\t\\t\\ttags.push(\\\"tc-tagged-\\\" + encodeURIComponent(tag));\\n\\t\\t});\\n\\t\\treturn tags.join(\\\" \\\");\\n\\t} else {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nTiddlerWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes(),\\n\\t\\tnewTiddlerState = this.computeTiddlerState();\\n\\tif(changedAttributes.tiddler || newTiddlerState.hash !== this.tiddlerState.hash) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.tiddler = TiddlerWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/transclude.js\":{\"title\":\"$:/core/modules/widgets/transclude.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/transclude.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nTransclude widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar TranscludeWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nTranscludeWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nTranscludeWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nTranscludeWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.transcludeTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.transcludeSubTiddler = this.getAttribute(\\\"subtiddler\\\");\\n\\tthis.transcludeField = this.getAttribute(\\\"field\\\");\\n\\tthis.transcludeIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.transcludeMode = this.getAttribute(\\\"mode\\\");\\n\\tthis.recursionMarker = this.getAttribute(\\\"recursionMarker\\\",\\\"yes\\\");\\n\\t// Parse the text reference\\n\\tvar parseAsInline = !this.parseTreeNode.isBlock;\\n\\tif(this.transcludeMode === \\\"inline\\\") {\\n\\t\\tparseAsInline = true;\\n\\t} else if(this.transcludeMode === \\\"block\\\") {\\n\\t\\tparseAsInline = false;\\n\\t}\\n\\tvar parser = this.wiki.parseTextReference(\\n\\t\\t\\t\\t\\t\\tthis.transcludeTitle,\\n\\t\\t\\t\\t\\t\\tthis.transcludeField,\\n\\t\\t\\t\\t\\t\\tthis.transcludeIndex,\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tparseAsInline: parseAsInline,\\n\\t\\t\\t\\t\\t\\t\\tsubTiddler: this.transcludeSubTiddler\\n\\t\\t\\t\\t\\t\\t}),\\n\\t\\tparseTreeNodes = parser ? parser.tree : this.parseTreeNode.children;\\n\\tthis.sourceText = parser ? parser.source : null;\\n\\tthis.parserType = parser? parser.type : null;\\n\\t// Set context variables for recursion detection\\n\\tvar recursionMarker = this.makeRecursionMarker();\\n\\tif(this.recursionMarker === \\\"yes\\\") {\\n\\t\\tthis.setVariable(\\\"transclusion\\\",recursionMarker);\\n\\t}\\n\\t// Check for recursion\\n\\tif(parser) {\\n\\t\\tif(this.parentWidget && this.parentWidget.hasVariable(\\\"transclusion\\\",recursionMarker)) {\\n\\t\\t\\tparseTreeNodes = [{type: \\\"element\\\", tag: \\\"span\\\", attributes: {\\n\\t\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"tc-error\\\"}\\n\\t\\t\\t}, children: [\\n\\t\\t\\t\\t{type: \\\"text\\\", text: $tw.language.getString(\\\"Error/RecursiveTransclusion\\\")}\\n\\t\\t\\t]}];\\n\\t\\t}\\n\\t}\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n};\\n\\n/*\\nCompose a string comprising the title, field and/or index to identify this transclusion for recursion detection\\n*/\\nTranscludeWidget.prototype.makeRecursionMarker = function() {\\n\\tvar output = [];\\n\\toutput.push(\\\"{\\\");\\n\\toutput.push(this.getVariable(\\\"currentTiddler\\\",{defaultValue: \\\"\\\"}));\\n\\toutput.push(\\\"|\\\");\\n\\toutput.push(this.transcludeTitle || \\\"\\\");\\n\\toutput.push(\\\"|\\\");\\n\\toutput.push(this.transcludeField || \\\"\\\");\\n\\toutput.push(\\\"|\\\");\\n\\toutput.push(this.transcludeIndex || \\\"\\\");\\n\\toutput.push(\\\"|\\\");\\n\\toutput.push(this.transcludeSubTiddler || \\\"\\\");\\n\\toutput.push(\\\"}\\\");\\n\\treturn output.join(\\\"\\\");\\n};\\n\\nTranscludeWidget.prototype.parserNeedsRefresh = function() {\\n\\tvar parserInfo = this.wiki.getTextReferenceParserInfo(this.transcludeTitle,this.transcludeField,this.transcludeIndex,{subTiddler:this.transcludeSubTiddler});\\n\\treturn (this.sourceText === undefined || parserInfo.sourceText !== this.sourceText || parserInfo.parserType !== this.parserType)\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nTranscludeWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(($tw.utils.count(changedAttributes) > 0) || (changedTiddlers[this.transcludeTitle] && this.parserNeedsRefresh())) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.transclude = TranscludeWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/vars.js\":{\"title\":\"$:/core/modules/widgets/vars.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/vars.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nThis widget allows multiple variables to be set in one go:\\n\\n```\\n\\\\define helloworld() Hello world!\\n\u003C$vars greeting=\\\"Hi\\\" me={{!!title}} sentence=\u003C\u003Chelloworld>>>\\n  \u003C\u003Cgreeting>>! I am \u003C\u003Cme>> and I say: \u003C\u003Csentence>>\\n\u003C/$vars>\\n```\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar VarsWidget = function(parseTreeNode,options) {\\n\\t// Initialise\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nVarsWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nVarsWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nVarsWidget.prototype.execute = function() {\\n\\t// Parse variables\\n\\tvar self = this;\\n\\t$tw.utils.each(this.attributes,function(val,key) {\\n\\t\\tif(key.charAt(0) !== \\\"$\\\") {\\n\\t\\t\\tself.setVariable(key,val);\\n\\t\\t}\\n\\t});\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nVarsWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\nexports[\\\"vars\\\"] = VarsWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/view.js\":{\"title\":\"$:/core/modules/widgets/view.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/view.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nView widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar ViewWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nViewWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nViewWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tif(this.text) {\\n\\t\\tvar textNode = this.document.createTextNode(this.text);\\n\\t\\tparent.insertBefore(textNode,nextSibling);\\n\\t\\tthis.domNodes.push(textNode);\\n\\t} else {\\n\\t\\tthis.makeChildWidgets();\\n\\t\\tthis.renderChildren(parent,nextSibling);\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nViewWidget.prototype.execute = function() {\\n\\t// Get parameters from our attributes\\n\\tthis.viewTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.viewSubtiddler = this.getAttribute(\\\"subtiddler\\\");\\n\\tthis.viewField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\tthis.viewIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.viewFormat = this.getAttribute(\\\"format\\\",\\\"text\\\");\\n\\tthis.viewTemplate = this.getAttribute(\\\"template\\\",\\\"\\\");\\n\\tthis.viewMode = this.getAttribute(\\\"mode\\\",\\\"block\\\");\\n\\tswitch(this.viewFormat) {\\n\\t\\tcase \\\"htmlwikified\\\":\\n\\t\\t\\tthis.text = this.getValueAsHtmlWikified(this.viewMode);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"plainwikified\\\":\\n\\t\\t\\tthis.text = this.getValueAsPlainWikified(this.viewMode);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"htmlencodedplainwikified\\\":\\n\\t\\t\\tthis.text = this.getValueAsHtmlEncodedPlainWikified(this.viewMode);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"htmlencoded\\\":\\n\\t\\t\\tthis.text = this.getValueAsHtmlEncoded();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"htmltextencoded\\\":\\n\\t\\t\\tthis.text = this.getValueAsHtmlTextEncoded();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"urlencoded\\\":\\n\\t\\t\\tthis.text = this.getValueAsUrlEncoded();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"doubleurlencoded\\\":\\n\\t\\t\\tthis.text = this.getValueAsDoubleUrlEncoded();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"date\\\":\\n\\t\\t\\tthis.text = this.getValueAsDate(this.viewTemplate);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"relativedate\\\":\\n\\t\\t\\tthis.text = this.getValueAsRelativeDate();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"stripcomments\\\":\\n\\t\\t\\tthis.text = this.getValueAsStrippedComments();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"jsencoded\\\":\\n\\t\\t\\tthis.text = this.getValueAsJsEncoded();\\n\\t\\t\\tbreak;\\n\\t\\tdefault: // \\\"text\\\"\\n\\t\\t\\tthis.text = this.getValueAsText();\\n\\t\\t\\tbreak;\\n\\t}\\n};\\n\\n/*\\nThe various formatter functions are baked into this widget for the moment. Eventually they will be replaced by macro functions\\n*/\\n\\n/*\\nRetrieve the value of the widget. Options are:\\nasString: Optionally return the value as a string\\n*/\\nViewWidget.prototype.getValue = function(options) {\\n\\toptions = options || {};\\n\\tvar value = options.asString ? \\\"\\\" : undefined;\\n\\tif(this.viewIndex) {\\n\\t\\tvalue = this.wiki.extractTiddlerDataItem(this.viewTitle,this.viewIndex);\\n\\t} else {\\n\\t\\tvar tiddler;\\n\\t\\tif(this.viewSubtiddler) {\\n\\t\\t\\ttiddler = this.wiki.getSubTiddler(this.viewTitle,this.viewSubtiddler);\\n\\t\\t} else {\\n\\t\\t\\ttiddler = this.wiki.getTiddler(this.viewTitle);\\n\\t\\t}\\n\\t\\tif(tiddler) {\\n\\t\\t\\tif(this.viewField === \\\"text\\\" && !this.viewSubtiddler) {\\n\\t\\t\\t\\t// Calling getTiddlerText() triggers lazy loading of skinny tiddlers\\n\\t\\t\\t\\tvalue = this.wiki.getTiddlerText(this.viewTitle);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif($tw.utils.hop(tiddler.fields,this.viewField)) {\\n\\t\\t\\t\\t\\tif(options.asString) {\\n\\t\\t\\t\\t\\t\\tvalue = tiddler.getFieldString(this.viewField);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tvalue = tiddler.fields[this.viewField];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif(this.viewField === \\\"title\\\") {\\n\\t\\t\\t\\tvalue = this.viewTitle;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn value;\\n};\\n\\nViewWidget.prototype.getValueAsText = function() {\\n\\treturn this.getValue({asString: true});\\n};\\n\\nViewWidget.prototype.getValueAsHtmlWikified = function(mode) {\\n\\treturn this.wiki.renderText(\\\"text/html\\\",\\\"text/vnd.tiddlywiki\\\",this.getValueAsText(),{\\n\\t\\tparseAsInline: mode !== \\\"block\\\",\\n\\t\\tparentWidget: this\\n\\t});\\n};\\n\\nViewWidget.prototype.getValueAsPlainWikified = function(mode) {\\n\\treturn this.wiki.renderText(\\\"text/plain\\\",\\\"text/vnd.tiddlywiki\\\",this.getValueAsText(),{\\n\\t\\tparseAsInline: mode !== \\\"block\\\",\\n\\t\\tparentWidget: this\\n\\t});\\n};\\n\\nViewWidget.prototype.getValueAsHtmlEncodedPlainWikified = function(mode) {\\n\\treturn $tw.utils.htmlEncode(this.wiki.renderText(\\\"text/plain\\\",\\\"text/vnd.tiddlywiki\\\",this.getValueAsText(),{\\n\\t\\tparseAsInline: mode !== \\\"block\\\",\\n\\t\\tparentWidget: this\\n\\t}));\\n};\\n\\nViewWidget.prototype.getValueAsHtmlEncoded = function() {\\n\\treturn $tw.utils.htmlEncode(this.getValueAsText());\\n};\\n\\nViewWidget.prototype.getValueAsHtmlTextEncoded = function() {\\n\\treturn $tw.utils.htmlTextEncode(this.getValueAsText());\\n};\\n\\nViewWidget.prototype.getValueAsUrlEncoded = function() {\\n\\treturn encodeURIComponent(this.getValueAsText());\\n};\\n\\nViewWidget.prototype.getValueAsDoubleUrlEncoded = function() {\\n\\treturn encodeURIComponent(encodeURIComponent(this.getValueAsText()));\\n};\\n\\nViewWidget.prototype.getValueAsDate = function(format) {\\n\\tformat = format || \\\"YYYY MM DD 0hh:0mm\\\";\\n\\tvar value = $tw.utils.parseDate(this.getValue());\\n\\tif(value && $tw.utils.isDate(value) && value.toString() !== \\\"Invalid Date\\\") {\\n\\t\\treturn $tw.utils.formatDateString(value,format);\\n\\t} else {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n};\\n\\nViewWidget.prototype.getValueAsRelativeDate = function(format) {\\n\\tvar value = $tw.utils.parseDate(this.getValue());\\n\\tif(value && $tw.utils.isDate(value) && value.toString() !== \\\"Invalid Date\\\") {\\n\\t\\treturn $tw.utils.getRelativeDate((new Date()) - (new Date(value))).description;\\n\\t} else {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n};\\n\\nViewWidget.prototype.getValueAsStrippedComments = function() {\\n\\tvar lines = this.getValueAsText().split(\\\"\\\\n\\\"),\\n\\t\\tout = [];\\n\\tfor(var line=0; line\u003Clines.length; line++) {\\n\\t\\tvar text = lines[line];\\n\\t\\tif(!/^\\\\s*\\\\/\\\\/#/.test(text)) {\\n\\t\\t\\tout.push(text);\\n\\t\\t}\\n\\t}\\n\\treturn out.join(\\\"\\\\n\\\");\\n};\\n\\nViewWidget.prototype.getValueAsJsEncoded = function() {\\n\\treturn $tw.utils.stringify(this.getValueAsText());\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nViewWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.index || changedAttributes.template || changedAttributes.format || changedTiddlers[this.viewTitle]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n};\\n\\nexports.view = ViewWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/widget.js\":{\"title\":\"$:/core/modules/widgets/widget.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget base class\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nCreate a widget object for a parse tree node\\n\\tparseTreeNode: reference to the parse tree node to be rendered\\n\\toptions: see below\\nOptions include:\\n\\twiki: mandatory reference to wiki associated with this render tree\\n\\tparentWidget: optional reference to a parent renderer node for the context chain\\n\\tdocument: optional document object to use instead of global document\\n*/\\nvar Widget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInitialise widget properties. These steps are pulled out of the constructor so that we can reuse them in subclasses\\n*/\\nWidget.prototype.initialise = function(parseTreeNode,options) {\\n\\t// Bail if parseTreeNode is undefined, meaning  that the widget constructor was called without any arguments so that it can be subclassed\\n\\tif(parseTreeNode === undefined) {\\n\\t\\treturn;\\n\\t}\\n\\toptions = options || {};\\n\\t// Save widget info\\n\\tthis.parseTreeNode = parseTreeNode;\\n\\tthis.wiki = options.wiki;\\n\\tthis.parentWidget = options.parentWidget;\\n\\tthis.variablesConstructor = function() {};\\n\\tthis.variablesConstructor.prototype = this.parentWidget ? this.parentWidget.variables : {};\\n\\tthis.variables = new this.variablesConstructor();\\n\\tthis.document = options.document;\\n\\tthis.attributes = {};\\n\\tthis.children = [];\\n\\tthis.domNodes = [];\\n\\tthis.eventListeners = {};\\n\\t// Hashmap of the widget classes\\n\\tif(!this.widgetClasses) {\\n\\t\\t// Get widget classes\\n\\t\\tWidget.prototype.widgetClasses = $tw.modules.applyMethods(\\\"widget\\\");\\n\\t\\t// Process any subclasses\\n\\t\\t$tw.modules.forEachModuleOfType(\\\"widget-subclass\\\",function(title,module) {\\n\\t\\t\\tif(module.baseClass) {\\n\\t\\t\\t\\tvar baseClass = Widget.prototype.widgetClasses[module.baseClass];\\n\\t\\t\\t\\tif(!baseClass) {\\n\\t\\t\\t\\t\\tthrow \\\"Module '\\\" + title + \\\"' is attemping to extend a non-existent base class '\\\" + module.baseClass + \\\"'\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar subClass = module.constructor;\\n\\t\\t\\t\\tsubClass.prototype = new baseClass();\\n\\t\\t\\t\\t$tw.utils.extend(subClass.prototype,module.prototype);\\n\\t\\t\\t\\tWidget.prototype.widgetClasses[module.name || module.baseClass] = subClass;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nRender this widget into the DOM\\n*/\\nWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nWidget.prototype.execute = function() {\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSet the value of a context variable\\nname: name of the variable\\nvalue: value of the variable\\nparams: array of {name:, default:} for each parameter\\nisMacroDefinition: true if the variable is set via a \\\\define macro pragma (and hence should have variable substitution performed)\\n*/\\nWidget.prototype.setVariable = function(name,value,params,isMacroDefinition) {\\n\\tthis.variables[name] = {value: value, params: params, isMacroDefinition: !!isMacroDefinition};\\n};\\n\\n/*\\nGet the prevailing value of a context variable\\nname: name of variable\\noptions: see below\\nOptions include\\nparams: array of {name:, value:} for each parameter\\ndefaultValue: default value if the variable is not defined\\n\\nReturns an object with the following fields:\\n\\nparams: array of {name:,value:} of parameters passed to wikitext variables\\ntext: text of variable, with parameters properly substituted\\n*/\\nWidget.prototype.getVariableInfo = function(name,options) {\\n\\toptions = options || {};\\n\\tvar actualParams = options.params || [],\\n\\t\\tparentWidget = this.parentWidget;\\n\\t// Check for the variable defined in the parent widget (or an ancestor in the prototype chain)\\n\\tif(parentWidget && name in parentWidget.variables) {\\n\\t\\tvar variable = parentWidget.variables[name],\\n\\t\\t\\toriginalValue = variable.value,\\n\\t\\t\\tvalue = originalValue,\\n\\t\\t\\tparams = this.resolveVariableParameters(variable.params,actualParams);\\n\\t\\t// Substitute any parameters specified in the definition\\n\\t\\t$tw.utils.each(params,function(param) {\\n\\t\\t\\tvalue = $tw.utils.replaceString(value,new RegExp(\\\"\\\\\\\\$\\\" + $tw.utils.escapeRegExp(param.name) + \\\"\\\\\\\\$\\\",\\\"mg\\\"),param.value);\\n\\t\\t});\\n\\t\\t// Only substitute variable references if this variable was defined with the \\\\define pragma\\n\\t\\tif(variable.isMacroDefinition) {\\n\\t\\t\\tvalue = this.substituteVariableReferences(value,options);\\n\\t\\t}\\n\\t\\treturn {\\n\\t\\t\\ttext: value,\\n\\t\\t\\tparams: params,\\n\\t\\t\\tsrcVariable: variable,\\n\\t\\t\\tisCacheable: originalValue === value\\n\\t\\t};\\n\\t}\\n\\t// If the variable doesn't exist in the parent widget then look for a macro module\\n\\treturn {\\n\\t\\ttext: this.evaluateMacroModule(name,actualParams,options.defaultValue)\\n\\t};\\n};\\n\\n/*\\nSimplified version of getVariableInfo() that just returns the text\\n*/\\nWidget.prototype.getVariable = function(name,options) {\\n\\treturn this.getVariableInfo(name,options).text;\\n};\\n\\nWidget.prototype.resolveVariableParameters = function(formalParams,actualParams) {\\n\\tformalParams = formalParams || [];\\n\\tactualParams = actualParams || [];\\n\\tvar nextAnonParameter = 0, // Next candidate anonymous parameter in macro call\\n\\t\\tparamInfo, paramValue,\\n\\t\\tresults = [];\\n\\t// Step through each of the parameters in the macro definition\\n\\tfor(var p=0; p\u003CformalParams.length; p++) {\\n\\t\\t// Check if we've got a macro call parameter with the same name\\n\\t\\tparamInfo = formalParams[p];\\n\\t\\tparamValue = undefined;\\n\\t\\tfor(var m=0; m\u003CactualParams.length; m++) {\\n\\t\\t\\tif(actualParams[m].name === paramInfo.name) {\\n\\t\\t\\t\\tparamValue = actualParams[m].value;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// If not, use the next available anonymous macro call parameter\\n\\t\\twhile(nextAnonParameter \u003C actualParams.length && actualParams[nextAnonParameter].name) {\\n\\t\\t\\tnextAnonParameter++;\\n\\t\\t}\\n\\t\\tif(paramValue === undefined && nextAnonParameter \u003C actualParams.length) {\\n\\t\\t\\tparamValue = actualParams[nextAnonParameter++].value;\\n\\t\\t}\\n\\t\\t// If we've still not got a value, use the default, if any\\n\\t\\tparamValue = paramValue || paramInfo[\\\"default\\\"] || \\\"\\\";\\n\\t\\t// Store the parameter name and value\\n\\t\\tresults.push({name: paramInfo.name, value: paramValue});\\n\\t}\\n\\treturn results;\\n};\\n\\nWidget.prototype.substituteVariableReferences = function(text,options) {\\n\\tvar self = this;\\n\\treturn (text || \\\"\\\").replace(/\\\\$\\\\(([^\\\\)\\\\$]+)\\\\)\\\\$/g,function(match,p1,offset,string) {\\n\\t\\treturn options.variables && options.variables[p1] || (self.getVariable(p1,{defaultValue: \\\"\\\"}));\\n\\t});\\n};\\n\\nWidget.prototype.evaluateMacroModule = function(name,actualParams,defaultValue) {\\n\\tif($tw.utils.hop($tw.macros,name)) {\\n\\t\\tvar macro = $tw.macros[name],\\n\\t\\t\\targs = [];\\n\\t\\tif(macro.params.length > 0) {\\n\\t\\t\\tvar nextAnonParameter = 0, // Next candidate anonymous parameter in macro call\\n\\t\\t\\t\\tparamInfo, paramValue;\\n\\t\\t\\t// Step through each of the parameters in the macro definition\\n\\t\\t\\tfor(var p=0; p\u003Cmacro.params.length; p++) {\\n\\t\\t\\t\\t// Check if we've got a macro call parameter with the same name\\n\\t\\t\\t\\tparamInfo = macro.params[p];\\n\\t\\t\\t\\tparamValue = undefined;\\n\\t\\t\\t\\tfor(var m=0; m\u003CactualParams.length; m++) {\\n\\t\\t\\t\\t\\tif(actualParams[m].name === paramInfo.name) {\\n\\t\\t\\t\\t\\t\\tparamValue = actualParams[m].value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If not, use the next available anonymous macro call parameter\\n\\t\\t\\t\\twhile(nextAnonParameter \u003C actualParams.length && actualParams[nextAnonParameter].name) {\\n\\t\\t\\t\\t\\tnextAnonParameter++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(paramValue === undefined && nextAnonParameter \u003C actualParams.length) {\\n\\t\\t\\t\\t\\tparamValue = actualParams[nextAnonParameter++].value;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If we've still not got a value, use the default, if any\\n\\t\\t\\t\\tparamValue = paramValue || paramInfo[\\\"default\\\"] || \\\"\\\";\\n\\t\\t\\t\\t// Save the parameter\\n\\t\\t\\t\\targs.push(paramValue);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse for(var i=0; i\u003CactualParams.length; ++i) {\\n\\t\\t\\targs.push(actualParams[i].value);\\n\\t\\t}\\n\\t\\treturn (macro.run.apply(this,args) || \\\"\\\").toString();\\n\\t} else {\\n\\t\\treturn defaultValue;\\n\\t}\\n};\\n\\n/*\\nCheck whether a given context variable value exists in the parent chain\\n*/\\nWidget.prototype.hasVariable = function(name,value) {\\n\\tvar node = this;\\n\\twhile(node) {\\n\\t\\tif($tw.utils.hop(node.variables,name) && node.variables[name].value === value) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tnode = node.parentWidget;\\n\\t}\\n\\treturn false;\\n};\\n\\n/*\\nConstruct a qualifying string based on a hash of concatenating the values of a given variable in the parent chain\\n*/\\nWidget.prototype.getStateQualifier = function(name) {\\n\\tthis.qualifiers = this.qualifiers || Object.create(null);\\n\\tname = name || \\\"transclusion\\\";\\n\\tif(this.qualifiers[name]) {\\n\\t\\treturn this.qualifiers[name];\\n\\t} else {\\n\\t\\tvar output = [],\\n\\t\\t\\tnode = this;\\n\\t\\twhile(node && node.parentWidget) {\\n\\t\\t\\tif($tw.utils.hop(node.parentWidget.variables,name)) {\\n\\t\\t\\t\\toutput.push(node.getVariable(name));\\n\\t\\t\\t}\\n\\t\\t\\tnode = node.parentWidget;\\n\\t\\t}\\n\\t\\tvar value = $tw.utils.hashString(output.join(\\\"\\\"));\\n\\t\\tthis.qualifiers[name] = value;\\n\\t\\treturn value;\\n\\t}\\n};\\n\\n/*\\nCompute the current values of the attributes of the widget. Returns a hashmap of the names of the attributes that have changed\\n*/\\nWidget.prototype.computeAttributes = function() {\\n\\tvar changedAttributes = {},\\n\\t\\tself = this;\\n\\t$tw.utils.each(this.parseTreeNode.attributes,function(attribute,name) {\\n\\t\\tvar value = self.computeAttribute(attribute);\\n\\t\\tif(self.attributes[name] !== value) {\\n\\t\\t\\tself.attributes[name] = value;\\n\\t\\t\\tchangedAttributes[name] = true;\\n\\t\\t}\\n\\t});\\n\\treturn changedAttributes;\\n};\\n\\nWidget.prototype.computeAttribute = function(attribute) {\\n\\tvar value;\\n\\tif(attribute.type === \\\"filtered\\\") {\\n\\t\\tvalue = this.wiki.filterTiddlers(attribute.filter,this)[0] || \\\"\\\";\\n\\t} else if(attribute.type === \\\"indirect\\\") {\\n\\t\\tvalue = this.wiki.getTextReference(attribute.textReference,\\\"\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\t} else if(attribute.type === \\\"macro\\\") {\\n\\t\\tvalue = this.getVariable(attribute.value.name,{params: attribute.value.params});\\n\\t} else { // String attribute\\n\\t\\tvalue = attribute.value;\\n\\t}\\n\\treturn value;\\n};\\n\\n/*\\nCheck for the presence of an attribute\\n*/\\nWidget.prototype.hasAttribute = function(name) {\\n\\treturn $tw.utils.hop(this.attributes,name);\\n};\\n\\n/*\\nGet the value of an attribute\\n*/\\nWidget.prototype.getAttribute = function(name,defaultText) {\\n\\tif($tw.utils.hop(this.attributes,name)) {\\n\\t\\treturn this.attributes[name];\\n\\t} else {\\n\\t\\treturn defaultText;\\n\\t}\\n};\\n\\n/*\\nAssign the computed attributes of the widget to a domNode\\noptions include:\\nexcludeEventAttributes: ignores attributes whose name begins with \\\"on\\\"\\n*/\\nWidget.prototype.assignAttributes = function(domNode,options) {\\n\\toptions = options || {};\\n\\tvar self = this;\\n\\tvar assignAttribute = function(name,value) {\\n\\t\\t// Check for excluded attribute names\\n\\t\\tif(options.excludeEventAttributes && name.substr(0,2) === \\\"on\\\") {\\n\\t\\t\\tvalue = undefined;\\n\\t\\t}\\n\\t\\tif(value !== undefined) {\\n\\t\\t\\t// Handle the xlink: namespace\\n\\t\\t\\tvar namespace = null;\\n\\t\\t\\tif(name.substr(0,6) === \\\"xlink:\\\" && name.length > 6) {\\n\\t\\t\\t\\tnamespace = \\\"http://www.w3.org/1999/xlink\\\";\\n\\t\\t\\t\\tname = name.substr(6);\\n\\t\\t\\t}\\n\\t\\t\\t// Handle styles\\n\\t\\t\\tif(name.substr(0,6) === \\\"style.\\\" && name.length > 6) {\\n\\t\\t\\t\\tdomNode.style[$tw.utils.unHyphenateCss(name.substr(6))] = value;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Setting certain attributes can cause a DOM error (eg xmlns on the svg element)\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tdomNode.setAttributeNS(namespace,name,value);\\n\\t\\t\\t\\t} catch(e) {\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Not all parse tree nodes have the orderedAttributes property\\n\\tif(this.parseTreeNode.orderedAttributes) {\\n\\t\\t$tw.utils.each(this.parseTreeNode.orderedAttributes,function(attribute,index) {\\n\\t\\t\\tassignAttribute(attribute.name,self.attributes[attribute.name]);\\n\\t\\t});\\t\\n\\t} else {\\n\\t\\t$tw.utils.each(Object.keys(self.attributes).sort(),function(name) {\\n\\t\\t\\tassignAttribute(name,self.attributes[name]);\\n\\t\\t});\\t\\n\\t}\\n};\\n\\n/*\\nMake child widgets correspondng to specified parseTreeNodes\\n*/\\nWidget.prototype.makeChildWidgets = function(parseTreeNodes,options) {\\n\\toptions = options || {};\\n\\tthis.children = [];\\n\\tvar self = this;\\n\\t// Create set variable widgets for each variable\\n\\t$tw.utils.each(options.variables,function(value,name) {\\n\\t\\tvar setVariableWidget = {\\n\\t\\t\\ttype: \\\"set\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tname: {type: \\\"string\\\", value: name},\\n\\t\\t\\t\\tvalue: {type: \\\"string\\\", value: value}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: parseTreeNodes\\n\\t\\t};\\n\\t\\tparseTreeNodes = [setVariableWidget];\\n\\t});\\n\\t$tw.utils.each(parseTreeNodes || (this.parseTreeNode && this.parseTreeNode.children),function(childNode) {\\n\\t\\tself.children.push(self.makeChildWidget(childNode));\\n\\t});\\n};\\n\\n/*\\nConstruct the widget object for a parse tree node\\noptions include:\\n\\tvariables: optional hashmap of variables to wrap around the widget\\n*/\\nWidget.prototype.makeChildWidget = function(parseTreeNode,options) {\\n\\toptions = options || {};\\n\\tvar WidgetClass = this.widgetClasses[parseTreeNode.type];\\n\\tif(!WidgetClass) {\\n\\t\\tWidgetClass = this.widgetClasses.text;\\n\\t\\tparseTreeNode = {type: \\\"text\\\", text: \\\"Undefined widget '\\\" + parseTreeNode.type + \\\"'\\\"};\\n\\t}\\n\\t// Create set variable widgets for each variable\\n\\t$tw.utils.each(options.variables,function(value,name) {\\n\\t\\tvar setVariableWidget = {\\n\\t\\t\\ttype: \\\"set\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tname: {type: \\\"string\\\", value: name},\\n\\t\\t\\t\\tvalue: {type: \\\"string\\\", value: value}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tparseTreeNode\\n\\t\\t\\t]\\n\\t\\t};\\n\\t\\tparseTreeNode = setVariableWidget;\\n\\t});\\n\\treturn new WidgetClass(parseTreeNode,{\\n\\t\\twiki: this.wiki,\\n\\t\\tparentWidget: this,\\n\\t\\tdocument: this.document\\n\\t});\\n};\\n\\n/*\\nGet the next sibling of this widget\\n*/\\nWidget.prototype.nextSibling = function() {\\n\\tif(this.parentWidget) {\\n\\t\\tvar index = this.parentWidget.children.indexOf(this);\\n\\t\\tif(index !== -1 && index \u003C this.parentWidget.children.length-1) {\\n\\t\\t\\treturn this.parentWidget.children[index+1];\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nGet the previous sibling of this widget\\n*/\\nWidget.prototype.previousSibling = function() {\\n\\tif(this.parentWidget) {\\n\\t\\tvar index = this.parentWidget.children.indexOf(this);\\n\\t\\tif(index !== -1 && index > 0) {\\n\\t\\t\\treturn this.parentWidget.children[index-1];\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nRender the children of this widget into the DOM\\n*/\\nWidget.prototype.renderChildren = function(parent,nextSibling) {\\n\\tvar children = this.children;\\n\\tfor(var i = 0; i \u003C children.length; i++) {\\n\\t\\tchildren[i].render(parent,nextSibling);\\n\\t};\\n};\\n\\n/*\\nAdd a list of event listeners from an array [{type:,handler:},...]\\n*/\\nWidget.prototype.addEventListeners = function(listeners) {\\n\\tvar self = this;\\n\\t$tw.utils.each(listeners,function(listenerInfo) {\\n\\t\\tself.addEventListener(listenerInfo.type,listenerInfo.handler);\\n\\t});\\n};\\n\\n/*\\nAdd an event listener\\n*/\\nWidget.prototype.addEventListener = function(type,handler) {\\n\\tvar self = this;\\n\\tif(typeof handler === \\\"string\\\") { // The handler is a method name on this widget\\n\\t\\tthis.eventListeners[type] = function(event) {\\n\\t\\t\\treturn self[handler].call(self,event);\\n\\t\\t};\\n\\t} else { // The handler is a function\\n\\t\\tthis.eventListeners[type] = function(event) {\\n\\t\\t\\treturn handler.call(self,event);\\n\\t\\t};\\n\\t}\\n};\\n\\n/*\\nDispatch an event to a widget. If the widget doesn't handle the event then it is also dispatched to the parent widget\\n*/\\nWidget.prototype.dispatchEvent = function(event) {\\n\\tevent.widget = event.widget || this;\\n\\t// Dispatch the event if this widget handles it\\n\\tvar listener = this.eventListeners[event.type];\\n\\tif(listener) {\\n\\t\\t// Don't propagate the event if the listener returned false\\n\\t\\tif(!listener(event)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\t// Dispatch the event to the parent widget\\n\\tif(this.parentWidget) {\\n\\t\\treturn this.parentWidget.dispatchEvent(event);\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nWidget.prototype.refresh = function(changedTiddlers) {\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nRebuild a previously rendered widget\\n*/\\nWidget.prototype.refreshSelf = function() {\\n\\tvar nextSibling = this.findNextSiblingDomNode();\\n\\tthis.removeChildDomNodes();\\n\\tthis.render(this.parentDomNode,nextSibling);\\n};\\n\\n/*\\nRefresh all the children of a widget\\n*/\\nWidget.prototype.refreshChildren = function(changedTiddlers) {\\n\\tvar children = this.children,\\n\\t\\trefreshed = false;\\n\\tfor (var i = 0; i \u003C children.length; i++) {\\n\\t\\trefreshed = children[i].refresh(changedTiddlers) || refreshed;\\n\\t}\\n\\treturn refreshed;\\n};\\n\\n/*\\nFind the next sibling in the DOM to this widget. This is done by scanning the widget tree through all next siblings and their descendents that share the same parent DOM node\\n*/\\nWidget.prototype.findNextSiblingDomNode = function(startIndex) {\\n\\t// Refer to this widget by its index within its parents children\\n\\tvar parent = this.parentWidget,\\n\\t\\tindex = startIndex !== undefined ? startIndex : parent.children.indexOf(this);\\nif(index === -1) {\\n\\tthrow \\\"node not found in parents children\\\";\\n}\\n\\t// Look for a DOM node in the later siblings\\n\\twhile(++index \u003C parent.children.length) {\\n\\t\\tvar domNode = parent.children[index].findFirstDomNode();\\n\\t\\tif(domNode) {\\n\\t\\t\\treturn domNode;\\n\\t\\t}\\n\\t}\\n\\t// Go back and look for later siblings of our parent if it has the same parent dom node\\n\\tvar grandParent = parent.parentWidget;\\n\\tif(grandParent && parent.parentDomNode === this.parentDomNode) {\\n\\t\\tindex = grandParent.children.indexOf(parent);\\n\\t\\tif(index !== -1) {\\n\\t\\t\\treturn parent.findNextSiblingDomNode(index);\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nFind the first DOM node generated by a widget or its children\\n*/\\nWidget.prototype.findFirstDomNode = function() {\\n\\t// Return the first dom node of this widget, if we've got one\\n\\tif(this.domNodes.length > 0) {\\n\\t\\treturn this.domNodes[0];\\n\\t}\\n\\t// Otherwise, recursively call our children\\n\\tfor(var t=0; t\u003Cthis.children.length; t++) {\\n\\t\\tvar domNode = this.children[t].findFirstDomNode();\\n\\t\\tif(domNode) {\\n\\t\\t\\treturn domNode;\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nRemove any DOM nodes created by this widget or its children\\n*/\\nWidget.prototype.removeChildDomNodes = function() {\\n\\t// If this widget has directly created DOM nodes, delete them and exit. This assumes that any child widgets are contained within the created DOM nodes, which would normally be the case\\n\\tif(this.domNodes.length > 0) {\\n\\t\\t$tw.utils.each(this.domNodes,function(domNode) {\\n\\t\\t\\tdomNode.parentNode.removeChild(domNode);\\n\\t\\t});\\n\\t\\tthis.domNodes = [];\\n\\t} else {\\n\\t\\t// Otherwise, ask the child widgets to delete their DOM nodes\\n\\t\\t$tw.utils.each(this.children,function(childWidget) {\\n\\t\\t\\tchildWidget.removeChildDomNodes();\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nInvoke the action widgets that are descendents of the current widget.\\n*/\\nWidget.prototype.invokeActions = function(triggeringWidget,event) {\\n\\tvar handled = false;\\n\\t// For each child widget\\n\\tfor(var t=0; t\u003Cthis.children.length; t++) {\\n\\t\\tvar child = this.children[t],\\n\\t\\t\\tchildIsActionWidget = !!child.invokeAction,\\n\\t\\t\\tactionRefreshPolicy = child.getVariable(\\\"tv-action-refresh-policy\\\"); // Default is \\\"once\\\"\\n\\t\\t// Refresh the child if required\\n\\t\\tif(childIsActionWidget || actionRefreshPolicy === \\\"always\\\") {\\n\\t\\t\\tchild.refreshSelf();\\n\\t\\t}\\n\\t\\t// Invoke the child if it is an action widget\\n\\t\\tif(childIsActionWidget) {\\n\\t\\t\\tif(child.invokeAction(triggeringWidget,event)) {\\n\\t\\t\\t\\thandled = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Propagate through through the child if it permits it\\n\\t\\tif(child.allowActionPropagation() && child.invokeActions(triggeringWidget,event)) {\\n\\t\\t\\thandled = true;\\n\\t\\t}\\n\\t}\\n\\treturn handled;\\n};\\n\\n/*\\nInvoke the action widgets defined in a string\\n*/\\nWidget.prototype.invokeActionString = function(actions,triggeringWidget,event,variables) {\\n\\tactions = actions || \\\"\\\";\\n\\tvar parser = this.wiki.parseText(\\\"text/vnd.tiddlywiki\\\",actions,{\\n\\t\\t\\tparentWidget: this,\\n\\t\\t\\tdocument: this.document\\n\\t\\t}),\\n\\t\\twidgetNode = this.wiki.makeWidget(parser,{\\n\\t\\t\\tparentWidget: this,\\n\\t\\t\\tdocument: this.document,\\n\\t\\t\\tvariables: variables\\n\\t\\t});\\n\\tvar container = this.document.createElement(\\\"div\\\");\\n\\twidgetNode.render(container,null);\\n\\treturn widgetNode.invokeActions(this,event);\\n};\\n\\n/*\\nExecute action tiddlers by tag\\n*/\\nWidget.prototype.invokeActionsByTag = function(tag,event,variables) {\\n\\tvar self = this;\\n\\t$tw.utils.each(self.wiki.filterTiddlers(\\\"[all[shadows+tiddlers]tag[\\\" + tag + \\\"]!has[draft.of]]\\\"),function(title) {\\n\\t\\tself.invokeActionString(self.wiki.getTiddlerText(title),self,event,variables);\\n\\t});\\n};\\n\\nWidget.prototype.allowActionPropagation = function() {\\n\\treturn true;\\n};\\n\\nexports.widget = Widget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/widgets/wikify.js\":{\"title\":\"$:/core/modules/widgets/wikify.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/widgets/wikify.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWidget to wikify text into a variable\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar WikifyWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nWikifyWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nWikifyWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nWikifyWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.wikifyName = this.getAttribute(\\\"name\\\");\\n\\tthis.wikifyText = this.getAttribute(\\\"text\\\");\\n\\tthis.wikifyType = this.getAttribute(\\\"type\\\");\\n\\tthis.wikifyMode = this.getAttribute(\\\"mode\\\",\\\"block\\\");\\n\\tthis.wikifyOutput = this.getAttribute(\\\"output\\\",\\\"text\\\");\\n\\t// Create the parse tree\\n\\tthis.wikifyParser = this.wiki.parseText(this.wikifyType,this.wikifyText,{\\n\\t\\t\\tparseAsInline: this.wikifyMode === \\\"inline\\\"\\n\\t\\t});\\n\\t// Create the widget tree \\n\\tthis.wikifyWidgetNode = this.wiki.makeWidget(this.wikifyParser,{\\n\\t\\t\\tdocument: $tw.fakeDocument,\\n\\t\\t\\tparentWidget: this\\n\\t\\t});\\n\\t// Render the widget tree to the container\\n\\tthis.wikifyContainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\tthis.wikifyWidgetNode.render(this.wikifyContainer,null);\\n\\tthis.wikifyResult = this.getResult();\\n\\t// Set context variable\\n\\tthis.setVariable(this.wikifyName,this.wikifyResult);\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nReturn the result string\\n*/\\nWikifyWidget.prototype.getResult = function() {\\n\\tvar result;\\n\\tswitch(this.wikifyOutput) {\\n\\t\\tcase \\\"text\\\":\\n\\t\\t\\tresult = this.wikifyContainer.textContent;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"formattedtext\\\":\\n\\t\\t\\tresult = this.wikifyContainer.formattedTextContent;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"html\\\":\\n\\t\\t\\tresult = this.wikifyContainer.innerHTML;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"parsetree\\\":\\n\\t\\t\\tresult = JSON.stringify(this.wikifyParser.tree,0,$tw.config.preferences.jsonSpaces);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"widgettree\\\":\\n\\t\\t\\tresult = JSON.stringify(this.getWidgetTree(),0,$tw.config.preferences.jsonSpaces);\\n\\t\\t\\tbreak;\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nReturn a string of the widget tree\\n*/\\nWikifyWidget.prototype.getWidgetTree = function() {\\n\\tvar copyNode = function(widgetNode,resultNode) {\\n\\t\\t\\tvar type = widgetNode.parseTreeNode.type;\\n\\t\\t\\tresultNode.type = type;\\n\\t\\t\\tswitch(type) {\\n\\t\\t\\t\\tcase \\\"element\\\":\\n\\t\\t\\t\\t\\tresultNode.tag = widgetNode.parseTreeNode.tag;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\t\\tresultNode.text = widgetNode.parseTreeNode.text;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif(Object.keys(widgetNode.attributes || {}).length > 0) {\\n\\t\\t\\t\\tresultNode.attributes = {};\\n\\t\\t\\t\\t$tw.utils.each(widgetNode.attributes,function(attr,attrName) {\\n\\t\\t\\t\\t\\tresultNode.attributes[attrName] = widgetNode.getAttribute(attrName);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\\tif(Object.keys(widgetNode.children || {}).length > 0) {\\n\\t\\t\\t\\tresultNode.children = [];\\n\\t\\t\\t\\t$tw.utils.each(widgetNode.children,function(widgetChildNode) {\\n\\t\\t\\t\\t\\tvar node = {};\\n\\t\\t\\t\\t\\tresultNode.children.push(node);\\n\\t\\t\\t\\t\\tcopyNode(widgetChildNode,node);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tresults = {};\\n\\tcopyNode(this.wikifyWidgetNode,results);\\n\\treturn results;\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nWikifyWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// Refresh ourselves entirely if any of our attributes have changed\\n\\tif(changedAttributes.name || changedAttributes.text || changedAttributes.type || changedAttributes.mode || changedAttributes.output) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\t// Refresh the widget tree\\n\\t\\tif(this.wikifyWidgetNode.refresh(changedTiddlers)) {\\n\\t\\t\\t// Check if there was any change\\n\\t\\t\\tvar result = this.getResult();\\n\\t\\t\\tif(result !== this.wikifyResult) {\\n\\t\\t\\t\\t// If so, save the change\\n\\t\\t\\t\\tthis.wikifyResult = result;\\n\\t\\t\\t\\tthis.setVariable(this.wikifyName,this.wikifyResult);\\n\\t\\t\\t\\t// Refresh each of our child widgets\\n\\t\\t\\t\\t$tw.utils.each(this.children,function(childWidget) {\\n\\t\\t\\t\\t\\tchildWidget.refreshSelf();\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Just refresh the children\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n};\\n\\nexports.wikify = WikifyWidget;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/core/modules/wiki-bulkops.js\":{\"title\":\"$:/core/modules/wiki-bulkops.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/wiki-bulkops.js\\ntype: application/javascript\\nmodule-type: wikimethod\\n\\nBulk tiddler operations such as rename.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nRename a tiddler, and relink any tags or lists that reference it.\\n*/\\nfunction renameTiddler(fromTitle,toTitle,options) {\\n\\tfromTitle = (fromTitle || \\\"\\\").trim();\\n\\ttoTitle = (toTitle || \\\"\\\").trim();\\n\\toptions = options || {};\\n\\tif(fromTitle && toTitle && fromTitle !== toTitle) {\\n\\t\\t// Rename the tiddler itself\\n\\t\\tvar oldTiddler = this.getTiddler(fromTitle),\\n\\t\\t\\tnewTiddler = new $tw.Tiddler(oldTiddler,{title: toTitle},this.getModificationFields());\\n\\t\\tnewTiddler = $tw.hooks.invokeHook(\\\"th-renaming-tiddler\\\",newTiddler,oldTiddler);\\n\\t\\tthis.addTiddler(newTiddler);\\n\\t\\tthis.deleteTiddler(fromTitle);\\n\\t\\t// Rename any tags or lists that reference it\\n\\t\\tthis.relinkTiddler(fromTitle,toTitle,options)\\n\\t}\\n}\\n\\n/*\\nRelink any tags or lists that reference a given tiddler\\n*/\\nfunction relinkTiddler(fromTitle,toTitle,options) {\\n\\tvar self = this;\\n\\tfromTitle = (fromTitle || \\\"\\\").trim();\\n\\ttoTitle = (toTitle || \\\"\\\").trim();\\n\\toptions = options || {};\\n\\tif(fromTitle && toTitle && fromTitle !== toTitle) {\\n\\t\\tthis.each(function(tiddler,title) {\\n\\t\\t\\tvar type = tiddler.fields.type || \\\"\\\";\\n\\t\\t\\t// Don't touch plugins or JavaScript modules\\n\\t\\t\\tif(!tiddler.fields[\\\"plugin-type\\\"] && type !== \\\"application/javascript\\\") {\\n\\t\\t\\t\\tvar tags = tiddler.fields.tags ? tiddler.fields.tags.slice(0) : undefined,\\n\\t\\t\\t\\t\\tlist = tiddler.fields.list ? tiddler.fields.list.slice(0) : undefined,\\n\\t\\t\\t\\t\\tisModified = false,\\n\\t\\t\\t\\t\\tprocessList = function(listField) {\\n\\t\\t\\t\\t\\t\\tif(listField && listField.indexOf(fromTitle) !== -1) {\\n\\t\\t\\t\\t\\t\\t\\t// Remove any existing instances of the toTitle\\n\\t\\t\\t\\t\\t\\t\\tvar p = listField.indexOf(toTitle);\\n\\t\\t\\t\\t\\t\\t\\twhile(p !== -1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tlistField.splice(p,1);\\n\\t\\t\\t\\t\\t\\t\\t\\tp = listField.indexOf(toTitle);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t// Replace the fromTitle with toTitle\\n\\t\\t\\t\\t\\t\\t\\t$tw.utils.each(listField,function (title,index) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif(title === fromTitle) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlistField[index] = toTitle;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tisModified = true;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\tif(!options.dontRenameInTags) {\\n\\t\\t\\t\\t\\t// Rename tags\\n\\t\\t\\t\\t\\tprocessList(tags);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(!options.dontRenameInLists) {\\n\\t\\t\\t\\t\\t// Rename lists\\n\\t\\t\\t\\t\\tprocessList(list);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(isModified) {\\n\\t\\t\\t\\t\\tvar newTiddler = new $tw.Tiddler(tiddler,{tags: tags, list: list},self.getModificationFields())\\n\\t\\t\\t\\t\\tnewTiddler = $tw.hooks.invokeHook(\\\"th-relinking-tiddler\\\",newTiddler,tiddler);\\n\\t\\t\\t\\t\\tself.addTiddler(newTiddler);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\nexports.renameTiddler = renameTiddler;\\nexports.relinkTiddler = relinkTiddler;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikimethod\"},\"$:/core/modules/wiki.js\":{\"title\":\"$:/core/modules/wiki.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/wiki.js\\ntype: application/javascript\\nmodule-type: wikimethod\\n\\nExtension methods for the $tw.Wiki object\\n\\nAdds the following properties to the wiki object:\\n\\n* `eventListeners` is a hashmap by type of arrays of listener functions\\n* `changedTiddlers` is a hashmap describing changes to named tiddlers since wiki change events were last dispatched. Each entry is a hashmap containing two fields:\\n\\tmodified: true/false\\n\\tdeleted: true/false\\n* `changeCount` is a hashmap by tiddler title containing a numerical index that starts at zero and is incremented each time a tiddler is created changed or deleted\\n* `caches` is a hashmap by tiddler title containing a further hashmap of named cache objects. Caches are automatically cleared when a tiddler is modified or deleted\\n* `globalCache` is a hashmap by cache name of cache objects that are cleared whenever any tiddler change occurs\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar widget = require(\\\"$:/core/modules/widgets/widget.js\\\");\\n\\nvar USER_NAME_TITLE = \\\"$:/status/UserName\\\",\\n\\tTIMESTAMP_DISABLE_TITLE = \\\"$:/config/TimestampDisable\\\";\\n\\n/*\\nAdd available indexers to this wiki\\n*/\\nexports.addIndexersToWiki = function() {\\n\\tvar self = this;\\n\\t$tw.utils.each($tw.modules.applyMethods(\\\"indexer\\\"),function(Indexer,name) {\\n\\t\\tself.addIndexer(new Indexer(self),name);\\n\\t});\\n};\\n\\n/*\\nGet the value of a text reference. Text references can have any of these forms:\\n\\t\u003Ctiddlertitle>\\n\\t\u003Ctiddlertitle>!!\u003Cfieldname>\\n\\t!!\u003Cfieldname> - specifies a field of the current tiddlers\\n\\t\u003Ctiddlertitle>##\u003Cindex>\\n*/\\nexports.getTextReference = function(textRef,defaultText,currTiddlerTitle) {\\n\\tvar tr = $tw.utils.parseTextReference(textRef),\\n\\t\\ttitle = tr.title || currTiddlerTitle;\\n\\tif(tr.field) {\\n\\t\\tvar tiddler = this.getTiddler(title);\\n\\t\\tif(tr.field === \\\"title\\\") { // Special case so we can return the title of a non-existent tiddler\\n\\t\\t\\treturn title;\\n\\t\\t} else if(tiddler && $tw.utils.hop(tiddler.fields,tr.field)) {\\n\\t\\t\\treturn tiddler.getFieldString(tr.field);\\n\\t\\t} else {\\n\\t\\t\\treturn defaultText;\\n\\t\\t}\\n\\t} else if(tr.index) {\\n\\t\\treturn this.extractTiddlerDataItem(title,tr.index,defaultText);\\n\\t} else {\\n\\t\\treturn this.getTiddlerText(title,defaultText);\\n\\t}\\n};\\n\\nexports.setTextReference = function(textRef,value,currTiddlerTitle) {\\n\\tvar tr = $tw.utils.parseTextReference(textRef),\\n\\t\\ttitle = tr.title || currTiddlerTitle;\\n\\tthis.setText(title,tr.field,tr.index,value);\\n};\\n\\nexports.setText = function(title,field,index,value,options) {\\n\\toptions = options || {};\\n\\tvar creationFields = options.suppressTimestamp ? {} : this.getCreationFields(),\\n\\t\\tmodificationFields = options.suppressTimestamp ? {} : this.getModificationFields();\\n\\t// Check if it is a reference to a tiddler field\\n\\tif(index) {\\n\\t\\tvar data = this.getTiddlerData(title,Object.create(null));\\n\\t\\tif(value !== undefined) {\\n\\t\\t\\tdata[index] = value;\\n\\t\\t} else {\\n\\t\\t\\tdelete data[index];\\n\\t\\t}\\n\\t\\tthis.setTiddlerData(title,data,{},{suppressTimestamp: options.suppressTimestamp});\\n\\t} else {\\n\\t\\tvar tiddler = this.getTiddler(title),\\n\\t\\t\\tfields = {title: title};\\n\\t\\tfields[field || \\\"text\\\"] = value;\\n\\t\\tthis.addTiddler(new $tw.Tiddler(creationFields,tiddler,fields,modificationFields));\\n\\t}\\n};\\n\\nexports.deleteTextReference = function(textRef,currTiddlerTitle) {\\n\\tvar tr = $tw.utils.parseTextReference(textRef),\\n\\t\\ttitle,tiddler,fields;\\n\\t// Check if it is a reference to a tiddler\\n\\tif(tr.title && !tr.field) {\\n\\t\\tthis.deleteTiddler(tr.title);\\n\\t// Else check for a field reference\\n\\t} else if(tr.field) {\\n\\t\\ttitle = tr.title || currTiddlerTitle;\\n\\t\\ttiddler = this.getTiddler(title);\\n\\t\\tif(tiddler && $tw.utils.hop(tiddler.fields,tr.field)) {\\n\\t\\t\\tfields = Object.create(null);\\n\\t\\t\\tfields[tr.field] = undefined;\\n\\t\\t\\tthis.addTiddler(new $tw.Tiddler(tiddler,fields,this.getModificationFields()));\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.addEventListener = function(type,listener) {\\n\\tthis.eventListeners = this.eventListeners || {};\\n\\tthis.eventListeners[type] = this.eventListeners[type]  || [];\\n\\tthis.eventListeners[type].push(listener);\\n};\\n\\nexports.removeEventListener = function(type,listener) {\\n\\tvar listeners = this.eventListeners[type];\\n\\tif(listeners) {\\n\\t\\tvar p = listeners.indexOf(listener);\\n\\t\\tif(p !== -1) {\\n\\t\\t\\tlisteners.splice(p,1);\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.dispatchEvent = function(type /*, args */) {\\n\\tvar args = Array.prototype.slice.call(arguments,1),\\n\\t\\tlisteners = this.eventListeners[type];\\n\\tif(listeners) {\\n\\t\\tfor(var p=0; p\u003Clisteners.length; p++) {\\n\\t\\t\\tvar listener = listeners[p];\\n\\t\\t\\tlistener.apply(listener,args);\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nCauses a tiddler to be marked as changed, incrementing the change count, and triggers event handlers.\\nThis method should be called after the changes it describes have been made to the wiki.tiddlers[] array.\\n\\ttitle: Title of tiddler\\n\\tisDeleted: defaults to false (meaning the tiddler has been created or modified),\\n\\t\\ttrue if the tiddler has been deleted\\n*/\\nexports.enqueueTiddlerEvent = function(title,isDeleted) {\\n\\t// Record the touch in the list of changed tiddlers\\n\\tthis.changedTiddlers = this.changedTiddlers || Object.create(null);\\n\\tthis.changedTiddlers[title] = this.changedTiddlers[title] || Object.create(null);\\n\\tthis.changedTiddlers[title][isDeleted ? \\\"deleted\\\" : \\\"modified\\\"] = true;\\n\\t// Increment the change count\\n\\tthis.changeCount = this.changeCount || Object.create(null);\\n\\tif($tw.utils.hop(this.changeCount,title)) {\\n\\t\\tthis.changeCount[title]++;\\n\\t} else {\\n\\t\\tthis.changeCount[title] = 1;\\n\\t}\\n\\t// Trigger events\\n\\tthis.eventListeners = this.eventListeners || {};\\n\\tif(!this.eventsTriggered) {\\n\\t\\tvar self = this;\\n\\t\\t$tw.utils.nextTick(function() {\\n\\t\\t\\tvar changes = self.changedTiddlers;\\n\\t\\t\\tself.changedTiddlers = Object.create(null);\\n\\t\\t\\tself.eventsTriggered = false;\\n\\t\\t\\tif($tw.utils.count(changes) > 0) {\\n\\t\\t\\t\\tself.dispatchEvent(\\\"change\\\",changes);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tthis.eventsTriggered = true;\\n\\t}\\n};\\n\\nexports.getSizeOfTiddlerEventQueue = function() {\\n\\treturn $tw.utils.count(this.changedTiddlers);\\n};\\n\\nexports.clearTiddlerEventQueue = function() {\\n\\tthis.changedTiddlers = Object.create(null);\\n\\tthis.changeCount = Object.create(null);\\n};\\n\\nexports.getChangeCount = function(title) {\\n\\tthis.changeCount = this.changeCount || Object.create(null);\\n\\tif($tw.utils.hop(this.changeCount,title)) {\\n\\t\\treturn this.changeCount[title];\\n\\t} else {\\n\\t\\treturn 0;\\n\\t}\\n};\\n\\n/*\\nGenerate an unused title from the specified base\\noptions.prefix must be a string\\n*/\\nexports.generateNewTitle = function(baseTitle,options) {\\n\\toptions = options || {};\\n\\tvar c = 0,\\n\\t\\ttitle = baseTitle,\\n\\t\\ttemplate = options.template,\\n\\t\\tprefix = (typeof(options.prefix) === \\\"string\\\") ? options.prefix : \\\" \\\";\\n\\tif (template) {\\n\\t\\t// \\\"count\\\" is important to avoid an endless loop in while(...)!!\\n\\t\\ttemplate = (/\\\\$count:?(\\\\d+)?\\\\$/i.test(template)) ? template : template + \\\"$count$\\\";\\n\\t\\ttitle = $tw.utils.formatTitleString(template,{\\\"base\\\":baseTitle,\\\"separator\\\":prefix,\\\"counter\\\":c});\\n\\t\\twhile(this.tiddlerExists(title) || this.isShadowTiddler(title) || this.findDraft(title)) {\\n\\t\\t\\ttitle = $tw.utils.formatTitleString(template,{\\\"base\\\":baseTitle,\\\"separator\\\":prefix,\\\"counter\\\":(++c)});\\n\\t\\t}\\n\\t} else {\\n\\t\\twhile(this.tiddlerExists(title) || this.isShadowTiddler(title) || this.findDraft(title)) {\\n\\t\\t\\ttitle = baseTitle + prefix + (++c);\\n\\t\\t}\\n\\t}\\n\\treturn title;\\n};\\n\\nexports.isSystemTiddler = function(title) {\\n\\treturn title && title.indexOf(\\\"$:/\\\") === 0;\\n};\\n\\nexports.isTemporaryTiddler = function(title) {\\n\\treturn title && title.indexOf(\\\"$:/temp/\\\") === 0;\\n};\\n\\nexports.isVolatileTiddler = function(title) {\\n\\treturn title && title.indexOf(\\\"$:/temp/volatile/\\\") === 0;\\n};\\n\\nexports.isImageTiddler = function(title) {\\n\\tvar tiddler = this.getTiddler(title);\\n\\tif(tiddler) {\\n\\t\\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\"];\\n\\t\\treturn !!contentTypeInfo && contentTypeInfo.flags.indexOf(\\\"image\\\") !== -1;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\nexports.isBinaryTiddler = function(title) {\\n\\tvar tiddler = this.getTiddler(title);\\n\\tif(tiddler) {\\n\\t\\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.fields.type || \\\"text/vnd.tiddlywiki\\\"];\\n\\t\\treturn !!contentTypeInfo && contentTypeInfo.encoding === \\\"base64\\\";\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\n/*\\nLike addTiddler() except it will silently reject any plugin tiddlers that are older than the currently loaded version. Returns true if the tiddler was imported\\n*/\\nexports.importTiddler = function(tiddler) {\\n\\tvar existingTiddler = this.getTiddler(tiddler.fields.title);\\n\\t// Check if we're dealing with a plugin\\n\\tif(tiddler && tiddler.hasField(\\\"plugin-type\\\") && tiddler.hasField(\\\"version\\\") && existingTiddler && existingTiddler.hasField(\\\"plugin-type\\\") && existingTiddler.hasField(\\\"version\\\")) {\\n\\t\\t// Reject the incoming plugin if it is older\\n\\t\\tif(!$tw.utils.checkVersions(tiddler.fields.version,existingTiddler.fields.version)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\t// Fall through to adding the tiddler\\n\\tthis.addTiddler(tiddler);\\n\\treturn true;\\n};\\n\\n/*\\nReturn a hashmap of the fields that should be set when a tiddler is created\\n*/\\nexports.getCreationFields = function() {\\n\\tif(this.getTiddlerText(TIMESTAMP_DISABLE_TITLE,\\\"\\\").toLowerCase() !== \\\"yes\\\") {\\n\\t\\tvar fields = {\\n\\t\\t\\t\\tcreated: new Date()\\n\\t\\t\\t},\\n\\t\\t\\tcreator = this.getTiddlerText(USER_NAME_TITLE);\\n\\t\\tif(creator) {\\n\\t\\t\\tfields.creator = creator;\\n\\t\\t}\\n\\t\\treturn fields;\\n\\t} else {\\n\\t\\treturn {};\\n\\t}\\n};\\n\\n/*\\nReturn a hashmap of the fields that should be set when a tiddler is modified\\n*/\\nexports.getModificationFields = function() {\\n\\tif(this.getTiddlerText(TIMESTAMP_DISABLE_TITLE,\\\"\\\").toLowerCase() !== \\\"yes\\\") {\\n\\t\\tvar fields = Object.create(null),\\n\\t\\t\\tmodifier = this.getTiddlerText(USER_NAME_TITLE);\\n\\t\\tfields.modified = new Date();\\n\\t\\tif(modifier) {\\n\\t\\t\\tfields.modifier = modifier;\\n\\t\\t}\\n\\t\\treturn fields;\\n\\t} else {\\n\\t\\treturn {};\\n\\t}\\n};\\n\\n/*\\nReturn a sorted array of tiddler titles.  Options include:\\nsortField: field to sort by\\nexcludeTag: tag to exclude\\nincludeSystem: whether to include system tiddlers (defaults to false)\\n*/\\nexports.getTiddlers = function(options) {\\n\\toptions = options || Object.create(null);\\n\\tvar self = this,\\n\\t\\tsortField = options.sortField || \\\"title\\\",\\n\\t\\ttiddlers = [], t, titles = [];\\n\\tthis.each(function(tiddler,title) {\\n\\t\\tif(options.includeSystem || !self.isSystemTiddler(title)) {\\n\\t\\t\\tif(!options.excludeTag || !tiddler.hasTag(options.excludeTag)) {\\n\\t\\t\\t\\ttiddlers.push(tiddler);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\ttiddlers.sort(function(a,b) {\\n\\t\\tvar aa = a.fields[sortField].toLowerCase() || \\\"\\\",\\n\\t\\t\\tbb = b.fields[sortField].toLowerCase() || \\\"\\\";\\n\\t\\tif(aa \u003C bb) {\\n\\t\\t\\treturn -1;\\n\\t\\t} else {\\n\\t\\t\\tif(aa > bb) {\\n\\t\\t\\t\\treturn 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\tfor(t=0; t\u003Ctiddlers.length; t++) {\\n\\t\\ttitles.push(tiddlers[t].fields.title);\\n\\t}\\n\\treturn titles;\\n};\\n\\nexports.countTiddlers = function(excludeTag) {\\n\\tvar tiddlers = this.getTiddlers({excludeTag: excludeTag});\\n\\treturn $tw.utils.count(tiddlers);\\n};\\n\\n/*\\nReturns a function iterator(callback) that iterates through the specified titles, and invokes the callback with callback(tiddler,title)\\n*/\\nexports.makeTiddlerIterator = function(titles) {\\n\\tvar self = this;\\n\\tif(!$tw.utils.isArray(titles)) {\\n\\t\\ttitles = Object.keys(titles);\\n\\t} else {\\n\\t\\ttitles = titles.slice(0);\\n\\t}\\n\\treturn function(callback) {\\n\\t\\ttitles.forEach(function(title) {\\n\\t\\t\\tcallback(self.getTiddler(title),title);\\n\\t\\t});\\n\\t};\\n};\\n\\n/*\\nSort an array of tiddler titles by a specified field\\n\\ttitles: array of titles (sorted in place)\\n\\tsortField: name of field to sort by\\n\\tisDescending: true if the sort should be descending\\n\\tisCaseSensitive: true if the sort should consider upper and lower case letters to be different\\n*/\\nexports.sortTiddlers = function(titles,sortField,isDescending,isCaseSensitive,isNumeric,isAlphaNumeric) {\\n\\tvar self = this;\\n\\tif(sortField === \\\"title\\\") {\\n\\t\\tif(!isNumeric && !isAlphaNumeric) {\\n\\t\\t\\tif(isCaseSensitive) {\\n\\t\\t\\t\\tif(isDescending) {\\n\\t\\t\\t\\t\\ttitles.sort(function(a,b) {\\n\\t\\t\\t\\t\\t\\treturn b.localeCompare(a);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttitles.sort(function(a,b) {\\n\\t\\t\\t\\t\\t\\treturn a.localeCompare(b);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\t\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif(isDescending) {\\n\\t\\t\\t\\t\\ttitles.sort(function(a,b) {\\n\\t\\t\\t\\t\\t\\treturn b.toLowerCase().localeCompare(a.toLowerCase());\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttitles.sort(function(a,b) {\\n\\t\\t\\t\\t\\t\\treturn a.toLowerCase().localeCompare(b.toLowerCase());\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\t\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\ttitles.sort(function(a,b) {\\n\\t\\t\\t\\tvar x,y;\\n\\t\\t\\t\\tif(isNumeric) {\\n\\t\\t\\t\\t\\tx = Number(a);\\n\\t\\t\\t\\t\\ty = Number(b);\\n\\t\\t\\t\\t\\tif(isNaN(x)) {\\n\\t\\t\\t\\t\\t\\tif(isNaN(y)) {\\n\\t\\t\\t\\t\\t\\t\\t// If neither value is a number then fall through to a textual comparison\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn isDescending ? -1 : 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tif(isNaN(y)) {\\n\\t\\t\\t\\t\\t\\t\\treturn isDescending ? 1 : -1;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\treturn isDescending ? y - x :  x - y;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(isAlphaNumeric) {\\n\\t\\t\\t\\t\\treturn isDescending ? b.localeCompare(a,undefined,{numeric: true,sensitivity: \\\"base\\\"}) : a.localeCompare(b,undefined,{numeric: true,sensitivity: \\\"base\\\"});\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(!isCaseSensitive) {\\n\\t\\t\\t\\t\\ta = a.toLowerCase();\\n\\t\\t\\t\\t\\tb = b.toLowerCase();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn isDescending ? b.localeCompare(a) : a.localeCompare(b);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t} else {\\n\\t\\ttitles.sort(function(a,b) {\\n\\t\\t\\tvar x,y;\\n\\t\\t\\tif(sortField !== \\\"title\\\") {\\n\\t\\t\\t\\tvar tiddlerA = self.getTiddler(a),\\n\\t\\t\\t\\t\\ttiddlerB = self.getTiddler(b);\\n\\t\\t\\t\\tif(tiddlerA) {\\n\\t\\t\\t\\t\\ta = tiddlerA.fields[sortField] || \\\"\\\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ta = \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(tiddlerB) {\\n\\t\\t\\t\\t\\tb = tiddlerB.fields[sortField] || \\\"\\\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tb = \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(isNumeric) {\\n\\t\\t\\t\\tx = Number(a);\\n\\t\\t\\t\\ty = Number(b);\\n\\t\\t\\t\\tif(isNaN(x)) {\\n\\t\\t\\t\\t\\tif(isNaN(y)) {\\n\\t\\t\\t\\t\\t\\t// If neither value is a number then fall through to a textual comparison\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn isDescending ? -1 : 1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif(isNaN(y)) {\\n\\t\\t\\t\\t\\t\\treturn isDescending ? 1 : -1;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn isDescending ? y - x :  x - y;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(Object.prototype.toString.call(a) === \\\"[object Date]\\\" && Object.prototype.toString.call(b) === \\\"[object Date]\\\") {\\n\\t\\t\\t\\treturn isDescending ? b - a : a - b;\\n\\t\\t\\t}\\n\\t\\t\\ta = String(a);\\n\\t\\t\\tb = String(b);\\n\\t\\t\\tif(isAlphaNumeric) {\\n\\t\\t\\t\\treturn isDescending ? b.localeCompare(a,undefined,{numeric: true,sensitivity: \\\"base\\\"}) : a.localeCompare(b,undefined,{numeric: true,sensitivity: \\\"base\\\"});\\n\\t\\t\\t}\\n\\t\\t\\tif(!isCaseSensitive) {\\n\\t\\t\\t\\ta = a.toLowerCase();\\n\\t\\t\\t\\tb = b.toLowerCase();\\n\\t\\t\\t}\\n\\t\\t\\treturn isDescending ? b.localeCompare(a) : a.localeCompare(b);\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nFor every tiddler invoke a callback(title,tiddler) with `this` set to the wiki object. Options include:\\nsortField: field to sort by\\nexcludeTag: tag to exclude\\nincludeSystem: whether to include system tiddlers (defaults to false)\\n*/\\nexports.forEachTiddler = function(/* [options,]callback */) {\\n\\tvar arg = 0,\\n\\t\\toptions = arguments.length >= 2 ? arguments[arg++] : {},\\n\\t\\tcallback = arguments[arg++],\\n\\t\\ttitles = this.getTiddlers(options),\\n\\t\\tt, tiddler;\\n\\tfor(t=0; t\u003Ctitles.length; t++) {\\n\\t\\ttiddler = this.getTiddler(titles[t]);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tcallback.call(this,tiddler.fields.title,tiddler);\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nReturn an array of tiddler titles that are directly linked within the given parse tree\\n */\\nexports.extractLinks = function(parseTreeRoot) {\\n\\t// Count up the links\\n\\tvar links = [],\\n\\t\\tcheckParseTree = function(parseTree) {\\n\\t\\t\\tfor(var t=0; t\u003CparseTree.length; t++) {\\n\\t\\t\\t\\tvar parseTreeNode = parseTree[t];\\n\\t\\t\\t\\tif(parseTreeNode.type === \\\"link\\\" && parseTreeNode.attributes.to && parseTreeNode.attributes.to.type === \\\"string\\\") {\\n\\t\\t\\t\\t\\tvar value = parseTreeNode.attributes.to.value;\\n\\t\\t\\t\\t\\tif(links.indexOf(value) === -1) {\\n\\t\\t\\t\\t\\t\\tlinks.push(value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(parseTreeNode.children) {\\n\\t\\t\\t\\t\\tcheckParseTree(parseTreeNode.children);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\tcheckParseTree(parseTreeRoot);\\n\\treturn links;\\n};\\n\\n/*\\nReturn an array of tiddler titles that are directly linked from the specified tiddler\\n*/\\nexports.getTiddlerLinks = function(title) {\\n\\tvar self = this;\\n\\t// We'll cache the links so they only get computed if the tiddler changes\\n\\treturn this.getCacheForTiddler(title,\\\"links\\\",function() {\\n\\t\\t// Parse the tiddler\\n\\t\\tvar parser = self.parseTiddler(title);\\n\\t\\tif(parser) {\\n\\t\\t\\treturn self.extractLinks(parser.tree);\\n\\t\\t}\\n\\t\\treturn [];\\n\\t});\\n};\\n\\n/*\\nReturn an array of tiddler titles that link to the specified tiddler\\n*/\\nexports.getTiddlerBacklinks = function(targetTitle) {\\n\\tvar self = this,\\n\\t\\tbacklinksIndexer = this.getIndexer(\\\"BacklinksIndexer\\\"),\\n\\t\\tbacklinks = backlinksIndexer && backlinksIndexer.lookup(targetTitle);\\n\\n\\tif(!backlinks) {\\n\\t\\tbacklinks = [];\\n\\t\\tthis.forEachTiddler(function(title,tiddler) {\\n\\t\\t\\tvar links = self.getTiddlerLinks(title);\\n\\t\\t\\tif(links.indexOf(targetTitle) !== -1) {\\n\\t\\t\\t\\tbacklinks.push(title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn backlinks;\\n};\\n\\n/*\\nReturn a hashmap of tiddler titles that are referenced but not defined. Each value is the number of times the missing tiddler is referenced\\n*/\\nexports.getMissingTitles = function() {\\n\\tvar self = this,\\n\\t\\tmissing = [];\\n// We should cache the missing tiddler list, even if we recreate it every time any tiddler is modified\\n\\tthis.forEachTiddler(function(title,tiddler) {\\n\\t\\tvar links = self.getTiddlerLinks(title);\\n\\t\\t$tw.utils.each(links,function(link) {\\n\\t\\t\\tif((!self.tiddlerExists(link) && !self.isShadowTiddler(link)) && missing.indexOf(link) === -1) {\\n\\t\\t\\t\\tmissing.push(link);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\treturn missing;\\n};\\n\\nexports.getOrphanTitles = function() {\\n\\tvar self = this,\\n\\t\\torphans = this.getTiddlers();\\n\\tthis.forEachTiddler(function(title,tiddler) {\\n\\t\\tvar links = self.getTiddlerLinks(title);\\n\\t\\t$tw.utils.each(links,function(link) {\\n\\t\\t\\tvar p = orphans.indexOf(link);\\n\\t\\t\\tif(p !== -1) {\\n\\t\\t\\t\\torphans.splice(p,1);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\treturn orphans; // Todo\\n};\\n\\n/*\\nRetrieves a list of the tiddler titles that are tagged with a given tag\\n*/\\nexports.getTiddlersWithTag = function(tag) {\\n\\t// Try to use the indexer\\n\\tvar self = this,\\n\\t\\ttagIndexer = this.getIndexer(\\\"TagIndexer\\\"),\\n\\t\\tresults = tagIndexer && tagIndexer.subIndexers[3].lookup(tag);\\n\\tif(!results) {\\n\\t\\t// If not available, perform a manual scan\\n\\t\\tresults = this.getGlobalCache(\\\"taglist-\\\" + tag,function() {\\n\\t\\t\\tvar tagmap = self.getTagMap();\\n\\t\\t\\treturn self.sortByList(tagmap[tag],tag);\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n/*\\nGet a hashmap by tag of arrays of tiddler titles\\n*/\\nexports.getTagMap = function() {\\n\\tvar self = this;\\n\\treturn this.getGlobalCache(\\\"tagmap\\\",function() {\\n\\t\\tvar tags = Object.create(null),\\n\\t\\t\\tstoreTags = function(tagArray,title) {\\n\\t\\t\\t\\tif(tagArray) {\\n\\t\\t\\t\\t\\tfor(var index=0; index\u003CtagArray.length; index++) {\\n\\t\\t\\t\\t\\t\\tvar tag = tagArray[index];\\n\\t\\t\\t\\t\\t\\tif($tw.utils.hop(tags,tag)) {\\n\\t\\t\\t\\t\\t\\t\\ttags[tag].push(title);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\ttags[tag] = [title];\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\ttitle, tiddler;\\n\\t\\t// Collect up all the tags\\n\\t\\tself.eachShadow(function(tiddler,title) {\\n\\t\\t\\tif(!self.tiddlerExists(title)) {\\n\\t\\t\\t\\ttiddler = self.getTiddler(title);\\n\\t\\t\\t\\tstoreTags(tiddler.fields.tags,title);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tself.each(function(tiddler,title) {\\n\\t\\t\\tstoreTags(tiddler.fields.tags,title);\\n\\t\\t});\\n\\t\\treturn tags;\\n\\t});\\n};\\n\\n/*\\nLookup a given tiddler and return a list of all the tiddlers that include it in the specified list field\\n*/\\nexports.findListingsOfTiddler = function(targetTitle,fieldName) {\\n\\tfieldName = fieldName || \\\"list\\\";\\n\\tvar wiki = this;\\n\\tvar listings = this.getGlobalCache(\\\"listings-\\\" + fieldName,function() {\\n\\t\\tvar listings = Object.create(null);\\n\\t\\twiki.each(function(tiddler,title) {\\n\\t\\t\\tvar list = $tw.utils.parseStringArray(tiddler.fields[fieldName]);\\n\\t\\t\\tif(list) {\\n\\t\\t\\t\\tfor(var i = 0; i \u003C list.length; i++) {\\n\\t\\t\\t\\t\\tvar listItem = list[i],\\n\\t\\t\\t\\t\\t\\tlisting = listings[listItem] || [];\\n\\t\\t\\t\\t\\tif (listing.indexOf(title) === -1) {\\n\\t\\t\\t\\t\\t\\tlisting.push(title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tlistings[listItem] = listing;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn listings;\\n\\t});\\n\\treturn listings[targetTitle] || [];\\n};\\n\\n/*\\nSorts an array of tiddler titles according to an ordered list\\n*/\\nexports.sortByList = function(array,listTitle) {\\n\\tvar self = this,\\n\\t\\treplacedTitles = Object.create(null);\\n\\t// Given a title, this function will place it in the correct location\\n\\t// within titles.\\n\\tfunction moveItemInList(title) {\\n\\t\\tif(!$tw.utils.hop(replacedTitles, title)) {\\n\\t\\t\\treplacedTitles[title] = true;\\n\\t\\t\\tvar newPos = -1,\\n\\t\\t\\t\\ttiddler = self.getTiddler(title);\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\tvar beforeTitle = tiddler.fields[\\\"list-before\\\"],\\n\\t\\t\\t\\t\\tafterTitle = tiddler.fields[\\\"list-after\\\"];\\n\\t\\t\\t\\tif(beforeTitle === \\\"\\\") {\\n\\t\\t\\t\\t\\tnewPos = 0;\\n\\t\\t\\t\\t} else if(afterTitle === \\\"\\\") {\\n\\t\\t\\t\\t\\tnewPos = titles.length;\\n\\t\\t\\t\\t} else if(beforeTitle) {\\n\\t\\t\\t\\t\\t// if this title is placed relative\\n\\t\\t\\t\\t\\t// to another title, make sure that\\n\\t\\t\\t\\t\\t// title is placed before we place\\n\\t\\t\\t\\t\\t// this one.\\n\\t\\t\\t\\t\\tmoveItemInList(beforeTitle);\\n\\t\\t\\t\\t\\tnewPos = titles.indexOf(beforeTitle);\\n\\t\\t\\t\\t} else if(afterTitle) {\\n\\t\\t\\t\\t\\t// Same deal\\n\\t\\t\\t\\t\\tmoveItemInList(afterTitle);\\n\\t\\t\\t\\t\\tnewPos = titles.indexOf(afterTitle);\\n\\t\\t\\t\\t\\tif(newPos >= 0) {\\n\\t\\t\\t\\t\\t\\t++newPos;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If a new position is specified, let's move it\\n\\t\\t\\t\\tif (newPos !== -1) {\\n\\t\\t\\t\\t\\t// get its current Pos, and make sure\\n\\t\\t\\t\\t\\t// sure that it's _actually_ in the list\\n\\t\\t\\t\\t\\t// and that it would _actually_ move\\n\\t\\t\\t\\t\\t// (#4275) We don't bother calling\\n\\t\\t\\t\\t\\t//         indexOf unless we have a new\\n\\t\\t\\t\\t\\t//         position to work with\\n\\t\\t\\t\\t\\tvar currPos = titles.indexOf(title);\\n\\t\\t\\t\\t\\tif(currPos >= 0 && newPos !== currPos) {\\n\\t\\t\\t\\t\\t\\t// move it!\\n\\t\\t\\t\\t\\t\\ttitles.splice(currPos,1);\\n\\t\\t\\t\\t\\t\\tif(newPos >= currPos) {\\n\\t\\t\\t\\t\\t\\t\\tnewPos--;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttitles.splice(newPos,0,title);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tvar list = this.getTiddlerList(listTitle);\\n\\tif(!array || array.length === 0) {\\n\\t\\treturn [];\\n\\t} else {\\n\\t\\tvar titles = [], t, title;\\n\\t\\t// First place any entries that are present in the list\\n\\t\\tfor(t=0; t\u003Clist.length; t++) {\\n\\t\\t\\ttitle = list[t];\\n\\t\\t\\tif(array.indexOf(title) !== -1) {\\n\\t\\t\\t\\ttitles.push(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Then place any remaining entries\\n\\t\\tfor(t=0; t\u003Carray.length; t++) {\\n\\t\\t\\ttitle = array[t];\\n\\t\\t\\tif(list.indexOf(title) === -1) {\\n\\t\\t\\t\\ttitles.push(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Finally obey the list-before and list-after fields of each tiddler in turn\\n\\t\\tvar sortedTitles = titles.slice(0);\\n\\t\\tfor(t=0; t\u003CsortedTitles.length; t++) {\\n\\t\\t\\ttitle = sortedTitles[t];\\n\\t\\t\\tmoveItemInList(title);\\n\\t\\t}\\n\\t\\treturn titles;\\n\\t}\\n};\\n\\nexports.getSubTiddler = function(title,subTiddlerTitle) {\\n\\tvar bundleInfo = this.getPluginInfo(title) || this.getTiddlerDataCached(title);\\n\\tif(bundleInfo && bundleInfo.tiddlers) {\\n\\t\\tvar subTiddler = bundleInfo.tiddlers[subTiddlerTitle];\\n\\t\\tif(subTiddler) {\\n\\t\\t\\treturn new $tw.Tiddler(subTiddler);\\n\\t\\t}\\n\\t}\\n\\treturn null;\\n};\\n\\n/*\\nRetrieve a tiddler as a JSON string of the fields\\n*/\\nexports.getTiddlerAsJson = function(title) {\\n\\tvar tiddler = this.getTiddler(title);\\n\\tif(tiddler) {\\n\\t\\tvar fields = Object.create(null);\\n\\t\\t$tw.utils.each(tiddler.fields,function(value,name) {\\n\\t\\t\\tfields[name] = tiddler.getFieldString(name);\\n\\t\\t});\\n\\t\\treturn JSON.stringify(fields);\\n\\t} else {\\n\\t\\treturn JSON.stringify({title: title});\\n\\t}\\n};\\n\\nexports.getTiddlersAsJson = function(filter,spaces) {\\n\\tvar tiddlers = this.filterTiddlers(filter),\\n\\t\\tspaces = (spaces === undefined) ? $tw.config.preferences.jsonSpaces : spaces,\\n\\t\\tdata = [];\\n\\tfor(var t=0;t\u003Ctiddlers.length; t++) {\\n\\t\\tvar tiddler = this.getTiddler(tiddlers[t]);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tvar fields = new Object();\\n\\t\\t\\tfor(var field in tiddler.fields) {\\n\\t\\t\\t\\tfields[field] = tiddler.getFieldString(field);\\n\\t\\t\\t}\\n\\t\\t\\tdata.push(fields);\\n\\t\\t}\\n\\t}\\n\\treturn JSON.stringify(data,null,spaces);\\n};\\n\\n/*\\nGet the content of a tiddler as a JavaScript object. How this is done depends on the type of the tiddler:\\n\\napplication/json: the tiddler JSON is parsed into an object\\napplication/x-tiddler-dictionary: the tiddler is parsed as sequence of name:value pairs\\n\\nOther types currently just return null.\\n\\ntitleOrTiddler: string tiddler title or a tiddler object\\ndefaultData: default data to be returned if the tiddler is missing or doesn't contain data\\n\\nNote that the same value is returned for repeated calls for the same tiddler data. The value is frozen to prevent modification; otherwise modifications would be visible to all callers\\n*/\\nexports.getTiddlerDataCached = function(titleOrTiddler,defaultData) {\\n\\tvar self = this,\\n\\t\\ttiddler = titleOrTiddler;\\n\\tif(!(tiddler instanceof $tw.Tiddler)) {\\n\\t\\ttiddler = this.getTiddler(tiddler);\\n\\t}\\n\\tif(tiddler) {\\n\\t\\treturn this.getCacheForTiddler(tiddler.fields.title,\\\"data\\\",function() {\\n\\t\\t\\t// Return the frozen value\\n\\t\\t\\tvar value = self.getTiddlerData(tiddler.fields.title,undefined);\\n\\t\\t\\t$tw.utils.deepFreeze(value);\\n\\t\\t\\treturn value;\\n\\t\\t}) || defaultData;\\n\\t} else {\\n\\t\\treturn defaultData;\\n\\t}\\n};\\n\\n/*\\nAlternative, uncached version of getTiddlerDataCached(). The return value can be mutated freely and reused\\n*/\\nexports.getTiddlerData = function(titleOrTiddler,defaultData) {\\n\\tvar tiddler = titleOrTiddler,\\n\\t\\tdata;\\n\\tif(!(tiddler instanceof $tw.Tiddler)) {\\n\\t\\ttiddler = this.getTiddler(tiddler);\\n\\t}\\n\\tif(tiddler && tiddler.fields.text) {\\n\\t\\tswitch(tiddler.fields.type) {\\n\\t\\t\\tcase \\\"application/json\\\":\\n\\t\\t\\t\\t// JSON tiddler\\n\\t\\t\\t\\treturn $tw.utils.parseJSONSafe(tiddler.fields.text,defaultData);\\n\\t\\t\\tcase \\\"application/x-tiddler-dictionary\\\":\\n\\t\\t\\t\\treturn $tw.utils.parseFields(tiddler.fields.text);\\n\\t\\t}\\n\\t}\\n\\treturn defaultData;\\n};\\n\\n/*\\nExtract an indexed field from within a data tiddler\\n*/\\nexports.extractTiddlerDataItem = function(titleOrTiddler,index,defaultText) {\\n\\tvar data = this.getTiddlerDataCached(titleOrTiddler,Object.create(null)),\\n\\t\\ttext;\\n\\tif(data && $tw.utils.hop(data,index)) {\\n\\t\\ttext = data[index];\\n\\t}\\n\\tif(typeof text === \\\"string\\\" || typeof text === \\\"number\\\") {\\n\\t\\treturn text.toString();\\n\\t} else {\\n\\t\\treturn defaultText;\\n\\t}\\n};\\n\\n/*\\nSet a tiddlers content to a JavaScript object. Currently this is done by setting the tiddler's type to \\\"application/json\\\" and setting the text to the JSON text of the data.\\ntitle: title of tiddler\\ndata: object that can be serialised to JSON\\nfields: optional hashmap of additional tiddler fields to be set\\noptions: optional hashmap of options including:\\n\\tsuppressTimestamp: if true, don't set the creation/modification timestamps\\n*/\\nexports.setTiddlerData = function(title,data,fields,options) {\\n\\toptions = options || {};\\n\\tvar existingTiddler = this.getTiddler(title),\\n\\t\\tcreationFields = options.suppressTimestamp ? {} : this.getCreationFields(),\\n\\t\\tmodificationFields = options.suppressTimestamp ? {} : this.getModificationFields(),\\n\\t\\tnewFields = {\\n\\t\\t\\ttitle: title\\n\\t\\t};\\n\\tif(existingTiddler && existingTiddler.fields.type === \\\"application/x-tiddler-dictionary\\\") {\\n\\t\\tnewFields.text = $tw.utils.makeTiddlerDictionary(data);\\n\\t} else {\\n\\t\\tnewFields.type = \\\"application/json\\\";\\n\\t\\tnewFields.text = JSON.stringify(data,null,$tw.config.preferences.jsonSpaces);\\n\\t}\\n\\tthis.addTiddler(new $tw.Tiddler(creationFields,existingTiddler,fields,newFields,modificationFields));\\n};\\n\\n/*\\nReturn the content of a tiddler as an array containing each line\\n*/\\nexports.getTiddlerList = function(title,field,index) {\\n\\tif(index) {\\n\\t\\treturn $tw.utils.parseStringArray(this.extractTiddlerDataItem(title,index,\\\"\\\"));\\n\\t}\\n\\tfield = field || \\\"list\\\";\\n\\tvar tiddler = this.getTiddler(title);\\n\\tif(tiddler) {\\n\\t\\treturn ($tw.utils.parseStringArray(tiddler.fields[field]) || []).slice(0);\\n\\t}\\n\\treturn [];\\n};\\n\\n// Return a named global cache object. Global cache objects are cleared whenever a tiddler change occurs\\nexports.getGlobalCache = function(cacheName,initializer) {\\n\\tthis.globalCache = this.globalCache || Object.create(null);\\n\\tif($tw.utils.hop(this.globalCache,cacheName)) {\\n\\t\\treturn this.globalCache[cacheName];\\n\\t} else {\\n\\t\\tthis.globalCache[cacheName] = initializer();\\n\\t\\treturn this.globalCache[cacheName];\\n\\t}\\n};\\n\\nexports.clearGlobalCache = function() {\\n\\tthis.globalCache = Object.create(null);\\n};\\n\\n// Return the named cache object for a tiddler. If the cache doesn't exist then the initializer function is invoked to create it\\nexports.getCacheForTiddler = function(title,cacheName,initializer) {\\n\\tthis.caches = this.caches || Object.create(null);\\n\\tvar caches = this.caches[title];\\n\\tif(caches && caches[cacheName] !== undefined) {\\n\\t\\treturn caches[cacheName];\\n\\t} else {\\n\\t\\tif(!caches) {\\n\\t\\t\\tcaches = Object.create(null);\\n\\t\\t\\tthis.caches[title] = caches;\\n\\t\\t}\\n\\t\\tcaches[cacheName] = initializer();\\n\\t\\treturn caches[cacheName];\\n\\t}\\n};\\n\\n// Clear all caches associated with a particular tiddler, or, if the title is null, clear all the caches for all the tiddlers\\nexports.clearCache = function(title) {\\n\\tif(title) {\\n\\t\\tthis.caches = this.caches || Object.create(null);\\n\\t\\tif($tw.utils.hop(this.caches,title)) {\\n\\t\\t\\tdelete this.caches[title];\\n\\t\\t}\\n\\t} else {\\n\\t\\tthis.caches = Object.create(null);\\n\\t}\\n};\\n\\nexports.initParsers = function(moduleType) {\\n\\t// Install the parser modules\\n\\t$tw.Wiki.parsers = {};\\n\\tvar self = this;\\n\\t$tw.modules.forEachModuleOfType(\\\"parser\\\",function(title,module) {\\n\\t\\tfor(var f in module) {\\n\\t\\t\\tif($tw.utils.hop(module,f)) {\\n\\t\\t\\t\\t$tw.Wiki.parsers[f] = module[f]; // Store the parser class\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\t// Use the generic binary parser for any binary types not registered so far\\n\\tif($tw.Wiki.parsers[\\\"application/octet-stream\\\"]) {\\n\\t\\tObject.keys($tw.config.contentTypeInfo).forEach(function(type) {\\n\\t\\t\\tif(!$tw.utils.hop($tw.Wiki.parsers,type) && $tw.config.contentTypeInfo[type].encoding === \\\"base64\\\") {\\n\\t\\t\\t\\t$tw.Wiki.parsers[type] = $tw.Wiki.parsers[\\\"application/octet-stream\\\"];\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n};\\n\\n/*\\nParse a block of text of a specified MIME type\\n\\ttype: content type of text to be parsed\\n\\ttext: text\\n\\toptions: see below\\nOptions include:\\n\\tparseAsInline: if true, the text of the tiddler will be parsed as an inline run\\n\\t_canonical_uri: optional string of the canonical URI of this content\\n*/\\nexports.parseText = function(type,text,options) {\\n\\ttext = text || \\\"\\\";\\n\\toptions = options || {};\\n\\t// Select a parser\\n\\tvar Parser = $tw.Wiki.parsers[type];\\n\\tif(!Parser && $tw.utils.getFileExtensionInfo(type)) {\\n\\t\\tParser = $tw.Wiki.parsers[$tw.utils.getFileExtensionInfo(type).type];\\n\\t}\\n\\tif(!Parser) {\\n\\t\\tParser = $tw.Wiki.parsers[options.defaultType || \\\"text/vnd.tiddlywiki\\\"];\\n\\t}\\n\\tif(!Parser) {\\n\\t\\treturn null;\\n\\t}\\n\\t// Return the parser instance\\n\\treturn new Parser(type,text,{\\n\\t\\tparseAsInline: options.parseAsInline,\\n\\t\\twiki: this,\\n\\t\\t_canonical_uri: options._canonical_uri\\n\\t});\\n};\\n\\n/*\\nParse a tiddler according to its MIME type\\n*/\\nexports.parseTiddler = function(title,options) {\\n\\toptions = $tw.utils.extend({},options);\\n\\tvar cacheType = options.parseAsInline ? \\\"inlineParseTree\\\" : \\\"blockParseTree\\\",\\n\\t\\ttiddler = this.getTiddler(title),\\n\\t\\tself = this;\\n\\treturn tiddler ? this.getCacheForTiddler(title,cacheType,function() {\\n\\t\\t\\tif(tiddler.hasField(\\\"_canonical_uri\\\")) {\\n\\t\\t\\t\\toptions._canonical_uri = tiddler.fields._canonical_uri;\\n\\t\\t\\t}\\n\\t\\t\\treturn self.parseText(tiddler.fields.type,tiddler.fields.text,options);\\n\\t\\t}) : null;\\n};\\n\\nexports.parseTextReference = function(title,field,index,options) {\\n\\tvar tiddler,\\n\\t\\ttext,\\n\\t\\tparserInfo;\\n\\tif(!options.subTiddler) {\\n\\t\\ttiddler = this.getTiddler(title);\\n\\t\\tif(field === \\\"text\\\" || (!field && !index)) {\\n\\t\\t\\tthis.getTiddlerText(title); // Force the tiddler to be lazily loaded\\n\\t\\t\\treturn this.parseTiddler(title,options);\\n\\t\\t}\\n\\t} \\n\\tparserInfo = this.getTextReferenceParserInfo(title,field,index,options);\\n\\tif(parserInfo.sourceText !== null) {\\n\\t\\treturn this.parseText(parserInfo.parserType,parserInfo.sourceText,options);\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\nexports.getTextReferenceParserInfo = function(title,field,index,options) {\\n\\tvar tiddler,\\n\\t\\tparserInfo = {\\n\\t\\t\\tsourceText : null,\\n\\t\\t\\tparserType : \\\"text/vnd.tiddlywiki\\\"\\n\\t\\t};\\n\\tif(options.subTiddler) {\\n\\t\\ttiddler = this.getSubTiddler(title,options.subTiddler);\\n\\t} else {\\n\\t\\ttiddler = this.getTiddler(title);\\n\\t}\\n\\tif(field === \\\"text\\\" || (!field && !index)) {\\n\\t\\tif(tiddler && tiddler.fields) {\\n\\t\\t\\tparserInfo.sourceText = tiddler.fields.text || \\\"\\\";\\n\\t\\t\\tif(tiddler.fields.type) {\\n\\t\\t\\t\\tparserInfo.parserType = tiddler.fields.type;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else if(field) {\\n\\t\\tif(field === \\\"title\\\") {\\n\\t\\t\\tparserInfo.sourceText = title;\\n\\t\\t} else if(tiddler && tiddler.fields) {\\n\\t\\t\\tparserInfo.sourceText = tiddler.hasField(field) ? tiddler.fields[field].toString() : null;\\n\\t\\t}\\n\\t} else if(index) {\\n\\t\\tthis.getTiddlerText(title); // Force the tiddler to be lazily loaded\\n\\t\\tparserInfo.sourceText = this.extractTiddlerDataItem(tiddler,index,null);\\n\\t}\\n\\tif(parserInfo.sourceText === null) {\\n\\t\\tparserInfo.parserType = null;\\n\\t}\\n\\treturn parserInfo;\\n}\\n\\n/*\\nMake a widget tree for a parse tree\\nparser: parser object\\noptions: see below\\nOptions include:\\ndocument: optional document to use\\nvariables: hashmap of variables to set\\nparentWidget: optional parent widget for the root node\\n*/\\nexports.makeWidget = function(parser,options) {\\n\\toptions = options || {};\\n\\tvar widgetNode = {\\n\\t\\t\\ttype: \\\"widget\\\",\\n\\t\\t\\tchildren: []\\n\\t\\t},\\n\\t\\tcurrWidgetNode = widgetNode;\\n\\t// Create set variable widgets for each variable\\n\\t$tw.utils.each(options.variables,function(value,name) {\\n\\t\\tvar setVariableWidget = {\\n\\t\\t\\ttype: \\\"set\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tname: {type: \\\"string\\\", value: name},\\n\\t\\t\\t\\tvalue: {type: \\\"string\\\", value: value}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: []\\n\\t\\t};\\n\\t\\tcurrWidgetNode.children = [setVariableWidget];\\n\\t\\tcurrWidgetNode = setVariableWidget;\\n\\t});\\n\\t// Add in the supplied parse tree nodes\\n\\tcurrWidgetNode.children = parser ? parser.tree : [];\\n\\t// Create the widget\\n\\treturn new widget.widget(widgetNode,{\\n\\t\\twiki: this,\\n\\t\\tdocument: options.document || $tw.fakeDocument,\\n\\t\\tparentWidget: options.parentWidget\\n\\t});\\n};\\n\\n/*\\nMake a widget tree for transclusion\\ntitle: target tiddler title\\noptions: as for wiki.makeWidget() plus:\\noptions.field: optional field to transclude (defaults to \\\"text\\\")\\noptions.mode: transclusion mode \\\"inline\\\" or \\\"block\\\"\\noptions.recursionMarker : optional flag to set a recursion marker, defaults to \\\"yes\\\"\\noptions.children: optional array of children for the transclude widget\\noptions.importVariables: optional importvariables filter string for macros to be included\\noptions.importPageMacros: optional boolean; if true, equivalent to passing \\\"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\\" to options.importVariables\\n*/\\nexports.makeTranscludeWidget = function(title,options) {\\n\\toptions = options || {};\\n\\tvar parseTreeDiv = {tree: [{\\n\\t\\t\\ttype: \\\"element\\\",\\n\\t\\t\\ttag: \\\"div\\\",\\n\\t\\t\\tchildren: []}]},\\n\\t\\tparseTreeImportVariables = {\\n\\t\\t\\ttype: \\\"importvariables\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tfilter: {\\n\\t\\t\\t\\t\\tname: \\\"filter\\\",\\n\\t\\t\\t\\t\\ttype: \\\"string\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tisBlock: false,\\n\\t\\t\\tchildren: []},\\n\\t\\tparseTreeTransclude = {\\n\\t\\t\\ttype: \\\"transclude\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\trecursionMarker: {\\n\\t\\t\\t\\t\\tname: \\\"recursionMarker\\\",\\n\\t\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\t\\tvalue: options.recursionMarker || \\\"yes\\\"\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\ttiddler: {\\n\\t\\t\\t\\t\\tname: \\\"tiddler\\\",\\n\\t\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\t\\tvalue: title\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tisBlock: !options.parseAsInline};\\n\\tif(options.importVariables || options.importPageMacros) {\\n\\t\\tif(options.importVariables) {\\n\\t\\t\\tparseTreeImportVariables.attributes.filter.value = options.importVariables;\\n\\t\\t} else if(options.importPageMacros) {\\n\\t\\t\\tparseTreeImportVariables.attributes.filter.value = \\\"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\\";\\n\\t\\t}\\n\\t\\tparseTreeDiv.tree[0].children.push(parseTreeImportVariables);\\n\\t\\tparseTreeImportVariables.children.push(parseTreeTransclude);\\n\\t} else {\\n\\t\\tparseTreeDiv.tree[0].children.push(parseTreeTransclude);\\n\\t}\\n\\tif(options.field) {\\n\\t\\tparseTreeTransclude.attributes.field = {type: \\\"string\\\", value: options.field};\\n\\t}\\n\\tif(options.mode) {\\n\\t\\tparseTreeTransclude.attributes.mode = {type: \\\"string\\\", value: options.mode};\\n\\t}\\n\\tif(options.children) {\\n\\t\\tparseTreeTransclude.children = options.children;\\n\\t}\\n\\treturn this.makeWidget(parseTreeDiv,options);\\n};\\n\\n/*\\nParse text in a specified format and render it into another format\\n\\toutputType: content type for the output\\n\\ttextType: content type of the input text\\n\\ttext: input text\\n\\toptions: see below\\nOptions include:\\nvariables: hashmap of variables to set\\nparentWidget: optional parent widget for the root node\\n*/\\nexports.renderText = function(outputType,textType,text,options) {\\n\\toptions = options || {};\\n\\tvar parser = this.parseText(textType,text,options),\\n\\t\\twidgetNode = this.makeWidget(parser,options);\\n\\tvar container = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\twidgetNode.render(container,null);\\n\\treturn outputType === \\\"text/html\\\" ? container.innerHTML : container.textContent;\\n};\\n\\n/*\\nParse text from a tiddler and render it into another format\\n\\toutputType: content type for the output\\n\\ttitle: title of the tiddler to be rendered\\n\\toptions: see below\\nOptions include:\\nvariables: hashmap of variables to set\\nparentWidget: optional parent widget for the root node\\n*/\\nexports.renderTiddler = function(outputType,title,options) {\\n\\toptions = options || {};\\n\\tvar parser = this.parseTiddler(title,options),\\n\\t\\twidgetNode = this.makeWidget(parser,options);\\n\\tvar container = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\twidgetNode.render(container,null);\\n\\treturn outputType === \\\"text/html\\\" ? container.innerHTML : (outputType === \\\"text/plain-formatted\\\" ? container.formattedTextContent : container.textContent);\\n};\\n\\n/*\\nReturn an array of tiddler titles that match a search string\\n\\ttext: The text string to search for\\n\\toptions: see below\\nOptions available:\\n\\tsource: an iterator function for the source tiddlers, called source(iterator),\\n\\t\\twhere iterator is called as iterator(tiddler,title)\\n\\texclude: An array of tiddler titles to exclude from the search\\n\\tinvert: If true returns tiddlers that do not contain the specified string\\n\\tcaseSensitive: If true forces a case sensitive search\\n\\tfield: If specified, restricts the search to the specified field, or an array of field names\\n\\tanchored: If true, forces all but regexp searches to be anchored to the start of text\\n\\texcludeField: If true, the field options are inverted to specify the fields that are not to be searched\\n\\n\\tThe search mode is determined by the first of these boolean flags to be true\\n\\t\\tliteral: searches for literal string\\n\\t\\twhitespace: same as literal except runs of whitespace are treated as a single space\\n\\t\\tregexp: treats the search term as a regular expression\\n\\t\\twords: (default) treats search string as a list of tokens, and matches if all tokens are found, \\n\\t\\t\\tregardless of adjacency or ordering\\n\\t\\tsome: treats search string as a list of tokens, and matches if at least ONE token is found\\n*/\\nexports.search = function(text,options) {\\n\\toptions = options || {};\\n\\tvar self = this,\\n\\t\\tt,\\n\\t\\tregExpStr=\\\"\\\",\\n\\t\\tinvert = !!options.invert;\\n\\t// Convert the search string into a regexp for each term\\n\\tvar terms, searchTermsRegExps,\\n\\t\\tflags = options.caseSensitive ? \\\"\\\" : \\\"i\\\",\\n\\t\\tanchor = options.anchored ? \\\"^\\\" : \\\"\\\";\\n\\tif(options.literal) {\\n\\t\\tif(text.length === 0) {\\n\\t\\t\\tsearchTermsRegExps = null;\\n\\t\\t} else {\\n\\t\\t\\tsearchTermsRegExps = [new RegExp(\\\"(\\\" + anchor + $tw.utils.escapeRegExp(text) + \\\")\\\",flags)];\\n\\t\\t}\\n\\t} else if(options.whitespace) {\\n\\t\\tterms = [];\\n\\t\\t$tw.utils.each(text.split(/\\\\s+/g),function(term) {\\n\\t\\t\\tif(term) {\\n\\t\\t\\t\\tterms.push($tw.utils.escapeRegExp(term));\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tsearchTermsRegExps = [new RegExp(\\\"(\\\" + anchor + terms.join(\\\"\\\\\\\\s+\\\") + \\\")\\\",flags)];\\n\\t} else if(options.regexp) {\\n\\t\\ttry {\\n\\t\\t\\tsearchTermsRegExps = [new RegExp(\\\"(\\\" + text + \\\")\\\",flags)];\\n\\t\\t} catch(e) {\\n\\t\\t\\tsearchTermsRegExps = null;\\n\\t\\t\\tconsole.log(\\\"Regexp error parsing /(\\\" + text + \\\")/\\\" + flags + \\\": \\\",e);\\n\\t\\t}\\n\\t} else if(options.some) {\\n\\t\\tterms = text.trim().split(/ +/);\\n\\t\\tif(terms.length === 1 && terms[0] === \\\"\\\") {\\n\\t\\t\\tsearchTermsRegExps = null;\\n\\t\\t} else {\\n\\t\\t\\tsearchTermsRegExps = [];\\n\\t\\t\\tfor(t=0; t\u003Cterms.length; t++) {\\n\\t\\t\\t\\tregExpStr += (t===0) ? anchor + $tw.utils.escapeRegExp(terms[t]) : \\\"|\\\" + anchor + $tw.utils.escapeRegExp(terms[t]);\\n\\t\\t\\t}\\n\\t\\t\\tsearchTermsRegExps.push(new RegExp(\\\"(\\\" + regExpStr + \\\")\\\",flags));\\n\\t\\t}\\n\\t} else { // default: words\\n\\t\\tterms = text.split(/ +/);\\n\\t\\tif(terms.length === 1 && terms[0] === \\\"\\\") {\\n\\t\\t\\tsearchTermsRegExps = null;\\n\\t\\t} else {\\n\\t\\t\\tsearchTermsRegExps = [];\\n\\t\\t\\tfor(t=0; t\u003Cterms.length; t++) {\\n\\t\\t\\t\\tsearchTermsRegExps.push(new RegExp(\\\"(\\\" + anchor + $tw.utils.escapeRegExp(terms[t]) + \\\")\\\",flags));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n// Accumulate the array of fields to be searched or excluded from the search\\n\\tvar fields = [];\\n\\tif(options.field) {\\n\\t\\tif($tw.utils.isArray(options.field)) {\\n\\t\\t\\t$tw.utils.each(options.field,function(fieldName) {\\n\\t\\t\\t\\tif(fieldName) {\\n\\t\\t\\t\\t\\tfields.push(fieldName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tfields.push(options.field);\\n\\t\\t}\\n\\t}\\n\\t// Use default fields if none specified and we're not excluding fields (excluding fields with an empty field array is the same as searching all fields)\\n\\tif(fields.length === 0 && !options.excludeField) {\\n\\t\\tfields.push(\\\"title\\\");\\n\\t\\tfields.push(\\\"tags\\\");\\n\\t\\tfields.push(\\\"text\\\");\\n\\t}\\n\\t// Function to check a given tiddler for the search term\\n\\tvar searchTiddler = function(title) {\\n\\t\\tif(!searchTermsRegExps) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tvar notYetFound = searchTermsRegExps.slice();\\n\\n\\t\\tvar tiddler = self.getTiddler(title);\\n\\t\\tif(!tiddler) {\\n\\t\\t\\ttiddler = new $tw.Tiddler({title: title, text: \\\"\\\", type: \\\"text/vnd.tiddlywiki\\\"});\\n\\t\\t}\\n\\t\\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.fields.type] || $tw.config.contentTypeInfo[\\\"text/vnd.tiddlywiki\\\"],\\n\\t\\t\\tsearchFields;\\n\\t\\t// Get the list of fields we're searching\\n\\t\\tif(options.excludeField) {\\n\\t\\t\\tsearchFields = Object.keys(tiddler.fields);\\n\\t\\t\\t$tw.utils.each(fields,function(fieldName) {\\n\\t\\t\\t\\tvar p = searchFields.indexOf(fieldName);\\n\\t\\t\\t\\tif(p !== -1) {\\n\\t\\t\\t\\t\\tsearchFields.splice(p,1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\tsearchFields = fields;\\n\\t\\t}\\n\\t\\tfor(var fieldIndex=0; notYetFound.length>0 && fieldIndex\u003CsearchFields.length; fieldIndex++) {\\n\\t\\t\\t// Don't search the text field if the content type is binary\\n\\t\\t\\tvar fieldName = searchFields[fieldIndex];\\n\\t\\t\\tif(fieldName === \\\"text\\\" && contentTypeInfo.encoding !== \\\"utf8\\\") {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tvar str = tiddler.fields[fieldName],\\n\\t\\t\\t\\tt;\\n\\t\\t\\tif(str) {\\n\\t\\t\\t\\tif($tw.utils.isArray(str)) {\\n\\t\\t\\t\\t\\t// If the field value is an array, test each regexp against each field array entry and fail if each regexp doesn't match at least one field array entry\\n\\t\\t\\t\\t\\tfor(var s=0; s\u003Cstr.length; s++) {\\n\\t\\t\\t\\t\\t\\tfor(t=0; t\u003CnotYetFound.length;) {\\n\\t\\t\\t\\t\\t\\t\\tif(notYetFound[t].test(str[s])) {\\n\\t\\t\\t\\t\\t\\t\\t\\tnotYetFound.splice(t, 1);\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tt++;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// If the field isn't an array, force it to a string and test each regexp against it and fail if any do not match\\n\\t\\t\\t\\t\\tstr = tiddler.getFieldString(fieldName);\\n\\t\\t\\t\\t\\tfor(t=0; t\u003CnotYetFound.length;) {\\n\\t\\t\\t\\t\\t\\tif(notYetFound[t].test(str)) {\\n\\t\\t\\t\\t\\t\\t\\tnotYetFound.splice(t, 1);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tt++;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\treturn notYetFound.length == 0;\\n\\t};\\n\\t// Loop through all the tiddlers doing the search\\n\\tvar results = [],\\n\\t\\tsource = options.source || this.each;\\n\\tsource(function(tiddler,title) {\\n\\t\\tif(searchTiddler(title) !== invert) {\\n\\t\\t\\tresults.push(title);\\n\\t\\t}\\n\\t});\\n\\t// Remove any of the results we have to exclude\\n\\tif(options.exclude) {\\n\\t\\tfor(t=0; t\u003Coptions.exclude.length; t++) {\\n\\t\\t\\tvar p = results.indexOf(options.exclude[t]);\\n\\t\\t\\tif(p !== -1) {\\n\\t\\t\\t\\tresults.splice(p,1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn results;\\n};\\n\\n/*\\nTrigger a load for a tiddler if it is skinny. Returns the text, or undefined if the tiddler is missing, null if the tiddler is being lazily loaded.\\n*/\\nexports.getTiddlerText = function(title,defaultText) {\\n\\tvar tiddler = this.getTiddler(title);\\n\\t// Return undefined if the tiddler isn't found\\n\\tif(!tiddler) {\\n\\t\\treturn defaultText;\\n\\t}\\n\\tif(!tiddler.hasField(\\\"_is_skinny\\\")) {\\n\\t\\t// Just return the text if we've got it\\n\\t\\treturn tiddler.fields.text || \\\"\\\";\\n\\t} else {\\n\\t\\t// Tell any listeners about the need to lazily load this tiddler\\n\\t\\tthis.dispatchEvent(\\\"lazyLoad\\\",title);\\n\\t\\t// Indicate that the text is being loaded\\n\\t\\treturn null;\\n\\t}\\n};\\n\\n/*\\nCheck whether the text of a tiddler matches a given value. By default, the comparison is case insensitive, and any spaces at either end of the tiddler text is trimmed\\n*/\\nexports.checkTiddlerText = function(title,targetText,options) {\\n\\toptions = options || {};\\n\\tvar text = this.getTiddlerText(title,\\\"\\\");\\n\\tif(!options.noTrim) {\\n\\t\\ttext = text.trim();\\n\\t}\\n\\tif(!options.caseSensitive) {\\n\\t\\ttext = text.toLowerCase();\\n\\t\\ttargetText = targetText.toLowerCase();\\n\\t}\\n\\treturn text === targetText;\\n}\\n\\n/*\\nRead an array of browser File objects, invoking callback(tiddlerFieldsArray) once they're all read\\n*/\\nexports.readFiles = function(files,options) {\\n\\tvar callback;\\n\\tif(typeof options === \\\"function\\\") {\\n\\t\\tcallback = options;\\n\\t\\toptions = {};\\n\\t} else {\\n\\t\\tcallback = options.callback;\\n\\t}\\n\\tvar result = [],\\n\\t\\toutstanding = files.length,\\n\\t\\treadFileCallback = function(tiddlerFieldsArray) {\\n\\t\\t\\tresult.push.apply(result,tiddlerFieldsArray);\\n\\t\\t\\tif(--outstanding === 0) {\\n\\t\\t\\t\\tcallback(result);\\n\\t\\t\\t}\\n\\t\\t};\\n\\tfor(var f=0; f\u003Cfiles.length; f++) {\\n\\t\\tthis.readFile(files[f],$tw.utils.extend({},options,{callback: readFileCallback}));\\n\\t}\\n\\treturn files.length;\\n};\\n\\n/*\\nRead a browser File object, invoking callback(tiddlerFieldsArray) with an array of tiddler fields objects\\n*/\\nexports.readFile = function(file,options) {\\n\\tvar callback;\\n\\tif(typeof options === \\\"function\\\") {\\n\\t\\tcallback = options;\\n\\t\\toptions = {};\\n\\t} else {\\n\\t\\tcallback = options.callback;\\n\\t}\\n\\t// Get the type, falling back to the filename extension\\n\\tvar self = this,\\n\\t\\ttype = file.type;\\n\\tif(type === \\\"\\\" || !type) {\\n\\t\\tvar dotPos = file.name.lastIndexOf(\\\".\\\");\\n\\t\\tif(dotPos !== -1) {\\n\\t\\t\\tvar fileExtensionInfo = $tw.utils.getFileExtensionInfo(file.name.substr(dotPos));\\n\\t\\t\\tif(fileExtensionInfo) {\\n\\t\\t\\t\\ttype = fileExtensionInfo.type;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Figure out if we're reading a binary file\\n\\tvar contentTypeInfo = $tw.config.contentTypeInfo[type],\\n\\t\\tisBinary = contentTypeInfo ? contentTypeInfo.encoding === \\\"base64\\\" : false;\\n\\t// Log some debugging information\\n\\tif($tw.log.IMPORT) {\\n\\t\\tconsole.log(\\\"Importing file '\\\" + file.name + \\\"', type: '\\\" + type + \\\"', isBinary: \\\" + isBinary);\\n\\t}\\n\\t// Give the hook a chance to process the drag\\n\\tif($tw.hooks.invokeHook(\\\"th-importing-file\\\",{\\n\\t\\tfile: file,\\n\\t\\ttype: type,\\n\\t\\tisBinary: isBinary,\\n\\t\\tcallback: callback\\n\\t}) !== true) {\\n\\t\\tthis.readFileContent(file,type,isBinary,options.deserializer,callback);\\n\\t}\\n};\\n\\n/*\\nLower level utility to read the content of a browser File object, invoking callback(tiddlerFieldsArray) with an array of tiddler fields objects\\n*/\\nexports.readFileContent = function(file,type,isBinary,deserializer,callback) {\\n\\tvar self = this;\\n\\t// Create the FileReader\\n\\tvar reader = new FileReader();\\n\\t// Onload\\n\\treader.onload = function(event) {\\n\\t\\tvar text = event.target.result,\\n\\t\\t\\ttiddlerFields = {title: file.name || \\\"Untitled\\\"};\\n\\t\\tif(isBinary) {\\n\\t\\t\\tvar commaPos = text.indexOf(\\\",\\\");\\n\\t\\t\\tif(commaPos !== -1) {\\n\\t\\t\\t\\ttext = text.substr(commaPos + 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check whether this is an encrypted TiddlyWiki file\\n\\t\\tvar encryptedJson = $tw.utils.extractEncryptedStoreArea(text);\\n\\t\\tif(encryptedJson) {\\n\\t\\t\\t// If so, attempt to decrypt it with the current password\\n\\t\\t\\t$tw.utils.decryptStoreAreaInteractive(encryptedJson,function(tiddlers) {\\n\\t\\t\\t\\tcallback(tiddlers);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, just try to deserialise any tiddlers in the file\\n\\t\\t\\tcallback(self.deserializeTiddlers(type,text,tiddlerFields,{deserializer: deserializer}));\\n\\t\\t}\\n\\t};\\n\\t// Kick off the read\\n\\tif(isBinary) {\\n\\t\\treader.readAsDataURL(file);\\n\\t} else {\\n\\t\\treader.readAsText(file);\\n\\t}\\n};\\n\\n/*\\nFind any existing draft of a specified tiddler\\n*/\\nexports.findDraft = function(targetTitle) {\\n\\tvar draftTitle = undefined;\\n\\tthis.forEachTiddler({includeSystem: true},function(title,tiddler) {\\n\\t\\tif(tiddler.fields[\\\"draft.title\\\"] && tiddler.fields[\\\"draft.of\\\"] === targetTitle) {\\n\\t\\t\\tdraftTitle = title;\\n\\t\\t}\\n\\t});\\n\\treturn draftTitle;\\n}\\n\\n/*\\nCheck whether the specified draft tiddler has been modified.\\nIf the original tiddler doesn't exist, create  a vanilla tiddler variable,\\nto check if additional fields have been added.\\n*/\\nexports.isDraftModified = function(title) {\\n\\tvar tiddler = this.getTiddler(title);\\n\\tif(!tiddler.isDraft()) {\\n\\t\\treturn false;\\n\\t}\\n\\tvar ignoredFields = [\\\"created\\\", \\\"modified\\\", \\\"title\\\", \\\"draft.title\\\", \\\"draft.of\\\"],\\n\\t\\torigTiddler = this.getTiddler(tiddler.fields[\\\"draft.of\\\"]) || new $tw.Tiddler({text:\\\"\\\", tags:[]}),\\n\\t\\ttitleModified = tiddler.fields[\\\"draft.title\\\"] !== tiddler.fields[\\\"draft.of\\\"];\\n\\treturn titleModified || !tiddler.isEqual(origTiddler,ignoredFields);\\n};\\n\\n/*\\nAdd a new record to the top of the history stack\\ntitle: a title string or an array of title strings\\nfromPageRect: page coordinates of the origin of the navigation\\nhistoryTitle: title of history tiddler (defaults to $:/HistoryList)\\n*/\\nexports.addToHistory = function(title,fromPageRect,historyTitle) {\\n\\tvar story = new $tw.Story({wiki: this, historyTitle: historyTitle});\\n\\tstory.addToHistory(title,fromPageRect);\\n\\tconsole.log(\\\"$tw.wiki.addToHistory() is deprecated since V5.1.23! Use the this.story.addToHistory() from the story-object!\\\")\\n};\\n\\n/*\\nAdd a new tiddler to the story river\\ntitle: a title string or an array of title strings\\nfromTitle: the title of the tiddler from which the navigation originated\\nstoryTitle: title of story tiddler (defaults to $:/StoryList)\\noptions: see story.js\\n*/\\nexports.addToStory = function(title,fromTitle,storyTitle,options) {\\n\\tvar story = new $tw.Story({wiki: this, storyTitle: storyTitle});\\n\\tstory.addToStory(title,fromTitle,options);\\n\\tconsole.log(\\\"$tw.wiki.addToStory() is deprecated since V5.1.23! Use the this.story.addToStory() from the story-object!\\\")\\n};\\n\\n/*\\nGenerate a title for the draft of a given tiddler\\n*/\\nexports.generateDraftTitle = function(title) {\\n\\tvar c = 0,\\n\\t\\tdraftTitle,\\n\\t\\tusername = this.getTiddlerText(\\\"$:/status/UserName\\\"),\\n\\t\\tattribution = username ? \\\" by \\\" + username : \\\"\\\";\\n\\tdo {\\n\\t\\tdraftTitle = \\\"Draft \\\" + (c ? (c + 1) + \\\" \\\" : \\\"\\\") + \\\"of '\\\" + title + \\\"'\\\" + attribution;\\n\\t\\tc++;\\n\\t} while(this.tiddlerExists(draftTitle));\\n\\treturn draftTitle;\\n};\\n\\n/*\\nInvoke the available upgrader modules\\ntitles: array of tiddler titles to be processed\\ntiddlers: hashmap by title of tiddler fields of pending import tiddlers. These can be modified by the upgraders. An entry with no fields indicates a tiddler that was pending import has been suppressed. When entries are added to the pending import the tiddlers hashmap may have entries that are not present in the titles array\\nReturns a hashmap of messages keyed by tiddler title.\\n*/\\nexports.invokeUpgraders = function(titles,tiddlers) {\\n\\t// Collect up the available upgrader modules\\n\\tvar self = this;\\n\\tif(!this.upgraderModules) {\\n\\t\\tthis.upgraderModules = [];\\n\\t\\t$tw.modules.forEachModuleOfType(\\\"upgrader\\\",function(title,module) {\\n\\t\\t\\tif(module.upgrade) {\\n\\t\\t\\t\\tself.upgraderModules.push(module);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t// Invoke each upgrader in turn\\n\\tvar messages = {};\\n\\tfor(var t=0; t\u003Cthis.upgraderModules.length; t++) {\\n\\t\\tvar upgrader = this.upgraderModules[t],\\n\\t\\t\\tupgraderMessages = upgrader.upgrade(this,titles,tiddlers);\\n\\t\\t$tw.utils.extend(messages,upgraderMessages);\\n\\t}\\n\\treturn messages;\\n};\\n\\n// Determine whether a plugin by title is dynamically loadable\\nexports.doesPluginRequireReload = function(title) {\\n\\tvar tiddler = this.getTiddler(title);\\n\\tif(tiddler && tiddler.fields.type === \\\"application/json\\\" && tiddler.fields[\\\"plugin-type\\\"]) {\\n\\t\\tif(tiddler.fields[\\\"plugin-type\\\"] === \\\"import\\\") {\\n\\t\\t\\t// The import plugin never requires reloading\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\treturn this.doesPluginInfoRequireReload(this.getPluginInfo(title) || this.getTiddlerDataCached(title));\\n};\\n\\n// Determine whether a plugin info structure is dynamically loadable\\nexports.doesPluginInfoRequireReload = function(pluginInfo) {\\n\\tif(pluginInfo) {\\n\\t\\tvar foundModule = false;\\n\\t\\t$tw.utils.each(pluginInfo.tiddlers,function(tiddler) {\\n\\t\\t\\tif(tiddler.type === \\\"application/javascript\\\" && $tw.utils.hop(tiddler,\\\"module-type\\\")) {\\n\\t\\t\\t\\tfoundModule = true;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn foundModule;\\n\\t} else {\\n\\t\\treturn null;\\n\\t}\\n};\\n\\nexports.slugify = function(title,options) {\\n\\tvar tiddler = this.getTiddler(title),\\n\\t\\tslug;\\n\\tif(tiddler && tiddler.fields.slug) {\\n\\t\\tslug = tiddler.fields.slug;\\n\\t} else {\\n\\t\\tslug = $tw.utils.transliterate(title.toString().toLowerCase()) // Replace diacritics with basic lowercase ASCII\\n\\t\\t\\t.replace(/\\\\s+/g,\\\"-\\\")                                       // Replace spaces with -\\n\\t\\t\\t.replace(/[^\\\\w\\\\-\\\\.]+/g,\\\"\\\")                                 // Remove all non-word chars except dash and dot\\n\\t\\t\\t.replace(/\\\\-\\\\-+/g,\\\"-\\\")                                     // Replace multiple - with single -\\n\\t\\t\\t.replace(/^-+/,\\\"\\\")                                         // Trim - from start of text\\n\\t\\t\\t.replace(/-+$/,\\\"\\\");                                        // Trim - from end of text\\n\\t}\\n\\t// If the resulting slug is blank (eg because the title is just punctuation characters)\\n\\tif(!slug) {\\n\\t\\t// ...then just use the character codes of the title\\n\\t\\tvar result = [];\\n\\t\\t$tw.utils.each(title.split(\\\"\\\"),function(char) {\\n\\t\\t\\tresult.push(char.charCodeAt(0).toString());\\n\\t\\t});\\n\\t\\tslug = result.join(\\\"-\\\");\\n\\t}\\n\\treturn slug;\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"wikimethod\"},\"$:/palettes/Blanca\":{\"title\":\"$:/palettes/Blanca\",\"name\":\"Blanca\",\"color-scheme\":\"light\",\"description\":\"A clean white palette to let you focus\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #ffffff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background:\\nbutton-foreground:\\nbutton-border:\\ncode-background: #f7f7f9\\ncode-border: #e1e1e8\\ncode-foreground: #dd1144\\ndirty-indicator: #ff0000\\ndownload-background: #66cccc\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #fff\\ndropdown-tab-background: #ececec\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #0000aa\\nexternal-link-foreground: #0000ee\\nforeground: #333333\\nmessage-background: #ecf2ff\\nmessage-border: #cfd6e6\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #999999\\nmodal-footer-background: #f5f5f5\\nmodal-footer-border: #dddddd\\nmodal-header-border: #eeeeee\\nmuted-foreground: #999999\\nnotification-background: #ffffdd\\nnotification-border: #999999\\npage-background: #ffffff\\npre-background: #f5f5f5\\npre-border: #cccccc\\nprimary: #7897f3\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #000000\\nsidebar-controls-foreground: #ccc\\nsidebar-foreground-shadow: rgba(255,255,255, 0.8)\\nsidebar-foreground: #acacac\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: #c0c0c0\\nsidebar-tab-background-selected: #ffffff\\nsidebar-tab-background: \u003C\u003Ccolour tab-background>>\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: \u003C\u003Ccolour tab-divider>>\\nsidebar-tab-foreground-selected: \\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #444444\\nsidebar-tiddler-link-foreground: #7897f3\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: #ffffff\\ntab-background: #eeeeee\\ntab-border-selected: #cccccc\\ntab-border: #cccccc\\ntab-divider: #d8d8d8\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #666666\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #ffeedd\\ntag-foreground: #000\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: #eee\\ntiddler-controls-foreground-hover: #888888\\ntiddler-controls-foreground-selected: #444444\\ntiddler-controls-foreground: #cccccc\\ntiddler-editor-background: #f8f8f8\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-background: #f8f8f8\\ntiddler-info-border: #dddddd\\ntiddler-info-tab-background: #f8f8f8\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #c0c0c0\\ntiddler-title-foreground: #ff9900\\ntoolbar-new-button:\\ntoolbar-options-button:\\ntoolbar-save-button:\\ntoolbar-info-button:\\ntoolbar-edit-button:\\ntoolbar-close-button:\\ntoolbar-delete-button:\\ntoolbar-cancel-button:\\ntoolbar-done-button:\\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/Blue\":{\"title\":\"$:/palettes/Blue\",\"name\":\"Blue\",\"color-scheme\":\"light\",\"description\":\"A blue theme\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #fff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background:\\nbutton-foreground:\\nbutton-border:\\ncode-background: #f7f7f9\\ncode-border: #e1e1e8\\ncode-foreground: #dd1144\\ndirty-indicator: #ff0000\\ndownload-background: #34c734\\ndownload-foreground: \u003C\u003Ccolour foreground>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #fff\\ndropdown-tab-background: #ececec\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #0000aa\\nexternal-link-foreground: #0000ee\\nforeground: #333353\\nmessage-background: #ecf2ff\\nmessage-border: #cfd6e6\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #999999\\nmodal-footer-background: #f5f5f5\\nmodal-footer-border: #dddddd\\nmodal-header-border: #eeeeee\\nmuted-foreground: #999999\\nnotification-background: #ffffdd\\nnotification-border: #999999\\npage-background: #ddddff\\npre-background: #f5f5f5\\npre-border: #cccccc\\nprimary: #5778d8\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #000000\\nsidebar-controls-foreground: #ffffff\\nsidebar-foreground-shadow: rgba(255,255,255, 0.8)\\nsidebar-foreground: #acacac\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: #c0c0c0\\nsidebar-tab-background-selected: \u003C\u003Ccolour page-background>>\\nsidebar-tab-background: \u003C\u003Ccolour tab-background>>\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: \u003C\u003Ccolour tab-divider>>\\nsidebar-tab-foreground-selected: \\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #444444\\nsidebar-tiddler-link-foreground: #5959c0\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: \u003C\u003Ccolour background>>\\ntab-background: #ccccdd\\ntab-border-selected: #ccccdd\\ntab-border: #cccccc\\ntab-divider: #d8d8d8\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #666666\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #eeeeff\\ntag-foreground: #000\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #666666\\ntiddler-controls-foreground-selected: #444444\\ntiddler-controls-foreground: #cccccc\\ntiddler-editor-background: #f8f8f8\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-background: #ffffff\\ntiddler-info-border: #dddddd\\ntiddler-info-tab-background: #ffffff\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #c0c0c0\\ntiddler-title-foreground: #5959c0\\ntoolbar-new-button: #5eb95e\\ntoolbar-options-button: rgb(128, 88, 165)\\ntoolbar-save-button: #0e90d2\\ntoolbar-info-button: #0e90d2\\ntoolbar-edit-button: rgb(243, 123, 29)\\ntoolbar-close-button: #dd514c\\ntoolbar-delete-button: #dd514c\\ntoolbar-cancel-button: rgb(243, 123, 29)\\ntoolbar-done-button: #5eb95e\\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/Muted\":{\"title\":\"$:/palettes/Muted\",\"name\":\"Muted\",\"color-scheme\":\"light\",\"description\":\"Bright tiddlers on a muted background\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #ffffff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background:\\nbutton-foreground:\\nbutton-border:\\ncode-background: #f7f7f9\\ncode-border: #e1e1e8\\ncode-foreground: #dd1144\\ndirty-indicator: #ff0000\\ndownload-background: #34c734\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #fff\\ndropdown-tab-background: #ececec\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #0000aa\\nexternal-link-foreground: #0000ee\\nforeground: #333333\\nmessage-background: #ecf2ff\\nmessage-border: #cfd6e6\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #999999\\nmodal-footer-background: #f5f5f5\\nmodal-footer-border: #dddddd\\nmodal-header-border: #eeeeee\\nmuted-foreground: #bbb\\nnotification-background: #ffffdd\\nnotification-border: #999999\\npage-background: #6f6f70\\npre-background: #f5f5f5\\npre-border: #cccccc\\nprimary: #29a6ee\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #000000\\nsidebar-controls-foreground: #c2c1c2\\nsidebar-foreground-shadow: rgba(255,255,255,0)\\nsidebar-foreground: #d3d2d4\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: #c0c0c0\\nsidebar-tab-background-selected: #6f6f70\\nsidebar-tab-background: #666667\\nsidebar-tab-border-selected: #999\\nsidebar-tab-border: #515151\\nsidebar-tab-divider: #999\\nsidebar-tab-foreground-selected: \\nsidebar-tab-foreground: #999\\nsidebar-tiddler-link-foreground-hover: #444444\\nsidebar-tiddler-link-foreground: #d1d0d2\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: #ffffff\\ntab-background: #d8d8d8\\ntab-border-selected: #d8d8d8\\ntab-border: #cccccc\\ntab-divider: #d8d8d8\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #666666\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #d5ad34\\ntag-foreground: #ffffff\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #888888\\ntiddler-controls-foreground-selected: #444444\\ntiddler-controls-foreground: #cccccc\\ntiddler-editor-background: #f8f8f8\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-background: #f8f8f8\\ntiddler-info-border: #dddddd\\ntiddler-info-tab-background: #f8f8f8\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #c0c0c0\\ntiddler-title-foreground: #182955\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/ContrastLight\":{\"title\":\"$:/palettes/ContrastLight\",\"name\":\"Contrast (Light)\",\"color-scheme\":\"light\",\"description\":\"High contrast and unambiguous (light version)\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #f00\\nalert-border: \u003C\u003Ccolour background>>\\nalert-highlight: \u003C\u003Ccolour foreground>>\\nalert-muted-foreground: #800\\nbackground: #fff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background: \u003C\u003Ccolour background>>\\nbutton-foreground: \u003C\u003Ccolour foreground>>\\nbutton-border: \u003C\u003Ccolour foreground>>\\ncode-background: \u003C\u003Ccolour background>>\\ncode-border: \u003C\u003Ccolour foreground>>\\ncode-foreground: \u003C\u003Ccolour foreground>>\\ndirty-indicator: #f00\\ndownload-background: #080\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: \u003C\u003Ccolour foreground>>\\ndropdown-tab-background: \u003C\u003Ccolour foreground>>\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #00a\\nexternal-link-foreground: #00e\\nforeground: #000\\nmessage-background: \u003C\u003Ccolour foreground>>\\nmessage-border: \u003C\u003Ccolour background>>\\nmessage-foreground: \u003C\u003Ccolour background>>\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: \u003C\u003Ccolour foreground>>\\nmodal-footer-background: \u003C\u003Ccolour background>>\\nmodal-footer-border: \u003C\u003Ccolour foreground>>\\nmodal-header-border: \u003C\u003Ccolour foreground>>\\nmuted-foreground: \u003C\u003Ccolour foreground>>\\nnotification-background: \u003C\u003Ccolour background>>\\nnotification-border: \u003C\u003Ccolour foreground>>\\npage-background: \u003C\u003Ccolour background>>\\npre-background: \u003C\u003Ccolour background>>\\npre-border: \u003C\u003Ccolour foreground>>\\nprimary: #00f\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: \u003C\u003Ccolour background>>\\nsidebar-controls-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-foreground-shadow: rgba(0,0,0, 0)\\nsidebar-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-tab-background-selected: \u003C\u003Ccolour background>>\\nsidebar-tab-background: \u003C\u003Ccolour tab-background>>\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: \u003C\u003Ccolour tab-divider>>\\nsidebar-tab-foreground-selected: \u003C\u003Ccolour foreground>>\\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: \u003C\u003Ccolour foreground>>\\nsidebar-tiddler-link-foreground: \u003C\u003Ccolour primary>>\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: \u003C\u003Ccolour background>>\\ntab-background: \u003C\u003Ccolour foreground>>\\ntab-border-selected: \u003C\u003Ccolour foreground>>\\ntab-border: \u003C\u003Ccolour foreground>>\\ntab-divider: \u003C\u003Ccolour foreground>>\\ntab-foreground-selected: \u003C\u003Ccolour foreground>>\\ntab-foreground: \u003C\u003Ccolour background>>\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #000\\ntag-foreground: #fff\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour foreground>>\\ntiddler-controls-foreground-hover: #ddd\\ntiddler-controls-foreground-selected: #fdd\\ntiddler-controls-foreground: \u003C\u003Ccolour foreground>>\\ntiddler-editor-background: \u003C\u003Ccolour background>>\\ntiddler-editor-border-image: \u003C\u003Ccolour foreground>>\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: \u003C\u003Ccolour background>>\\ntiddler-editor-fields-odd: \u003C\u003Ccolour background>>\\ntiddler-info-background: \u003C\u003Ccolour background>>\\ntiddler-info-border: \u003C\u003Ccolour foreground>>\\ntiddler-info-tab-background: \u003C\u003Ccolour background>>\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: \u003C\u003Ccolour foreground>>\\ntiddler-title-foreground: \u003C\u003Ccolour foreground>>\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: \u003C\u003Ccolour foreground>>\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/ContrastDark\":{\"title\":\"$:/palettes/ContrastDark\",\"name\":\"Contrast (Dark)\",\"color-scheme\":\"dark\",\"description\":\"High contrast and unambiguous (dark version)\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #f00\\nalert-border: \u003C\u003Ccolour background>>\\nalert-highlight: \u003C\u003Ccolour foreground>>\\nalert-muted-foreground: #800\\nbackground: #000\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background: \u003C\u003Ccolour background>>\\nbutton-foreground: \u003C\u003Ccolour foreground>>\\nbutton-border: \u003C\u003Ccolour foreground>>\\ncode-background: \u003C\u003Ccolour background>>\\ncode-border: \u003C\u003Ccolour foreground>>\\ncode-foreground: \u003C\u003Ccolour foreground>>\\ndirty-indicator: #f00\\ndownload-background: #080\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: \u003C\u003Ccolour foreground>>\\ndropdown-tab-background: \u003C\u003Ccolour foreground>>\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #00a\\nexternal-link-foreground: #00e\\nforeground: #fff\\nmessage-background: \u003C\u003Ccolour foreground>>\\nmessage-border: \u003C\u003Ccolour background>>\\nmessage-foreground: \u003C\u003Ccolour background>>\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: \u003C\u003Ccolour foreground>>\\nmodal-footer-background: \u003C\u003Ccolour background>>\\nmodal-footer-border: \u003C\u003Ccolour foreground>>\\nmodal-header-border: \u003C\u003Ccolour foreground>>\\nmuted-foreground: \u003C\u003Ccolour foreground>>\\nnotification-background: \u003C\u003Ccolour background>>\\nnotification-border: \u003C\u003Ccolour foreground>>\\npage-background: \u003C\u003Ccolour background>>\\npre-background: \u003C\u003Ccolour background>>\\npre-border: \u003C\u003Ccolour foreground>>\\nprimary: #00f\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: \u003C\u003Ccolour background>>\\nsidebar-controls-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-foreground-shadow: rgba(0,0,0, 0)\\nsidebar-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-tab-background-selected: \u003C\u003Ccolour background>>\\nsidebar-tab-background: \u003C\u003Ccolour tab-background>>\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: \u003C\u003Ccolour tab-divider>>\\nsidebar-tab-foreground-selected: \u003C\u003Ccolour foreground>>\\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: \u003C\u003Ccolour foreground>>\\nsidebar-tiddler-link-foreground: \u003C\u003Ccolour primary>>\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: \u003C\u003Ccolour background>>\\ntab-background: \u003C\u003Ccolour foreground>>\\ntab-border-selected: \u003C\u003Ccolour foreground>>\\ntab-border: \u003C\u003Ccolour foreground>>\\ntab-divider: \u003C\u003Ccolour foreground>>\\ntab-foreground-selected: \u003C\u003Ccolour foreground>>\\ntab-foreground: \u003C\u003Ccolour background>>\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #fff\\ntag-foreground: #000\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour foreground>>\\ntiddler-controls-foreground-hover: #ddd\\ntiddler-controls-foreground-selected: #fdd\\ntiddler-controls-foreground: \u003C\u003Ccolour foreground>>\\ntiddler-editor-background: \u003C\u003Ccolour background>>\\ntiddler-editor-border-image: \u003C\u003Ccolour foreground>>\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: \u003C\u003Ccolour background>>\\ntiddler-editor-fields-odd: \u003C\u003Ccolour background>>\\ntiddler-info-background: \u003C\u003Ccolour background>>\\ntiddler-info-border: \u003C\u003Ccolour foreground>>\\ntiddler-info-tab-background: \u003C\u003Ccolour background>>\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: \u003C\u003Ccolour foreground>>\\ntiddler-title-foreground: \u003C\u003Ccolour foreground>>\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: \u003C\u003Ccolour foreground>>\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/CupertinoDark\":{\"title\":\"$:/palettes/CupertinoDark\",\"tags\":\"$:/tags/Palette\",\"color-scheme\":\"dark\",\"name\":\"Cupertino Dark\",\"description\":\"A macOS inspired dark palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #FF453A\\nalert-border: #FF453A\\nalert-highlight: #FFD60A\\nalert-muted-foreground: \u003C\u003Ccolour muted-foreground>>\\nbackground: #282828\\nblockquote-bar: \u003C\u003Ccolour page-background>>\\nbutton-foreground: \u003C\u003Ccolour background>>\\ncode-background: \u003C\u003Ccolour pre-background>>\\ncode-border: \u003C\u003Ccolour pre-border>>\\ncode-foreground: rgba(255, 255, 255, 0.54)\\ndirty-indicator: #FF453A\\ndownload-background: \u003C\u003Ccolour primary>>\\ndownload-foreground: \u003C\u003Ccolour foreground>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour tiddler-info-background>>\\ndropdown-border: \u003C\u003Ccolour dropdown-background>>\\ndropdown-tab-background-selected: #3F638B\\ndropdown-tab-background: #323232\\ndropzone-background: #30D158\\nexternal-link-background-hover: transparent\\nexternal-link-background-visited: transparent\\nexternal-link-background: transparent\\nexternal-link-foreground-hover: \\nexternal-link-foreground-visited: #BF5AF2\\nexternal-link-foreground: #32D74B\\nforeground: #FFFFFF\\nmenubar-background: #464646\\nmenubar-foreground: #ffffff\\nmessage-background: \u003C\u003Ccolour background>>\\nmessage-border: \u003C\u003Ccolour very-muted-foreground>>\\nmessage-foreground: rgba(255, 255, 255, 0.54)\\nmodal-backdrop: \u003C\u003Ccolour page-background>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: \u003C\u003Ccolour very-muted-foreground>>\\nmodal-footer-background: \u003C\u003Ccolour background>>\\nmodal-footer-border: \u003C\u003Ccolour background>>\\nmodal-header-border: \u003C\u003Ccolour very-muted-foreground>>\\nmuted-foreground: #98989D\\nnotification-background: \u003C\u003Ccolour dropdown-background>>\\nnotification-border: \u003C\u003Ccolour dropdown-background>>\\npage-background: #323232\\npre-background: #464646\\npre-border: transparent\\nprimary: #0A84FF\\nselect-tag-background: \u003C\u003Ccolour background>>\\nselect-tag-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-button-foreground: \u003C\u003Ccolour background>>\\nsidebar-controls-foreground-hover: #FF9F0A\\nsidebar-controls-foreground: #8E8E93\\nsidebar-foreground-shadow: transparent\\nsidebar-foreground: rgba(255, 255, 255, 0.54)\\nsidebar-muted-foreground-hover: rgba(255, 255, 255, 0.54)\\nsidebar-muted-foreground: rgba(255, 255, 255, 0.38)\\nsidebar-tab-background-selected: #3F638B\\nsidebar-tab-background: \u003C\u003Ccolour background>>\\nsidebar-tab-border-selected: \u003C\u003Ccolour background>>\\nsidebar-tab-border: \u003C\u003Ccolour background>>\\nsidebar-tab-divider: \u003C\u003Ccolour background>>\\nsidebar-tab-foreground-selected: rgba(255, 255, 255, 0.87)\\nsidebar-tab-foreground: rgba(255, 255, 255, 0.54)\\nsidebar-tiddler-link-foreground-hover: rgba(255, 255, 255, 0.7)\\nsidebar-tiddler-link-foreground: rgba(255, 255, 255, 0.54)\\nsite-title-foreground: #ffffff\\nstatic-alert-foreground: #B4B4B4\\ntab-background-selected: #3F638B\\ntab-background: \u003C\u003Ccolour page-background>>\\ntab-border-selected: \u003C\u003Ccolour page-background>>\\ntab-border: \u003C\u003Ccolour page-background>>\\ntab-divider: \u003C\u003Ccolour page-background>>\\ntab-foreground-selected: rgba(255, 255, 255, 0.87)\\ntab-foreground: rgba(255, 255, 255, 0.54)\\ntable-border: #464646\\ntable-footer-background: \u003C\u003Ccolour tiddler-editor-fields-odd>>\\ntable-header-background: \u003C\u003Ccolour tiddler-editor-fields-even>>\\ntag-background: #48484A\\ntag-foreground: #323232\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: transparent\\ntiddler-controls-foreground-hover: \u003C\u003Ccolour sidebar-controls-foreground-hover>>\\ntiddler-controls-foreground-selected: \u003C\u003Ccolour sidebar-controls-foreground-hover>>\\ntiddler-controls-foreground: #48484A\\ntiddler-editor-background: transparent\\ntiddler-editor-border-image: \\ntiddler-editor-border: rgba(255, 255, 255, 0.08)\\ntiddler-editor-fields-even: rgba(255, 255, 255, 0.1)\\ntiddler-editor-fields-odd: rgba(255, 255, 255, 0.04)\\ntiddler-info-background: #1E1E1E\\ntiddler-info-border: #1E1E1E\\ntiddler-info-tab-background: #3F638B\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: \u003C\u003Ccolour muted-foreground>>\\ntiddler-title-foreground: #FFFFFF\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: \u003C\u003Ccolour very-muted-foreground>>\\nvery-muted-foreground: #464646\\nselection-background: #3F638B\\nselection-foreground: #ffffff\\nwikilist-background: \u003C\u003Ccolour page-background>>\\nwikilist-button-background: #3F638B\\nwikilist-button-foreground: \u003C\u003Ccolour foreground>>\\nwikilist-button-open: #32D74B\\nwikilist-button-open-hover: #32D74B\\nwikilist-button-reveal: #0A84FF\\nwikilist-button-reveal-hover: #0A84FF\\nwikilist-button-remove: #FF453A\\nwikilist-button-remove-hover: #FF453A\\nwikilist-droplink-dragover: #32D74B\\nwikilist-item: \u003C\u003Ccolour background>>\\nwikilist-toolbar-background: \u003C\u003Ccolour background>>\\nwikilist-title: \u003C\u003Ccolour foreground>>\\nwikilist-title-svg: \u003C\u003Ccolour foreground>>\\nwikilist-toolbar-foreground: \u003C\u003Ccolour foreground>>\\nwikilist-url: \u003C\u003Ccolour muted-foreground>>\\n\"},\"$:/palettes/DarkPhotos\":{\"title\":\"$:/palettes/DarkPhotos\",\"created\":\"20150402111612188\",\"description\":\"Good with dark photo backgrounds\",\"modified\":\"20150402112344080\",\"name\":\"DarkPhotos\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"color-scheme\":\"light\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #ffffff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background: \\nbutton-foreground: \\nbutton-border: \\ncode-background: #f7f7f9\\ncode-border: #e1e1e8\\ncode-foreground: #dd1144\\ndirty-indicator: #ff0000\\ndownload-background: #34c734\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #fff\\ndropdown-tab-background: #ececec\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #0000aa\\nexternal-link-foreground: #0000ee\\nforeground: #333333\\nmessage-background: #ecf2ff\\nmessage-border: #cfd6e6\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #999999\\nmodal-footer-background: #f5f5f5\\nmodal-footer-border: #dddddd\\nmodal-header-border: #eeeeee\\nmuted-foreground: #ddd\\nnotification-background: #ffffdd\\nnotification-border: #999999\\npage-background: #336438\\npre-background: #f5f5f5\\npre-border: #cccccc\\nprimary: #5778d8\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #ccf\\nsidebar-controls-foreground: #fff\\nsidebar-foreground-shadow: rgba(0,0,0, 0.5)\\nsidebar-foreground: #fff\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: #eee\\nsidebar-tab-background-selected: rgba(255,255,255, 0.8)\\nsidebar-tab-background: rgba(255,255,255, 0.4)\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: rgba(255,255,255, 0.2)\\nsidebar-tab-foreground-selected: \\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #aaf\\nsidebar-tiddler-link-foreground: #ddf\\nsite-title-foreground: #fff\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: #ffffff\\ntab-background: #d8d8d8\\ntab-border-selected: #d8d8d8\\ntab-border: #cccccc\\ntab-divider: #d8d8d8\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #666666\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #ec6\\ntag-foreground: #ffffff\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #888888\\ntiddler-controls-foreground-selected: #444444\\ntiddler-controls-foreground: #cccccc\\ntiddler-editor-background: #f8f8f8\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-background: #f8f8f8\\ntiddler-info-border: #dddddd\\ntiddler-info-tab-background: #f8f8f8\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #c0c0c0\\ntiddler-title-foreground: #182955\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/DesertSand\":{\"title\":\"$:/palettes/DesertSand\",\"tags\":\"$:/tags/Palette\",\"color-scheme\":\"light\",\"name\":\"Desert Sand\",\"description\":\"A desert sand palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #E9E0C7\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-foreground: \u003C\u003Ccolour foreground>>\\ncode-background: #F3EDDF\\ncode-border: #C3BAA1\\ncode-foreground: #ab3250\\ndiff-delete-background: #bd8b8b\\ndiff-delete-foreground: \u003C\u003Ccolour foreground>>\\ndiff-equal-background: \\ndiff-equal-foreground: \u003C\u003Ccolour foreground>>\\ndiff-insert-background: #91c093\\ndiff-insert-foreground: \u003C\u003Ccolour foreground>>\\ndiff-invisible-background: \\ndiff-invisible-foreground: \u003C\u003Ccolour muted-foreground>>\\ndirty-indicator: #ad3434\\ndownload-background: #6ca16c\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #E9E0C7\\ndropdown-tab-background: #BAB29C\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #313163\\nexternal-link-foreground: #555592\\nforeground: #2D2A23\\nmenubar-background: #CDC2A6\\nmenubar-foreground: #5A5446\\nmessage-background: #ECE5CF\\nmessage-border: #D6CBAA\\nmessage-foreground: #5f6e7d\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #8A8885\\nmodal-footer-background: #CDC2A6\\nmodal-footer-border: #9D998E\\nmodal-header-border: #9D998E\\nmuted-foreground: #9D998E\\nnotification-background: #F0E9D7\\nnotification-border: #939189\\npage-background: #e0d3af\\npre-background: #D6CBAA\\npre-border: #CDC2A6\\nprimary: #5B6F55\\nselection-background: #9D947B\\nselection-foreground: \u003C\u003Ccolour foreground>>\\nselect-tag-background: #F0E9D7\\nselect-tag-foreground: #2D2A23\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #2D2A23\\nsidebar-controls-foreground: #867F69\\nsidebar-foreground-shadow: transparent\\nsidebar-foreground: #867F69\\nsidebar-muted-foreground-hover: #706A58\\nsidebar-muted-foreground: #B3A98C\\nsidebar-tab-background-selected: #e0d3af\\nsidebar-tab-background: #A6A193\\nsidebar-tab-border-selected: #C3BAA1\\nsidebar-tab-border: #C3BAA1\\nsidebar-tab-divider: #CDC2A6\\nsidebar-tab-foreground-selected: \\nsidebar-tab-foreground: #2D2A23\\nsidebar-tiddler-link-foreground-hover: #433F35\\nsidebar-tiddler-link-foreground: #706A58\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #A6A193\\ntab-background-selected: #E9E0C7\\ntab-background: #A6A193\\ntab-border-selected: #C3BAA1\\ntab-border: #C3BAA1\\ntab-divider: #CDC2A6\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #2D2A23\\ntable-border: #9D998E\\ntable-footer-background: #8A8885\\ntable-header-background: #B0AA98\\ntag-background: #706A58\\ntag-foreground: #E3D7B7\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #9D947B\\ntiddler-controls-foreground-selected: #706A58\\ntiddler-controls-foreground: #C3BAA1\\ntiddler-editor-background: #E9E0C7\\ntiddler-editor-border-image: #A6A193\\ntiddler-editor-border: #A6A193\\ntiddler-editor-fields-even: #D6CBAA\\ntiddler-editor-fields-odd: #C3BAA1\\ntiddler-info-background: #E3D7B7\\ntiddler-info-border: #BAB29C\\ntiddler-info-tab-background: #E9E0C7\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #867F69\\ntiddler-title-foreground: #374464\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: #8A8885\\nvery-muted-foreground: #CDC2A6\\nwikilist-background: \u003C\u003Ccolour page-background>>\\nwikilist-item: #CDC2A6\\nwikilist-info: #161512\\nwikilist-title: #433F35\\nwikilist-title-svg: \u003C\u003Ccolour wikilist-title>>\\nwikilist-url: #706A58\\nwikilist-button-open: #7db66a\\nwikilist-button-open-hover: #56a556\\nwikilist-button-reveal: #5a6c9e\\nwikilist-button-reveal-hover: #454591\\nwikilist-button-remove: #bc5972\\nwikilist-button-remove-hover: #814040\\nwikilist-toolbar-background: #CDC2A6\\nwikilist-toolbar-foreground: #2D2A23\\nwikilist-droplink-dragover: rgba(255,192,192,0.5)\\nwikilist-button-background: #A6A193\\nwikilist-button-foreground: #161512\\n\"},\"$:/palettes/GruvboxDark\":{\"title\":\"$:/palettes/GruvboxDark\",\"name\":\"Gruvbox Dark\",\"color-scheme\":\"dark\",\"description\":\"Retro groove color scheme\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"license\":\"https://github.com/morhetz/gruvbox\",\"text\":\"alert-background: #cc241d\\nalert-border: #cc241d\\nalert-highlight: #d79921\\nalert-muted-foreground: #504945\\nbackground: #3c3836\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-foreground: \u003C\u003Ccolour page-background>>\\ncode-background: #504945\\ncode-border: #504945\\ncode-foreground: #fb4934\\ndiff-delete-background: #fb4934\\ndiff-delete-foreground: \u003C\u003Ccolour foreground>>\\ndiff-equal-background: \\ndiff-equal-foreground: \u003C\u003Ccolour foreground>>\\ndiff-insert-background: #b8bb26\\ndiff-insert-foreground: \u003C\u003Ccolour foreground>>\\ndiff-invisible-background: \\ndiff-invisible-foreground: \u003C\u003Ccolour muted-foreground>>\\ndirty-indicator: #fb4934\\ndownload-background: #b8bb26\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: #665c54\\ndropdown-border: \u003C\u003Ccolour background>>\\ndropdown-tab-background-selected: #ebdbb2\\ndropdown-tab-background: #665c54\\ndropzone-background: #98971a\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #d3869b\\nexternal-link-foreground: #8ec07c\\nforeground: #fbf1c7\\nmenubar-background: #504945\\nmenubar-foreground: \u003C\u003Ccolour foreground>>\\nmessage-background: #83a598\\nmessage-border: #83a598\\nmessage-foreground: #3c3836\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #504945\\nmodal-footer-background: #3c3836\\nmodal-footer-border: #3c3836\\nmodal-header-border: #3c3836\\nmuted-foreground: #d5c4a1\\nnotification-background: \u003C\u003Ccolour primary>>\\nnotification-border: \u003C\u003Ccolour primary>>\\npage-background: #282828\\npre-background: #504945\\npre-border: #504945\\nprimary: #d79921\\nselect-tag-background: #665c54\\nselect-tag-foreground: \u003C\u003Ccolour foreground>>\\nselection-background: #458588\\nselection-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-button-foreground: \u003C\u003Ccolour page-background>>\\nsidebar-controls-foreground-hover: #7c6f64\\nsidebar-controls-foreground: #504945\\nsidebar-foreground-shadow: transparent\\nsidebar-foreground: #fbf1c7\\nsidebar-muted-foreground-hover: #7c6f64\\nsidebar-muted-foreground: #504945\\nsidebar-tab-background-selected: #bdae93\\nsidebar-tab-background: #3c3836\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: #bdae93\\nsidebar-tab-divider: \u003C\u003Ccolour page-background>>\\nsidebar-tab-foreground-selected: #282828\\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #458588\\nsidebar-tiddler-link-foreground: #98971a\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #B48EAD\\ntab-background-selected: #ebdbb2\\ntab-background: #665c54\\ntab-border-selected: #665c54\\ntab-border: #665c54\\ntab-divider: #bdae93\\ntab-foreground-selected: #282828\\ntab-foreground: #ebdbb2\\ntable-border: #7c6f64\\ntable-footer-background: #665c54\\ntable-header-background: #504945\\ntag-background: #d3869b\\ntag-foreground: #282828\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #7c6f64\\ntiddler-controls-foreground-selected: \u003C\u003Ccolour primary>>\\ntiddler-controls-foreground: #665c54\\ntiddler-editor-background: #32302f\\ntiddler-editor-border-image: #282828\\ntiddler-editor-border: #282828\\ntiddler-editor-fields-even: #504945\\ntiddler-editor-fields-odd: #7c6f64\\ntiddler-info-background: #32302f\\ntiddler-info-border: #ebdbb2\\ntiddler-info-tab-background: #ebdbb2\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #7c6f64\\ntiddler-title-foreground: #a89984\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: #504945\\nvery-muted-foreground: #bdae93\\nwikilist-background: \u003C\u003Ccolour page-background>>\\nwikilist-button-background: #acacac\\nwikilist-button-foreground: \u003C\u003Ccolour button-foreground>>\\nwikilist-item: \u003C\u003Ccolour background>>\\nwikilist-toolbar-background: \u003C\u003Ccolour background>>\\nwikilist-toolbar-foreground: \u003C\u003Ccolour foreground>>\\nwikilist-title: \u003C\u003Ccolour foreground>>\\nwikilist-title-svg: \u003C\u003Ccolour wikilist-title>>\\nwikilist-url: \u003C\u003Ccolour muted-foreground>>\\nwikilist-button-open-hover: \u003C\u003Ccolour primary>>\\nwikilist-button-open: \u003C\u003Ccolour dropzone-background>>\\nwikilist-button-remove: \u003C\u003Ccolour dirty-indicator>>\\nwikilist-button-remove-hover: \u003C\u003Ccolour alert-background>>\\nwikilist-droplink-dragover: \u003C\u003Ccolour dropzone-background>>\\nwikilist-button-reveal: \u003C\u003Ccolour sidebar-tiddler-link-foreground-hover>>\\nwikilist-button-reveal-hover: \u003C\u003Ccolour message-background>>\\n\"},\"$:/palettes/Nord\":{\"title\":\"$:/palettes/Nord\",\"name\":\"Nord\",\"color-scheme\":\"dark\",\"description\":\"An arctic, north-bluish color palette.\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"license\":\"MIT, arcticicestudio, https://github.com/arcticicestudio/nord/blob/develop/LICENSE.md\",\"text\":\"alert-background: #D08770\\nalert-border: #D08770\\nalert-highlight: #B48EAD\\nalert-muted-foreground: #4C566A\\nbackground: #3b4252\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-foreground: \u003C\u003Ccolour page-background>>\\ncode-background: #2E3440\\ncode-border: #2E3440\\ncode-foreground: #BF616A\\ndiff-delete-background: #BF616A\\ndiff-delete-foreground: \u003C\u003Ccolour foreground>>\\ndiff-equal-background: \\ndiff-equal-foreground: \u003C\u003Ccolour foreground>>\\ndiff-insert-background: #A3BE8C\\ndiff-insert-foreground: \u003C\u003Ccolour foreground>>\\ndiff-invisible-background: \\ndiff-invisible-foreground: \u003C\u003Ccolour muted-foreground>>\\ndirty-indicator: #BF616A\\ndownload-background: #A3BE8C\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour background>>\\ndropdown-tab-background-selected: #ECEFF4\\ndropdown-tab-background: #4C566A\\ndropzone-background: #A3BE8C\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #5E81AC\\nexternal-link-foreground: #8FBCBB\\nforeground: #d8dee9\\nmenubar-background: #2E3440\\nmenubar-foreground: #d8dee9\\nmessage-background: #2E3440\\nmessage-border: #2E3440\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #3b4252\\nmodal-footer-background: #3b4252\\nmodal-footer-border: #3b4252\\nmodal-header-border: #3b4252\\nmuted-foreground: #4C566A\\nnotification-background: \u003C\u003Ccolour primary>>\\nnotification-border: #EBCB8B\\npage-background: #2e3440\\npre-background: #2E3440\\npre-border: #2E3440\\nprimary: #5E81AC\\nselect-tag-background: #3b4252\\nselect-tag-foreground: \u003C\u003Ccolour foreground>>\\nselection-background: #5E81AC\\nselection-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-button-foreground: \u003C\u003Ccolour page-background>>\\nsidebar-controls-foreground-hover: #D8DEE9\\nsidebar-controls-foreground: #4C566A\\nsidebar-foreground-shadow: transparent\\nsidebar-foreground: #D8DEE9\\nsidebar-muted-foreground-hover: #4C566A\\nsidebar-muted-foreground: #4C566A\\nsidebar-tab-background-selected: #ECEFF4\\nsidebar-tab-background: #4C566A\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: #4C566A\\nsidebar-tab-divider: \u003C\u003Ccolour page-background>>\\nsidebar-tab-foreground-selected: #4C566A\\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #A3BE8C\\nsidebar-tiddler-link-foreground: #81A1C1\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #B48EAD\\ntab-background-selected: #ECEFF4\\ntab-background: #4C566A\\ntab-border-selected: #4C566A\\ntab-border: #4C566A\\ntab-divider: #4C566A\\ntab-foreground-selected: #4C566A\\ntab-foreground: #D8DEE9\\ntable-border: #4C566A\\ntable-footer-background: #2e3440\\ntable-header-background: #2e3440\\ntag-background: #A3BE8C\\ntag-foreground: #4C566A\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: \\ntiddler-controls-foreground-selected: #EBCB8B\\ntiddler-controls-foreground: #4C566A\\ntiddler-editor-background: #2e3440\\ntiddler-editor-border-image: #2e3440\\ntiddler-editor-border: #3b4252\\ntiddler-editor-fields-even: #2e3440\\ntiddler-editor-fields-odd: #2e3440\\ntiddler-info-background: #2e3440\\ntiddler-info-border: #2e3440\\ntiddler-info-tab-background: #2e3440\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #4C566A\\ntiddler-title-foreground: #81A1C1\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: #2d3038\\nvery-muted-foreground: #2d3038\\nwikilist-background: \u003C\u003Ccolour page-background>>\\nwikilist-toolbar-background: \u003C\u003Ccolour background>>\\nwikilist-item: \u003C\u003Ccolour background>>\\nwikilist-title: \u003C\u003Ccolour foreground>>\\nwikilist-info: \u003C\u003Ccolour muted-foreground>>\\nwikilist-button-open: #A3BE8C\\nwikilist-button-open-hover: #A3BE8C\\nwikilist-button-reveal: #81A1C1\\nwikilist-button-reveal-hover: #81A1C1\\nwikilist-button-remove: #B48EAD\\nwikilist-button-remove-hover: #B48EAD\\n\"},\"$:/palettes/Rocker\":{\"title\":\"$:/palettes/Rocker\",\"name\":\"Rocker\",\"color-scheme\":\"dark\",\"description\":\"A dark theme\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #ffffff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background:\\nbutton-foreground:\\nbutton-border:\\ncode-background: #f7f7f9\\ncode-border: #e1e1e8\\ncode-foreground: #dd1144\\ndirty-indicator: #ff0000\\ndownload-background: #34c734\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #fff\\ndropdown-tab-background: #ececec\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #0000aa\\nexternal-link-foreground: #0000ee\\nforeground: #333333\\nmessage-background: #ecf2ff\\nmessage-border: #cfd6e6\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #999999\\nmodal-footer-background: #f5f5f5\\nmodal-footer-border: #dddddd\\nmodal-header-border: #eeeeee\\nmuted-foreground: #999999\\nnotification-background: #ffffdd\\nnotification-border: #999999\\npage-background: #000\\npre-background: #f5f5f5\\npre-border: #cccccc\\nprimary: #cc0000\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #000000\\nsidebar-controls-foreground: #ffffff\\nsidebar-foreground-shadow: rgba(255,255,255, 0.0)\\nsidebar-foreground: #acacac\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: #c0c0c0\\nsidebar-tab-background-selected: #000\\nsidebar-tab-background: \u003C\u003Ccolour tab-background>>\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: \u003C\u003Ccolour tab-divider>>\\nsidebar-tab-foreground-selected: \\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #ffbb99\\nsidebar-tiddler-link-foreground: #cc0000\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: #ffffff\\ntab-background: #d8d8d8\\ntab-border-selected: #d8d8d8\\ntab-border: #cccccc\\ntab-divider: #d8d8d8\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #666666\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #ffbb99\\ntag-foreground: #000\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #888888\\ntiddler-controls-foreground-selected: #444444\\ntiddler-controls-foreground: #cccccc\\ntiddler-editor-background: #f8f8f8\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-background: #f8f8f8\\ntiddler-info-border: #dddddd\\ntiddler-info-tab-background: #f8f8f8\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #c0c0c0\\ntiddler-title-foreground: #cc0000\\ntoolbar-new-button:\\ntoolbar-options-button:\\ntoolbar-save-button:\\ntoolbar-info-button:\\ntoolbar-edit-button:\\ntoolbar-close-button:\\ntoolbar-delete-button:\\ntoolbar-cancel-button:\\ntoolbar-done-button:\\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/SolarFlare\":{\"title\":\"$:/palettes/SolarFlare\",\"name\":\"Solar Flare\",\"color-scheme\":\"light\",\"description\":\"Warm, relaxing earth colours\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"text\":\": Background Tones\\n\\nbase03: #002b36\\nbase02: #073642\\n\\n: Content Tones\\n\\nbase01: #586e75\\nbase00: #657b83\\nbase0: #839496\\nbase1: #93a1a1\\n\\n: Background Tones\\n\\nbase2: #eee8d5\\nbase3: #fdf6e3\\n\\n: Accent Colors\\n\\nyellow: #b58900\\norange: #cb4b16\\nred: #dc322f\\nmagenta: #d33682\\nviolet: #6c71c4\\nblue: #268bd2\\ncyan: #2aa198\\ngreen: #859900\\n\\n: Additional Tones (RA)\\n\\nbase10: #c0c4bb\\nviolet-muted: #7c81b0\\nblue-muted: #4e7baa\\n\\nyellow-hot: #ffcc44\\norange-hot: #eb6d20\\nred-hot: #ff2222\\nblue-hot: #2298ee\\ngreen-hot: #98ee22\\n\\n: Palette\\n\\n: Do not use colour macro for background and foreground\\nbackground: #fdf6e3\\n    download-foreground: \u003C\u003Ccolour background>>\\n    dragger-foreground: \u003C\u003Ccolour background>>\\n    dropdown-background: \u003C\u003Ccolour background>>\\n    modal-background: \u003C\u003Ccolour background>>\\n    sidebar-foreground-shadow: \u003C\u003Ccolour background>>\\n    tiddler-background: \u003C\u003Ccolour background>>\\n    tiddler-border: \u003C\u003Ccolour background>>\\n    tiddler-link-background: \u003C\u003Ccolour background>>\\n    tab-background-selected: \u003C\u003Ccolour background>>\\n        dropdown-tab-background-selected: \u003C\u003Ccolour tab-background-selected>>\\nforeground: #657b83\\n    dragger-background: \u003C\u003Ccolour foreground>>\\n    tab-foreground: \u003C\u003Ccolour foreground>>\\n        tab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\n            sidebar-tab-foreground-selected: \u003C\u003Ccolour tab-foreground-selected>>\\n        sidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\n    sidebar-button-foreground: \u003C\u003Ccolour foreground>>\\n    sidebar-controls-foreground: \u003C\u003Ccolour foreground>>\\n    sidebar-foreground: \u003C\u003Ccolour foreground>>\\n: base03\\n: base02\\n: base01\\n    alert-muted-foreground: \u003C\u003Ccolour base01>>\\n: base00\\n    code-foreground: \u003C\u003Ccolour base00>>\\n    message-foreground: \u003C\u003Ccolour base00>>\\n    tag-foreground: \u003C\u003Ccolour base00>>\\n: base0\\n    sidebar-tiddler-link-foreground: \u003C\u003Ccolour base0>>\\n: base1\\n    muted-foreground: \u003C\u003Ccolour base1>>\\n        blockquote-bar: \u003C\u003Ccolour muted-foreground>>\\n        dropdown-border: \u003C\u003Ccolour muted-foreground>>\\n        sidebar-muted-foreground: \u003C\u003Ccolour muted-foreground>>\\n        tiddler-title-foreground: \u003C\u003Ccolour muted-foreground>>\\n            site-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\n: base2\\n    modal-footer-background: \u003C\u003Ccolour base2>>\\n    page-background: \u003C\u003Ccolour base2>>\\n        modal-backdrop: \u003C\u003Ccolour page-background>>\\n        notification-background: \u003C\u003Ccolour page-background>>\\n        code-background: \u003C\u003Ccolour page-background>>\\n            code-border: \u003C\u003Ccolour code-background>>\\n        pre-background: \u003C\u003Ccolour page-background>>\\n            pre-border: \u003C\u003Ccolour pre-background>>\\n        sidebar-tab-background-selected: \u003C\u003Ccolour page-background>>\\n    table-header-background: \u003C\u003Ccolour base2>>\\n    tag-background: \u003C\u003Ccolour base2>>\\n    tiddler-editor-background: \u003C\u003Ccolour base2>>\\n    tiddler-info-background: \u003C\u003Ccolour base2>>\\n    tiddler-info-tab-background: \u003C\u003Ccolour base2>>\\n    tab-background: \u003C\u003Ccolour base2>>\\n        dropdown-tab-background: \u003C\u003Ccolour tab-background>>\\n: base3\\n    alert-background: \u003C\u003Ccolour base3>>\\n    message-background: \u003C\u003Ccolour base3>>\\n: yellow\\n: orange\\n: red\\n: magenta\\n    alert-highlight: \u003C\u003Ccolour magenta>>\\n: violet\\n    external-link-foreground: \u003C\u003Ccolour violet>>\\n: blue\\n: cyan\\n: green\\n: base10\\n    tiddler-controls-foreground: \u003C\u003Ccolour base10>>\\n: violet-muted\\n    external-link-foreground-visited: \u003C\u003Ccolour violet-muted>>\\n: blue-muted\\n    primary: \u003C\u003Ccolour blue-muted>>\\n        download-background: \u003C\u003Ccolour primary>>\\n        tiddler-link-foreground: \u003C\u003Ccolour primary>>\\n\\nalert-border: #b99e2f\\ndirty-indicator: #ff0000\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nmessage-border: #cfd6e6\\nmodal-border: #999999\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-controls-foreground-hover:\\nsidebar-muted-foreground-hover:\\nsidebar-tab-background: #ded8c5\\nsidebar-tiddler-link-foreground-hover:\\nstatic-alert-foreground: #aaaaaa\\ntab-border: #cccccc\\n    modal-footer-border: \u003C\u003Ccolour tab-border>>\\n    modal-header-border: \u003C\u003Ccolour tab-border>>\\n    notification-border: \u003C\u003Ccolour tab-border>>\\n    sidebar-tab-border: \u003C\u003Ccolour tab-border>>\\n    tab-border-selected: \u003C\u003Ccolour tab-border>>\\n        sidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\ntab-divider: #d8d8d8\\n    sidebar-tab-divider: \u003C\u003Ccolour tab-divider>>\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntiddler-controls-foreground-hover: #888888\\ntiddler-controls-foreground-selected: #444444\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-border: #dddddd\\ntiddler-subtitle-foreground: #c0c0c0\\ntoolbar-new-button:\\ntoolbar-options-button:\\ntoolbar-save-button:\\ntoolbar-info-button:\\ntoolbar-edit-button:\\ntoolbar-close-button:\\ntoolbar-delete-button:\\ntoolbar-cancel-button:\\ntoolbar-done-button:\\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\n\"},\"$:/palettes/SolarizedDark\":{\"title\":\"$:/palettes/SolarizedDark\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"description\":\"Precision dark colors for machines and people\",\"license\":\"MIT, Ethan Schoonover, https://github.com/altercation/solarized/blob/master/LICENSE\",\"name\":\"SolarizedDark\",\"color-scheme\":\"dark\",\"text\":\"alert-background: #073642\\nalert-border: #93a1a1\\nalert-highlight: #d33682\\nalert-muted-foreground: #d33682\\nbackground: #073642\\nblockquote-bar: #d33682\\nbutton-background: #073642\\nbutton-border: #586e75\\nbutton-foreground: #93a1a1\\ncode-background: #073642\\ncode-border: #586e75\\ncode-foreground: #93a1a1\\ndirty-indicator: inherit\\ndownload-background: #859900\\ndownload-foreground: #073642\\ndragger-background: #073642\\ndragger-foreground: #839496\\ndropdown-background: #073642\\ndropdown-border: #93a1a1\\ndropdown-tab-background: #002b36\\ndropdown-tab-background-selected: #073642\\ndropzone-background: #859900\\nexternal-link-background: inherit\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-foreground: #268bd2\\nexternal-link-foreground-hover:\\nexternal-link-foreground-visited: #268bd2\\nforeground: #839496\\nmessage-background: #002b36\\nmessage-border: #586e75\\nmessage-foreground: #839496\\nmodal-backdrop: #657b83\\nmodal-background: #002b36\\nmodal-border: #586e75\\nmodal-footer-background: #073642\\nmodal-footer-border: #586e75\\nmodal-header-border: #586e75\\nmuted-foreground: #93a1a1\\nnotification-background: #002b36\\nnotification-border: #586e75\\npage-background: #073642\\npre-background: inherit\\npre-border: #657b83\\nprimary: #859900\\nselect-tag-background: #002b36\\nselect-tag-foreground: #839496\\nsidebar-button-foreground: #93a1a1\\nsidebar-controls-foreground: #93a1a1\\nsidebar-controls-foreground-hover: #eee8d5\\nsidebar-foreground: #93a1a1\\nsidebar-foreground-shadow: transparent\\nsidebar-muted-foreground: #839496\\nsidebar-muted-foreground-hover: #93a1a1\\nsidebar-tab-background: #002b36\\nsidebar-tab-background-selected: #073642\\nsidebar-tab-border: #073642\\nsidebar-tab-border-selected: #839496\\nsidebar-tab-divider: #002b36\\nsidebar-tab-foreground: #657b83\\nsidebar-tab-foreground-selected: #93a1a1\\nsidebar-tiddler-link-foreground: #2aa198\\nsidebar-tiddler-link-foreground-hover: #eee8d5\\nsite-title-foreground: #d33682\\nstatic-alert-foreground: #93a1a1\\ntab-background: #073642\\ntab-background-selected: #002b36\\ntab-border: #586e75\\ntab-border-selected: #93a1a1\\ntab-divider: #93a1a1\\ntab-foreground: #839496\\ntab-foreground-selected: #93a1a1\\ntable-border: #586e75\\ntable-footer-background: #073642\\ntable-header-background: #073642\\ntag-background: #b58900\\ntag-foreground: #002b36\\ntiddler-background: #002b36\\ntiddler-border: #586e75\\ntiddler-controls-foreground: inherit\\ntiddler-controls-foreground-hover: #d33682\\ntiddler-controls-foreground-selected: #2aa198\\ntiddler-editor-background: #002b36\\ntiddler-editor-border: #073642\\ntiddler-editor-border-image: #002b36\\ntiddler-editor-fields-even: #002b36\\ntiddler-editor-fields-odd: #073642\\ntiddler-info-background: #073642\\ntiddler-info-border: #657b83\\ntiddler-info-tab-background: #002b36\\ntiddler-link-background: #002b36\\ntiddler-link-foreground: #2aa198\\ntiddler-subtitle-foreground: #839496\\ntiddler-title-foreground: #d33682\\ntoolbar-cancel-button: #839496\\ntoolbar-close-button: #839496\\ntoolbar-delete-button: #dc322f\\ntoolbar-done-button: #839496\\ntoolbar-edit-button: #839496\\ntoolbar-info-button: #839496\\ntoolbar-new-button: #839496\\ntoolbar-options-button: #839496\\ntoolbar-save-button: inherit\\nuntagged-background: #586e75\\nvery-muted-foreground: #586e75\\n\"},\"$:/palettes/SolarizedLight\":{\"title\":\"$:/palettes/SolarizedLight\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"description\":\"Precision colors for machines and people\",\"license\":\"MIT, Ethan Schoonover, https://github.com/altercation/solarized/blob/master/LICENSE\",\"name\":\"SolarizedLight\",\"color-scheme\":\"light\",\"text\":\"alert-background: #eee8d5\\nalert-border: #586e75\\nalert-highlight: #d33682\\nalert-muted-foreground: #d33682\\nbackground: #eee8d5\\nblockquote-bar: #d33682\\nbutton-background: #eee8d5\\nbutton-border: #93a1a1\\nbutton-foreground: #586e75\\ncode-background: #eee8d5\\ncode-border: #93a1a1\\ncode-foreground: #586e75\\ndirty-indicator: inherit\\ndownload-background: #859900\\ndownload-foreground: #eee8d5\\ndragger-background: #eee8d5\\ndragger-foreground: #657b83\\ndropdown-background: #eee8d5\\ndropdown-border: #586e75\\ndropdown-tab-background: #fdf6e3\\ndropdown-tab-background-selected: #eee8d5\\ndropzone-background: #859900\\nexternal-link-background: inherit\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-foreground: #268bd2\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #268bd2\\nforeground: #657b83\\nmessage-background: #fdf6e3\\nmessage-border: #93a1a1\\nmessage-foreground: #657b83\\nmodal-backdrop: #839496\\nmodal-background: #fdf6e3\\nmodal-border: #93a1a1\\nmodal-footer-background: #eee8d5\\nmodal-footer-border: #93a1a1\\nmodal-header-border: #93a1a1\\nmuted-foreground: #586e75\\nnotification-background: #fdf6e3\\nnotification-border: #93a1a1\\npage-background: #eee8d5\\npre-background: #eee8d5\\npre-border: #839496\\nprimary: #859900\\nselect-tag-background: #fdf6e3\\nselect-tag-foreground: #657b83\\nsidebar-button-foreground: #586e75\\nsidebar-controls-foreground: #586e75\\nsidebar-controls-foreground-hover: #d33682\\nsidebar-foreground: #586e75\\nsidebar-foreground-shadow: transparent\\nsidebar-muted-foreground: #657b83\\nsidebar-muted-foreground-hover: #586e75\\nsidebar-tab-background: #fdf6e3\\nsidebar-tab-background-selected: #eee8d5\\nsidebar-tab-border: #eee8d5\\nsidebar-tab-border-selected: #657b83\\nsidebar-tab-divider: #fdf6e3\\nsidebar-tab-foreground: #839496\\nsidebar-tab-foreground-selected: #586e75\\nsidebar-tiddler-link-foreground: #2aa198\\nsidebar-tiddler-link-foreground-hover: #002b36\\nsite-title-foreground: #d33682\\nstatic-alert-foreground: #586e75\\ntab-background: #eee8d5\\ntab-background-selected: #fdf6e3\\ntab-border: #93a1a1\\ntab-border-selected: #586e75\\ntab-divider: #586e75\\ntab-foreground: #657b83\\ntab-foreground-selected: #586e75\\ntable-border: #93a1a1\\ntable-footer-background: #eee8d5\\ntable-header-background: #eee8d5\\ntag-background: #b58900\\ntag-foreground: #fdf6e3\\ntiddler-background: #fdf6e3\\ntiddler-border: #93a1a1\\ntiddler-controls-foreground: inherit\\ntiddler-controls-foreground-hover: #d33682\\ntiddler-controls-foreground-selected: #2aa198\\ntiddler-editor-background: #fdf6e3\\ntiddler-editor-border: #eee8d5\\ntiddler-editor-border-image: #fdf6e3\\ntiddler-editor-fields-even: #fdf6e3\\ntiddler-editor-fields-odd: #eee8d5\\ntiddler-info-background: #eee8d5\\ntiddler-info-border: #839496\\ntiddler-info-tab-background: #fdf6e3\\ntiddler-link-background: #fdf6e3\\ntiddler-link-foreground: #2aa198\\ntiddler-subtitle-foreground: #657b83\\ntiddler-title-foreground: #d33682\\ntoolbar-cancel-button: #657b83\\ntoolbar-close-button: #657b83\\ntoolbar-delete-button: #dc322f\\ntoolbar-done-button: #657b83\\ntoolbar-edit-button: #657b83\\ntoolbar-info-button: #657b83\\ntoolbar-new-button: #657b83\\ntoolbar-options-button: #657b83\\ntoolbar-save-button: inherit\\nuntagged-background: #586e75\\nvery-muted-foreground: #93a1a1\\n\"},\"$:/palettes/SpartanDay\":{\"title\":\"$:/palettes/SpartanDay\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"description\":\"Cold, spartan day colors\",\"name\":\"Spartan Day\",\"color-scheme\":\"light\",\"text\":\"alert-background: \u003C\u003Ccolour background>>\\nalert-border: \u003C\u003Ccolour very-muted-foreground>>\\nalert-highlight: \u003C\u003Ccolour very-muted-foreground>>\\nalert-muted-foreground: \u003C\u003Ccolour muted-foreground>>\\nbackground: #FAFAFA\\nblockquote-bar: \u003C\u003Ccolour page-background>>\\nbutton-background: transparent\\nbutton-foreground: inherit\\nbutton-border: \u003C\u003Ccolour tag-background>>\\ncode-background: #ececec\\ncode-border: #ececec\\ncode-foreground: \\ndirty-indicator: #c80000\\ndownload-background: \u003C\u003Ccolour primary>>\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: #FFFFFF\\ndropdown-border: \u003C\u003Ccolour dropdown-background>>\\ndropdown-tab-background-selected: \u003C\u003Ccolour dropdown-background>>\\ndropdown-tab-background: #F5F5F5\\ndropzone-background: \u003C\u003Ccolour tag-background>>\\nexternal-link-background-hover: transparent\\nexternal-link-background-visited: transparent\\nexternal-link-background: transparent\\nexternal-link-foreground-hover: \\nexternal-link-foreground-visited: \\nexternal-link-foreground: \\nforeground: rgba(0, 0, 0, 0.87)\\nmessage-background: \u003C\u003Ccolour background>>\\nmessage-border: \u003C\u003Ccolour very-muted-foreground>>\\nmessage-foreground: rgba(0, 0, 0, 0.54)\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: \u003C\u003Ccolour very-muted-foreground>>\\nmodal-footer-background: \u003C\u003Ccolour background>>\\nmodal-footer-border: \u003C\u003Ccolour very-muted-foreground>>\\nmodal-header-border: \u003C\u003Ccolour very-muted-foreground>>\\nmuted-foreground: rgba(0, 0, 0, 0.54)\\nnotification-background: \u003C\u003Ccolour dropdown-background>>\\nnotification-border: \u003C\u003Ccolour dropdown-background>>\\npage-background: #f4f4f4\\npre-background: #ececec\\npre-border: #ececec\\nprimary: #3949ab\\nselect-tag-background: \u003C\u003Ccolour background>>\\nselect-tag-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #aeaeae\\nsidebar-controls-foreground: #c6c6c6\\nsidebar-foreground-shadow: transparent\\nsidebar-foreground: rgba(0, 0, 0, 0.54)\\nsidebar-muted-foreground-hover: rgba(0, 0, 0, 0.54)\\nsidebar-muted-foreground: rgba(0, 0, 0, 0.38)\\nsidebar-tab-background-selected: \u003C\u003Ccolour page-background>>\\nsidebar-tab-background: transparent\\nsidebar-tab-border-selected: \u003C\u003Ccolour table-border>>\\nsidebar-tab-border: transparent\\nsidebar-tab-divider: \u003C\u003Ccolour table-border>>\\nsidebar-tab-foreground-selected: rgba(0, 0, 0, 0.87)\\nsidebar-tab-foreground: rgba(0, 0, 0, 0.54)\\nsidebar-tiddler-link-foreground-hover: rgba(0, 0, 0, 0.87)\\nsidebar-tiddler-link-foreground: rgba(0, 0, 0, 0.54)\\nsite-title-foreground: rgba(0, 0, 0, 0.87)\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: \u003C\u003Ccolour background>>\\ntab-background: transparent\\ntab-border-selected: \u003C\u003Ccolour table-border>>\\ntab-border: transparent\\ntab-divider: \u003C\u003Ccolour table-border>>\\ntab-foreground-selected: rgba(0, 0, 0, 0.87)\\ntab-foreground: rgba(0, 0, 0, 0.54)\\ntable-border: #d8d8d8\\ntable-footer-background: \u003C\u003Ccolour tiddler-editor-fields-odd>>\\ntable-header-background: \u003C\u003Ccolour tiddler-editor-fields-even>>\\ntag-background: #ec6\\ntag-foreground: \u003C\u003Ccolour button-foreground>>\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: #f9f9f9\\ntiddler-controls-foreground-hover: \u003C\u003Ccolour sidebar-controls-foreground-hover>>\\ntiddler-controls-foreground-selected: \u003C\u003Ccolour sidebar-controls-foreground-hover>>\\ntiddler-controls-foreground: \u003C\u003Ccolour sidebar-controls-foreground>>\\ntiddler-editor-background: transparent\\ntiddler-editor-border-image: \\ntiddler-editor-border: #e8e7e7\\ntiddler-editor-fields-even: rgba(0, 0, 0, 0.1)\\ntiddler-editor-fields-odd: rgba(0, 0, 0, 0.04)\\ntiddler-info-background: #F5F5F5\\ntiddler-info-border: #F5F5F5\\ntiddler-info-tab-background: \u003C\u003Ccolour tiddler-editor-fields-odd>>\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: \u003C\u003Ccolour muted-foreground>>\\ntiddler-title-foreground: #000000\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: \u003C\u003Ccolour very-muted-foreground>>\\nvery-muted-foreground: rgba(0, 0, 0, 0.12)\\n\"},\"$:/palettes/SpartanNight\":{\"title\":\"$:/palettes/SpartanNight\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"description\":\"Dark spartan colors\",\"name\":\"Spartan Night\",\"color-scheme\":\"dark\",\"text\":\"alert-background: \u003C\u003Ccolour background>>\\nalert-border: \u003C\u003Ccolour very-muted-foreground>>\\nalert-highlight: \u003C\u003Ccolour very-muted-foreground>>\\nalert-muted-foreground: \u003C\u003Ccolour muted-foreground>>\\nbackground: #303030\\nblockquote-bar: \u003C\u003Ccolour page-background>>\\nbutton-background: transparent\\nbutton-foreground: inherit\\nbutton-border: \u003C\u003Ccolour tag-background>>\\ncode-background: \u003C\u003Ccolour pre-background>>\\ncode-border: \u003C\u003Ccolour pre-border>>\\ncode-foreground: rgba(255, 255, 255, 0.54)\\ndirty-indicator: #c80000\\ndownload-background: \u003C\u003Ccolour primary>>\\ndownload-foreground: \u003C\u003Ccolour foreground>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: #424242\\ndropdown-border: \u003C\u003Ccolour dropdown-background>>\\ndropdown-tab-background-selected: \u003C\u003Ccolour dropdown-background>>\\ndropdown-tab-background: #050505\\ndropzone-background: \u003C\u003Ccolour tag-background>>\\nexternal-link-background-hover: transparent\\nexternal-link-background-visited: transparent\\nexternal-link-background: transparent\\nexternal-link-foreground-hover: \\nexternal-link-foreground-visited: #7c318c\\nexternal-link-foreground: #9e3eb3\\nforeground: rgba(255, 255, 255, 0.7)\\nmessage-background: \u003C\u003Ccolour background>>\\nmessage-border: \u003C\u003Ccolour very-muted-foreground>>\\nmessage-foreground: rgba(255, 255, 255, 0.54)\\nmodal-backdrop: \u003C\u003Ccolour page-background>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: \u003C\u003Ccolour very-muted-foreground>>\\nmodal-footer-background: \u003C\u003Ccolour background>>\\nmodal-footer-border: \u003C\u003Ccolour background>>\\nmodal-header-border: \u003C\u003Ccolour very-muted-foreground>>\\nmuted-foreground: rgba(255, 255, 255, 0.54)\\nnotification-background: \u003C\u003Ccolour dropdown-background>>\\nnotification-border: \u003C\u003Ccolour dropdown-background>>\\npage-background: #212121\\npre-background: #2a2a2a\\npre-border: transparent\\nprimary: #5656f3\\nselect-tag-background: \u003C\u003Ccolour background>>\\nselect-tag-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #494949\\nsidebar-controls-foreground: #5d5d5d\\nsidebar-foreground-shadow: transparent\\nsidebar-foreground: rgba(255, 255, 255, 0.54)\\nsidebar-muted-foreground-hover: rgba(255, 255, 255, 0.54)\\nsidebar-muted-foreground: rgba(255, 255, 255, 0.38)\\nsidebar-tab-background-selected: \u003C\u003Ccolour page-background>>\\nsidebar-tab-background: transparent\\nsidebar-tab-border-selected: \u003C\u003Ccolour table-border>>\\nsidebar-tab-border: transparent\\nsidebar-tab-divider: \u003C\u003Ccolour table-border>>\\nsidebar-tab-foreground-selected: rgba(255, 255, 255, 0.87)\\nsidebar-tab-foreground: rgba(255, 255, 255, 0.54)\\nsidebar-tiddler-link-foreground-hover: rgba(255, 255, 255, 0.7)\\nsidebar-tiddler-link-foreground: rgba(255, 255, 255, 0.54)\\nsite-title-foreground: rgba(255, 255, 255, 0.7)\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: \u003C\u003Ccolour background>>\\ntab-background: transparent\\ntab-border-selected: \u003C\u003Ccolour table-border>>\\ntab-border: transparent\\ntab-divider: \u003C\u003Ccolour table-border>>\\ntab-foreground-selected: rgba(255, 255, 255, 0.87)\\ntab-foreground: rgba(255, 255, 255, 0.54)\\ntable-border: #3a3a3a\\ntable-footer-background: \u003C\u003Ccolour tiddler-editor-fields-odd>>\\ntable-header-background: \u003C\u003Ccolour tiddler-editor-fields-even>>\\ntag-background: #ec6\\ntag-foreground: \u003C\u003Ccolour button-foreground>>\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: rgb(55,55,55)\\ntiddler-controls-foreground-hover: \u003C\u003Ccolour sidebar-controls-foreground-hover>>\\ntiddler-controls-foreground-selected: \u003C\u003Ccolour sidebar-controls-foreground-hover>>\\ntiddler-controls-foreground: \u003C\u003Ccolour sidebar-controls-foreground>>\\ntiddler-editor-background: transparent\\ntiddler-editor-border-image: \\ntiddler-editor-border: rgba(255, 255, 255, 0.08)\\ntiddler-editor-fields-even: rgba(255, 255, 255, 0.1)\\ntiddler-editor-fields-odd: rgba(255, 255, 255, 0.04)\\ntiddler-info-background: #454545\\ntiddler-info-border: #454545\\ntiddler-info-tab-background: \u003C\u003Ccolour tiddler-editor-fields-odd>>\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: \u003C\u003Ccolour muted-foreground>>\\ntiddler-title-foreground: #FFFFFF\\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\ntoolbar-info-button: \\ntoolbar-edit-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-cancel-button: \\ntoolbar-done-button: \\nuntagged-background: \u003C\u003Ccolour very-muted-foreground>>\\nvery-muted-foreground: rgba(255, 255, 255, 0.12)\\n\"},\"$:/palettes/Twilight\":{\"title\":\"$:/palettes/Twilight\",\"tags\":\"$:/tags/Palette\",\"author\":\"Thomas Elmiger\",\"type\":\"application/x-tiddler-dictionary\",\"name\":\"Twilight\",\"description\":\"Delightful, soft darkness.\",\"color-scheme\":\"dark\",\"text\":\"alert-background: rgb(255, 255, 102)\\nalert-border: rgb(232, 232, 125)\\nalert-highlight: rgb(255, 51, 51)\\nalert-muted-foreground: rgb(224, 82, 82)\\nbackground: rgb(38, 38, 38)\\nblockquote-bar: rgba(240, 196, 117, 0.7)\\nbutton-background: rgb(63, 63, 63)\\nbutton-border: rgb(127, 127, 127)\\nbutton-foreground: rgb(179, 179, 179)\\ncode-background: rgba(0,0,0,0.03)\\ncode-border: rgba(0,0,0,0.08)\\ncode-foreground: rgb(255, 94, 94)\\ndiff-delete-background: #ffc9c9\\ndiff-delete-foreground: \u003C\u003Ccolour foreground>>\\ndiff-equal-background: \\ndiff-equal-foreground: \u003C\u003Ccolour foreground>>\\ndiff-insert-background: #aaefad\\ndiff-insert-foreground: \u003C\u003Ccolour foreground>>\\ndiff-invisible-background: \\ndiff-invisible-foreground: \u003C\u003Ccolour muted-foreground>>\\ndirty-indicator: rgb(255, 94, 94)\\ndownload-background: #19a974\\ndownload-foreground: rgb(38, 38, 38)\\ndragger-background: rgb(179, 179, 179)\\ndragger-foreground: rgb(38, 38, 38)\\ndropdown-background: rgb(38, 38, 38)\\ndropdown-border: rgb(255, 255, 255)\\ndropdown-tab-background: rgba(0,0,0,.1)\\ndropdown-tab-background-selected: rgba(255,255,255,1)\\ndropzone-background: #9eebcf\\nexternal-link-background: inherit\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-foreground: rgb(179, 179, 255)\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: rgb(153, 153, 255)\\nforeground: rgb(179, 179, 179)\\nmessage-background: \u003C\u003Ccolour tag-foreground>>\\nmessage-border: #96ccff\\nmessage-foreground: \u003C\u003Ccolour tag-background>>\\nmodal-backdrop: rgb(179, 179, 179)\\nmodal-background: rgb(38, 38, 38)\\nmodal-border: rgba(0,0,0,.5)\\nmodal-footer-background: #f4f4f4\\nmodal-footer-border: rgba(0,0,0,.1)\\nmodal-header-border: rgba(0,0,0,.2)\\nmuted-foreground: rgb(255, 255, 255)\\nnotification-background: \u003C\u003Ccolour tag-foreground>>\\nnotification-border: \u003C\u003Ccolour tag-background>>\\npage-background: rgb(26, 26, 26)\\npre-background: rgb(25, 25, 25)\\npre-border: rgba(0,0,0,.2)\\nprimary: rgb(255, 201, 102)\\nselect-tag-background: \\nselect-tag-foreground: \\nsidebar-button-foreground: rgb(179, 179, 179)\\nsidebar-controls-foreground: rgb(153, 153, 153)\\nsidebar-controls-foreground-hover: \u003C\u003Ccolour tiddler-controls-foreground-hover>>\\nsidebar-foreground: rgb(141, 141, 141)\\nsidebar-foreground-shadow: transparent\\nsidebar-muted-foreground: rgba(0, 0, 0, 0.5)\\nsidebar-muted-foreground-hover: rgb(141, 141, 141)\\nsidebar-tab-background: rgba(141, 141, 141, 0.2)\\nsidebar-tab-background-selected: rgb(26, 26, 26)\\nsidebar-tab-border: rgb(127, 127, 127)\\nsidebar-tab-border-selected: rgb(127, 127, 127)\\nsidebar-tab-divider: rgb(127, 127, 127)\\nsidebar-tab-foreground: rgb(179, 179, 179)\\nsidebar-tab-foreground-selected: rgb(179, 179, 179)\\nsidebar-tiddler-link-foreground: rgb(179, 179, 179)\\nsidebar-tiddler-link-foreground-hover: rgb(115, 115, 115)\\nsite-title-foreground: rgb(255, 201, 102)\\nstatic-alert-foreground: rgba(0,0,0,.3)\\ntab-background: rgba(0,0,0,0.125)\\ntab-background-selected: rgb(38, 38, 38)\\ntab-border: rgb(255, 201, 102)\\ntab-border-selected: rgb(255, 201, 102)\\ntab-divider: rgb(255, 201, 102)\\ntab-foreground: rgb(179, 179, 179)\\ntab-foreground-selected: rgb(179, 179, 179)\\ntable-border: rgba(255,255,255,.3)\\ntable-footer-background: rgba(0,0,0,.4)\\ntable-header-background: rgba(0,0,0,.1)\\ntag-background: rgb(255, 201, 102)\\ntag-foreground: rgb(25, 25, 25)\\ntiddler-background: rgb(38, 38, 38)\\ntiddler-border: rgba(240, 196, 117, 0.7)\\ntiddler-controls-foreground: rgb(128, 128, 128)\\ntiddler-controls-foreground-hover: rgba(255, 255, 255, 0.8)\\ntiddler-controls-foreground-selected: rgba(255, 255, 255, 0.9)\\ntiddler-editor-background: rgb(33, 33, 33)\\ntiddler-editor-border: rgb(63, 63, 63)\\ntiddler-editor-border-image: rgb(25, 25, 25)\\ntiddler-editor-fields-even: rgb(33, 33, 33)\\ntiddler-editor-fields-odd: rgb(28, 28, 28)\\ntiddler-info-background: rgb(43, 43, 43)\\ntiddler-info-border: rgb(25, 25, 25)\\ntiddler-info-tab-background: rgb(43, 43, 43)\\ntiddler-link-background: rgb(38, 38, 38)\\ntiddler-link-foreground: rgb(204, 204, 255)\\ntiddler-subtitle-foreground: rgb(255, 255, 255)\\ntiddler-title-foreground: rgb(255, 192, 76)\\ntoolbar-cancel-button: \\ntoolbar-close-button: \\ntoolbar-delete-button: \\ntoolbar-done-button: \\ntoolbar-edit-button: \\ntoolbar-info-button: \\ntoolbar-new-button: \\ntoolbar-options-button: \\ntoolbar-save-button: \\nuntagged-background: rgb(255, 255, 255)\\nvery-muted-foreground: rgba(240, 196, 117, 0.7)\\n\"},\"$:/palettes/Vanilla\":{\"title\":\"$:/palettes/Vanilla\",\"name\":\"Vanilla\",\"description\":\"Pale and unobtrusive\",\"tags\":\"$:/tags/Palette\",\"type\":\"application/x-tiddler-dictionary\",\"color-scheme\":\"light\",\"text\":\"alert-background: #ffe476\\nalert-border: #b99e2f\\nalert-highlight: #881122\\nalert-muted-foreground: #b99e2f\\nbackground: #ffffff\\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\\nbutton-background:\\nbutton-foreground:\\nbutton-border:\\ncode-background: #f7f7f9\\ncode-border: #e1e1e8\\ncode-foreground: #dd1144\\ndiff-delete-background: #ffc9c9\\ndiff-delete-foreground: \u003C\u003Ccolour foreground>>\\ndiff-equal-background: \\ndiff-equal-foreground: \u003C\u003Ccolour foreground>>\\ndiff-insert-background: #aaefad\\ndiff-insert-foreground: \u003C\u003Ccolour foreground>>\\ndiff-invisible-background: \\ndiff-invisible-foreground: \u003C\u003Ccolour muted-foreground>>\\ndirty-indicator: #ff0000\\ndownload-background: #34c734\\ndownload-foreground: \u003C\u003Ccolour background>>\\ndragger-background: \u003C\u003Ccolour foreground>>\\ndragger-foreground: \u003C\u003Ccolour background>>\\ndropdown-background: \u003C\u003Ccolour background>>\\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\\ndropdown-tab-background-selected: #fff\\ndropdown-tab-background: #ececec\\ndropzone-background: rgba(0,200,0,0.7)\\nexternal-link-background-hover: inherit\\nexternal-link-background-visited: inherit\\nexternal-link-background: inherit\\nexternal-link-foreground-hover: inherit\\nexternal-link-foreground-visited: #0000aa\\nexternal-link-foreground: #0000ee\\nforeground: #333333\\nmessage-background: #ecf2ff\\nmessage-border: #cfd6e6\\nmessage-foreground: #547599\\nmodal-backdrop: \u003C\u003Ccolour foreground>>\\nmodal-background: \u003C\u003Ccolour background>>\\nmodal-border: #999999\\nmodal-footer-background: #f5f5f5\\nmodal-footer-border: #dddddd\\nmodal-header-border: #eeeeee\\nmuted-foreground: #bbb\\nnotification-background: #ffffdd\\nnotification-border: #999999\\npage-background: #f4f4f4\\npre-background: #f5f5f5\\npre-border: #cccccc\\nprimary: #5778d8\\nselection-background:\\nselection-foreground:\\nselect-tag-background:\\nselect-tag-foreground:\\nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\\nsidebar-controls-foreground-hover: #000000\\nsidebar-controls-foreground: #aaaaaa\\nsidebar-foreground-shadow: rgba(255,255,255, 0.8)\\nsidebar-foreground: #acacac\\nsidebar-muted-foreground-hover: #444444\\nsidebar-muted-foreground: #c0c0c0\\nsidebar-tab-background-selected: #f4f4f4\\nsidebar-tab-background: #e0e0e0\\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\\nsidebar-tab-divider: #e4e4e4\\nsidebar-tab-foreground-selected:\\nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\\nsidebar-tiddler-link-foreground-hover: #444444\\nsidebar-tiddler-link-foreground: #999999\\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\\nstatic-alert-foreground: #aaaaaa\\ntab-background-selected: #ffffff\\ntab-background: #d8d8d8\\ntab-border-selected: #d8d8d8\\ntab-border: #cccccc\\ntab-divider: #d8d8d8\\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\\ntab-foreground: #666666\\ntable-border: #dddddd\\ntable-footer-background: #a8a8a8\\ntable-header-background: #f0f0f0\\ntag-background: #ec6\\ntag-foreground: #ffffff\\ntiddler-background: \u003C\u003Ccolour background>>\\ntiddler-border: \u003C\u003Ccolour background>>\\ntiddler-controls-foreground-hover: #888888\\ntiddler-controls-foreground-selected: #444444\\ntiddler-controls-foreground: #cccccc\\ntiddler-editor-background: #f8f8f8\\ntiddler-editor-border-image: #ffffff\\ntiddler-editor-border: #cccccc\\ntiddler-editor-fields-even: #e0e8e0\\ntiddler-editor-fields-odd: #f0f4f0\\ntiddler-info-background: #f8f8f8\\ntiddler-info-border: #dddddd\\ntiddler-info-tab-background: #f8f8f8\\ntiddler-link-background: \u003C\u003Ccolour background>>\\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\\ntiddler-subtitle-foreground: #c0c0c0\\ntiddler-title-foreground: #182955\\ntoolbar-new-button:\\ntoolbar-options-button:\\ntoolbar-save-button:\\ntoolbar-info-button:\\ntoolbar-edit-button:\\ntoolbar-close-button:\\ntoolbar-delete-button:\\ntoolbar-cancel-button:\\ntoolbar-done-button:\\nuntagged-background: #999999\\nvery-muted-foreground: #888888\\nwikilist-background: #e5e5e5\\nwikilist-item: #fff\\nwikilist-info: #000\\nwikilist-title: #666\\nwikilist-title-svg: \u003C\u003Ccolour wikilist-title>>\\nwikilist-url: #aaa\\nwikilist-button-open: #4fb82b\\nwikilist-button-open-hover: green\\nwikilist-button-reveal: #5778d8\\nwikilist-button-reveal-hover: blue\\nwikilist-button-remove: #d85778\\nwikilist-button-remove-hover: red\\nwikilist-toolbar-background: #d3d3d3\\nwikilist-toolbar-foreground: #888\\nwikilist-droplink-dragover: rgba(255,192,192,0.5)\\nwikilist-button-background: #acacac\\nwikilist-button-foreground: #000\\n\"},\"$:/core/readme\":{\"title\":\"$:/core/readme\",\"text\":\"This plugin contains TiddlyWiki's core components, comprising:\\n\\n* JavaScript code modules\\n* Icons\\n* Templates needed to create TiddlyWiki's user interface\\n* British English (''en-GB'') translations of the localisable strings used by the core\\n\"},\"$:/library/sjcl.js/license\":{\"title\":\"$:/library/sjcl.js/license\",\"type\":\"text/plain\",\"text\":\"SJCL is open. You can use, modify and redistribute it under a BSD\\nlicense or under the GNU GPL, version 2.0.\\n\\n---------------------------------------------------------------------\\n\\nhttp://opensource.org/licenses/BSD-2-Clause\\n\\nCopyright (c) 2009-2015, Emily Stark, Mike Hamburg and Dan Boneh at\\nStanford University. All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are\\nmet:\\n\\n1. Redistributions of source code must retain the above copyright\\nnotice, this list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright\\nnotice, this list of conditions and the following disclaimer in the\\ndocumentation and/or other materials provided with the distribution.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS\\nIS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\n---------------------------------------------------------------------\\n\\nhttp://opensource.org/licenses/GPL-2.0\\n\\nThe Stanford Javascript Crypto Library (hosted here on GitHub) is a\\nproject by the Stanford Computer Security Lab to build a secure,\\npowerful, fast, small, easy-to-use, cross-browser library for\\ncryptography in Javascript.\\n\\nCopyright (c) 2009-2015, Emily Stark, Mike Hamburg and Dan Boneh at\\nStanford University.\\n\\nThis program is free software; you can redistribute it and/or modify it\\nunder the terms of the GNU General Public License as published by the\\nFree Software Foundation; either version 2 of the License, or (at your\\noption) any later version.\\n\\nThis program is distributed in the hope that it will be useful, but\\nWITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\\nPublic License for more details.\\n\\nYou should have received a copy of the GNU General Public License along\\nwith this program; if not, write to the Free Software Foundation, Inc.,\\n59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\"},\"$:/core/templates/MOTW.html\":{\"title\":\"$:/core/templates/MOTW.html\",\"text\":\"\\\\rules only filteredtranscludeinline transcludeinline entity\\n\u003C!-- The following comment is called a MOTW comment and is necessary for the TiddlyIE Internet Explorer extension -->\\n\u003C!-- saved from url=(0021)https://tiddlywiki.com -->&#13;&#10;\"},\"$:/core/templates/alltiddlers.template.html\":{\"title\":\"$:/core/templates/alltiddlers.template.html\",\"type\":\"text/vnd.tiddlywiki-html\",\"text\":\"\u003C!-- This template is provided for backwards compatibility with older versions of TiddlyWiki -->\\n\\n\u003C$set name=\\\"exportFilter\\\" value=\\\"[!is[system]sort[title]]\\\">\\n\\n{{$:/core/templates/exporters/StaticRiver}}\\n\\n\u003C/$set>\\n\"},\"$:/core/templates/canonical-uri-external-image\":{\"title\":\"$:/core/templates/canonical-uri-external-image\",\"text\":\"\u003C!--\\n\\nThis template is used to assign the ''_canonical_uri'' field to external images.\\n\\nChange the `./images/` part to a different base URI. The URI can be relative or absolute.\\n\\n-->\\n./images/\u003C$view field=\\\"title\\\" format=\\\"doubleurlencoded\\\"/>\"},\"$:/core/templates/canonical-uri-external-raw\":{\"title\":\"$:/core/templates/canonical-uri-external-raw\",\"text\":\"\u003C!--\\n\\nThis template is used to assign the ''_canonical_uri'' field to external raw files that are stored in the same directory\\n\\n-->\\n\u003C$view field=\\\"title\\\" format=\\\"doubleurlencoded\\\"/>\"},\"$:/core/templates/canonical-uri-external-text\":{\"title\":\"$:/core/templates/canonical-uri-external-text\",\"text\":\"\u003C!--\\n\\nThis template is used to assign the ''_canonical_uri'' field to external text files.\\n\\nChange the `./text/` part to a different base URI. The URI can be relative or absolute.\\n\\n-->\\n./text/\u003C$view field=\\\"title\\\" format=\\\"doubleurlencoded\\\"/>.tid\"},\"$:/core/templates/css-tiddler\":{\"title\":\"$:/core/templates/css-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving CSS tiddlers as a style tag with data attributes representing the tiddler fields.\\n\\n-->`\u003Cstyle`\u003C$fields template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'>\u003C/$fields>` type=\\\"text/css\\\">`\u003C$view field=\\\"text\\\" format=\\\"text\\\" />`\u003C/style>`\"},\"$:/core/templates/exporters/CsvFile\":{\"title\":\"$:/core/templates/exporters/CsvFile\",\"tags\":\"$:/tags/Exporter\",\"description\":\"{{$:/language/Exporters/CsvFile}}\",\"extension\":\".csv\",\"text\":\"\u003C$macrocall $name=\\\"csvtiddlers\\\" filter=\u003C\u003CexportFilter>> format=\\\"quoted-comma-sep\\\" $output=\\\"text/raw\\\"/>\\n\"},\"$:/core/templates/exporters/JsonFile\":{\"title\":\"$:/core/templates/exporters/JsonFile\",\"tags\":\"$:/tags/Exporter\",\"description\":\"{{$:/language/Exporters/JsonFile}}\",\"extension\":\".json\",\"text\":\"\u003C$macrocall $name=\\\"jsontiddlers\\\" filter=\u003C\u003CexportFilter>> $output=\\\"text/raw\\\"/>\\n\"},\"$:/core/templates/exporters/StaticRiver\":{\"title\":\"$:/core/templates/exporters/StaticRiver\",\"tags\":\"$:/tags/Exporter\",\"description\":\"{{$:/language/Exporters/StaticRiver}}\",\"extension\":\".html\",\"text\":\"\\\\define tv-wikilink-template() #$uri_encoded$\\n\\\\define tv-config-toolbar-icons() no\\n\\\\define tv-config-toolbar-text() no\\n\\\\define tv-config-toolbar-class() tc-btn-invisible\\n\\\\rules only filteredtranscludeinline transcludeinline\\n\u003C!doctype html>\\n\u003Chtml>\\n\u003Chead>\\n\u003Cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n\u003Cmeta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"tiddlywiki-version\\\" content=\\\"{{$:/core/templates/version}}\\\" />\\n\u003Cmeta name=\\\"format-detection\\\" content=\\\"telephone=no\\\">\\n\u003Clink id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n\u003Ctitle>{{$:/core/wiki/title}}\u003C/title>\\n\u003Cdiv id=\\\"styleArea\\\">\\n{{$:/boot/boot.css||$:/core/templates/css-tiddler}}\\n\u003C/div>\\n\u003Cstyle type=\\\"text/css\\\">\\n{{$:/core/ui/PageStylesheet||$:/core/templates/wikified-tiddler}}\\n\u003C/style>\\n\u003C/head>\\n\u003Cbody class=\\\"tc-body\\\">\\n{{$:/StaticBanner||$:/core/templates/html-tiddler}}\\n\u003Csection class=\\\"tc-story-river tc-static-story-river\\\">\\n{{$:/core/templates/exporters/StaticRiver/Content||$:/core/templates/html-tiddler}}\\n\u003C/section>\\n\u003C/body>\\n\u003C/html>\\n\"},\"$:/core/templates/exporters/StaticRiver/Content\":{\"title\":\"$:/core/templates/exporters/StaticRiver/Content\",\"text\":\"\\\\define renderContent()\\n{{{ $(exportFilter)$ ||$:/core/templates/static-tiddler}}}\\n\\\\end\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\u003C\u003CrenderContent>>\\n\"},\"$:/core/templates/exporters/TidFile\":{\"title\":\"$:/core/templates/exporters/TidFile\",\"tags\":\"$:/tags/Exporter\",\"description\":\"{{$:/language/Exporters/TidFile}}\",\"extension\":\".tid\",\"condition\":\"[\u003Ccount>compare:lte[1]]\",\"text\":\"\\\\define renderContent()\\n{{{ $(exportFilter)$ +[limit[1]] ||$:/core/templates/tid-tiddler}}}\\n\\\\end\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\u003C\u003CrenderContent>>\"},\"$:/core/save/all-external-js\":{\"title\":\"$:/core/save/all-external-js\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\\\define saveTiddlerFilter()\\n[is[tiddler]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/core]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]] $(publishFilter)$\\n\\\\end\\n\\\\define coreURL() %24%3A%2Fcore%2Ftemplates%2Ftiddlywiki5.js\\n{{$:/core/templates/tiddlywiki5-external-js.html}}\\n\"},\"$:/core/save/offline-external-js\":{\"title\":\"$:/core/save/offline-external-js\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\\\define saveTiddlerFilter()\\n[is[tiddler]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/core]] -[[$:/plugins/tiddlywiki/filesystem]] -[[$:/plugins/tiddlywiki/tiddlyweb]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]] $(publishFilter)$\\n\\\\end\\n\\\\define coreURL() tiddlywikicore-$(version)$.js\\n{{$:/core/templates/tiddlywiki5-external-js.html}}\\n\"},\"$:/core/templates/tiddlywiki5.js\":{\"title\":\"$:/core/templates/tiddlywiki5.js\",\"text\":\"\\\\rules only filteredtranscludeinline transcludeinline codeinline\\n\\n/*\\n{{ $:/core/copyright.txt ||$:/core/templates/plain-text-tiddler}}\\n`*/\\n`\u003C!--~~ Library modules ~~-->\\n{{{ [is[system]type[application/javascript]library[yes]] ||$:/core/templates/plain-text-tiddler}}}\\n\u003C!--~~ Boot prefix ~~-->\\n{{ $:/boot/bootprefix.js ||$:/core/templates/plain-text-tiddler}}\\n\u003C!--~~ Core plugin ~~-->\\n{{$:/core/templates/tiddlywiki5.js/tiddlers}}\\n\u003C!--~~ Boot kernel ~~-->\\n{{ $:/boot/boot.js ||$:/core/templates/plain-text-tiddler}}\\n\"},\"$:/core/templates/tiddlywiki5.js/tiddlers\":{\"title\":\"$:/core/templates/tiddlywiki5.js/tiddlers\",\"text\":\"`\\n$tw.preloadTiddlerArray(`\u003C$text text=\u003C\u003Cjsontiddlers \\\"[[$:/core]]\\\">>/>`);\\n$tw.preloadTiddlerArray([{\\n\\ttitle: \\\"$:/config/SaveWikiButton/Template\\\",\\n\\ttext: \\\"$:/core/save/offline-external-js\\\"\\n}]);\\n`\\n\"},\"$:/core/templates/tiddlywiki5-external-js.html\":{\"title\":\"$:/core/templates/tiddlywiki5-external-js.html\",\"text\":\"\\\\rules only filteredtranscludeinline transcludeinline\\n\u003C!doctype html>\\n{{$:/core/templates/MOTW.html}}\u003Chtml lang=\\\"{{{ [{$:/language}get[name]] }}}\\\">\\n\u003Chead>\\n\u003Cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n\u003C!--~~ Raw markup for the top of the head section ~~-->\\n{{{ [all[shadows+tiddlers]tag[$:/tags/RawMarkupWikified/TopHead]] ||$:/core/templates/raw-static-tiddler}}}\\n\u003Cmeta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/>\\n\u003Cmeta name=\\\"application-name\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"tiddlywiki-version\\\" content=\\\"{{$:/core/templates/version}}\\\" />\\n\u003Cmeta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n\u003Cmeta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n\u003Cmeta name=\\\"format-detection\\\" content=\\\"telephone=no\\\" />\\n\u003Cmeta name=\\\"copyright\\\" content=\\\"{{$:/core/copyright.txt}}\\\" />\\n\u003Clink id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n\u003Ctitle>{{$:/core/wiki/title}}\u003C/title>\\n\u003C!--~~ This is a Tiddlywiki file. The points of interest in the file are marked with this pattern ~~-->\\n\\n\u003C!--~~ Raw markup ~~-->\\n{{{ [all[shadows+tiddlers]tag[$:/core/wiki/rawmarkup]] [all[shadows+tiddlers]tag[$:/tags/RawMarkup]] ||$:/core/templates/plain-text-tiddler}}}\\n{{{ [all[shadows+tiddlers]tag[$:/tags/RawMarkupWikified]] ||$:/core/templates/raw-static-tiddler}}}\\n\u003C/head>\\n\u003Cbody class=\\\"tc-body\\\">\\n\u003C!--~~ Raw markup for the top of the body section ~~-->\\n{{{ [all[shadows+tiddlers]tag[$:/tags/RawMarkupWikified/TopBody]] ||$:/core/templates/raw-static-tiddler}}}\\n\u003C!--~~ Static styles ~~-->\\n\u003Cdiv id=\\\"styleArea\\\">\\n{{$:/boot/boot.css||$:/core/templates/css-tiddler}}\\n\u003C/div>\\n\u003C!--~~ Static content for Google and browsers without JavaScript ~~-->\\n\u003Cnoscript>\\n\u003Cdiv id=\\\"splashArea\\\">\\n{{$:/core/templates/static.area}}\\n\u003C/div>\\n\u003C/noscript>\\n\u003C!--~~ Ordinary tiddlers ~~-->\\n{{$:/core/templates/store.area.template.html}}\\n\u003C!--~~ Raw markup for the bottom of the body section ~~-->\\n{{{ [all[shadows+tiddlers]tag[$:/tags/RawMarkupWikified/BottomBody]] ||$:/core/templates/raw-static-tiddler}}}\\n\u003C/body>\\n\u003C!--~~ Load external JS ~~-->\\n\u003Cscript src=\\\"{{{ [\u003CcoreURL>] }}}\\\" onerror=\\\"alert('Error: Cannot load {{{ [\u003CcoreURL>] }}}');\\\">\u003C/script>\\n\u003C/html>\\n\"},\"$:/core/templates/html-div-skinny-tiddler\":{\"title\":\"$:/core/templates/html-div-skinny-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is a variant of $:/core/templates/html-div-tiddler used for saving skinny tiddlers (with no text field)\\n\\n-->`\u003Cdiv`\u003C$fields template=' $name$=\\\"$encoded_value$\\\"'>\u003C/$fields>`>\\n\u003Cpre>\u003C/pre>\\n\u003C/div>`\\n\"},\"$:/core/templates/html-div-tiddler\":{\"title\":\"$:/core/templates/html-div-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving tiddlers as an HTML DIV tag with attributes representing the tiddler fields.\\n\\n-->`\u003Cdiv`\u003C$fields template=' $name$=\\\"$encoded_value$\\\"'>\u003C/$fields>`>\\n\u003Cpre>`\u003C$view field=\\\"text\\\" format=\\\"htmltextencoded\\\" />`\u003C/pre>\\n\u003C/div>`\\n\"},\"$:/core/templates/html-json-skinny-tiddler\":{\"title\":\"$:/core/templates/html-json-skinny-tiddler\",\"text\":\"\u003C$list filter=\\\"[\u003CnumTiddlers>compare:number:gteq[1]] ~[\u003Ccounter>!match[1]]\\\">`,`\u003C$text text=\u003C\u003Cnewline>>/>\u003C/$list>\\n\u003C$jsontiddler tiddler=\u003C\u003CcurrentTiddler>> exclude=\\\"text\\\" escapeUnsafeScriptChars=\\\"yes\\\"/>\\n\"},\"$:/core/templates/html-json-tiddler\":{\"title\":\"$:/core/templates/html-json-tiddler\",\"text\":\"\u003C$list filter=\\\"[\u003Ccounter>!match[1]]\\\">`,`\u003C$text text=\u003C\u003Cnewline>>/>\u003C/$list>\u003C$jsontiddler tiddler=\u003C\u003CcurrentTiddler>> escapeUnsafeScriptChars=\\\"yes\\\"/>\"},\"$:/core/templates/html-tiddler\":{\"title\":\"$:/core/templates/html-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving tiddlers as raw HTML\\n\\n-->\u003C$view field=\\\"text\\\" format=\\\"htmlwikified\\\" />\"},\"$:/core/templates/javascript-tiddler\":{\"title\":\"$:/core/templates/javascript-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving JavaScript tiddlers as a script tag with data attributes representing the tiddler fields.\\n\\n-->`\u003Cscript`\u003C$fields template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'>\u003C/$fields>` type=\\\"text/javascript\\\">`\u003C$view field=\\\"text\\\" format=\\\"text\\\" />`\u003C/script>`\"},\"$:/core/templates/json-tiddler\":{\"title\":\"$:/core/templates/json-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving tiddlers as raw JSON\\n\\n-->\u003C$text text=\u003C\u003Cjsontiddler>>/>\"},\"$:/core/templates/module-tiddler\":{\"title\":\"$:/core/templates/module-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving JavaScript tiddlers as a script tag with data attributes representing the tiddler fields. The body of the tiddler is wrapped in a call to the `$tw.modules.define` function in order to define the body of the tiddler as a module\\n\\n-->`\u003Cscript`\u003C$fields template=' data-tiddler-$name$=\\\"$encoded_value$\\\"'>\u003C/$fields>` type=\\\"text/javascript\\\" data-module=\\\"yes\\\">$tw.modules.define(\\\"`\u003C$view field=\\\"title\\\" format=\\\"jsencoded\\\" />`\\\",\\\"`\u003C$view field=\\\"module-type\\\" format=\\\"jsencoded\\\" />`\\\",function(module,exports,require) {`\u003C$view field=\\\"text\\\" format=\\\"text\\\" />`});\\n\u003C/script>`\"},\"$:/core/templates/plain-text-tiddler\":{\"title\":\"$:/core/templates/plain-text-tiddler\",\"text\":\"\u003C$view field=\\\"text\\\" format=\\\"text\\\" />\"},\"$:/core/templates/raw-static-tiddler\":{\"title\":\"$:/core/templates/raw-static-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving tiddlers as static HTML\\n\\n-->\u003C$view field=\\\"text\\\" format=\\\"plainwikified\\\" />\"},\"$:/core/save/all\":{\"title\":\"$:/core/save/all\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\\\define saveTiddlerFilter()\\n[is[tiddler]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]] $(publishFilter)$\\n\\\\end\\n{{$:/core/templates/tiddlywiki5.html}}\\n\"},\"$:/core/save/empty\":{\"title\":\"$:/core/save/empty\",\"text\":\"\\\\define saveTiddlerFilter()\\n[is[system]] -[prefix[$:/state/popup/]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]]\\n\\\\end\\n{{$:/core/templates/tiddlywiki5.html}}\\n\"},\"$:/core/save/lazy-all\":{\"title\":\"$:/core/save/lazy-all\",\"text\":\"\\\\define saveTiddlerFilter()\\n[is[system]] -[prefix[$:/state/popup/]] -[[$:/HistoryList]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]] \\n\\\\end\\n\\\\define skinnySaveTiddlerFilter()\\n[!is[system]]\\n\\\\end\\n{{$:/core/templates/tiddlywiki5.html}}\\n\"},\"$:/core/save/lazy-images\":{\"title\":\"$:/core/save/lazy-images\",\"text\":\"\\\\define saveTiddlerFilter()\\n[is[tiddler]] -[prefix[$:/state/popup/]] -[[$:/HistoryList]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] -[!is[system]is[image]] +[sort[title]] \\n\\\\end\\n\\\\define skinnySaveTiddlerFilter()\\n[!is[system]is[image]]\\n\\\\end\\n{{$:/core/templates/tiddlywiki5.html}}\\n\"},\"$:/core/templates/server/static.sidebar.wikitext\":{\"title\":\"$:/core/templates/server/static.sidebar.wikitext\",\"text\":\"\\\\whitespace trim\\n\u003Cdiv class=\\\"tc-sidebar-scrollable\\\" style=\\\"overflow: auto;\\\">\\n\u003Cdiv class=\\\"tc-sidebar-header\\\">\\n\u003Ch1 class=\\\"tc-site-title\\\">\\n\u003C$transclude tiddler=\\\"$:/SiteTitle\\\"/>\\n\u003C/h1>\\n\u003Cdiv class=\\\"tc-site-subtitle\\\">\\n\u003C$transclude tiddler=\\\"$:/SiteSubtitle\\\"/>\\n\u003C/div>\\n\u003Ch2>\\n\u003C/h2>\\n\u003Cdiv class=\\\"tc-sidebar-lists\\\">\\n\u003C$list filter={{$:/DefaultTiddlers}}>\\n\u003Cdiv class=\\\"tc-menu-list-subitem\\\">\\n\u003C$link>\u003C$text text=\u003C\u003CcurrentTiddler>>/>\u003C/$link>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/div>\\n\u003C!-- Currently disabled the recent list as it is unweildy when the responsive narrow view kicks in\\n\u003Ch2>\\n{{$:/language/SideBar/Recent/Caption}}\\n\u003C/h2>\\n\u003Cdiv class=\\\"tc-sidebar-lists\\\">\\n\u003C$macrocall $name=\\\"timeline\\\" format={{$:/language/RecentChanges/DateFormat}}/>\\n\u003C/div>\\n\u003C/div>\\n\u003C/div>\\n-->\\n\"},\"$:/core/templates/server/static.tiddler.html\":{\"title\":\"$:/core/templates/server/static.tiddler.html\",\"text\":\"\\\\whitespace trim\\n\\\\define tv-wikilink-template() $uri_encoded$\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\u003Chtml>\\n\u003Chead>\\n\u003Cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n\u003Cmeta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"tiddlywiki-version\\\" content={{$:/core/templates/version}} />\\n\u003Cmeta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n\u003Cmeta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n\u003Cmeta name=\\\"format-detection\\\" content=\\\"telephone=no\\\">\\n\u003Clink id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n\u003Clink rel=\\\"stylesheet\\\" href=\\\"%24%3A%2Fcore%2Ftemplates%2Fstatic.template.css\\\">\\n\u003Ctitle>\u003C$view field=\\\"caption\\\" format=\\\"plainwikified\\\">\u003C$view field=\\\"title\\\"/>\u003C/$view>: \u003C$view tiddler=\\\"$:/core/wiki/title\\\" format=\\\"plainwikified\\\"/>\u003C/title>\\n\u003C/head>\\n\u003Cbody class=\\\"tc-body\\\">\\n\u003C$transclude tiddler=\\\"$:/core/templates/server/static.sidebar.wikitext\\\" mode=\\\"inline\\\"/>\\n\u003Csection class=\\\"tc-story-river\\\">\\n\u003Cdiv class=\\\"tc-tiddler-frame\\\">\\n\u003C$transclude tiddler=\\\"$:/core/templates/server/static.tiddler.wikitext\\\" mode=\\\"inline\\\"/>\\n\u003C/div>\\n\u003C/section>\\n\u003C/body>\\n\u003C/html>\"},\"$:/core/templates/server/static.tiddler.wikitext\":{\"title\":\"$:/core/templates/server/static.tiddler.wikitext\",\"text\":\"\\\\whitespace trim\\n\u003Cdiv class=\\\"tc-tiddler-title\\\">\\n\u003Cdiv class=\\\"tc-titlebar\\\">\\n\u003Ch2>\u003C$text text=\u003C\u003CcurrentTiddler>>/>\u003C/h2>\\n\u003C/div>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-subtitle\\\">\\n\u003C$link to={{!!modifier}}>\\n\u003C$view field=\\\"modifier\\\"/>\\n\u003C/$link> \u003C$view field=\\\"modified\\\" format=\\\"date\\\" template={{$:/language/Tiddler/DateFormat}}/>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-tags-wrapper\\\">\\n\u003C$list filter=\\\"[all[current]tags[]sort[title]]\\\">\\n\u003Ca href={{{ [\u003CcurrentTiddler>encodeuricomponent[]] }}}>\\n\u003C$macrocall $name=\\\"tag-pill\\\" tag=\u003C\u003CcurrentTiddler>>/>\\n\u003C/a>\\n\u003C/$list>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-tiddler-body\\\">\\n\u003C$transclude mode=\\\"block\\\"/>\\n\u003C/div>\\n\"},\"$:/core/templates/single.tiddler.window\":{\"title\":\"$:/core/templates/single.tiddler.window\",\"text\":\"\\\\whitespace trim\\n\\\\define containerClasses()\\ntc-page-container tc-page-view-$(storyviewTitle)$ tc-language-$(languageTitle)$\\n\\\\end\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\n\u003C$vars\\n\\ttv-config-toolbar-icons={{$:/config/Toolbar/Icons}}\\n\\ttv-config-toolbar-text={{$:/config/Toolbar/Text}}\\n\\ttv-config-toolbar-class={{$:/config/Toolbar/ButtonClass}}\\n\\ttv-show-missing-links={{$:/config/MissingLinks}}\\n\\tstoryviewTitle={{$:/view}}\\n\\tlanguageTitle={{{ [{$:/language}get[name]] }}}>\\n\\n\u003Cdiv class=\u003C\u003CcontainerClasses>>>\\n\\n\u003C$navigator story=\\\"$:/StoryList\\\" history=\\\"$:/HistoryList\\\">\\n\\n\u003C$transclude mode=\\\"block\\\"/>\\n\\n\u003C/$navigator>\\n\\n\u003C/div>\\n\\n\u003C/$vars>\\n\"},\"$:/core/templates/split-recipe\":{\"title\":\"$:/core/templates/split-recipe\",\"text\":\"\u003C$list filter=\\\"[!is[system]]\\\">\\ntiddler: \u003C$view field=\\\"title\\\" format=\\\"urlencoded\\\"/>.tid\\n\u003C/$list>\\n\"},\"$:/core/templates/static-tiddler\":{\"title\":\"$:/core/templates/static-tiddler\",\"text\":\"\u003Ca name=\u003C\u003CcurrentTiddler>>>\\n\u003C$transclude tiddler=\\\"$:/core/ui/ViewTemplate\\\"/>\\n\u003C/a>\"},\"$:/core/templates/static.area\":{\"title\":\"$:/core/templates/static.area\",\"text\":\"\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n{{{ [all[shadows+tiddlers]tag[$:/tags/RawStaticContent]!has[draft.of]] ||$:/core/templates/raw-static-tiddler}}}\\n{{$:/core/templates/static.content||$:/core/templates/html-tiddler}}\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\nThis file contains an encrypted ~TiddlyWiki. Enable ~JavaScript and enter the decryption password when prompted.\\n\u003C/$reveal>\\n\u003C!-- ensure splash screen isn't shown when JS is disabled -->\\n`\u003Cstyle>\\n.tc-remove-when-wiki-loaded {display: none;}\\n\u003C/style>`\\n\"},\"$:/core/templates/static.content\":{\"title\":\"$:/core/templates/static.content\",\"text\":\"\u003C!-- For Google, and people without JavaScript-->\\nThis [[TiddlyWiki|https://tiddlywiki.com]] contains the following tiddlers:\\n\\n\u003Cul>\\n\u003C$list filter=\u003C\u003CsaveTiddlerFilter>>>\\n\u003Cli>\u003C$view field=\\\"title\\\" format=\\\"text\\\">\u003C/$view>\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\"},\"$:/core/templates/static.template.css\":{\"title\":\"$:/core/templates/static.template.css\",\"text\":\"{{$:/boot/boot.css||$:/core/templates/plain-text-tiddler}}\\n\\n{{$:/core/ui/PageStylesheet||$:/core/templates/wikified-tiddler}}\\n\"},\"$:/core/templates/static.template.html\":{\"title\":\"$:/core/templates/static.template.html\",\"type\":\"text/vnd.tiddlywiki-html\",\"text\":\"\\\\define tv-wikilink-template() static/$uri_doubleencoded$.html\\n\\\\define tv-config-toolbar-icons() no\\n\\\\define tv-config-toolbar-text() no\\n\\\\define tv-config-toolbar-class() tc-btn-invisible\\n\\\\rules only filteredtranscludeinline transcludeinline\\n\u003C!doctype html>\\n\u003Chtml>\\n\u003Chead>\\n\u003Cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n\u003Cmeta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"tiddlywiki-version\\\" content=\\\"{{$:/core/templates/version}}\\\" />\\n\u003Cmeta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n\u003Cmeta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n\u003Cmeta name=\\\"format-detection\\\" content=\\\"telephone=no\\\">\\n\u003Clink id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n\u003Ctitle>{{$:/core/wiki/title}}\u003C/title>\\n\u003Cdiv id=\\\"styleArea\\\">\\n{{$:/boot/boot.css||$:/core/templates/css-tiddler}}\\n\u003C/div>\\n\u003Cstyle type=\\\"text/css\\\">\\n{{$:/core/ui/PageStylesheet||$:/core/templates/wikified-tiddler}}\\n\u003C/style>\\n\u003C/head>\\n\u003Cbody class=\\\"tc-body\\\">\\n{{$:/StaticBanner||$:/core/templates/html-tiddler}}\\n{{$:/core/ui/PageTemplate||$:/core/templates/html-tiddler}}\\n\u003C/body>\\n\u003C/html>\\n\"},\"$:/core/templates/static.tiddler.html\":{\"title\":\"$:/core/templates/static.tiddler.html\",\"text\":\"\\\\define tv-wikilink-template() $uri_doubleencoded$.html\\n\\\\define tv-config-toolbar-icons() no\\n\\\\define tv-config-toolbar-text() no\\n\\\\define tv-config-toolbar-class() tc-btn-invisible\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n`\u003C!doctype html>\\n\u003Chtml>\\n\u003Chead>\\n\u003Cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n\u003Cmeta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"tiddlywiki-version\\\" content=\\\"`{{$:/core/templates/version}}`\\\" />\\n\u003Cmeta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n\u003Cmeta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n\u003Cmeta name=\\\"format-detection\\\" content=\\\"telephone=no\\\">\\n\u003Clink id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n\u003Clink rel=\\\"stylesheet\\\" href=\\\"static.css\\\">\\n\u003Ctitle>`\u003C$view field=\\\"caption\\\">\u003C$view field=\\\"title\\\"/>\u003C/$view>: {{$:/core/wiki/title}}`\u003C/title>\\n\u003C/head>\\n\u003Cbody class=\\\"tc-body\\\">\\n`{{$:/StaticBanner||$:/core/templates/html-tiddler}}`\\n\u003Csection class=\\\"tc-story-river tc-static-story-river\\\">\\n`\u003C$view tiddler=\\\"$:/core/ui/ViewTemplate\\\" format=\\\"htmlwikified\\\"/>`\\n\u003C/section>\\n\u003C/body>\\n\u003C/html>\\n`\\n\"},\"$:/core/templates/store.area.template.html\":{\"title\":\"$:/core/templates/store.area.template.html\",\"text\":\"\\\\whitespace trim\\n\u003C!-- Unencrypted -->\\n\u003C$list filter=\\\"[[$:/isEncrypted]get[text]else[no]match[no]]\\\">\\n    \u003C$list filter=\\\"[[storeAreaFormat]is[variable]getvariable[]else[json]match[json]]\\\">\\n        \u003C!-- New-style JSON store area, with an old-style store area for compatibility with v5.1.x tooling -->\\n        `\u003Cscript class=\\\"tiddlywiki-tiddler-store\\\" type=\\\"application/json\\\">[`\\n            \u003C$vars newline={{{ [charcode[10]] }}}>\\n                \u003C$text text=\u003C\u003Cnewline>>/>\\n                \u003C$list filter=\u003C\u003CsaveTiddlerFilter>> counter=\\\"counter\\\" template=\\\"$:/core/templates/html-json-tiddler\\\"/>\\n                \u003C$vars numTiddlers={{{ [subfilter\u003CsaveTiddlerFilter>count[]] }}}>\\n                    \u003C$list filter={{{ [\u003CskinnySaveTiddlerFilter>] }}} counter=\\\"counter\\\" template=\\\"$:/core/templates/html-json-skinny-tiddler\\\"/>\\n                \u003C/$vars>\\n                \u003C$text text=\u003C\u003Cnewline>>/>\\n            \u003C/$vars>\\n        `]\u003C/script>`\\n        `\u003Cdiv id=\\\"storeArea\\\" style=\\\"display:none;\\\">`\\n        `\u003C/div>`\\n    \u003C/$list>\\n    \u003C$list filter=\\\"[[storeAreaFormat]is[variable]getvariable[]else[json]match[div]]\\\">\\n        \u003C!-- Old-style DIV/PRE-based store area -->\\n        \u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n            `\u003Cdiv id=\\\"storeArea\\\" style=\\\"display:none;\\\">`\\n                \u003C$list filter=\u003C\u003CsaveTiddlerFilter>> template=\\\"$:/core/templates/html-div-tiddler\\\"/>\\n                \u003C$list filter={{{ [\u003CskinnySaveTiddlerFilter>] }}} template=\\\"$:/core/templates/html-div-skinny-tiddler\\\"/>\\n            `\u003C/div>`\\n        \u003C/$reveal>\\n    \u003C/$list>\\n\u003C/$list>\\n\u003C!-- Encrypted -->\\n\u003C$list filter=\\\"[[$:/isEncrypted]get[text]else[no]match[yes]]\\\">\\n    `\u003C!--~~ Encrypted tiddlers ~~-->`\\n    `\u003Cpre id=\\\"encryptedStoreArea\\\" type=\\\"text/plain\\\" style=\\\"display:none;\\\">`\\n        \u003C$encrypt filter=\u003C\u003CsaveTiddlerFilter>>/>\\n    `\u003C/pre>`\\n\u003C/$list>\"},\"$:/core/templates/tid-tiddler\":{\"title\":\"$:/core/templates/tid-tiddler\",\"text\":\"\u003C!--\\n\\nThis template is used for saving tiddlers in TiddlyWeb *.tid format\\n\\n-->\u003C$fields exclude='text bag' template='$name$: $value$\\n'>\u003C/$fields>`\\n`\u003C$view field=\\\"text\\\" format=\\\"text\\\" />\"},\"$:/core/templates/tiddler-metadata\":{\"title\":\"$:/core/templates/tiddler-metadata\",\"text\":\"\u003C!--\\n\\nThis template is used for saving tiddler metadata *.meta files\\n\\n-->\u003C$fields exclude='text bag' template='$name$: $value$\\n'>\u003C/$fields>\"},\"$:/core/templates/tiddlywiki5.html\":{\"title\":\"$:/core/templates/tiddlywiki5.html\",\"text\":\"\u003C$set name=\\\"saveTiddlerAndShadowsFilter\\\" filter=\\\"[subfilter\u003CsaveTiddlerFilter>] [subfilter\u003CsaveTiddlerFilter>plugintiddlers[]]\\\">\\n`\u003C!doctype html>\\n`{{$:/core/templates/MOTW.html}}`\u003Chtml lang=\\\"`\u003C$text text={{{ [{$:/language}get[name]] }}}/>`\\\">\\n\u003Chead>\\n\u003Cmeta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n\u003C!--~~ Raw markup for the top of the head section ~~-->\\n`{{{ [enlist\u003CsaveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/TopHead]] ||$:/core/templates/raw-static-tiddler}}}`\\n\u003Cmeta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/>\\n\u003Cmeta name=\\\"application-name\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n\u003Cmeta name=\\\"tiddlywiki-version\\\" content=\\\"`{{$:/core/templates/version}}`\\\" />\\n\u003Cmeta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n\u003Cmeta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n\u003Cmeta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n\u003Cmeta name=\\\"format-detection\\\" content=\\\"telephone=no\\\" />\\n\u003Cmeta name=\\\"copyright\\\" content=\\\"`{{$:/core/copyright.txt}}`\\\" />\\n\u003Clink id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n\u003Ctitle>`{{$:/core/wiki/title}}`\u003C/title>\\n\u003C!--~~ This is a Tiddlywiki file. The points of interest in the file are marked with this pattern ~~-->\\n\\n\u003C!--~~ Raw markup ~~-->\\n`{{{ [enlist\u003CsaveTiddlerAndShadowsFilter>tag[$:/core/wiki/rawmarkup]] ||$:/core/templates/plain-text-tiddler}}}\\n{{{ [enlist\u003CsaveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkup]] ||$:/core/templates/plain-text-tiddler}}}\\n{{{ [enlist\u003CsaveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified]] ||$:/core/templates/raw-static-tiddler}}}`\\n\u003C/head>\\n\u003Cbody class=\\\"tc-body\\\">\\n\u003C!--~~ Raw markup for the top of the body section ~~-->\\n`{{{ [enlist\u003CsaveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/TopBody]] ||$:/core/templates/raw-static-tiddler}}}`\\n\u003C!--~~ Static styles ~~-->\\n\u003Cdiv id=\\\"styleArea\\\">\\n`{{$:/boot/boot.css||$:/core/templates/css-tiddler}}`\\n\u003C/div>\\n\u003C!--~~ Static content for Google and browsers without JavaScript ~~-->\\n\u003Cnoscript>\\n\u003Cdiv id=\\\"splashArea\\\">\\n`{{$:/core/templates/static.area}}`\\n\u003C/div>\\n\u003C/noscript>\\n\u003C!--~~ Ordinary tiddlers ~~-->\\n`{{$:/core/templates/store.area.template.html}}`\\n\u003C!--~~ Library modules ~~-->\\n\u003Cdiv id=\\\"libraryModules\\\" style=\\\"display:none;\\\">\\n`{{{ [is[system]type[application/javascript]library[yes]] ||$:/core/templates/javascript-tiddler}}}`\\n\u003C/div>\\n\u003C!--~~ Boot kernel prologue ~~-->\\n\u003Cdiv id=\\\"bootKernelPrefix\\\" style=\\\"display:none;\\\">\\n`{{ $:/boot/bootprefix.js ||$:/core/templates/javascript-tiddler}}`\\n\u003C/div>\\n\u003C!--~~ Boot kernel ~~-->\\n\u003Cdiv id=\\\"bootKernel\\\" style=\\\"display:none;\\\">\\n`{{ $:/boot/boot.js ||$:/core/templates/javascript-tiddler}}`\\n\u003C/div>\\n\u003C!--~~ Raw markup for the bottom of the body section ~~-->\\n`{{{ [enlist\u003CsaveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/BottomBody]] ||$:/core/templates/raw-static-tiddler}}}`\\n\u003C/body>\\n\u003C/html>`\\n\"},\"$:/core/templates/version\":{\"title\":\"$:/core/templates/version\",\"text\":\"\u003C\u003Cversion>>\"},\"$:/core/templates/wikified-tiddler\":{\"title\":\"$:/core/templates/wikified-tiddler\",\"text\":\"\u003C$transclude />\"},\"$:/core/ui/AboveStory/tw2-plugin-check\":{\"title\":\"$:/core/ui/AboveStory/tw2-plugin-check\",\"tags\":\"$:/tags/AboveStory\",\"text\":\"\\\\define lingo-base() $:/language/AboveStory/ClassicPlugin/\\n\u003C$list filter=\\\"[all[system+tiddlers]tag[systemConfig]limit[1]]\\\">\\n\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n\u003C\u003Clingo Warning>>\\n\\n\u003Cul>\\n\\n\u003C$list filter=\\\"[all[system+tiddlers]tag[systemConfig]]\\\">\\n\\n\u003Cli>\\n\\n\u003C$link>\u003C$view field=\\\"title\\\"/>\u003C/$link>\\n\\n\u003C/li>\\n\\n\u003C/$list>\\n\\n\u003C/ul>\\n\\n\u003C/div>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/Actions/new-image\":{\"title\":\"$:/core/ui/Actions/new-image\",\"tags\":\"$:/tags/Actions\",\"description\":\"create a new image tiddler\",\"text\":\"\\\\define get-type()\\nimage/$(imageType)$\\n\\\\end\\n\\\\define get-tags() $(textFieldTags)$ $(tagsFieldTags)$\\n\u003C$vars imageType={{$:/config/NewImageType}} textFieldTags={{$:/config/NewJournal/Tags}} tagsFieldTags={{$:/config/NewJournal/Tags!!tags}}>\\n\u003C$action-sendmessage $message=\\\"tm-new-tiddler\\\" type=\u003C\u003Cget-type>> tags=\u003C\u003Cget-tags>>/>\\n\u003C/$vars>\\n\"},\"$:/core/ui/Actions/new-journal\":{\"title\":\"$:/core/ui/Actions/new-journal\",\"tags\":\"$:/tags/Actions\",\"description\":\"create a new journal tiddler\",\"text\":\"\\\\define get-tags() $(textFieldTags)$ $(tagsFieldTags)$\\n\u003C$vars journalTitleTemplate={{$:/config/NewJournal/Title}} textFieldTags={{$:/config/NewJournal/Tags}} tagsFieldTags={{$:/config/NewJournal/Tags!!tags}} journalText={{$:/config/NewJournal/Text}}>\\n\u003C$wikify name=\\\"journalTitle\\\" text=\\\"\\\"\\\"\u003C$macrocall $name=\\\"now\\\" format=\u003C\u003CjournalTitleTemplate>>/>\\\"\\\"\\\">\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CjournalTitle>> text=\\\"\\\">\\n\u003C$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=\u003C\u003CjournalTitle>> tags=\u003C\u003Cget-tags>> text={{{ [\u003CjournalTitle>get[]] }}}/>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CjournalTitle>> text=\\\"\\\">\\n\u003C$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=\u003C\u003CjournalTitle>> tags=\u003C\u003Cget-tags>> text=\u003C\u003CjournalText>>/>\\n\u003C/$reveal>\\n\u003C/$wikify>\\n\u003C/$vars>\\n\"},\"$:/core/ui/Actions/new-tiddler\":{\"title\":\"$:/core/ui/Actions/new-tiddler\",\"tags\":\"$:/tags/Actions\",\"description\":\"create a new empty tiddler\",\"text\":\"\\\\define get-tags() $(textFieldTags)$ $(tagsFieldTags)$\\n\u003C$vars textFieldTags={{$:/config/NewTiddler/Tags}} tagsFieldTags={{$:/config/NewTiddler/Tags!!tags}}>\\n\u003C$action-sendmessage $message=\\\"tm-new-tiddler\\\" tags=\u003C\u003Cget-tags>>/>\\n\u003C/$vars>\\n\"},\"$:/core/ui/AdvancedSearch/Filter\":{\"title\":\"$:/core/ui/AdvancedSearch/Filter\",\"tags\":\"$:/tags/AdvancedSearch\",\"caption\":\"{{$:/language/Search/Filter/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/Search/\\n\\\\define set-next-input-tab(beforeafter:\\\"after\\\") \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab--1498284803\\\" tag=\\\"$:/tags/AdvancedSearch\\\" beforeafter=\\\"$beforeafter$\\\" defaultState=\\\"$:/core/ui/AdvancedSearch/System\\\" actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define cancel-search-actions() \u003C$list filter=\\\"[{$:/temp/advancedsearch/input}!match{$:/temp/advancedsearch}]\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-deletetiddler $filter=\\\"[[$:/temp/advancedsearch]] [[$:/temp/advancedsearch/input]] [[$:/temp/advancedsearch/selected-item]]\\\" />\\\"\\\"\\\">\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text={{$:/temp/advancedsearch}}/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\u003C/$list>\\n\\n\\\\define input-accept-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\\"\\\"\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\n\\n\\\\define input-accept-variant-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\\"\\\"\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\n\\n\u003C\u003Clingo Filter/Hint>>\\n\\n\u003Cdiv class=\\\"tc-search tc-advanced-search\\\">\\n\u003C$keyboard key=\\\"((input-tab-right))\\\" actions=\u003C\u003Cset-next-input-tab>>>\\n\u003C$keyboard key=\\\"((input-tab-left))\\\" actions=\u003C\u003Cset-next-input-tab \\\"before\\\">>>\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\\\"$:/temp/advancedsearch/input\\\" storeTitle=\\\"$:/temp/advancedsearch\\\" \\n\\t\\trefreshTitle=\\\"$:/temp/advancedsearch/refresh\\\" selectionStateTitle=\\\"$:/temp/advancedsearch/selected-item\\\" type=\\\"search\\\" \\n\\t\\ttag=\\\"input\\\" focus={{$:/config/Search/AutoFocus}} configTiddlerFilter=\\\"[[$:/temp/advancedsearch]]\\\" firstSearchFilterField=\\\"text\\\" \\n\\t\\tinputAcceptActions=\u003C\u003Cinput-accept-actions>> inputAcceptVariantActions=\u003C\u003Cinput-accept-variant-actions>> \\n\\t\\tinputCancelActions=\u003C\u003Ccancel-search-actions>>/>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/AdvancedSearch/FilterButton]!has[draft.of]]\\\">\u003C$transclude/>\u003C/$list>\\n\u003C/div>\\n\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$set name=\\\"resultCount\\\" value=\\\"\\\"\\\"\u003C$count filter={{$:/temp/advancedsearch}}/>\\\"\\\"\\\">\\n\u003Cdiv class=\\\"tc-search-results\\\">\\n\u003C\u003Clingo Filter/Matches>>\\n\u003C$list filter={{$:/temp/advancedsearch}}>\\n\u003Cspan class={{{[\u003CcurrentTiddler>addsuffix[-primaryList]] -[[$:/temp/advancedsearch/selected-item]get[text]] +[then[]else[tc-list-item-selected]] }}}>\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$set>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/clear\":{\"title\":\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/clear\",\"tags\":\"$:/tags/AdvancedSearch/FilterButton\",\"text\":\"\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C\u003Ccancel-search-actions>>\\n\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\"\\\"\\\".tc-advanced-search input\\\"\\\"\\\" />\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/delete\":{\"title\":\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/delete\",\"tags\":\"$:/tags/AdvancedSearch/FilterButton\",\"text\":\"\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/filterDeleteDropdown\\\">> class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/delete-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/filterDeleteDropdown\\\">> type=\\\"popup\\\" position=\\\"belowleft\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown-wrapper\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n\u003Cdiv class=\\\"tc-dropdown-item-plain\\\">\\n\u003C$set name=\\\"resultCount\\\" value=\\\"\\\"\\\"\u003C$count filter={{$:/temp/advancedsearch}}/>\\\"\\\"\\\">\\nAre you sure you wish to delete \u003C\u003CresultCount>> tiddler(s)?\\n\u003C/$set>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-dropdown-item-plain\\\">\\n\u003C$button class=\\\"tc-btn\\\">\\n\u003C$action-deletetiddler $filter={{$:/temp/advancedsearch}}/>\\nDelete these tiddlers\\n\u003C/$button>\\n\u003C/div>\\n\u003C/div>\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/dropdown\":{\"title\":\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/dropdown\",\"tags\":\"$:/tags/AdvancedSearch/FilterButton\",\"text\":\"\u003Cspan class=\\\"tc-popup-keep\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/filterDropdown\\\">> class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/down-arrow}}\\n\u003C/$button>\\n\u003C/span>\\n\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/filterDropdown\\\">> type=\\\"popup\\\" position=\\\"belowleft\\\" animate=\\\"yes\\\">\\n\u003C$set name=\\\"tv-show-missing-links\\\" value=\\\"yes\\\">\\n\u003C$linkcatcher actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch\\\" text=\u003C\u003CnavigateTo>>/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text=\u003C\u003CnavigateTo>>/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param='.tc-advanced-search input' />\\\"\\\"\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown-wrapper\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Filter]]\\\">\u003C$link to={{!!filter}}>\u003C$transclude field=\\\"description\\\"/>\u003C/$link>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/div>\\n\u003C/$linkcatcher>\\n\u003C/$set>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/export\":{\"title\":\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/export\",\"tags\":\"$:/tags/AdvancedSearch/FilterButton\",\"text\":\"\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$macrocall $name=\\\"exportButton\\\" exportFilter={{$:/temp/advancedsearch}} lingoBase=\\\"$:/language/Buttons/ExportTiddlers/\\\"/>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/Shadows\":{\"title\":\"$:/core/ui/AdvancedSearch/Shadows\",\"tags\":\"$:/tags/AdvancedSearch\",\"caption\":\"{{$:/language/Search/Shadows/Caption}}\",\"first-search-filter\":\"[all[shadows]search\u003CuserInput>sort[title]limit[250]] -[[$:/temp/advancedsearch]] -[[$:/temp/advancedsearch/input]]\",\"text\":\"\\\\define lingo-base() $:/language/Search/\\n\\n\\\\define set-next-input-tab(beforeafter:\\\"after\\\") \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab--1498284803\\\" tag=\\\"$:/tags/AdvancedSearch\\\" beforeafter=\\\"$beforeafter$\\\" defaultState=\\\"$:/core/ui/AdvancedSearch/System\\\" actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define cancel-search-actions() \u003C$list filter=\\\"[{$:/temp/advancedsearch}!match{$:/temp/advancedsearch/input}]\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-deletetiddler $filter=\\\"[[$:/temp/advancedsearch]] [[$:/temp/advancedsearch/input]] [[$:/temp/advancedsearch/selected-item]]\\\" />\\\"\\\"\\\">\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text={{$:/temp/advancedsearch}}/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\u003C/$list>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\"\\\"\\\".tc-advanced-search input\\\"\\\"\\\"/>\\n\\n\\\\define input-accept-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\\"\\\"\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\n\\n\\\\define input-accept-variant-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\\"\\\"\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\n\\n\u003C\u003Clingo Shadows/Hint>>\\n\\n\u003Cdiv class=\\\"tc-search\\\">\\n\u003C$keyboard key=\\\"((input-tab-right))\\\" actions=\u003C\u003Cset-next-input-tab>>>\\n\u003C$keyboard key=\\\"((input-tab-left))\\\" actions=\u003C\u003Cset-next-input-tab \\\"before\\\">>>\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\\\"$:/temp/advancedsearch/input\\\" storeTitle=\\\"$:/temp/advancedsearch\\\"\\n\\t\\trefreshTitle=\\\"$:/temp/advancedsearch/refresh\\\" selectionStateTitle=\\\"$:/temp/advancedsearch/selected-item\\\" type=\\\"search\\\"\\n\\t\\ttag=\\\"input\\\" focus={{$:/config/Search/AutoFocus}} configTiddlerFilter=\\\"[[$:/core/ui/AdvancedSearch/Shadows]]\\\"\\n\\t\\tinputCancelActions=\u003C\u003Ccancel-search-actions>> inputAcceptActions=\u003C\u003Cinput-accept-actions>> \\n\\t\\tinputAcceptVariantActions=\u003C\u003Cinput-accept-variant-actions>>  filterMinLength={{$:/config/Search/MinLength}}/>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C\u003Ccancel-search-actions>>\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/div>\\n\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\\n\u003C$list filter=\\\"[{$:/temp/advancedsearch}minlength{$:/config/Search/MinLength}limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003Cdiv class=\\\"tc-search-results\\\">{{$:/language/Search/Search/TooShort}}\u003C/div>\\\"\\\"\\\" variable=\\\"listItem\\\">\\n\\n\u003C$set name=\\\"resultCount\\\" value=\\\"\\\"\\\"\u003C$count filter=\\\"[all[shadows]search{$:/temp/advancedsearch}] -[[$:/temp/advancedsearch]] -[[$:/temp/advancedsearch/input]]\\\"/>\\\"\\\"\\\">\\n\\n\u003Cdiv class=\\\"tc-search-results\\\">\\n\\n\u003C\u003Clingo Shadows/Matches>>\\n\\n\u003C$list filter=\\\"[all[shadows]search{$:/temp/advancedsearch}sort[title]limit[250]] -[[$:/temp/advancedsearch]] -[[$:/temp/advancedsearch/input]]\\\">\\n\u003Cspan class={{{[\u003CcurrentTiddler>addsuffix[-primaryList]] -[[$:/temp/advancedsearch/selected-item]get[text]] +[then[]else[tc-list-item-selected]] }}}>\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/span>\\n\u003C/$list>\\n\\n\u003C/div>\\n\\n\u003C/$set>\\n\\n\u003C/$list>\\n\\n\u003C/$reveal>\\n\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"match\\\" text=\\\"\\\">\\n\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/Standard\":{\"title\":\"$:/core/ui/AdvancedSearch/Standard\",\"tags\":\"$:/tags/AdvancedSearch\",\"caption\":\"{{$:/language/Search/Standard/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/Search/\\n\\\\define set-next-input-tab(beforeafter:\\\"after\\\") \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab--1498284803\\\" tag=\\\"$:/tags/AdvancedSearch\\\" beforeafter=\\\"$beforeafter$\\\" defaultState=\\\"$:/core/ui/AdvancedSearch/System\\\" actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define next-search-tab(beforeafter:\\\"after\\\") \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab/search-results/advancedsearch\\\" tag=\\\"$:/tags/SearchResults\\\" beforeafter=\\\"$beforeafter$\\\" defaultState={{$:/config/SearchResults/Default}} actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/standard/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define cancel-search-actions() \u003C$list filter=\\\"[{$:/temp/advancedsearch}!match{$:/temp/advancedsearch/input}]\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-deletetiddler $filter=\\\"[[$:/temp/advancedsearch]] [[$:/temp/advancedsearch/input]] [[$:/temp/advancedsearch/selected-item]]\\\" />\\\"\\\"\\\">\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text={{$:/temp/advancedsearch}}/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\u003C/$list>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\"\\\"\\\".tc-advanced-search input\\\"\\\"\\\"/>\\n\\n\\\\define input-accept-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\\"\\\"\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\n\\n\\\\define input-accept-variant-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\\"\\\"\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\n\\n\u003C\u003Clingo Standard/Hint>>\\n\\n\u003Cdiv class=\\\"tc-search\\\">\\n\u003C$keyboard key=\\\"((input-tab-right))\\\" actions=\u003C\u003Cset-next-input-tab>>>\\n\u003C$keyboard key=\\\"((input-tab-left))\\\" actions=\u003C\u003Cset-next-input-tab \\\"before\\\">>>\\n\u003C$keyboard key=\\\"shift-alt-Right\\\" actions=\u003C\u003Cnext-search-tab>>>\\n\u003C$keyboard key=\\\"shift-alt-Left\\\" actions=\u003C\u003Cnext-search-tab \\\"before\\\">>>\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\\\"$:/temp/advancedsearch/input\\\" storeTitle=\\\"$:/temp/advancedsearch\\\"\\n\\t\\trefreshTitle=\\\"$:/temp/advancedsearch/refresh\\\" selectionStateTitle=\\\"$:/temp/advancedsearch/selected-item\\\" type=\\\"search\\\"\\n\\t\\ttag=\\\"input\\\" focus={{$:/config/Search/AutoFocus}} inputCancelActions=\u003C\u003Ccancel-search-actions>> \\n\\t\\tinputAcceptActions=\u003C\u003Cinput-accept-actions>> inputAcceptVariantActions=\u003C\u003Cinput-accept-variant-actions>> \\n\\t\\tconfigTiddlerFilter=\\\"[[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}]\\\"\\n\\t\\tfilterMinLength={{$:/config/Search/MinLength}}/>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C\u003Ccancel-search-actions>>\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/div>\\n\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$list filter=\\\"[{$:/temp/advancedsearch}minlength{$:/config/Search/MinLength}limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003Cdiv class=\\\"tc-search-results\\\">{{$:/language/Search/Search/TooShort}}\u003C/div>\\\"\\\"\\\" variable=\\\"listItem\\\">\\n\u003C$vars userInput={{{ [[$:/temp/advancedsearch]get[text]] }}} configTiddler={{{ [[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}] }}} searchListState=\\\"$:/temp/advancedsearch/selected-item\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]butfirst[]limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]]\\\">\\n\u003C$transclude/>\\n\u003C/$list>\\n\\\"\\\"\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]]\\\" default={{$:/config/SearchResults/Default}} actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/standard/currentTab\\\" text=\u003C\u003CcurrentTab>>/>\\\"\\\"\\\" explicitState=\\\"$:/state/tab/search-results/advancedsearch\\\" />\\n\u003C/$list>\\n\u003C/$vars>\\n\u003C/$list>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/AdvancedSearch/System\":{\"title\":\"$:/core/ui/AdvancedSearch/System\",\"tags\":\"$:/tags/AdvancedSearch\",\"caption\":\"{{$:/language/Search/System/Caption}}\",\"first-search-filter\":\"[is[system]search\u003CuserInput>sort[title]limit[250]] -[[$:/temp/advancedsearch]] -[[$:/temp/advancedsearch/input]] -[[$:/temp/advancedsearch/selected-item]]\",\"text\":\"\\\\define lingo-base() $:/language/Search/\\n\\\\define set-next-input-tab(beforeafter:\\\"after\\\",stateTitle,tag,defaultState,currentTabTiddler) \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab--1498284803\\\" tag=\\\"$:/tags/AdvancedSearch\\\" beforeafter=\\\"$beforeafter$\\\" defaultState=\\\"$:/core/ui/AdvancedSearch/System\\\" actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define cancel-search-actions() \u003C$list filter=\\\"[{$:/temp/advancedsearch}!match{$:/temp/advancedsearch/input}]\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-deletetiddler $filter=\\\"[[$:/temp/advancedsearch]] [[$:/temp/advancedsearch/input]] [[$:/temp/advancedsearch/selected-item]]\\\" />\\\"\\\"\\\">\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text={{$:/temp/advancedsearch}}/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\u003C/$list>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\"\\\"\\\".tc-advanced-search input\\\"\\\"\\\"/>\\n\\n\\\\define input-accept-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\\"\\\"\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\n\\n\\\\define input-accept-variant-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\\"\\\"\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\n\\n\u003C\u003Clingo System/Hint>>\\n\\n\u003Cdiv class=\\\"tc-search\\\">\\n\u003C$keyboard key=\\\"((input-tab-right))\\\" actions=\u003C\u003Cset-next-input-tab>>>\\n\u003C$keyboard key=\\\"((input-tab-left))\\\" actions=\u003C\u003Cset-next-input-tab \\\"before\\\">>>\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\\\"$:/temp/advancedsearch/input\\\" storeTitle=\\\"$:/temp/advancedsearch\\\"\\n\\t\\trefreshTitle=\\\"$:/temp/advancedsearch/refresh\\\" selectionStateTitle=\\\"$:/temp/advancedsearch/selected-item\\\"\\n\\t\\ttype=\\\"search\\\" tag=\\\"input\\\" focus={{$:/config/Search/AutoFocus}} configTiddlerFilter=\\\"[[$:/core/ui/AdvancedSearch/System]]\\\"\\n\\t\\tinputCancelActions=\u003C\u003Ccancel-search-actions>> inputAcceptActions=\u003C\u003Cinput-accept-actions>> \\n\\t\\tinputAcceptVariantActions=\u003C\u003Cinput-accept-variant-actions>> filterMinLength={{$:/config/Search/MinLength}}/>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C\u003Ccancel-search-actions>>\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/div>\\n\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\\n\u003C$list filter=\\\"[{$:/temp/advancedsearch}minlength{$:/config/Search/MinLength}limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003Cdiv class=\\\"tc-search-results\\\">{{$:/language/Search/Search/TooShort}}\u003C/div>\\\"\\\"\\\" variable=\\\"listItem\\\">\\n\\n\u003C$set name=\\\"resultCount\\\" value=\\\"\\\"\\\"\u003C$count filter=\\\"[is[system]search{$:/temp/advancedsearch}] -[[$:/temp/advancedsearch]] -[[$:/temp/advancedsearch/input]] -[[$:/temp/advancedsearch/selected-item]]\\\"/>\\\"\\\"\\\">\\n\\n\u003Cdiv class=\\\"tc-search-results\\\">\\n\\n\u003C\u003Clingo System/Matches>>\\n\\n\u003C$list filter=\\\"[is[system]search{$:/temp/advancedsearch}sort[title]limit[250]] -[[$:/temp/advancedsearch]] -[[$:/temp/advancedsearch/input]] -[[$:/temp/advancedsearch/selected-item]]\\\">\\n\u003Cspan class={{{[\u003CcurrentTiddler>addsuffix[-primaryList]] -[[$:/temp/advancedsearch/selected-item]get[text]] +[then[]else[tc-list-item-selected]] }}}>\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/span>\\n\u003C/$list>\\n\\n\u003C/div>\\n\\n\u003C/$set>\\n\\n\u003C/$list>\\n\\n\u003C/$reveal>\\n\\n\u003C$reveal state=\\\"$:/temp/advancedsearch\\\" type=\\\"match\\\" text=\\\"\\\">\\n\\n\u003C/$reveal>\\n\"},\"$:/AdvancedSearch\":{\"title\":\"$:/AdvancedSearch\",\"icon\":\"$:/core/images/advanced-search-button\",\"color\":\"#bbb\",\"text\":\"\u003Cdiv class=\\\"tc-advanced-search\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/AdvancedSearch]!has[draft.of]]\\\" default=\\\"$:/core/ui/AdvancedSearch/System\\\" actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/advancedsearch/currentTab\\\" text=\u003C\u003CcurrentTab>>/>\\\"\\\"\\\" explicitState=\\\"$:/state/tab--1498284803\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/AlertTemplate\":{\"title\":\"$:/core/ui/AlertTemplate\",\"text\":\"\u003Cdiv class=\\\"tc-alert\\\">\\n\u003Cdiv class=\\\"tc-alert-toolbar\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\u003C$action-deletetiddler $tiddler=\u003C\u003CcurrentTiddler>>/>{{$:/core/images/cancel-button}}\u003C/$button>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-alert-subtitle\\\">\\n\u003C$wikify name=\\\"format\\\" text=\u003C\u003Clingo Tiddler/DateFormat>>>\\n\u003C$view field=\\\"component\\\"/> - \u003C$view field=\\\"modified\\\" format=\\\"date\\\" template=\u003C\u003Cformat>>/> \u003C$reveal type=\\\"nomatch\\\" state=\\\"!!count\\\" text=\\\"\\\">\u003Cspan class=\\\"tc-alert-highlight\\\">({{$:/language/Count}}: \u003C$view field=\\\"count\\\"/>)\u003C/span>\u003C/$reveal>\\n\u003C/$wikify>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-alert-body\\\">\\n\\n\u003C$transclude/>\\n\\n\u003C/div>\\n\u003C/div>\\n\"},\"$:/core/ui/BinaryWarning\":{\"title\":\"$:/core/ui/BinaryWarning\",\"text\":\"\\\\define lingo-base() $:/language/BinaryWarning/\\n\u003C\u003Clingo Prompt>>\\n\"},\"$:/core/ui/Components/plugin-info\":{\"title\":\"$:/core/ui/Components/plugin-info\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Plugins/\\n\\n\\\\define popup-state-macro()\\n$(qualified-state)$-$(currentTiddler)$\\n\\\\end\\n\\n\\\\define tabs-state-macro()\\n$(popup-state)$-$(pluginInfoType)$\\n\\\\end\\n\\n\\\\define plugin-icon-title()\\n$(currentTiddler)$/icon\\n\\\\end\\n\\n\\\\define plugin-disable-title()\\n$:/config/Plugins/Disabled/$(currentTiddler)$\\n\\\\end\\n\\n\\\\define plugin-table-body(type,disabledMessage,default-popup-state)\\n\\\\whitespace trim\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-toggle\\\">\\n\\t\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cpopup-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-popup-state$\\\"\\\"\\\">\\n\\t\\t\u003C$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=\u003C\u003Cpopup-state>> setTo=\\\"yes\\\">\\n\\t\\t\\t{{$:/core/images/chevron-right}}\\n\\t\\t\u003C/$button>\\n\\t\u003C/$reveal>\\n\\t\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cpopup-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-popup-state$\\\"\\\"\\\">\\n\\t\\t\u003C$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=\u003C\u003Cpopup-state>> setTo=\\\"no\\\">\\n\\t\\t\\t{{$:/core/images/chevron-down}}\\n\\t\\t\u003C/$button>\\n\\t\u003C/$reveal>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-icon\\\">\\n\\t\u003C$transclude tiddler=\u003C\u003CcurrentTiddler>> subtiddler=\u003C\u003Cplugin-icon-title>>>\\n\\t\\t\u003C$transclude tiddler=\\\"$:/core/images/plugin-generic-$type$\\\"/>\\n\\t\u003C/$transclude>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-description\\\">\\n\\t\u003Ch1>\\n\\t\\t''\u003C$text text={{{ [\u003CcurrentTiddler>get[name]] ~[\u003CcurrentTiddler>split[/]last[1]] }}}/>'':&nbsp;\u003C$view field=\\\"description\\\">\u003C$view field=\\\"title\\\"/>\u003C/$view>&nbsp;$disabledMessage$\\n\\t\u003C/h1>\\n\\t\u003Ch2>\\n\\t\\t\u003C$view field=\\\"title\\\"/>\\n\\t\u003C/h2>\\n\\t\u003Ch2>\\n\\t\\t\u003Cdiv>\u003Cem>\u003C$view field=\\\"version\\\"/>\u003C/em>\u003C/div>\\n\\t\u003C/h2>\\n\u003C/div>\\n\\\\end\\n\\n\\\\define plugin-info(type,default-popup-state)\\n\\\\whitespace trim\\n\u003C$set name=\\\"popup-state\\\" value=\u003C\u003Cpopup-state-macro>>>\\n\\t\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cplugin-disable-title>> text=\\\"yes\\\">\\n\\t\\t\u003C$link to={{!!title}} class=\\\"tc-plugin-info\\\">\\n\\t\\t\\t\u003C\u003Cplugin-table-body type:\\\"$type$\\\" default-popup-state:\\\"\\\"\\\"$default-popup-state$\\\"\\\"\\\">>\\n\\t\\t\u003C/$link>\\n\\t\u003C/$reveal>\\n\\t\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cplugin-disable-title>> text=\\\"yes\\\">\\n\\t\\t\u003C$link to={{!!title}} class=\\\"tc-plugin-info tc-plugin-info-disabled\\\">\\n\\t\\t\\t\u003C\u003Cplugin-table-body type:\\\"$type$\\\" default-popup-state:\\\"\\\"\\\"$default-popup-state$\\\"\\\"\\\" disabledMessage:\\\"\u003C$macrocall $name='lingo' title='Disabled/Status'/>\\\">>\\n\\t\\t\u003C/$link>\\n\\t\u003C/$reveal>\\n\\t\u003C$reveal type=\\\"match\\\" text=\\\"yes\\\" state=\u003C\u003Cpopup-state>> default=\\\"\\\"\\\"$default-popup-state$\\\"\\\"\\\">\\n\\t\\t\u003Cdiv class=\\\"tc-plugin-info-dropdown\\\">\\n\\t\\t\\t\u003Cdiv class=\\\"tc-plugin-info-dropdown-body\\\">\\n\\t\\t\\t\\t\u003C$list filter=\\\"[all[current]] -[[$:/core]]\\\">\\n\\t\\t\\t\\t\\t\u003Cdiv style=\\\"float:right;\\\">\\n\\t\\t\\t\\t\\t\\t\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cplugin-disable-title>> text=\\\"yes\\\">\\n\\t\\t\\t\\t\\t\\t\\t\u003C$button set=\u003C\u003Cplugin-disable-title>> setTo=\\\"yes\\\" tooltip={{$:/language/ControlPanel/Plugins/Disable/Hint}} aria-label={{$:/language/ControlPanel/Plugins/Disable/Caption}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\u003C\u003Clingo Disable/Caption>>\\n\\t\\t\\t\\t\\t\\t\\t\u003C/$button>\\n\\t\\t\\t\\t\\t\\t\u003C/$reveal>\\n\\t\\t\\t\\t\\t\\t\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cplugin-disable-title>> text=\\\"yes\\\">\\n\\t\\t\\t\\t\\t\\t\\t\u003C$button set=\u003C\u003Cplugin-disable-title>> setTo=\\\"no\\\" tooltip={{$:/language/ControlPanel/Plugins/Enable Hint}} aria-label={{$:/language/ControlPanel/Plugins/Enable/Caption}}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\u003C\u003Clingo Enable/Caption>>\\n\\t\\t\\t\\t\\t\\t\\t\u003C/$button>\\n\\t\\t\\t\\t\\t\\t\u003C/$reveal>\\n\\t\\t\\t\\t\\t\u003C/div>\\n\\t\\t\\t\\t\u003C/$list>\\n\\t\\t\\t\\t\u003C$set name=\\\"tabsList\\\" filter=\\\"[\u003CcurrentTiddler>list[]] contents\\\">\\n\\t\\t\\t\\t\\t\u003C$macrocall $name=\\\"tabs\\\" state=\u003C\u003Ctabs-state-macro>> tabsList=\u003C\u003CtabsList>> default={{{ [enlist\u003CtabsList>] }}} template=\\\"$:/core/ui/PluginInfo\\\"/>\\n\\t\\t\\t\\t\u003C/$set>\\n\\t\\t\\t\u003C/div>\\n\\t\\t\u003C/div>\\n\\t\u003C/$reveal>\\n\u003C/$set>\\n\\\\end\\n\\n\u003C$macrocall $name=\\\"plugin-info\\\" type=\u003C\u003Cplugin-type>> default-popup-state=\u003C\u003Cdefault-popup-state>>/>\\n\"},\"$:/core/ui/Components/tag-link\":{\"title\":\"$:/core/ui/Components/tag-link\",\"text\":\"\u003C$link>\\n\u003C$set name=\\\"backgroundColor\\\" value={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerColourFilter]!is[draft]get[text]] }}}>\\n\u003Cspan style=\u003C\u003Ctag-styles>> class=\\\"tc-tag-label\\\">\\n\u003C$view field=\\\"title\\\" format=\\\"text\\\"/>\\n\u003C/span>\\n\u003C/$set>\\n\u003C/$link>\"},\"$:/core/ui/ControlPanel/Advanced\":{\"title\":\"$:/core/ui/ControlPanel/Advanced\",\"tags\":\"$:/tags/ControlPanel/Info\",\"caption\":\"{{$:/language/ControlPanel/Advanced/Caption}}\",\"text\":\"{{$:/language/ControlPanel/Advanced/Hint}}\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Advanced]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/TiddlerFields\\\" explicitState=\\\"$:/state/tab--959111941\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/ControlPanel/Appearance\":{\"title\":\"$:/core/ui/ControlPanel/Appearance\",\"tags\":\"$:/tags/ControlPanel\",\"caption\":\"{{$:/language/ControlPanel/Appearance/Caption}}\",\"text\":\"{{$:/language/ControlPanel/Appearance/Hint}}\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Appearance]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/Theme\\\" explicitState=\\\"$:/state/tab--1963855381\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/ControlPanel/Basics\":{\"title\":\"$:/core/ui/ControlPanel/Basics\",\"tags\":\"$:/tags/ControlPanel/Info\",\"caption\":\"{{$:/language/ControlPanel/Basics/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Basics/\\n\\n\\\\define show-filter-count(filter)\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch\\\" $value=\\\"\\\"\\\"$filter$\\\"\\\"\\\"/>\\n\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" $value=\\\"\\\"\\\"$filter$\\\"\\\"\\\"/>\\n\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\\n\u003C$action-setfield $tiddler=\\\"$:/state/tab--1498284803\\\" $value=\\\"$:/core/ui/AdvancedSearch/Filter\\\"/>\\n\u003C$action-navigate $to=\\\"$:/AdvancedSearch\\\"/>\\n\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\".tc-advanced-search input\\\"/>\\n''\u003C$count filter=\\\"\\\"\\\"$filter$\\\"\\\"\\\"/>''\\n{{$:/core/images/advanced-search-button}}\\n\u003C/$button>\\n\\\\end\\n\\n|\u003C\u003Clingo Version/Prompt>> |''\u003C\u003Cversion>>'' |\\n|\u003C$link to=\\\"$:/SiteTitle\\\">\u003C\u003Clingo Title/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/SiteTitle\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/SiteSubtitle\\\">\u003C\u003Clingo Subtitle/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/SiteSubtitle\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/status/UserName\\\">\u003C\u003Clingo Username/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/status/UserName\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/config/AnimationDuration\\\">\u003C\u003Clingo AnimDuration/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/config/AnimationDuration\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/DefaultTiddlers\\\">\u003C\u003Clingo DefaultTiddlers/Prompt>>\u003C/$link> |\u003C\u003Clingo DefaultTiddlers/TopHint>>\u003Cbr> \u003C$edit tag=\\\"textarea\\\" tiddler=\\\"$:/DefaultTiddlers\\\" class=\\\"tc-edit-texteditor\\\"/>\u003Cbr>//\u003C\u003Clingo DefaultTiddlers/BottomHint>>// |\\n|\u003C$link to=\\\"$:/language/DefaultNewTiddlerTitle\\\">\u003C\u003Clingo NewTiddler/Title/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/language/DefaultNewTiddlerTitle\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/config/NewJournal/Title\\\">\u003C\u003Clingo NewJournal/Title/Prompt>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/config/NewJournal/Title\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/config/NewJournal/Text\\\">\u003C\u003Clingo NewJournal/Text/Prompt>>\u003C/$link> |\u003C$edit tiddler=\\\"$:/config/NewJournal/Text\\\" tag=\\\"textarea\\\" class=\\\"tc-edit-texteditor\\\" default=\\\"\\\"/> |\\n|\u003C$link to=\\\"$:/config/NewTiddler/Tags\\\">\u003C\u003Clingo NewTiddler/Tags/Prompt>>\u003C/$link> |\u003C$vars currentTiddler=\\\"$:/config/NewTiddler/Tags\\\" tagField=\\\"text\\\">{{||$:/core/ui/EditTemplate/tags}}\u003C$list filter=\\\"[\u003CcurrentTiddler>tags[]] +[limit[1]]\\\" variable=\\\"ignore\\\">\u003C$button tooltip={{$:/language/ControlPanel/Basics/RemoveTags/Hint}}>\u003C\u003Clingo RemoveTags>>\u003C$action-listops $tiddler=\u003C\u003CcurrentTiddler>> $field=\\\"text\\\" $subfilter={{{ [\u003CcurrentTiddler>get[tags]] }}}/>\u003C$action-setfield $tiddler=\u003C\u003CcurrentTiddler>> tags=\\\"\\\"/>\u003C/$button>\u003C/$list>\u003C/$vars> |\\n|\u003C$link to=\\\"$:/config/NewJournal/Tags\\\">\u003C\u003Clingo NewJournal/Tags/Prompt>>\u003C/$link> |\u003C$vars currentTiddler=\\\"$:/config/NewJournal/Tags\\\" tagField=\\\"text\\\">{{||$:/core/ui/EditTemplate/tags}}\u003C$list filter=\\\"[\u003CcurrentTiddler>tags[]] +[limit[1]]\\\" variable=\\\"ignore\\\">\u003C$button tooltip={{$:/language/ControlPanel/Basics/RemoveTags/Hint}}>\u003C\u003Clingo RemoveTags>>\u003C$action-listops $tiddler=\u003C\u003CcurrentTiddler>> $field=\\\"text\\\" $subfilter={{{ [\u003CcurrentTiddler>get[tags]] }}}/>\u003C$action-setfield $tiddler=\u003C\u003CcurrentTiddler>> tags=\\\"\\\"/>\u003C/$button>\u003C/$list>\u003C/$vars> |\\n|\u003C$link to=\\\"$:/config/AutoFocus\\\">\u003C\u003Clingo AutoFocus/Prompt>>\u003C/$link> |{{$:/snippets/minifocusswitcher}} |\\n|\u003C\u003Clingo Language/Prompt>> |{{$:/snippets/minilanguageswitcher}} |\\n|\u003C\u003Clingo Tiddlers/Prompt>> |\u003C\u003Cshow-filter-count \\\"[!is[system]sort[title]]\\\">> |\\n|\u003C\u003Clingo Tags/Prompt>> |\u003C\u003Cshow-filter-count \\\"[tags[]sort[title]]\\\">> |\\n|\u003C\u003Clingo SystemTiddlers/Prompt>> |\u003C\u003Cshow-filter-count \\\"[is[system]sort[title]]\\\">> |\\n|\u003C\u003Clingo ShadowTiddlers/Prompt>> |\u003C\u003Cshow-filter-count \\\"[all[shadows]sort[title]]\\\">> |\\n|\u003C\u003Clingo OverriddenShadowTiddlers/Prompt>> |\u003C\u003Cshow-filter-count \\\"[is[tiddler]is[shadow]sort[title]]\\\">> |\\n\"},\"$:/core/ui/ControlPanel/EditTemplateBody\":{\"title\":\"$:/core/ui/ControlPanel/EditTemplateBody\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/EditTemplateBody/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/EditTemplateBody/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/EditTemplateBodyFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/FieldEditor\":{\"title\":\"$:/core/ui/ControlPanel/FieldEditor\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/FieldEditor/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/FieldEditor/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/FieldEditorFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/StoryTiddler\":{\"title\":\"$:/core/ui/ControlPanel/StoryTiddler\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/StoryTiddler/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/StoryTiddler/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/StoryTiddlerTemplateFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/TiddlerColour\":{\"title\":\"$:/core/ui/ControlPanel/TiddlerColour\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/TiddlerColour/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/TiddlerColour/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/TiddlerColourFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/TiddlerIcon\":{\"title\":\"$:/core/ui/ControlPanel/TiddlerIcon\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/TiddlerIcon/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/TiddlerIcon/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/TiddlerIconFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/ViewTemplateBody\":{\"title\":\"$:/core/ui/ControlPanel/ViewTemplateBody\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/ViewTemplateBody/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/ViewTemplateBody/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/ViewTemplateBodyFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/ViewTemplateTitle\":{\"title\":\"$:/core/ui/ControlPanel/ViewTemplateTitle\",\"tags\":\"$:/tags/ControlPanel/Cascades\",\"caption\":\"{{$:/language/ControlPanel/ViewTemplateTitle/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/ViewTemplateTitle/\\n\\n\u003C\u003Clingo Hint>>\\n\\n{{$:/tags/ViewTemplateTitleFilter||$:/snippets/ListTaggedCascade}}\\n\"},\"$:/core/ui/ControlPanel/Cascades\":{\"title\":\"$:/core/ui/ControlPanel/Cascades\",\"tags\":\"$:/tags/ControlPanel/Advanced\",\"caption\":\"{{$:/language/ControlPanel/Cascades/Caption}}\",\"text\":\"{{$:/language/ControlPanel/Cascades/Hint}}\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Cascades]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/StoryTiddler\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/ControlPanel/EditorTypes\":{\"title\":\"$:/core/ui/ControlPanel/EditorTypes\",\"tags\":\"$:/tags/ControlPanel/Advanced\",\"caption\":\"{{$:/language/ControlPanel/EditorTypes/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/EditorTypes/\\n\\n\u003C\u003Clingo Hint>>\\n\\n\u003Ctable>\\n\u003Ctbody>\\n\u003Ctr>\\n\u003Cth>\u003C\u003Clingo Type/Caption>>\u003C/th>\\n\u003Cth>\u003C\u003Clingo Editor/Caption>>\u003C/th>\\n\u003C/tr>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]prefix[$:/config/EditorTypeMappings/]sort[title]]\\\">\\n\u003Ctr>\\n\u003Ctd>\\n\u003C$link>\\n\u003C$list filter=\\\"[all[current]removeprefix[$:/config/EditorTypeMappings/]]\\\">\\n\u003C$text text={{!!title}}/>\\n\u003C/$list>\\n\u003C/$link>\\n\u003C/td>\\n\u003Ctd>\\n\u003C$view field=\\\"text\\\"/>\\n\u003C/td>\\n\u003C/tr>\\n\u003C/$list>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/core/ui/ControlPanel/Info\":{\"title\":\"$:/core/ui/ControlPanel/Info\",\"tags\":\"$:/tags/ControlPanel\",\"caption\":\"{{$:/language/ControlPanel/Info/Caption}}\",\"text\":\"{{$:/language/ControlPanel/Info/Hint}}\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Info]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/Basics\\\" explicitState=\\\"$:/state/tab--2112689675\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/ControlPanel/KeyboardShortcuts\":{\"title\":\"$:/core/ui/ControlPanel/KeyboardShortcuts\",\"tags\":\"$:/tags/ControlPanel\",\"caption\":\"{{$:/language/ControlPanel/KeyboardShortcuts/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/KeyboardShortcuts/\\n\\n\\\\define new-shortcut(title)\\n\u003Cdiv class=\\\"tc-dropdown-item-plain\\\">\\n\u003C$edit-shortcut tiddler=\\\"$title$\\\" placeholder={{$:/language/ControlPanel/KeyboardShortcuts/Add/Prompt}} focus=\\\"true\\\" style=\\\"width:auto;\\\"/> \u003C$button>\\n\u003C\u003Clingo Add/Caption>>\\n\u003C$action-listops\\n\\t$tiddler=\\\"$(shortcutTitle)$\\\"\\n\\t$field=\\\"text\\\"\\n\\t$subfilter=\\\"[{$title$}]\\\"\\n/>\\n\u003C$action-deletetiddler\\n\\t$tiddler=\\\"$title$\\\"\\n/>\\n\u003C/$button>\\n\u003C/div>\\n\\\\end\\n\\n\\\\define shortcut-list-item(caption)\\n\u003Ctd>\\n\u003C/td>\\n\u003Ctd style=\\\"text-align:right;font-size:0.7em;\\\">\\n\u003C\u003Clingo Platform/$caption$>>\\n\u003C/td>\\n\u003Ctd>\\n\u003Cdiv style=\\\"position:relative;\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/dropdown/$(shortcutTitle)$\\\">> class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/edit-button}}\\n\u003C/$button>\\n\u003C$macrocall $name=\\\"displayshortcuts\\\" $output=\\\"text/html\\\" shortcuts={{$(shortcutTitle)$}} prefix=\\\"\u003Ckbd>\\\" separator=\\\"\u003C/kbd> \u003Ckbd>\\\" suffix=\\\"\u003C/kbd>\\\"/>\\n\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/dropdown/$(shortcutTitle)$\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown-wrapper\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-edit-type-dropdown tc-popup-keep\\\">\\n\u003C$list filter=\\\"[list[$(shortcutTitle)$!!text]sort[title]]\\\" variable=\\\"shortcut\\\" emptyMessage=\\\"\\\"\\\"\\n\u003Cdiv class=\\\"tc-dropdown-item-plain\\\">\\n//\u003C\u003Clingo NoShortcuts/Caption>>//\\n\u003C/div>\\n\\\"\\\"\\\">\\n\u003Cdiv class=\\\"tc-dropdown-item-plain\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/language/ControlPanel/KeyboardShortcuts/Remove/Hint}}>\\n\u003C$action-listops\\n\\t$tiddler=\\\"$(shortcutTitle)$\\\"\\n\\t$field=\\\"text\\\"\\n\\t$subfilter=\\\"+[remove\u003Cshortcut>]\\\"\\n/>\\n\u003Csmall>{{$:/core/images/close-button}}\u003C/small>\\n\u003C/$button>\\n\u003Ckbd>\\n\u003C$macrocall $name=\\\"displayshortcuts\\\" $output=\\\"text/html\\\" shortcuts=\u003C\u003Cshortcut>>/>\\n\u003C/kbd>\\n\u003C/div>\\n\u003C/$list>\\n\u003Chr/>\\n\u003C$macrocall $name=\\\"new-shortcut\\\" title=\u003C\u003Cqualify \\\"$:/state/new-shortcut/$(shortcutTitle)$\\\">>/>\\n\u003C/div>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/div>\\n\u003C/td>\\n\\\\end\\n\\n\\\\define shortcut-list(caption,prefix)\\n\u003Ctr>\\n\u003C$list filter=\\\"[[$prefix$$(shortcutName)$]]\\\" variable=\\\"shortcutTitle\\\">\\n\u003C\u003Cshortcut-list-item \\\"$caption$\\\">>\\n\u003C/$list>\\n\u003C/tr>\\n\\\\end\\n\\n\\\\define shortcut-editor()\\n\u003C\u003Cshortcut-list \\\"All\\\" \\\"$:/config/shortcuts/\\\">>\\n\u003C\u003Cshortcut-list \\\"Mac\\\" \\\"$:/config/shortcuts-mac/\\\">>\\n\u003C\u003Cshortcut-list \\\"NonMac\\\" \\\"$:/config/shortcuts-not-mac/\\\">>\\n\u003C\u003Cshortcut-list \\\"Linux\\\" \\\"$:/config/shortcuts-linux/\\\">>\\n\u003C\u003Cshortcut-list \\\"NonLinux\\\" \\\"$:/config/shortcuts-not-linux/\\\">>\\n\u003C\u003Cshortcut-list \\\"Windows\\\" \\\"$:/config/shortcuts-windows/\\\">>\\n\u003C\u003Cshortcut-list \\\"NonWindows\\\" \\\"$:/config/shortcuts-not-windows/\\\">>\\n\\\\end\\n\\n\\\\define shortcut-preview()\\n\u003C$macrocall $name=\\\"displayshortcuts\\\" $output=\\\"text/html\\\" shortcuts={{$(shortcutPrefix)$$(shortcutName)$}} prefix=\\\"\u003Ckbd>\\\" separator=\\\"\u003C/kbd> \u003Ckbd>\\\" suffix=\\\"\u003C/kbd>\\\"/>\\n\\\\end\\n\\n\\\\define shortcut-item-inner()\\n\u003Ctr>\\n\u003Ctd>\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CdropdownStateTitle>> text=\\\"open\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C$action-setfield\\n\\t$tiddler=\u003C\u003CdropdownStateTitle>>\\n\\t$value=\\\"open\\\"\\n/>\\n{{$:/core/images/right-arrow}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CdropdownStateTitle>> text=\\\"open\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C$action-setfield\\n\\t$tiddler=\u003C\u003CdropdownStateTitle>>\\n\\t$value=\\\"close\\\"\\n/>\\n{{$:/core/images/down-arrow}}\\n\u003C/$button>\\n\u003C/$reveal>\\n''\u003C$text text=\u003C\u003CshortcutName>>/>''\\n\u003C/td>\\n\u003Ctd>\\n\u003C$transclude tiddler=\\\"$:/config/ShortcutInfo/$(shortcutName)$\\\"/>\\n\u003C/td>\\n\u003Ctd>\\n\u003C$list filter=\\\"$:/config/shortcuts/ $:/config/shortcuts-mac/ $:/config/shortcuts-not-mac/ $:/config/shortcuts-linux/ $:/config/shortcuts-not-linux/ $:/config/shortcuts-windows/ $:/config/shortcuts-not-windows/\\\" variable=\\\"shortcutPrefix\\\">\\n\u003C\u003Cshortcut-preview>>\\n\u003C/$list>\\n\u003C/td>\\n\u003C/tr>\\n\u003C$set name=\\\"dropdownState\\\" value={{$(dropdownStateTitle)$}}>\\n\u003C$list filter=\\\"[\u003CdropdownState>match[open]]\\\" variable=\\\"listItem\\\">\\n\u003C\u003Cshortcut-editor>>\\n\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define shortcut-item()\\n\u003C$set name=\\\"dropdownStateTitle\\\" value=\u003C\u003Cqualify \\\"$:/state/dropdown/keyboardshortcut/$(shortcutName)$\\\">>>\\n\u003C\u003Cshortcut-item-inner>>\\n\u003C/$set>\\n\\\\end\\n\\n\u003Ctable>\\n\u003Ctbody>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]removeprefix[$:/config/ShortcutInfo/]]\\\" variable=\\\"shortcutName\\\">\\n\u003C\u003Cshortcut-item>>\\n\u003C/$list>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/core/ui/ControlPanel/LoadedModules\":{\"title\":\"$:/core/ui/ControlPanel/LoadedModules\",\"tags\":\"$:/tags/ControlPanel/Advanced\",\"caption\":\"{{$:/language/ControlPanel/LoadedModules/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/\\n\u003C\u003Clingo LoadedModules/Hint>>\\n\\n{{$:/snippets/modules}}\\n\"},\"$:/core/ui/ControlPanel/Modals/AddPlugins\":{\"title\":\"$:/core/ui/ControlPanel/Modals/AddPlugins\",\"subtitle\":\"{{$:/core/images/download-button}} {{$:/language/ControlPanel/Plugins/Add/Caption}}\",\"text\":\"\\\\define install-plugin-actions()\\n\u003C$action-sendmessage $message=\\\"tm-load-plugin-from-library\\\" url={{!!url}} title={{$(assetInfo)$!!original-title}}/>\\n\u003C$set name=\\\"url\\\" value={{!!url}}>\\n\u003C$set name=\\\"currentTiddler\\\" value=\u003C\u003CassetInfo>>>\\n\u003C$list filter=\\\"[enlist{!!dependents}] [{!!parent-plugin}] +[sort[name]]\\\" variable=\\\"dependency\\\">\\n\u003C$action-sendmessage $message=\\\"tm-load-plugin-from-library\\\" url=\u003C\u003Curl>> title=\u003C\u003Cdependency>>/>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define install-plugin-button()\\n\u003Cdiv>\\n\u003C$set name=\\\"libraryVersion\\\" value={{{ [\u003CassetInfo>get[version]] }}}>\\n\u003C$set name=\\\"installedVersion\\\" value={{{ [\u003CassetInfo>get[original-title]get[version]] }}}>\\n\u003C$set name=\\\"reinstall-type\\\" value={{{ [\u003ClibraryVersion>compare:version:eq\u003CinstalledVersion>then[tc-reinstall]] [\u003ClibraryVersion>compare:version:gt\u003CinstalledVersion>then[tc-reinstall-upgrade]] [\u003ClibraryVersion>compare:version:lt\u003CinstalledVersion>then[tc-reinstall-downgrade]] }}}>\\n\u003C$button actions=\u003C\u003Cinstall-plugin-actions>> class={{{ [\u003CassetInfo>get[original-title]has[version]then\u003Creinstall-type>] tc-btn-invisible tc-install-plugin +[join[ ]] }}}>\\n{{$:/core/images/download-button}}\\n\u003C$list filter=\\\"[\u003CassetInfo>get[original-title]get[version]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"{{$:/language/ControlPanel/Plugins/Install/Caption}}\\\">\\n\u003C$list filter=\\\"[\u003ClibraryVersion>compare:version:gt\u003CinstalledVersion>]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$list filter=\\\"[\u003ClibraryVersion>compare:version:lt\u003CinstalledVersion>]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"{{$:/language/ControlPanel/Plugins/Reinstall/Caption}}\\\">\\n{{$:/language/ControlPanel/Plugins/Downgrade/Caption}}\\n\u003C/$list>\\n\\\"\\\"\\\">\\n{{$:/language/ControlPanel/Plugins/Update/Caption}}\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/$button>\\n\u003Cdiv>\\n\u003C/div>\\n\u003C$reveal stateTitle=\u003C\u003CassetInfo>> stateField=\\\"requires-reload\\\" type=\\\"match\\\" text=\\\"yes\\\">{{$:/language/ControlPanel/Plugins/PluginWillRequireReload}}\u003C/$reveal>\\n\u003C/$set>\\n\u003C/$set>\\n\u003C/$set>\\n\u003C/div>\\n\\\\end\\n\\n\\\\define popup-state-macro()\\n$:/state/add-plugin-info/$(connectionTiddler)$/$(assetInfo)$\\n\\\\end\\n\\n\\\\define display-plugin-info(type)\\n\u003C$set name=\\\"popup-state\\\" value=\u003C\u003Cpopup-state-macro>>>\\n\u003Cdiv class=\\\"tc-plugin-info\\\">\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-toggle\\\">\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cpopup-state>> text=\\\"yes\\\">\\n\u003C$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=\u003C\u003Cpopup-state>> setTo=\\\"yes\\\">\\n{{$:/core/images/chevron-right}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cpopup-state>> text=\\\"yes\\\">\\n\u003C$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=\u003C\u003Cpopup-state>> setTo=\\\"no\\\">\\n{{$:/core/images/chevron-down}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-icon\\\">\\n\u003C$list filter=\\\"[\u003CassetInfo>has[icon]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$transclude tiddler=\\\"$:/core/images/plugin-generic-$type$\\\"/>\\\"\\\"\\\">\\n\u003Cimg src={{$(assetInfo)$!!icon}}/>\\n\u003C/$list>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-description\\\">\\n\u003Ch1>\u003Cstrong>\u003C$text text={{{ [\u003CassetInfo>get[name]] ~[\u003CassetInfo>get[original-title]split[/]last[1]] }}}/>\u003C/strong>: \u003C$view tiddler=\u003C\u003CassetInfo>> field=\\\"description\\\"/>\u003C/h1>\\n\u003Ch2>\u003C$view tiddler=\u003C\u003CassetInfo>> field=\\\"original-title\\\"/>\u003C/h2>\\n\u003Cdiv>\u003Cem>\u003C$view tiddler=\u003C\u003CassetInfo>> field=\\\"version\\\"/>\u003C/em>\u003C/div>\\n\u003C$list filter=\\\"[\u003CassetInfo>get[original-title]get[version]]\\\" variable=\\\"installedVersion\\\">\u003Cdiv>\u003Cem>{{$:/language/ControlPanel/Plugins/AlreadyInstalled/Hint}}\u003C/em>\u003C/div>\u003C/$list>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-buttons\\\">\\n\u003C\u003Cinstall-plugin-button>>\\n\u003C/div>\\n\u003C/div>\\n\u003C$set name=\\\"original-title\\\" value={{{ [\u003CassetInfo>get[original-title]] }}}>\\n\u003C$reveal type=\\\"match\\\" text=\\\"yes\\\" state=\u003C\u003Cpopup-state>>>\\n\u003Cdiv class=\\\"tc-plugin-info-dropdown\\\">\\n\u003C$list filter=\\\"[enlist{!!dependents}] [\u003CcurrentTiddler>get[parent-plugin]] +[limit[1]] ~[\u003CassetInfo>get[original-title]!is[tiddler]]\\\" variable=\\\"ignore\\\">\\n\u003Cdiv class=\\\"tc-plugin-info-dropdown-message\\\">\\n\u003C$list filter=\\\"[\u003CassetInfo>get[original-title]!is[tiddler]]\\\">\\n{{$:/language/ControlPanel/Plugins/NotInstalled/Hint}}\\n\u003C/$list>\\n\u003C$set name=\\\"currentTiddler\\\" value=\u003C\u003CassetInfo>>>\\n\u003C$list filter=\\\"[enlist{!!dependents}] [\u003CcurrentTiddler>get[parent-plugin]] +[limit[1]]\\\" variable=\\\"ignore\\\">\\n\u003Cdiv>\\n{{$:/language/ControlPanel/Plugins/AlsoRequires}}\\n\u003C$list filter=\\\"[enlist{!!dependents}] [{!!parent-plugin}] +[sort[name]]\\\" variable=\\\"dependency\\\">\\n\u003C$text text=\u003C\u003Cdependency>>/>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/div>\\n\u003C/$list>\\n\u003Cdiv class=\\\"tc-plugin-info-dropdown-body\\\">\\n\u003C$transclude tiddler=\u003C\u003CassetInfo>> field=\\\"readme\\\" mode=\\\"block\\\"/>\\n\u003C/div>\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[$type$]has[parent-plugin]parent-plugin\u003Coriginal-title>limit[1]]\\\" variable=\\\"ignore\\\">\\n\u003Cdiv class=\\\"tc-plugin-info-sub-plugins\\\">\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[$type$]has[parent-plugin]parent-plugin\u003Coriginal-title>sort[name]]\\\" variable=\\\"assetInfo\\\">\\n\u003C\u003Cdisplay-plugin-info \\\"$type$\\\">>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[$type$]has[parent-plugin]parent-plugin\u003Coriginal-title>limit[1]]\\\" variable=\\\"ignore\\\">\\n\u003C$reveal type=\\\"nomatch\\\" text=\\\"yes\\\" state=\u003C\u003Cpopup-state>> tag=\\\"div\\\" class=\\\"tc-plugin-info-sub-plugin-indicator\\\">\\n\u003C$wikify name=\\\"count\\\" text=\\\"\\\"\\\"\u003C$count filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[$type$]has[parent-plugin]parent-plugin\u003Coriginal-title>]\\\"/>\\\"\\\"\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\" set=\u003C\u003Cpopup-state>> setTo=\\\"yes\\\">\\n{{$:/language/ControlPanel/Plugins/SubPluginPrompt}}\\n\u003C/$button>\\n\u003C/$wikify>\\n\u003C/$reveal>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define load-plugin-library-button()\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>get[enabled]else[yes]match[yes]]\\\" variable=\\\"ignore\\\">\\n\u003C$button class=\\\"tc-btn-big-green\\\">\\n\u003C$action-sendmessage $message=\\\"tm-load-plugin-library\\\" url={{!!url}} infoTitlePrefix=\\\"$:/temp/RemoteAssetInfo/\\\"/>\\n{{$:/core/images/chevron-right}} {{$:/language/ControlPanel/Plugins/OpenPluginLibrary}}\\n\u003C/$button>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define display-server-assets(type)\\n{{$:/language/Search/Search}}: \u003C$edit-text tiddler=\\\"\\\"\\\"$:/temp/RemoteAssetSearch/$(currentTiddler)$\\\"\\\"\\\" default=\\\"\\\" type=\\\"search\\\" tag=\\\"input\\\"/>\\n\u003C$reveal state=\\\"\\\"\\\"$:/temp/RemoteAssetSearch/$(currentTiddler)$\\\"\\\"\\\" type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C$action-setfield $tiddler=\\\"\\\"\\\"$:/temp/RemoteAssetSearch/$(currentTiddler)$\\\"\\\"\\\" $field=\\\"text\\\" $value=\\\"\\\"/>\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003Cdiv class=\\\"tc-plugin-library-listing\\\">\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[$type$]search:author,description,original-title,readme,title{$:/temp/RemoteAssetSearch/$(currentTiddler)$}sort[name]]\\\" variable=\\\"assetInfo\\\">\\n\u003C$list filter=\\\"[[$:/temp/RemoteAssetSearch/$(currentTiddler)$]has[text]] ~[\u003CassetInfo>!has[parent-plugin]]\\\" variable=\\\"ignore\\\">\u003C!-- Hide sub-plugins if we're not searching -->\\n\u003C\u003Cdisplay-plugin-info \\\"$type$\\\">>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/div>\\n\\\\end\\n\\n\\\\define display-server-connection()\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/ServerConnection]suffix{!!url}]\\\" variable=\\\"connectionTiddler\\\" emptyMessage=\u003C\u003Cload-plugin-library-button>>>\\n\\n\u003C$set name=\\\"transclusion\\\" value=\u003C\u003CconnectionTiddler>>>\\n\\n\u003C\u003Ctabs \\\"[[$:/core/ui/ControlPanel/Plugins/Add/Updates]] [[$:/core/ui/ControlPanel/Plugins/Add/Plugins]] [[$:/core/ui/ControlPanel/Plugins/Add/Themes]] [[$:/core/ui/ControlPanel/Plugins/Add/Languages]]\\\" \\\"$:/core/ui/ControlPanel/Plugins/Add/Plugins\\\">>\\n\\n\u003C/$set>\\n\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define close-library-button()\\n\u003C$reveal type='nomatch' state='$:/temp/ServerConnection/$(PluginLibraryURL)$' text=''>\\n\u003C$button class='tc-btn-big-green'>\\n\u003C$action-sendmessage $message=\\\"tm-unload-plugin-library\\\" url={{!!url}}/>\\n{{$:/core/images/chevron-left}} {{$:/language/ControlPanel/Plugins/ClosePluginLibrary}}\\n\u003C$action-deletetiddler $filter=\\\"[prefix[$:/temp/ServerConnection/$(PluginLibraryURL)$]][prefix[$:/temp/RemoteAssetInfo/$(PluginLibraryURL)$]]\\\"/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\\\\end\\n\\n\\\\define plugin-library-listing()\\n\u003Cdiv class=\\\"tc-tab-set\\\">\\n\u003C$set name=\\\"defaultTab\\\" value={{{ [all[tiddlers+shadows]tag[$:/tags/PluginLibrary]] }}}>\\n\u003Cdiv class=\\\"tc-tab-buttons\\\">\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/PluginLibrary]]\\\">\\n\u003C$button set=\u003C\u003Cqualify \\\"$:/state/addplugins/tab\\\">> setTo=\u003C\u003CcurrentTiddler>> default=\u003C\u003CdefaultTab>> selectedClass=\\\"tc-tab-selected\\\">\\n\u003C$set name=\\\"tv-wikilinks\\\" value=\\\"no\\\">\\n\u003C$transclude field=\\\"caption\\\"/>\\n\u003C/$set>\\n\u003C/$button>\\n\u003C/$list>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-tab-divider\\\"/>\\n\u003Cdiv class=\\\"tc-tab-content\\\">\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/PluginLibrary]]\\\">\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cqualify \\\"$:/state/addplugins/tab\\\">> text=\u003C\u003CcurrentTiddler>> default=\u003C\u003CdefaultTab>>>\\n\u003Ch2>\u003C$link>\u003C$transclude field=\\\"caption\\\">\u003C$view field=\\\"title\\\"/>\u003C/$transclude>\u003C/$link>\u003C/h2>\\n//\u003C$view field=\\\"url\\\"/>//\\n\u003C$transclude mode=\\\"block\\\"/>\\n\u003C$set name=PluginLibraryURL value={{!!url}}>\\n\u003C\u003Cclose-library-button>>\\n\u003C/$set>\\n\u003C\u003Cdisplay-server-connection>>\\n\u003C/$reveal>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$set>\\n\u003C/div>\\n\\\\end\\n\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\n\u003Cdiv>\\n\u003C\u003Cplugin-library-listing>>\\n\u003C/div>\\n\"},\"$:/core/ui/ControlPanel/Palette\":{\"title\":\"$:/core/ui/ControlPanel/Palette\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ControlPanel/Palette/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Palette/\\n\\n{{$:/snippets/paletteswitcher}}\\n\\n\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/state/ShowPaletteEditor\\\" text=\\\"yes\\\">\\n\\n\u003C$button set=\\\"$:/state/ShowPaletteEditor\\\" setTo=\\\"yes\\\">\u003C\u003Clingo ShowEditor/Caption>>\u003C/$button>\\n\\n\u003C/$reveal>\\n\\n\u003C$reveal type=\\\"match\\\" state=\\\"$:/state/ShowPaletteEditor\\\" text=\\\"yes\\\">\\n\\n\u003C$button set=\\\"$:/state/ShowPaletteEditor\\\" setTo=\\\"no\\\">\u003C\u003Clingo HideEditor/Caption>>\u003C/$button>\\n{{$:/PaletteManager}}\\n\\n\u003C/$reveal>\\n\\n\"},\"$:/core/ui/ControlPanel/Parsing\":{\"title\":\"$:/core/ui/ControlPanel/Parsing\",\"tags\":\"$:/tags/ControlPanel/Advanced\",\"caption\":\"{{$:/language/ControlPanel/Parsing/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Parsing/\\n\\n\\\\define toggle(Type)\\n\u003C$checkbox\\ntiddler=\\\"\\\"\\\"$:/config/WikiParserRules/$Type$/$(rule)$\\\"\\\"\\\"\\nfield=\\\"text\\\"\\nchecked=\\\"enable\\\"\\nunchecked=\\\"disable\\\"\\ndefault=\\\"enable\\\">\\n\u003C\u003Crule>>\\n\u003C/$checkbox>\\n\\\\end\\n\\n\\\\define rules(type,Type)\\n\u003C$list filter=\\\"[wikiparserrules[$type$]]\\\" variable=\\\"rule\\\">\\n\u003Cdd>\u003C\u003Ctoggle $Type$>>\u003C/dd>\\n\u003C/$list>\\n\\\\end\\n\\n\u003C\u003Clingo Hint>>\\n\\n\u003Cdl>\\n\u003Cdt>\u003C\u003Clingo Pragma/Caption>>\u003C/dt>\\n\u003C\u003Crules pragma Pragma>>\\n\u003Cdt>\u003C\u003Clingo Inline/Caption>>\u003C/dt>\\n\u003C\u003Crules inline Inline>>\\n\u003Cdt>\u003C\u003Clingo Block/Caption>>\u003C/dt>\\n\u003C\u003Crules block Block>>\\n\u003C/dl>\"},\"$:/core/ui/ControlPanel/Plugins/Add/Languages\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Add/Languages\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Languages/Caption}} (\u003C$count filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[language]]\\\"/>)\",\"text\":\"\u003C\u003Cdisplay-server-assets language>>\\n\"},\"$:/core/ui/ControlPanel/Plugins/Add/Plugins\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Add/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Plugins/Caption}}  (\u003C$count filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[plugin]]\\\"/>)\",\"text\":\"\u003C\u003Cdisplay-server-assets plugin>>\\n\"},\"$:/core/ui/ControlPanel/Plugins/Add/Themes\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Add/Themes\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Themes/Caption}}  (\u003C$count filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}original-plugin-type[theme]]\\\"/>)\",\"text\":\"\u003C\u003Cdisplay-server-assets theme>>\\n\"},\"$:/core/ui/ControlPanel/Plugins/Add/Updates\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Add/Updates\",\"caption\":\"\u003C$importvariables filter=\\\"$:/core/ui/ControlPanel/Plugins/Add/Updates\\\">{{$:/language/ControlPanel/Plugins/Updates/Caption}} (\u003C\u003Cupdate-count>>)\u003C/$importvariables>\",\"text\":\"\\\\define each-updateable-plugin(body)\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/RemoteAssetInfo]server-url{!!url}sort[title]]\\\" variable=\\\"assetInfo\\\">\\n\u003C$set name=\\\"libraryVersion\\\" value={{{ [\u003CassetInfo>get[version]] }}}>\\n\u003C$list filter=\\\"[\u003CassetInfo>get[original-title]has[version]!version\u003ClibraryVersion>]\\\" variable=\\\"ignore\\\">\\n\u003C$set name=\\\"installedVersion\\\" value={{{ [\u003CassetInfo>get[original-title]get[version]] }}}>\\n\u003C$list filter=\\\"[\u003Cinstalledversion>!match\u003ClibraryVersion>]\\\" variable=\\\"ignore\\\">\\n$body$\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define update-all-actions()\\n\u003C$macrocall $name=\\\"each-updateable-plugin\\\" body=\\\"\\\"\\\"\\n\u003C\u003Cinstall-plugin-actions>>\\n\\\"\\\"\\\"/>\\n\\\\end\\n\\n\\\\define update-count()\\n\u003C$wikify name=\\\"count-filter\\\" text=\u003C\u003Ceach-updateable-plugin \\\"&#91;&#91;\u003C$text text=\u003C\u003CassetInfo>>/>]]\\\">>>\u003C$count filter=\u003C\u003Ccount-filter>>/>\u003C/$wikify>\\n\\\\end\\n\\n\u003C$button actions=\u003C\u003Cupdate-all-actions>> class=\\\"tc-btn-invisible tc-install-plugin tc-reinstall-upgrade\\\">\\n{{$:/core/images/download-button}} {{||$:/language/ControlPanel/Plugins/Updates/UpdateAll/Caption}}\\n\u003C/$button>\\n\\n\u003Cdiv class=\\\"tc-plugin-library-listing\\\">\\n\u003C$macrocall $name=\\\"each-updateable-plugin\\\" body=\\\"\\\"\\\"\\n\u003C$macrocall $name=\\\"display-plugin-info\\\" type={{{ [\u003CassetInfo>get[original-plugin-type]] }}}/>\\n\\\"\\\"\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/ControlPanel/Plugins/AddPlugins\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/AddPlugins\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Plugins/\\n\\n\u003C$button message=\\\"tm-modal\\\" param=\\\"$:/core/ui/ControlPanel/Modals/AddPlugins\\\" tooltip={{$:/language/ControlPanel/Plugins/Add/Hint}} class=\\\"tc-btn-big-green tc-primary-btn\\\">\\n{{$:/core/images/download-button}} \u003C\u003Clingo Add/Caption>>\\n\u003C/$button>\\n\"},\"$:/core/ui/ControlPanel/Plugins/Installed/Languages\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Installed/Languages\",\"tags\":\"$:/tags/ControlPanel/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Languages/Caption}} (\u003C$count filter=\\\"[!has[draft.of]plugin-type[language]]\\\"/>)\",\"text\":\"\u003C\u003Cplugin-table language>>\\n\"},\"$:/core/ui/ControlPanel/Plugins/Installed/Plugins\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Installed/Plugins\",\"tags\":\"$:/tags/ControlPanel/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Plugins/Caption}} (\u003C$count filter=\\\"[!has[draft.of]plugin-type[plugin]]\\\"/>)\",\"text\":\"\u003C\u003Cplugin-table plugin>>\\n\"},\"$:/core/ui/ControlPanel/Plugins/Installed/Themes\":{\"title\":\"$:/core/ui/ControlPanel/Plugins/Installed/Themes\",\"tags\":\"$:/tags/ControlPanel/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Themes/Caption}} (\u003C$count filter=\\\"[!has[draft.of]plugin-type[theme]]\\\"/>)\",\"text\":\"\u003C\u003Cplugin-table theme>>\\n\"},\"$:/core/ui/ControlPanel/Plugins\":{\"title\":\"$:/core/ui/ControlPanel/Plugins\",\"tags\":\"$:/tags/ControlPanel\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Plugins/\\n\\n\\\\define plugin-table(type)\\n\u003C$set name=\\\"plugin-type\\\" value=\\\"\\\"\\\"$type$\\\"\\\"\\\">\\n\u003C$set name=\\\"qualified-state\\\" value=\u003C\u003Cqualify \\\"$:/state/plugin-info\\\">>>\\n\u003C$list filter=\\\"[!has[draft.of]plugin-type[$type$]sort[name]]\\\" emptyMessage=\u003C\u003Clingo \\\"Empty/Hint\\\">> template=\\\"$:/core/ui/Components/plugin-info\\\"/>\\n\u003C/$set>\\n\u003C/$set>\\n\\\\end\\n\\n{{$:/core/ui/ControlPanel/Plugins/AddPlugins}}\\n\\n\u003C\u003Clingo Installed/Hint>>\\n\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[tiddlers+shadows]tag[$:/tags/ControlPanel/Plugins]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/Plugins/Installed/Plugins\\\" explicitState=\\\"$:/state/tab--86143343\\\"/>\\n\"},\"$:/core/ui/ControlPanel/Saving/DownloadSaver\":{\"title\":\"$:/core/ui/ControlPanel/Saving/DownloadSaver\",\"tags\":\"$:/tags/ControlPanel/Saving\",\"caption\":\"{{$:/language/ControlPanel/Saving/DownloadSaver/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Saving/DownloadSaver/\\n\\n\u003C\u003Clingo Hint>>\\n\\n!! \u003C$link to=\\\"$:/config/DownloadSaver/AutoSave\\\">\u003C\u003Clingo AutoSave/Hint>>\u003C/$link>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/DownloadSaver/AutoSave\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> \u003C\u003Clingo AutoSave/Description>> \u003C/$checkbox>\\n\"},\"$:/core/ui/ControlPanel/Saving/General\":{\"title\":\"$:/core/ui/ControlPanel/Saving/General\",\"tags\":\"$:/tags/ControlPanel/Saving\",\"caption\":\"{{$:/language/ControlPanel/Saving/General/Caption}}\",\"list-before\":\"\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/\\n\\n{{$:/language/ControlPanel/Saving/General/Hint}}\\n\\n!! \u003C$link to=\\\"$:/config/AutoSave\\\">\u003C\u003Clingo AutoSave/Caption>>\u003C/$link>\\n\\n\u003C\u003Clingo AutoSave/Hint>>\\n\\n\u003C$radio tiddler=\\\"$:/config/AutoSave\\\" value=\\\"yes\\\"> \u003C\u003Clingo AutoSave/Enabled/Description>> \u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/AutoSave\\\" value=\\\"no\\\"> \u003C\u003Clingo AutoSave/Disabled/Description>> \u003C/$radio>\\n\"},\"$:/core/ui/ControlPanel/Saving/GitHub\":{\"title\":\"$:/core/ui/ControlPanel/Saving/GitHub\",\"tags\":\"$:/tags/ControlPanel/Saving\",\"caption\":\"{{$:/language/ControlPanel/Saving/GitService/GitHub/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Saving/GitService/\\n\\\\define service-name() ~GitHub\\n\\n\u003C\u003Clingo Description>>\\n\\n|\u003C\u003Clingo UserName>> |\u003C$edit-text tiddler=\\\"$:/GitHub/Username\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo GitHub/Password>> |\u003C$password name=\\\"github\\\"/> |\\n|\u003C\u003Clingo Repo>> |\u003C$edit-text tiddler=\\\"$:/GitHub/Repo\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Branch>> |\u003C$edit-text tiddler=\\\"$:/GitHub/Branch\\\" default=\\\"main\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Path>> |\u003C$edit-text tiddler=\\\"$:/GitHub/Path\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Filename>> |\u003C$edit-text tiddler=\\\"$:/GitHub/Filename\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo ServerURL>> |\u003C$edit-text tiddler=\\\"$:/GitHub/ServerURL\\\" default=\\\"https://api.github.com\\\" tag=\\\"input\\\"/> |\"},\"$:/core/ui/ControlPanel/Saving/GitLab\":{\"title\":\"$:/core/ui/ControlPanel/Saving/GitLab\",\"tags\":\"$:/tags/ControlPanel/Saving\",\"caption\":\"{{$:/language/ControlPanel/Saving/GitService/GitLab/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Saving/GitService/\\n\\\\define service-name() ~GitLab\\n\\n\u003C\u003Clingo Description>>\\n\\n|\u003C\u003Clingo UserName>> |\u003C$edit-text tiddler=\\\"$:/GitLab/Username\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo GitLab/Password>> |\u003C$password name=\\\"gitlab\\\"/> |\\n|\u003C\u003Clingo Repo>> |\u003C$edit-text tiddler=\\\"$:/GitLab/Repo\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Branch>> |\u003C$edit-text tiddler=\\\"$:/GitLab/Branch\\\" default=\\\"master\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Path>> |\u003C$edit-text tiddler=\\\"$:/GitLab/Path\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Filename>> |\u003C$edit-text tiddler=\\\"$:/GitLab/Filename\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo ServerURL>> |\u003C$edit-text tiddler=\\\"$:/GitLab/ServerURL\\\" default=\\\"https://gitlab.com/api/v4\\\" tag=\\\"input\\\"/> |\"},\"$:/core/ui/ControlPanel/Saving/TiddlySpot\":{\"title\":\"$:/core/ui/ControlPanel/Saving/TiddlySpot\",\"tags\":\"$:/tags/ControlPanel/Saving\",\"caption\":\"{{$:/language/ControlPanel/Saving/TiddlySpot/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Saving/TiddlySpot/\\n\\n\\\\define siteURL(path)\\nhttp://$(userName)$.tiddlyspot.com/$path$/\\n\\\\end\\n\\\\define siteLink(path)\\n\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/UploadName\\\" text=\\\"\\\">\\n\u003C$set name=\\\"userName\\\" value={{$:/UploadName}}>\\n\u003C$reveal type=\\\"match\\\" state=\\\"$:/UploadURL\\\" text=\\\"\\\">\\n\u003C\u003CsiteURL $path$>>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/UploadURL\\\" text=\\\"\\\">\\n\u003C$macrocall $name=resolvePath source={{$:/UploadBackupDir}} root={{$:/UploadURL}}>>\\n\u003C/$reveal>\\n\u003C/$set>\\n\u003C/$reveal>\\n\\\\end\\n\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n\u003C\u003Clingo ReadOnly>>\\n\\n\u003C/div>\\n\\n\u003C\u003Clingo Description>>\\n\\n|\u003C\u003Clingo UserName>> |\u003C$edit-text tiddler=\\\"$:/UploadName\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Password>> |\u003C$password name=\\\"upload\\\"/> |\\n\\n''\u003C\u003Clingo Advanced/Heading>>''\\n\\n|\u003C\u003Clingo ServerURL>>  |\u003C$edit-text tiddler=\\\"$:/UploadURL\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Filename>> |\u003C$edit-text tiddler=\\\"$:/UploadFilename\\\" default=\\\"index.html\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo UploadDir>> |\u003C$edit-text tiddler=\\\"$:/UploadDir\\\" default=\\\".\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo BackupDir>> |\u003C$edit-text tiddler=\\\"$:/UploadBackupDir\\\" default=\\\".\\\" tag=\\\"input\\\"/> |\\n\\n\u003C\u003Clingo TiddlySpot/Hint>>\\n\"},\"$:/core/ui/ControlPanel/Saving/Gitea\":{\"title\":\"$:/core/ui/ControlPanel/Saving/Gitea\",\"tags\":\"$:/tags/ControlPanel/Saving\",\"caption\":\"{{$:/language/ControlPanel/Saving/GitService/Gitea/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Saving/GitService/\\n\\\\define service-name() ~Gitea\\n\\n\u003C\u003Clingo Description>>\\n\\n|\u003C\u003Clingo UserName>> |\u003C$edit-text tiddler=\\\"$:/Gitea/Username\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Gitea/Password>> |\u003C$password name=\\\"Gitea\\\"/> |\\n|\u003C\u003Clingo Repo>> |\u003C$edit-text tiddler=\\\"$:/Gitea/Repo\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Branch>> |\u003C$edit-text tiddler=\\\"$:/Gitea/Branch\\\" default=\\\"master\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Path>> |\u003C$edit-text tiddler=\\\"$:/Gitea/Path\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo Filename>> |\u003C$edit-text tiddler=\\\"$:/Gitea/Filename\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C\u003Clingo ServerURL>> |\u003C$edit-text tiddler=\\\"$:/Gitea/ServerURL\\\" default=\\\"https://gitea/api/v1\\\" tag=\\\"input\\\"/> |\\n\"},\"$:/core/ui/ControlPanel/Saving\":{\"title\":\"$:/core/ui/ControlPanel/Saving\",\"tags\":\"$:/tags/ControlPanel\",\"caption\":\"{{$:/language/ControlPanel/Saving/Caption}}\",\"text\":\"{{$:/language/ControlPanel/Saving/Hint}}\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Saving]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/Saving/General\\\" explicitState=\\\"$:/state/tab-2065006209\\\"/>\\n\u003C/div>\\n\"},\"$:/core/buttonstyles/Borderless\":{\"title\":\"$:/core/buttonstyles/Borderless\",\"tags\":\"$:/tags/ToolbarButtonStyle\",\"caption\":\"{{$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Borderless}}\",\"text\":\"tc-btn-invisible\"},\"$:/core/buttonstyles/Boxed\":{\"title\":\"$:/core/buttonstyles/Boxed\",\"tags\":\"$:/tags/ToolbarButtonStyle\",\"caption\":\"{{$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Boxed}}\",\"text\":\"tc-btn-boxed\"},\"$:/core/buttonstyles/Rounded\":{\"title\":\"$:/core/buttonstyles/Rounded\",\"tags\":\"$:/tags/ToolbarButtonStyle\",\"caption\":\"{{$:/language/ControlPanel/Settings/ToolbarButtonStyle/Styles/Rounded}}\",\"text\":\"tc-btn-rounded\"},\"$:/core/ui/ControlPanel/Settings/CamelCase\":{\"title\":\"$:/core/ui/ControlPanel/Settings/CamelCase\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/CamelCase/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/CamelCase/\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/WikiParserRules/Inline/wikilink\\\" field=\\\"text\\\" checked=\\\"enable\\\" unchecked=\\\"disable\\\" default=\\\"enable\\\"> \u003C$link to=\\\"$:/config/WikiParserRules/Inline/wikilink\\\">\u003C\u003Clingo Description>>\u003C/$link> \u003C/$checkbox>\\n\"},\"$:/core/ui/ControlPanel/Settings/DefaultMoreSidebarTab\":{\"title\":\"$:/core/ui/ControlPanel/Settings/DefaultMoreSidebarTab\",\"caption\":\"{{$:/language/ControlPanel/Settings/DefaultMoreSidebarTab/Caption}}\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/DefaultMoreSidebarTab/\\n\\n\u003C$link to=\\\"$:/config/DefaultMoreSidebarTab\\\">\u003C\u003Clingo Hint>>\u003C/$link>\\n\\n\u003C$select tiddler=\\\"$:/config/DefaultMoreSidebarTab\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/MoreSideBar]!has[draft.of]]\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>\u003C$transclude field=\\\"caption\\\">\u003C$text text=\u003C\u003CcurrentTiddler>>/>\u003C/$transclude>\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\\n\"},\"$:/core/ui/ControlPanel/Settings/DefaultSidebarTab\":{\"title\":\"$:/core/ui/ControlPanel/Settings/DefaultSidebarTab\",\"caption\":\"{{$:/language/ControlPanel/Settings/DefaultSidebarTab/Caption}}\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/DefaultSidebarTab/\\n\\n\u003C$link to=\\\"$:/config/DefaultSidebarTab\\\">\u003C\u003Clingo Hint>>\u003C/$link>\\n\\n\u003C$select tiddler=\\\"$:/config/DefaultSidebarTab\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SideBar]!has[draft.of]]\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>\u003C$transclude field=\\\"caption\\\">\u003C$text text=\u003C\u003CcurrentTiddler>>/>\u003C/$transclude>\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\\n\"},\"$:/core/ui/ControlPanel/Settings/EditorToolbar\":{\"title\":\"$:/core/ui/ControlPanel/Settings/EditorToolbar\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/EditorToolbar/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/EditorToolbar/\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/TextEditor/EnableToolbar\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> \u003C$link to=\\\"$:/config/TextEditor/EnableToolbar\\\">\u003C\u003Clingo Description>>\u003C/$link> \u003C/$checkbox>\\n\\n\"},\"$:/core/ui/ControlPanel/Settings/InfoPanelMode\":{\"title\":\"$:/core/ui/ControlPanel/Settings/InfoPanelMode\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/InfoPanelMode/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/InfoPanelMode/\\n\u003C$link to=\\\"$:/config/TiddlerInfo/Mode\\\">\u003C\u003Clingo Hint>>\u003C/$link>\\n\\n\u003C$radio tiddler=\\\"$:/config/TiddlerInfo/Mode\\\" value=\\\"popup\\\"> \u003C\u003Clingo Popup/Description>> \u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/TiddlerInfo/Mode\\\" value=\\\"sticky\\\"> \u003C\u003Clingo Sticky/Description>> \u003C/$radio>\\n\"},\"$:/core/ui/ControlPanel/Settings/LinkToBehaviour\":{\"title\":\"$:/core/ui/ControlPanel/Settings/LinkToBehaviour\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/LinkToBehaviour/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/LinkToBehaviour/\\n\\n\u003C$link to=\\\"$:/config/Navigation/openLinkFromInsideRiver\\\">\u003C\u003Clingo \\\"InsideRiver/Hint\\\">>\u003C/$link>\\n\\n\u003C$select tiddler=\\\"$:/config/Navigation/openLinkFromInsideRiver\\\">\\n  \u003Coption value=\\\"above\\\">\u003C\u003Clingo \\\"OpenAbove\\\">>\u003C/option>\\n  \u003Coption value=\\\"below\\\">\u003C\u003Clingo \\\"OpenBelow\\\">>\u003C/option>\\n  \u003Coption value=\\\"top\\\">\u003C\u003Clingo \\\"OpenAtTop\\\">>\u003C/option>\\n  \u003Coption value=\\\"bottom\\\">\u003C\u003Clingo \\\"OpenAtBottom\\\">>\u003C/option>\\n\u003C/$select>\\n\\n\u003C$link to=\\\"$:/config/Navigation/openLinkFromOutsideRiver\\\">\u003C\u003Clingo \\\"OutsideRiver/Hint\\\">>\u003C/$link>\\n\\n\u003C$select tiddler=\\\"$:/config/Navigation/openLinkFromOutsideRiver\\\">\\n  \u003Coption value=\\\"top\\\">\u003C\u003Clingo \\\"OpenAtTop\\\">>\u003C/option>\\n  \u003Coption value=\\\"bottom\\\">\u003C\u003Clingo \\\"OpenAtBottom\\\">>\u003C/option>\\n\u003C/$select>\\n\"},\"$:/core/ui/ControlPanel/Settings/MissingLinks\":{\"title\":\"$:/core/ui/ControlPanel/Settings/MissingLinks\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/MissingLinks/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/MissingLinks/\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/MissingLinks\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> \u003C$link to=\\\"$:/config/MissingLinks\\\">\u003C\u003Clingo Description>>\u003C/$link> \u003C/$checkbox>\\n\\n\"},\"$:/core/ui/ControlPanel/Settings/NavigationAddressBar\":{\"title\":\"$:/core/ui/ControlPanel/Settings/NavigationAddressBar\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/NavigationAddressBar/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/NavigationAddressBar/\\n\\n\u003C$link to=\\\"$:/config/Navigation/UpdateAddressBar\\\">\u003C\u003Clingo Hint>>\u003C/$link>\\n\\n\u003C$radio tiddler=\\\"$:/config/Navigation/UpdateAddressBar\\\" value=\\\"permaview\\\"> \u003C\u003Clingo Permaview/Description>> \u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/Navigation/UpdateAddressBar\\\" value=\\\"permalink\\\"> \u003C\u003Clingo Permalink/Description>> \u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/Navigation/UpdateAddressBar\\\" value=\\\"no\\\"> \u003C\u003Clingo No/Description>> \u003C/$radio>\\n\"},\"$:/core/ui/ControlPanel/Settings/NavigationHistory\":{\"title\":\"$:/core/ui/ControlPanel/Settings/NavigationHistory\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/NavigationHistory/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/NavigationHistory/\\n\u003C$link to=\\\"$:/config/Navigation/UpdateHistory\\\">\u003C\u003Clingo Hint>>\u003C/$link>\\n\\n\u003C$radio tiddler=\\\"$:/config/Navigation/UpdateHistory\\\" value=\\\"yes\\\"> \u003C\u003Clingo Yes/Description>> \u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/Navigation/UpdateHistory\\\" value=\\\"no\\\"> \u003C\u003Clingo No/Description>> \u003C/$radio>\\n\"},\"$:/core/ui/ControlPanel/Settings/NavigationPermalinkviewMode\":{\"title\":\"$:/core/ui/ControlPanel/Settings/NavigationPermalinkviewMode\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/NavigationPermalinkviewMode/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/NavigationPermalinkviewMode/\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/Navigation/Permalinkview/CopyToClipboard\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> \u003C$link to=\\\"$:/config/Navigation/Permalinkview/CopyToClipboard\\\">\u003C\u003Clingo CopyToClipboard/Description>>\u003C/$link> \u003C/$checkbox>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/Navigation/Permalinkview/UpdateAddressBar\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> \u003C$link to=\\\"$:/config/Navigation/Permalinkview/UpdateAddressBar\\\">\u003C\u003Clingo UpdateAddressBar/Description>>\u003C/$link> \u003C/$checkbox>\\n\"},\"$:/core/ui/ControlPanel/Settings/PerformanceInstrumentation\":{\"title\":\"$:/core/ui/ControlPanel/Settings/PerformanceInstrumentation\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/PerformanceInstrumentation/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/PerformanceInstrumentation/\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/Performance/Instrumentation\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> \u003C$link to=\\\"$:/config/Performance/Instrumentation\\\">\u003C\u003Clingo Description>>\u003C/$link> \u003C/$checkbox>\\n\"},\"$:/core/ui/ControlPanel/Settings/TitleLinks\":{\"title\":\"$:/core/ui/ControlPanel/Settings/TitleLinks\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/TitleLinks/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/TitleLinks/\\n\u003C$link to=\\\"$:/config/Tiddlers/TitleLinks\\\">\u003C\u003Clingo Hint>>\u003C/$link>\\n\\n\u003C$radio tiddler=\\\"$:/config/Tiddlers/TitleLinks\\\" value=\\\"yes\\\"> \u003C\u003Clingo Yes/Description>> \u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/Tiddlers/TitleLinks\\\" value=\\\"no\\\"> \u003C\u003Clingo No/Description>> \u003C/$radio>\\n\"},\"$:/core/ui/ControlPanel/Settings/ToolbarButtonStyle\":{\"title\":\"$:/core/ui/ControlPanel/Settings/ToolbarButtonStyle\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/ToolbarButtonStyle/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/ToolbarButtonStyle/\\n\u003C$link to=\\\"$:/config/Toolbar/ButtonClass\\\">\u003C\u003Clingo \\\"Hint\\\">>\u003C/$link>\\n\\n\u003C$select tiddler=\\\"$:/config/Toolbar/ButtonClass\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ToolbarButtonStyle]]\\\">\\n\u003Coption value={{!!text}}>{{!!caption}}\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\\n\"},\"$:/core/ui/ControlPanel/Settings/ToolbarButtons\":{\"title\":\"$:/core/ui/ControlPanel/Settings/ToolbarButtons\",\"tags\":\"$:/tags/ControlPanel/Settings\",\"caption\":\"{{$:/language/ControlPanel/Settings/ToolbarButtons/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/ToolbarButtons/\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/Toolbar/Icons\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"yes\\\"> \u003C$link to=\\\"$:/config/Toolbar/Icons\\\">\u003C\u003Clingo Icons/Description>>\u003C/$link> \u003C/$checkbox>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/Toolbar/Text\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> \u003C$link to=\\\"$:/config/Toolbar/Text\\\">\u003C\u003Clingo Text/Description>>\u003C/$link> \u003C/$checkbox>\\n\"},\"$:/core/ui/ControlPanel/Settings\":{\"title\":\"$:/core/ui/ControlPanel/Settings\",\"tags\":\"$:/tags/ControlPanel\",\"caption\":\"{{$:/language/ControlPanel/Settings/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Settings/\\n\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Settings]]\\\">\\n\\n\u003Cdiv style=\\\"border-top:1px solid #eee;\\\">\\n\\n!! \u003C$link>\u003C$transclude field=\\\"caption\\\"/>\u003C/$link>\\n\\n\u003C$transclude/>\\n\\n\u003C/div>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/ControlPanel/StoryView\":{\"title\":\"$:/core/ui/ControlPanel/StoryView\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ControlPanel/StoryView/Caption}}\",\"text\":\"{{$:/snippets/viewswitcher}}\\n\"},\"$:/core/ui/ControlPanel/Stylesheets\":{\"title\":\"$:/core/ui/ControlPanel/Stylesheets\",\"tags\":\"$:/tags/ControlPanel/Advanced\",\"caption\":\"{{$:/language/ControlPanel/Stylesheets/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/\\n\\n\u003C\u003Clingo Stylesheets/Hint>>\\n\\n{{$:/snippets/peek-stylesheets}}\\n\"},\"$:/core/ui/ControlPanel/Theme\":{\"title\":\"$:/core/ui/ControlPanel/Theme\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ControlPanel/Theme/Caption}}\",\"text\":\"{{$:/snippets/themeswitcher}}\\n\"},\"$:/core/ui/ControlPanel/TiddlerFields\":{\"title\":\"$:/core/ui/ControlPanel/TiddlerFields\",\"tags\":\"$:/tags/ControlPanel/Advanced\",\"caption\":\"{{$:/language/ControlPanel/TiddlerFields/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/\\n\\n\u003C\u003Clingo TiddlerFields/Hint>>\\n\\n{{$:/snippets/allfields}}\"},\"$:/core/ui/ControlPanel/Toolbars/EditToolbar\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars/EditToolbar\",\"tags\":\"$:/tags/ControlPanel/Toolbars\",\"caption\":\"{{$:/language/ControlPanel/Toolbars/EditToolbar/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\\n\\\\define config-base() $:/config/EditToolbarButtons/Visibility/\\n\\n{{$:/language/ControlPanel/Toolbars/EditToolbar/Hint}}\\n\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$macrocall $name=\\\"list-tagged-draggable\\\" tag=\\\"$:/tags/EditToolbar\\\" itemTemplate=\\\"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\\\"/>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\"},\"$:/core/ui/ControlPanel/Toolbars/EditorItemTemplate\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars/EditorItemTemplate\",\"text\":\"\\\\define config-title()\\n$(config-base)$$(currentTiddler)$\\n\\\\end\\n\\n\u003C$draggable tiddler=\u003C\u003CcurrentTiddler>>>\\n\u003C$checkbox tiddler=\u003C\u003Cconfig-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> \u003Cspan class=\\\"tc-icon-wrapper\\\">\u003C$transclude tiddler={{!!icon}}/>\u003C/span> \u003C$transclude field=\\\"caption\\\"/> -- \u003Ci class=\\\"tc-muted\\\">\u003C$transclude field=\\\"description\\\"/>\u003C/i>\\n\u003C/$draggable>\\n\"},\"$:/core/ui/ControlPanel/Toolbars/EditorToolbar\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars/EditorToolbar\",\"tags\":\"$:/tags/ControlPanel/Toolbars\",\"caption\":\"{{$:/language/ControlPanel/Toolbars/EditorToolbar/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\\n\\\\define config-base() $:/config/EditorToolbarButtons/Visibility/\\n\\n{{$:/language/ControlPanel/Toolbars/EditorToolbar/Hint}}\\n\\n\u003C$macrocall $name=\\\"list-tagged-draggable\\\" tag=\\\"$:/tags/EditorToolbar\\\" itemTemplate=\\\"$:/core/ui/ControlPanel/Toolbars/EditorItemTemplate\\\"/>\\n\"},\"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\",\"text\":\"\\\\define config-title()\\n$(config-base)$$(currentTiddler)$\\n\\\\end\\n\\n\u003C$draggable tiddler=\u003C\u003CcurrentTiddler>>>\\n\u003C$checkbox tiddler=\u003C\u003Cconfig-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> \u003Cspan class=\\\"tc-icon-wrapper\\\"> \u003C$transclude field=\\\"caption\\\"/> \u003Ci class=\\\"tc-muted\\\">-- \u003C$transclude field=\\\"description\\\"/>\u003C/i>\u003C/span>\\n\u003C/$draggable>\\n\"},\"$:/core/ui/ControlPanel/Toolbars/PageControls\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars/PageControls\",\"tags\":\"$:/tags/ControlPanel/Toolbars\",\"caption\":\"{{$:/language/ControlPanel/Toolbars/PageControls/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\\n\\\\define config-base() $:/config/PageControlButtons/Visibility/\\n\\n{{$:/language/ControlPanel/Toolbars/PageControls/Hint}}\\n\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$macrocall $name=\\\"list-tagged-draggable\\\" tag=\\\"$:/tags/PageControls\\\" itemTemplate=\\\"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\\\"/>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\"},\"$:/core/ui/ControlPanel/Toolbars/ViewToolbar\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars/ViewToolbar\",\"tags\":\"$:/tags/ControlPanel/Toolbars\",\"caption\":\"{{$:/language/ControlPanel/Toolbars/ViewToolbar/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\\n\\\\define config-base() $:/config/ViewToolbarButtons/Visibility/\\n\\n{{$:/language/ControlPanel/Toolbars/ViewToolbar/Hint}}\\n\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$macrocall $name=\\\"list-tagged-draggable\\\" tag=\\\"$:/tags/ViewToolbar\\\" itemTemplate=\\\"$:/core/ui/ControlPanel/Toolbars/ItemTemplate\\\"/>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\"},\"$:/core/ui/ControlPanel/Toolbars\":{\"title\":\"$:/core/ui/ControlPanel/Toolbars\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ControlPanel/Toolbars/Caption}}\",\"text\":\"{{$:/language/ControlPanel/Toolbars/Hint}}\\n\\n\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel/Toolbars]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/Toolbars/ViewToolbar\\\" class=\\\"tc-vertical\\\" explicitState=\\\"$:/state/tabs/controlpanel/toolbars-1345989671\\\"/>\\n\u003C/div>\\n\"},\"$:/ControlPanel\":{\"title\":\"$:/ControlPanel\",\"icon\":\"$:/core/images/options-button\",\"color\":\"#bbb\",\"text\":\"\u003Cdiv class=\\\"tc-control-panel\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/ControlPanel]!has[draft.of]]\\\" default=\\\"$:/core/ui/ControlPanel/Info\\\" explicitState=\\\"$:/state/tab-1749438307\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/DefaultSearchResultList\":{\"title\":\"$:/core/ui/DefaultSearchResultList\",\"tags\":\"$:/tags/SearchResults\",\"caption\":\"{{$:/language/Search/DefaultResults/Caption}}\",\"first-search-filter\":\"[!is[system]search:title\u003CuserInput>sort[title]limit[250]]\",\"second-search-filter\":\"[!is[system]search\u003CuserInput>sort[title]limit[250]]\",\"text\":\"\\\\define searchResultList()\\n//\u003Csmall>{{$:/language/Search/Matches/Title}}\u003C/small>//\\n\\n\u003C$list filter=\\\"[\u003CuserInput>minlength[1]]\\\" variable=\\\"ignore\\\">\\n\u003C$list filter={{{ [\u003CconfigTiddler>get[first-search-filter]] }}}>\\n\u003Cspan class={{{[\u003CcurrentTiddler>addsuffix[-primaryList]] -[\u003CsearchListState>get[text]] +[then[]else[tc-list-item-selected]] }}}>\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$list>\\n\\n//\u003Csmall>{{$:/language/Search/Matches/All}}\u003C/small>//\\n\\n\u003C$list filter=\\\"[\u003CuserInput>minlength[1]]\\\" variable=\\\"ignore\\\">\\n\u003C$list filter={{{ [\u003CconfigTiddler>get[second-search-filter]] }}}>\\n\u003Cspan class={{{[\u003CcurrentTiddler>addsuffix[-secondaryList]] -[\u003CsearchListState>get[text]] +[then[]else[tc-list-item-selected]] }}}>\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$list>\\n\\n\\\\end\\n\u003C\u003CsearchResultList>>\\n\"},\"$:/core/ui/EditTemplate/body/preview/diffs-current\":{\"title\":\"$:/core/ui/EditTemplate/body/preview/diffs-current\",\"tags\":\"$:/tags/EditPreview\",\"caption\":\"{{$:/language/EditTemplate/Body/Preview/Type/DiffCurrent}}\",\"list-after\":\"$:/core/ui/EditTemplate/body/preview/output\",\"text\":\"\u003C$list filter=\\\"[\u003CcurrentTiddler>!is[image]]\\\" emptyMessage={{$:/core/ui/EditTemplate/body/preview/output}}>\\n\\n\u003C$macrocall $name=\\\"compareTiddlerText\\\" sourceTiddlerTitle={{!!draft.of}} destTiddlerTitle=\u003C\u003CcurrentTiddler>>/>\\n\\n\u003C/$list>\\n\\n\"},\"$:/core/ui/EditTemplate/body/preview/diffs-shadow\":{\"title\":\"$:/core/ui/EditTemplate/body/preview/diffs-shadow\",\"tags\":\"$:/tags/EditPreview\",\"caption\":\"{{$:/language/EditTemplate/Body/Preview/Type/DiffShadow}}\",\"list-after\":\"$:/core/ui/EditTemplate/body/preview/output\",\"text\":\"\u003C$list filter=\\\"[\u003CcurrentTiddler>!is[image]]\\\" emptyMessage={{$:/core/ui/EditTemplate/body/preview/output}}>\\n\\n\u003C$macrocall $name=\\\"compareTiddlerText\\\" sourceTiddlerTitle={{{ [{!!draft.of}shadowsource[]] }}} sourceSubTiddlerTitle={{!!draft.of}} destTiddlerTitle=\u003C\u003CcurrentTiddler>>/>\\n\\n\u003C/$list>\\n\\n\"},\"$:/core/ui/EditTemplate/body/preview/output\":{\"title\":\"$:/core/ui/EditTemplate/body/preview/output\",\"tags\":\"$:/tags/EditPreview\",\"caption\":\"{{$:/language/EditTemplate/Body/Preview/Type/Output}}\",\"text\":\"\\\\import [all[shadows+tiddlers]tag[$:/tags/Macro/View]!has[draft.of]]\\n\u003C$set name=\\\"tv-tiddler-preview\\\" value=\\\"yes\\\">\\n\\n\u003C$transclude />\\n\\n\u003C/$set>\\n\"},\"$:/state/showeditpreview\":{\"title\":\"$:/state/showeditpreview\",\"text\":\"no\"},\"$:/core/ui/EditTemplate/body/canonical-uri\":{\"title\":\"$:/core/ui/EditTemplate/body/canonical-uri\",\"text\":\"\\\\define lingo-base() $:/language/EditTemplate/Body/\\n\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n\u003C\u003Clingo External/Hint>>\\n\\n\u003Ca href={{!!_canonical_uri}}>\u003C$text text={{!!_canonical_uri}}/>\u003C/a>\\n\\n\u003C$edit-text field=\\\"_canonical_uri\\\" class=\\\"tc-edit-fields\\\" tabindex={{$:/config/EditTabIndex}} cancelPopups=\\\"yes\\\">\u003C/$edit-text>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/EditTemplate/body/default\":{\"title\":\"$:/core/ui/EditTemplate/body/default\",\"text\":\"\\\\define config-visibility-title()\\n$:/config/EditorToolbarButtons/Visibility/$(currentTiddler)$\\n\\\\end\\n\\n\\\\define importFileActions()\\n\u003C$action-popup $state=\u003C\u003CimportState>> $coords=\\\"(0,0,0,0)\\\" $floating=\\\"yes\\\"/>\\n\\\\end\\n\\n\u003C$set name=\\\"edit-preview-state\\\" value={{{ [{$:/config/ShowEditPreview/PerTiddler}!match[yes]then[$:/state/showeditpreview]] :else[\u003Cqualify \\\"$:/state/showeditpreview\\\">] }}}>\\n\u003C$vars importTitle=\u003C\u003Cqualify $:/ImportImage>> importState=\u003C\u003Cqualify $:/state/ImportImage>> >\\n\u003C$dropzone importTitle=\u003C\u003CimportTitle>> autoOpenOnImport=\\\"no\\\" contentTypesFilter={{$:/config/Editor/ImportContentTypesFilter}} class=\\\"tc-dropzone-editor\\\" enable={{{ [{$:/config/DragAndDrop/Enable}match[no]] :else[subfilter{$:/config/Editor/EnableImportFilter}then[yes]else[no]] }}} filesOnly=\\\"yes\\\" actions=\u003C\u003CimportFileActions>> >\u003C$reveal stateTitle=\u003C\u003Cedit-preview-state>> type=\\\"match\\\" text=\\\"yes\\\" tag=\\\"div\\\">\\n\u003Cdiv class=\\\"tc-tiddler-preview\\\">\\n\\n\u003C$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n\\n\u003Cdiv class=\\\"tc-tiddler-preview-preview\\\">\\n\\n\u003C$transclude tiddler={{$:/state/editpreviewtype}} mode=\\\"inline\\\">\\n\\n\u003C$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/preview/output\\\" mode=\\\"inline\\\"/>\\n\\n\u003C/$transclude>\\n\\n\u003C/div>\\n\\n\u003C/div>\\n\u003C/$reveal>\\n\\n\u003C$reveal stateTitle=\u003C\u003Cedit-preview-state>> type=\\\"nomatch\\\" text=\\\"yes\\\" tag=\\\"div\\\">\\n\\n\u003C$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/editor\\\" mode=\\\"inline\\\"/>\\n\\n\u003C/$reveal>\\n\u003C/$dropzone>\\n\u003C/$vars>\\n\u003C/$set>\\n\"},\"$:/core/ui/EditTemplate/body/editor\":{\"title\":\"$:/core/ui/EditTemplate/body/editor\",\"text\":\"\u003C$edit\\n\\n  field=\\\"text\\\"\\n  class=\\\"tc-edit-texteditor tc-edit-texteditor-body\\\"\\n  placeholder={{$:/language/EditTemplate/Body/Placeholder}}\\n  tabindex={{$:/config/EditTabIndex}}\\n  focus={{{ [{$:/config/AutoFocus}match[text]then[true]] ~[[false]] }}}\\n  cancelPopups=\\\"yes\\\"\\n  fileDrop={{{ [{$:/config/DragAndDrop/Enable}match[no]] :else[subfilter{$:/config/Editor/EnableImportFilter}then[yes]else[no]] }}}\\n\\n>\u003C$set\\n\\n  name=\\\"targetTiddler\\\"\\n  value=\u003C\u003CcurrentTiddler>>\\n\\n>\u003C$list\\n\\n  filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditorToolbar]!has[draft.of]]\\\"\\n\\n>\u003C$reveal\\n\\n  type=\\\"nomatch\\\"\\n  state=\u003C\u003Cconfig-visibility-title>>\\n  text=\\\"hide\\\"\\n  class=\\\"tc-text-editor-toolbar-item-wrapper\\\"\\n\\n>\u003C$transclude\\n\\n  tiddler=\\\"$:/core/ui/EditTemplate/body/toolbar/button\\\"\\n  mode=\\\"inline\\\"\\n\\n/>\u003C/$reveal>\u003C/$list>\u003C$list\\n\\n  filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditorTools]!has[draft.of]]\\\"\\n\\n>\u003C$list\\n\\tfilter={{!!condition}}\\n\\tvariable=\\\"list-condition\\\"\\n>\u003C$transclude/>\\n\u003C/$list>\u003C/$list>\u003C/$set>\u003C/$edit>\\n\"},\"$:/core/ui/EditTemplate/body/toolbar/button\":{\"title\":\"$:/core/ui/EditTemplate/body/toolbar/button\",\"text\":\"\\\\define toolbar-button-icon()\\n\u003C$list\\n\\n  filter=\\\"[all[current]!has[custom-icon]]\\\"\\n  variable=\\\"no-custom-icon\\\"\\n\\n>\u003C$transclude\\n\\n  tiddler={{!!icon}}\\n\\n/>\u003C/$list>\\n\\\\end\\n\\n\\\\define toolbar-button-tooltip()\\n{{!!description}}\u003C$macrocall $name=\\\"displayshortcuts\\\" $output=\\\"text/plain\\\" shortcuts={{!!shortcuts}} prefix=\\\"` - [\\\" separator=\\\"] [\\\" suffix=\\\"]`\\\"/>\\n\\\\end\\n\\n\\\\define toolbar-button()\\n\u003C$list\\n\\n  filter={{!!condition}}\\n  variable=\\\"list-condition\\\"\\n\\n>\u003C$wikify\\n\\n  name=\\\"tooltip-text\\\"\\n  text=\u003C\u003Ctoolbar-button-tooltip>>\\n  mode=\\\"inline\\\"\\n  output=\\\"text\\\"\\n\\n>\u003C$list\\n\\n  filter=\\\"[all[current]!has[dropdown]]\\\"\\n  variable=\\\"no-dropdown\\\"\\n\\n>\u003C$set name=disabled filter={{!!condition-disabled}}>\u003C$button\\n\\n  class=\\\"tc-btn-invisible $(buttonClasses)$\\\"\\n  tooltip=\u003C\u003Ctooltip-text>>\\n  actions={{!!actions}}\\n  disabled=\u003C\u003Cdisabled>>\\n\\n>\u003Cspan\\n\\n  data-tw-keyboard-shortcut={{{ [\u003Cdisabled>match[yes]then[]else{!!shortcuts}] }}}\\n\\n/>\u003C\u003Ctoolbar-button-icon>>\u003C$transclude\\n\\n  tiddler=\u003C\u003CcurrentTiddler>>\\n  field=\\\"text\\\"\\n\\n/>\u003C/$button>\u003C/$set>\u003C/$list>\u003C$list\\n\\n  filter=\\\"[all[current]has[dropdown]]\\\"\\n  variable=\\\"dropdown\\\"\\n\\n>\u003C$set\\n\\n  name=\\\"dropdown-state\\\"\\n  value=\u003C\u003Cqualify \\\"$:/state/EditorToolbarDropdown\\\">>\\n\\n>\u003C$set name=disabled filter={{!!condition-disabled}}>\u003C$button\\n\\n  popup=\u003C\u003Cdropdown-state>>\\n  class=\\\"tc-popup-keep tc-btn-invisible $(buttonClasses)$\\\"\\n  selectedClass=\\\"tc-selected\\\"\\n  tooltip=\u003C\u003Ctooltip-text>>\\n  actions={{!!actions}}\\n  disabled=\u003C\u003Cdisabled>>\\n\\n>\u003Cspan\\n\\n  data-tw-keyboard-shortcut={{{ [\u003Cdisabled>match[yes]then[]else{!!shortcuts}] }}}\\n\\n/>\u003C\u003Ctoolbar-button-icon>>\u003C$transclude\\n\\n  tiddler=\u003C\u003CcurrentTiddler>>\\n  field=\\\"text\\\"\\n\\n/>\u003C/$button>\u003C/$set>\u003C$reveal\\n\\n  state=\u003C\u003Cdropdown-state>>\\n  type=\\\"popup\\\"\\n  position=\\\"below\\\"\\n  animate=\\\"yes\\\"\\n  tag=\\\"span\\\"\\n\\n>\u003Cdiv\\n\\n  class=\\\"tc-drop-down tc-popup-keep\\\"\\n\\n>\u003C$transclude\\n\\n  tiddler={{!!dropdown}}\\n  mode=\\\"block\\\"\\n\\n/>\u003C/div>\u003C/$reveal>\u003C/$set>\u003C/$list>\u003C/$wikify>\u003C/$list>\\n\\\\end\\n\\n\\\\define toolbar-button-outer()\\n\u003C$set\\n\\n  name=\\\"buttonClasses\\\"\\n  value={{!!button-classes}}\\n\\n>\u003C\u003Ctoolbar-button>>\u003C/$set>\\n\\\\end\\n\\n\u003C\u003Ctoolbar-button-outer>>\"},\"$:/core/ui/EditTemplate/body\":{\"title\":\"$:/core/ui/EditTemplate/body\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"\u003C$transclude tiddler={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/EditTemplateBodyFilter]!is[draft]get[text]] :and[!is[blank]else[$:/core/ui/EditTemplate/body/default]] }}} />\\n\"},\"$:/core/ui/EditTemplate/controls\":{\"title\":\"$:/core/ui/EditTemplate/controls\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"\\\\define config-title()\\n$:/config/EditToolbarButtons/Visibility/$(listItem)$\\n\\\\end\\n\u003Cdiv class=\\\"tc-tiddler-title tc-tiddler-edit-title\\\">\\n\u003C$view field=\\\"title\\\"/>\\n\u003Cspan class=\\\"tc-tiddler-controls tc-titlebar\\\">\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditToolbar]!has[draft.of]]\\\" variable=\\\"listItem\\\">\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cconfig-title>> text=\\\"hide\\\">\u003C$transclude tiddler=\u003C\u003ClistItem>>/>\u003C/$reveal>\u003C/$list>\u003C/span>\\n\u003Cdiv style=\\\"clear: both;\\\">\u003C/div>\\n\u003C/div>\\n\"},\"$:/core/ui/EditTemplate/fieldEditor/default\":{\"title\":\"$:/core/ui/EditTemplate/fieldEditor/default\",\"text\":\"\u003C$edit-text tiddler=\u003C\u003CcurrentTiddler>> field=\u003C\u003CcurrentField>> default=\\\"\\\" class=\\\"tc-edit-texteditor\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Value/Placeholder}} tabindex={{$:/config/EditTabIndex}} cancelPopups=\\\"yes\\\"/>\"},\"$:/core/ui/EditTemplate/fields\":{\"title\":\"$:/core/ui/EditTemplate/fields\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"\\\\define lingo-base() $:/language/EditTemplate/\\n\\\\define config-title()\\n$:/config/EditTemplateFields/Visibility/$(currentField)$\\n\\\\end\\n\\n\\\\define config-filter()\\n[[hide]] -[title{$(config-title)$}]\\n\\\\end\\n\\n\\\\define current-tiddler-new-field-selector()\\n[data-tiddler-title=\\\"$(currentTiddlerCSSescaped)$\\\"] .tc-edit-field-add-name-wrapper input\\n\\\\end\\n\\n\\\\define new-field-actions()\\n\u003C$action-sendmessage $message=\\\"tm-add-field\\\" $name={{{ [\u003CnewFieldNameTiddler>get[text]] }}} $value={{{ [\u003CnewFieldNameTiddler>get[text]] :map[\u003CnewFieldValueTiddler>get\u003CcurrentTiddler>] }}}/>\\n\u003C$action-deletetiddler $filter=\\\"[\u003CnewFieldNameTiddler>] [\u003CnewFieldValueTiddler>] [\u003CstoreTitle>] [\u003CsearchListState>]\\\"/>\\n\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\u003C\u003Ccurrent-tiddler-new-field-selector>>/>\\n\\\\end\\n\\n\\\\define delete-state-tiddlers() \u003C$action-deletetiddler $filter=\\\"[\u003CnewFieldNameTiddler>] [\u003CstoreTitle>] [\u003CsearchListState>]\\\"/>\\n\\n\\\\define cancel-search-actions-inner()\\n\u003C$list filter=\\\"[\u003CstoreTitle>has[text]] [\u003CnewFieldNameTiddler>has[text]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\u003C\u003Ccancel-delete-tiddler-actions \\\"cancel\\\">>\\\"\\\"\\\">\\n\u003C\u003Cdelete-state-tiddlers>>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define cancel-search-actions()\\n\u003C$set name=\\\"userInput\\\" value={{{ [\u003CstoreTitle>get[text]] }}}>\\n\u003C$list filter=\\\"[\u003CnewFieldNameTiddler>get[text]!match\u003CuserInput>]\\\" emptyMessage=\\\"\\\"\\\"\u003C\u003Ccancel-search-actions-inner>>\\\"\\\"\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003CnewFieldNameTiddler>> text=\u003C\u003CuserInput>>/>\u003C$action-setfield $tiddler=\u003C\u003CrefreshTitle>> text=\\\"yes\\\"/>\\n\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define new-field()\\n\u003C$vars name={{{ [\u003CnewFieldNameTiddler>get[text]] }}}>\\n\u003C$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=\u003C\u003Cname>>>\\n\u003C$button tooltip=\u003C\u003Clingo Fields/Add/Button/Hint>>>\\n\u003C$action-sendmessage $message=\\\"tm-add-field\\\"\\n$name=\u003C\u003Cname>>\\n$value={{{ [\u003CnewFieldValueTiddler>get\u003Cname>] }}}/>\\n\u003C$action-deletetiddler $filter=\\\"[\u003CnewFieldNameTiddler>] [\u003CnewFieldValueTiddler>] [\u003CstoreTitle>] [\u003CsearchListState>]\\\"/>\\n\u003C\u003Clingo Fields/Add/Button>>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" text=\\\"\\\" default=\u003C\u003Cname>>>\\n\u003C$button>\\n\u003C\u003Clingo Fields/Add/Button>>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/$vars>\\n\\\\end\\n\\\\whitespace trim\\n\\n\u003Cdiv class=\\\"tc-edit-fields\\\">\\n\u003Ctable class={{{ [all[current]fields[]] :filter[lookup[$:/config/EditTemplateFields/Visibility/]!match[hide]] +[count[]!match[0]] +[then[tc-edit-fields]] ~[[tc-edit-fields tc-edit-fields-small]] }}}>\\n\u003Ctbody>\\n\u003C$list filter=\\\"[all[current]fields[]] +[sort[title]]\\\" variable=\\\"currentField\\\" storyview=\\\"pop\\\">\\n\u003C$list filter=\u003C\u003Cconfig-filter>> variable=\\\"temp\\\">\\n\u003Ctr class=\\\"tc-edit-field\\\">\\n\u003Ctd class=\\\"tc-edit-field-name\\\">\\n\u003C$text text=\u003C\u003CcurrentField>>/>:\u003C/td>\\n\u003Ctd class=\\\"tc-edit-field-value\\\">\\n\u003C$keyboard key=\\\"((delete-field))\\\" actions=\\\"\\\"\\\"\u003C$action-deletefield $field=\u003C\u003CcurrentField>>/>\u003C$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [\u003CcurrentTiddler>escapecss[]] }}}>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\u003C\u003Ccurrent-tiddler-new-field-selector>>/>\u003C/$set>\\\"\\\"\\\">\\n\u003C$transclude tiddler={{{ [\u003CcurrentField>] :cascade[all[shadows+tiddlers]tag[$:/tags/FieldEditorFilter]!is[draft]get[text]] :and[!is[blank]else{$:/core/ui/EditTemplate/fieldEditor/default}] }}} />\\n\u003C/$keyboard>\\n\u003C/td>\\n\u003Ctd class=\\\"tc-edit-field-remove\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/language/EditTemplate/Field/Remove/Hint}} aria-label={{$:/language/EditTemplate/Field/Remove/Caption}}>\\n\u003C$action-deletefield $field=\u003C\u003CcurrentField>>/>\u003C$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [\u003CcurrentTiddler>escapecss[]] }}}>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\u003C\u003Ccurrent-tiddler-new-field-selector>>/>\u003C/$set>\\n{{$:/core/images/delete-button}}\\n\u003C/$button>\\n\u003C/td>\\n\u003C/tr>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/tbody>\\n\u003C/table>\\n\u003C/div>\\n\\n\u003C$fieldmangler>\\n\u003Cdiv class=\\\"tc-edit-field-add\\\">\\n\u003Cem class=\\\"tc-edit tc-small-gap-right\\\">\\n\u003C\u003Clingo Fields/Add/Prompt>>\\n\u003C/em>\\n\u003C$vars refreshTitle=\u003C\u003Cqualify \\\"$:/temp/fieldname/refresh\\\">> storeTitle=\u003C\u003CnewFieldNameInputTiddler>> searchListState=\u003C\u003CnewFieldNameSelectionTiddler>>>\\n\u003Cdiv class=\\\"tc-edit-field-add-name-wrapper\\\">\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\u003C\u003CnewFieldNameTiddler>> storeTitle=\u003C\u003CstoreTitle>> refreshTitle=\u003C\u003CrefreshTitle>>\\n\\t\\tselectionStateTitle=\u003C\u003CsearchListState>> tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Fields/Add/Name/Placeholder}}\\n\\t\\tfocusPopup=\u003C\u003Cqualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-edit-texteditor tc-popup-handle\\\" tabindex={{$:/config/EditTabIndex}}\\n\\t\\tfocus={{{ [{$:/config/AutoFocus}match[fields]then[true]] ~[[false]] }}} cancelPopups=\\\"yes\\\"\\n\\t\\tconfigTiddlerFilter=\\\"[[$:/config/EditMode/fieldname-filter]]\\\" inputCancelActions=\u003C\u003Ccancel-search-actions>> />\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/field-dropdown\\\">> class=\\\"tc-btn-invisible tc-btn-dropdown tc-small-gap\\\" tooltip={{$:/language/EditTemplate/Field/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Field/Dropdown/Caption}}>{{$:/core/images/down-arrow}}\u003C/$button>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/field-dropdown\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n\u003C$set name=\\\"tv-show-missing-links\\\" value=\\\"yes\\\">\\n\u003C$linkcatcher to=\u003C\u003CnewFieldNameTiddler>>>\\n\u003Cdiv class=\\\"tc-dropdown-item\\\">\\n\u003C\u003Clingo Fields/Add/Dropdown/User>>\\n\u003C/div>\\n\u003C$set name=\\\"newFieldName\\\" value={{{ [\u003CstoreTitle>get[text]] }}}>\\n\u003C$list filter=\\\"[!is[shadow]!is[system]fields[]search:title\u003CnewFieldName>sort[]] -created -creator -draft.of -draft.title -modified -modifier -tags -text -title -type\\\"  variable=\\\"currentField\\\">\\n\u003C$list filter=\\\"[\u003CcurrentField>addsuffix[-primaryList]] -[\u003CsearchListState>get[text]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$link to=\u003C\u003CcurrentField>> class=\\\"tc-list-item-selected\\\">\u003C$text text=\u003C\u003CcurrentField>>/>\u003C/$link>\\\"\\\"\\\">\\n\u003C$link to=\u003C\u003CcurrentField>>>\\n\u003C$text text=\u003C\u003CcurrentField>>/>\\n\u003C/$link>\\n\u003C/$list>\\n\u003C/$list>\\n\u003Cdiv class=\\\"tc-dropdown-item\\\">\\n\u003C\u003Clingo Fields/Add/Dropdown/System>>\\n\u003C/div>\\n\u003C$list filter=\\\"[fields[]search:title\u003CnewFieldName>sort[]] -[!is[shadow]!is[system]fields[]]\\\" variable=\\\"currentField\\\">\\n\u003C$list filter=\\\"[\u003CcurrentField>addsuffix[-secondaryList]] -[\u003CsearchListState>get[text]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$link to=\u003C\u003CcurrentField>> class=\\\"tc-list-item-selected\\\">\u003C$text text=\u003C\u003CcurrentField>>/>\u003C/$link>\\\"\\\"\\\">\\n\u003C$link to=\u003C\u003CcurrentField>>>\\n\u003C$text text=\u003C\u003CcurrentField>>/>\\n\u003C/$link>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$linkcatcher>\\n\u003C/$set>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/div>\\n\u003C$let currentTiddler=\u003C\u003CnewFieldValueTiddler>> currentField={{{ [\u003CnewFieldNameTiddler>get[text]] }}}>\\n\u003Cspan class=\\\"tc-edit-field-add-value tc-small-gap-right\\\">\\n\u003C$set name=\\\"currentTiddlerCSSescaped\\\" value={{{ [\u003CcurrentTiddler>escapecss[]] }}}>\\n\u003C$keyboard key=\\\"((add-field))\\\" actions=\u003C\u003Cnew-field-actions>>>\\n\u003C$transclude tiddler={{{ [\u003CcurrentField>] :cascade[all[shadows+tiddlers]tag[$:/tags/FieldEditorFilter]!is[draft]get[text]] :and[!is[blank]else{$:/core/ui/EditTemplate/fieldEditor/default}] }}} />\\n\u003C/$keyboard>\\n\u003C/$set>\\n\u003C/span>\\n\u003Cspan class=\\\"tc-edit-field-add-button\\\">\\n\u003C$macrocall $name=\\\"new-field\\\"/>\\n\u003C/span>\\n\u003C/$let>\\n\u003C/$vars>\\n\u003C/div>\\n\u003C/$fieldmangler>\\n\"},\"$:/core/ui/EditTemplate/shadow\":{\"title\":\"$:/core/ui/EditTemplate/shadow\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"\\\\define lingo-base() $:/language/EditTemplate/Shadow/\\n\\\\define pluginLinkBody()\\n\u003C$link to=\\\"\\\"\\\"$(pluginTitle)$\\\"\\\"\\\">\\n\u003C$text text=\\\"\\\"\\\"$(pluginTitle)$\\\"\\\"\\\"/>\\n\u003C/$link>\\n\\\\end\\n\u003C$list filter=\\\"[all[current]get[draft.of]is[shadow]!is[tiddler]]\\\">\\n\\n\u003C$list filter=\\\"[all[current]shadowsource[]]\\\" variable=\\\"pluginTitle\\\">\\n\\n\u003C$set name=\\\"pluginLink\\\" value=\u003C\u003CpluginLinkBody>>>\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n\u003C\u003Clingo Warning>>\\n\\n\u003C/div>\\n\u003C/$set>\\n\u003C/$list>\\n\\n\u003C/$list>\\n\\n\u003C$list filter=\\\"[all[current]get[draft.of]is[shadow]is[tiddler]]\\\">\\n\\n\u003C$list filter=\\\"[all[current]shadowsource[]]\\\" variable=\\\"pluginTitle\\\">\\n\\n\u003C$set name=\\\"pluginLink\\\" value=\u003C\u003CpluginLinkBody>>>\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n\u003C\u003Clingo OverriddenWarning>>\\n\\n\u003C/div>\\n\u003C/$set>\\n\u003C/$list>\\n\\n\u003C/$list>\"},\"$:/core/ui/EditTemplate/tags\":{\"title\":\"$:/core/ui/EditTemplate/tags\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"\\\\whitespace trim\\n\\n\\\\define lingo-base() $:/language/EditTemplate/\\n\\n\\\\define tag-styles()\\nbackground-color:$(backgroundColor)$;\\nfill:$(foregroundColor)$;\\ncolor:$(foregroundColor)$;\\n\\\\end\\n\\n\\\\define tag-body-inner(colour,fallbackTarget,colourA,colourB,icon,tagField:\\\"tags\\\")\\n\\\\whitespace trim\\n\u003C$vars foregroundColor=\u003C\u003Ccontrastcolour target:\\\"\\\"\\\"$colour$\\\"\\\"\\\" fallbackTarget:\\\"\\\"\\\"$fallbackTarget$\\\"\\\"\\\" colourA:\\\"\\\"\\\"$colourA$\\\"\\\"\\\" colourB:\\\"\\\"\\\"$colourB$\\\"\\\"\\\">> backgroundColor=\\\"\\\"\\\"$colour$\\\"\\\"\\\">\\n\u003Cspan style=\u003C\u003Ctag-styles>> class=\\\"tc-tag-label tc-tag-list-item tc-small-gap-right\\\">\\n\u003C$transclude tiddler=\\\"\\\"\\\"$icon$\\\"\\\"\\\"/>\u003C$view field=\\\"title\\\" format=\\\"text\\\" />\\n\u003C$button class=\\\"tc-btn-invisible tc-remove-tag-button\\\" style=\u003C\u003Ctag-styles>>>\u003C$action-listops $tiddler=\u003C\u003CsaveTiddler>> $field=\u003C\u003C__tagField__>> $subfilter=\\\"-[{!!title}]\\\"/>{{$:/core/images/close-button}}\u003C/$button>\\n\u003C/span>\\n\u003C/$vars>\\n\\\\end\\n\\n\\\\define tag-body(colour,palette,icon,tagField:\\\"tags\\\")\\n\u003C$macrocall $name=\\\"tag-body-inner\\\" colour=\\\"\\\"\\\"$colour$\\\"\\\"\\\" fallbackTarget={{$palette$##tag-background}} colourA={{$palette$##foreground}} colourB={{$palette$##background}} icon=\\\"\\\"\\\"$icon$\\\"\\\"\\\" tagField=\u003C\u003C__tagField__>>/>\\n\\\\end\\n\\n\\\\define edit-tags-template(tagField:\\\"tags\\\")\\n\\\\whitespace trim\\n\u003Cdiv class=\\\"tc-edit-tags\\\">\\n\u003C$list filter=\\\"[list[!!$tagField$]sort[title]]\\\" storyview=\\\"pop\\\">\\n\u003C$macrocall $name=\\\"tag-body\\\" colour={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerColourFilter]!is[draft]get[text]] }}} palette={{$:/palette}} icon={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerIconFilter]!is[draft]get[text]] }}} tagField=\u003C\u003C__tagField__>>/>\\n\u003C/$list>\\n\u003C$vars tabIndex={{$:/config/EditTabIndex}} cancelPopups=\\\"yes\\\">\\n\u003C$macrocall $name=\\\"tag-picker\\\" tagField=\u003C\u003C__tagField__>>/>\\n\u003C/$vars>\\n\u003C/div>\\n\\\\end\\n\u003C$set name=\\\"saveTiddler\\\" value=\u003C\u003CcurrentTiddler>>>\\n\u003C$macrocall $name=\\\"edit-tags-template\\\" tagField=\u003C\u003CtagField>>/>\\n\u003C/$set>\\n\"},\"$:/core/ui/EditTemplate/title\":{\"title\":\"$:/core/ui/EditTemplate/title\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"\u003C$edit-text field=\\\"draft.title\\\" class=\\\"tc-titlebar tc-edit-texteditor\\\" focus={{{ [{$:/config/AutoFocus}match[title]then[true]] ~[[false]] }}} tabindex={{$:/config/EditTabIndex}} cancelPopups=\\\"yes\\\"/>\\n\\n\u003C$vars pattern=\\\"\\\"\\\"[\\\\|\\\\[\\\\]{}]\\\"\\\"\\\" bad-chars=\\\"\\\"\\\"`| [ ] { }`\\\"\\\"\\\">\\n\\n\u003C$list filter=\\\"[all[current]regexp:draft.title\u003Cpattern>]\\\" variable=\\\"listItem\\\">\\n\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/BadCharacterWarning}}\\n\\n\u003C/div>\\n\\n\u003C/$list>\\n\\n\u003C/$vars>\\n\\n\u003C$reveal state=\\\"!!draft.title\\\" type=\\\"nomatch\\\" text={{!!draft.of}} tag=\\\"div\\\">\\n\\n\u003C$list filter=\\\"[{!!draft.title}!is[missing]]\\\" variable=\\\"listItem\\\">\\n\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/Exists/Prompt}}: \u003C$link to={{!!draft.title}} />\\n\\n\u003C/div>\\n\\n\u003C/$list>\\n\\n\u003C$list filter=\\\"[{!!draft.of}!is[missing]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$vars fromTitle={{!!draft.of}} toTitle={{!!draft.title}}>\\n\\n\u003C$checkbox tiddler=\\\"$:/config/RelinkOnRename\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> {{$:/language/EditTemplate/Title/Relink/Prompt}}\u003C/$checkbox>\\n\\n\u003C$list filter=\\\"[title\u003CfromTitle>backlinks[]limit[1]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$vars stateTiddler=\u003C\u003Cqualify \\\"$:/state/edit/references\\\">> >\\n\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CstateTiddler>> text=\\\"show\\\">\\n\u003C$button set=\u003C\u003CstateTiddler>> setTo=\\\"show\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/right-arrow}} \\n\u003C\u003Clingo EditTemplate/Title/References/Prompt>>\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CstateTiddler>> text=\\\"show\\\">\\n\u003C$button set=\u003C\u003CstateTiddler>> setTo=\\\"hide\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/down-arrow}} \\n\u003C\u003Clingo EditTemplate/Title/References/Prompt>>\u003C/$button>\\n\u003C/$reveal>\\n\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CstateTiddler>> text=\\\"show\\\">\\n\u003C$tiddler tiddler=\u003C\u003CfromTitle>> >\\n\u003C$transclude tiddler=\\\"$:/core/ui/TiddlerInfo/References\\\"/>\\n\u003C/$tiddler>\\n\u003C/$reveal>\\n\\n\u003C/$vars>\\n\\n\u003C/$list>\\n\\n\u003C/$vars>\\n\\n\u003C/$list>\\n\\n\u003C/$reveal>\\n\"},\"$:/core/ui/EditTemplate/type\":{\"title\":\"$:/core/ui/EditTemplate/type\",\"tags\":\"$:/tags/EditTemplate\",\"first-search-filter\":\"[all[shadows+tiddlers]prefix[$:/language/Docs/Types/]sort[description]sort[group-sort]removeprefix[$:/language/Docs/Types/]search\u003CuserInput>]\",\"text\":\"\\\\define lingo-base() $:/language/EditTemplate/\\n\\\\define input-cancel-actions() \u003C$list filter=\\\"[\u003CstoreTitle>get[text]] [\u003CcurrentTiddler>get[type]] +[limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003C\u003Ccancel-delete-tiddler-actions \\\"cancel\\\">>\\\"\\\"\\\">\u003C$action-sendmessage $message=\\\"tm-remove-field\\\" $param=\\\"type\\\"/>\u003C$action-deletetiddler $filter=\\\"[\u003CtypeInputTiddler>] [\u003CrefreshTitle>] [\u003CtypeSelectionTiddler>]\\\"/>\u003C/$list>\\n\\\\whitespace trim\\n\u003C$set name=\\\"refreshTitle\\\" value=\u003C\u003Cqualify \\\"$:/temp/type-search/refresh\\\">>>\\n\u003Cdiv class=\\\"tc-edit-type-selector-wrapper\\\">\\n\u003Cem class=\\\"tc-edit tc-small-gap-right\\\">\u003C\u003Clingo Type/Prompt>>\u003C/em>\\n\u003Cdiv class=\\\"tc-type-selector-dropdown-wrapper\\\">\\n\u003Cdiv class=\\\"tc-type-selector\\\">\u003C$fieldmangler>\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\u003C\u003CcurrentTiddler>> storeTitle=\u003C\u003CtypeInputTiddler>> refreshTitle=\u003C\u003CrefreshTitle>> selectionStateTitle=\u003C\u003CtypeSelectionTiddler>> field=\\\"type\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/EditTemplate/Type/Placeholder}} focusPopup=\u003C\u003Cqualify \\\"$:/state/popup/type-dropdown\\\">> class=\\\"tc-edit-typeeditor tc-edit-texteditor tc-popup-handle\\\" tabindex={{$:/config/EditTabIndex}} focus={{{ [{$:/config/AutoFocus}match[type]then[true]] ~[[false]] }}} cancelPopups=\\\"yes\\\" configTiddlerFilter=\\\"[[$:/core/ui/EditTemplate/type]]\\\" inputCancelActions=\u003C\u003Cinput-cancel-actions>>/>\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/type-dropdown\\\">> class=\\\"tc-btn-invisible tc-btn-dropdown tc-small-gap\\\" tooltip={{$:/language/EditTemplate/Type/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Type/Dropdown/Caption}}>{{$:/core/images/down-arrow}}\u003C/$button>\u003C$button message=\\\"tm-remove-field\\\" param=\\\"type\\\" class=\\\"tc-btn-invisible tc-btn-icon\\\" tooltip={{$:/language/EditTemplate/Type/Delete/Hint}} aria-label={{$:/language/EditTemplate/Type/Delete/Caption}}>{{$:/core/images/delete-button}}\u003C$action-deletetiddler $filter=\\\"[\u003CstoreTitle>] [\u003CrefreshTitle>] [\u003CselectionStateTitle>]\\\"/>\u003C/$button>\\n\u003C/$fieldmangler>\u003C/div>\\n\\n\u003Cdiv class=\\\"tc-block-dropdown-wrapper\\\">\\n\u003C$set name=\\\"tv-show-missing-links\\\" value=\\\"yes\\\">\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/type-dropdown\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-edit-type-dropdown\\\">\\n\u003C$linkcatcher to=\\\"!!type\\\">\\n\u003C$list filter='[all[shadows+tiddlers]prefix[$:/language/Docs/Types/]each[group]sort[group-sort]]'>\\n\u003Cdiv class=\\\"tc-dropdown-item\\\">\\n\u003C$text text={{!!group}}/>\\n\u003C/div>\\n\u003C$set name=\\\"userInput\\\" value={{{ [\u003CtypeInputTiddler>get[text]] }}}>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]prefix[$:/language/Docs/Types/]group{!!group}] +[sort[description]] +[removeprefix[$:/language/Docs/Types/]] +[search\u003CuserInput>]\\\">\u003Cspan class={{{ [\u003CcurrentTiddler>addsuffix[-primaryList]] -[\u003CtypeSelectionTiddler>get[text]] +[then[]else[tc-list-item-selected]] }}}>\u003C$link to={{{ [\u003CcurrentTiddler>addprefix[$:/language/Docs/Types/]get[name]] }}}>\u003C$view tiddler={{{ [\u003CcurrentTiddler>addprefix[$:/language/Docs/Types/]] }}} field=\\\"description\\\"/>\u003C$text text=\\\" \\\"/>(\u003C$view tiddler={{{ [\u003CcurrentTiddler>addprefix[$:/language/Docs/Types/]] }}} field=\\\"name\\\"/>)\u003C/$link>\u003C/span>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/$linkcatcher>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/$set>\\n\u003C/div>\\n\u003C/div>\\n\u003C/div>\\n\u003C/$set>\\n\"},\"$:/core/ui/EditTemplate\":{\"title\":\"$:/core/ui/EditTemplate\",\"text\":\"\\\\define delete-edittemplate-state-tiddlers() \u003C$action-deletetiddler $filter=\\\"[\u003CnewFieldNameTiddler>] [\u003CnewFieldValueTiddler>] [\u003CnewFieldNameInputTiddler>] [\u003CnewFieldNameSelectionTiddler>] [\u003CnewTagNameTiddler>] [\u003CnewTagNameInputTiddler>] [\u003CnewTagNameSelectionTiddler>] [\u003CtypeInputTiddler>] [\u003CtypeSelectionTiddler>]\\\"/>\\n\\\\define save-tiddler-actions()\\n\u003C$action-sendmessage $message=\\\"tm-add-tag\\\" $param={{{ [\u003CnewTagNameTiddler>get[text]] }}}/>\\n\u003C$action-sendmessage $message=\\\"tm-add-field\\\" $name={{{ [\u003CnewFieldNameTiddler>get[text]] }}} $value={{{ [\u003CnewFieldValueTiddler>get[text]] }}}/>\\n\u003C\u003Cdelete-edittemplate-state-tiddlers>>\\n\u003C$action-sendmessage $message=\\\"tm-save-tiddler\\\"/>\\n\\\\end\\n\\\\define cancel-delete-tiddler-actions(message)\\n\u003C\u003Cdelete-edittemplate-state-tiddlers>>\\n\u003C$action-sendmessage $message=\\\"tm-$message$-tiddler\\\"/>\\n\\\\end\\n\u003Cdiv data-tiddler-title=\u003C\u003CcurrentTiddler>> data-tags={{!!tags}} class={{{ tc-tiddler-frame tc-tiddler-edit-frame [\u003CcurrentTiddler>is[tiddler]then[tc-tiddler-exists]] [\u003CcurrentTiddler>is[missing]!is[shadow]then[tc-tiddler-missing]] [\u003CcurrentTiddler>is[shadow]then[tc-tiddler-exists tc-tiddler-shadow]] [\u003CcurrentTiddler>is[system]then[tc-tiddler-system]] [{!!class}] [\u003CcurrentTiddler>tags[]encodeuricomponent[]addprefix[tc-tagged-]] +[join[ ]] }}}>\\n\u003C$fieldmangler>\\n\u003C$vars storyTiddler=\u003C\u003CcurrentTiddler>> newTagNameTiddler=\u003C\u003Cqualify \\\"$:/temp/NewTagName\\\">> newFieldNameTiddler=\u003C\u003Cqualify \\\"$:/temp/NewFieldName\\\">> newFieldValueTiddler=\u003C\u003Cqualify \\\"$:/temp/NewFieldValue\\\">> newFieldNameInputTiddler=\u003C\u003Cqualify \\\"$:/temp/NewFieldName/input\\\">> newFieldNameSelectionTiddler=\u003C\u003Cqualify \\\"$:/temp/NewFieldName/selected-item\\\">> newTagNameInputTiddler=\u003C\u003Cqualify \\\"$:/temp/NewTagName/input\\\">> newTagNameSelectionTiddler=\u003C\u003Cqualify \\\"$:/temp/NewTagName/selected-item\\\">> typeInputTiddler=\u003C\u003Cqualify \\\"$:/temp/Type/input\\\">> typeSelectionTiddler=\u003C\u003Cqualify \\\"$:/temp/Type/selected-item\\\">>>\\n\u003C$keyboard key=\\\"((cancel-edit-tiddler))\\\" actions=\u003C\u003Ccancel-delete-tiddler-actions \\\"cancel\\\">> tag=\\\"div\\\">\\n\u003C$keyboard key=\\\"((save-tiddler))\\\" actions=\u003C\u003Csave-tiddler-actions>> tag=\\\"div\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[\u003Ctv-config-toolbar-class>] [\u003ClistItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\\n\u003C$transclude tiddler=\u003C\u003ClistItem>>/>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$vars>\\n\u003C/$fieldmangler>\\n\u003C/div>\\n\"},\"$:/core/ui/Buttons/cancel\":{\"title\":\"$:/core/ui/Buttons/cancel\",\"tags\":\"$:/tags/EditToolbar\",\"caption\":\"{{$:/core/images/cancel-button}} {{$:/language/Buttons/Cancel/Caption}}\",\"description\":\"{{$:/language/Buttons/Cancel/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button actions=\u003C\u003Ccancel-delete-tiddler-actions \\\"cancel\\\">> tooltip={{$:/language/Buttons/Cancel/Hint}} aria-label={{$:/language/Buttons/Cancel/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/cancel-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/Cancel/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\"},\"$:/core/ui/Buttons/delete\":{\"title\":\"$:/core/ui/Buttons/delete\",\"tags\":\"$:/tags/EditToolbar $:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/delete-button}} {{$:/language/Buttons/Delete/Caption}}\",\"description\":\"{{$:/language/Buttons/Delete/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button actions=\u003C\u003Ccancel-delete-tiddler-actions \\\"delete\\\">> tooltip={{$:/language/Buttons/Delete/Hint}} aria-label={{$:/language/Buttons/Delete/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/delete-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/Delete/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\"},\"$:/core/ui/Buttons/save\":{\"title\":\"$:/core/ui/Buttons/save\",\"tags\":\"$:/tags/EditToolbar\",\"caption\":\"{{$:/core/images/done-button}} {{$:/language/Buttons/Save/Caption}}\",\"description\":\"{{$:/language/Buttons/Save/Hint}}\",\"text\":\"\\\\define save-tiddler-button()\\n\\\\whitespace trim\\n\u003C$fieldmangler>\u003C$button tooltip={{$:/language/Buttons/Save/Hint}} aria-label={{$:/language/Buttons/Save/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C\u003Csave-tiddler-actions>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/done-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/Save/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\u003C/$fieldmangler>\\n\\\\end\\n\u003C\u003Csave-tiddler-button>>\\n\"},\"$:/core/ui/EditorToolbar/bold\":{\"title\":\"$:/core/ui/EditorToolbar/bold\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/bold\",\"caption\":\"{{$:/language/Buttons/Bold/Caption}}\",\"description\":\"{{$:/language/Buttons/Bold/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((bold))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"''\\\"\\n\\tsuffix=\\\"''\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/clear-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/clear-dropdown\",\"text\":\"''{{$:/language/Buttons/Clear/Hint}}''\\n\\n\u003Cdiv class=\\\"tc-colour-chooser\\\">\\n\\n\u003C$macrocall $name=\\\"colour-picker\\\" actions=\\\"\\\"\\\"\\n\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-bitmap-operation\\\"\\n\\t$param=\\\"clear\\\"\\n\\tcolour=\u003C\u003Ccolour-picker-value>>\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\\\"\\\"\\\"/>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/EditorToolbar/clear\":{\"title\":\"$:/core/ui/EditorToolbar/clear\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/erase\",\"caption\":\"{{$:/language/Buttons/Clear/Caption}}\",\"description\":\"{{$:/language/Buttons/Clear/Hint}}\",\"condition\":\"[\u003CtargetTiddler>is[image]] -[\u003CtargetTiddler>type[image/svg+xml]]\",\"dropdown\":\"$:/core/ui/EditorToolbar/clear-dropdown\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/editor-height-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/editor-height-dropdown\",\"text\":\"\\\\define lingo-base() $:/language/Buttons/EditorHeight/\\n''\u003C\u003Clingo Hint>>''\\n\\n\u003C$radio tiddler=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" value=\\\"auto\\\"> {{$:/core/images/auto-height}} \u003C\u003Clingo Caption/Auto>>\u003C/$radio>\\n\\n\u003C$radio tiddler=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" value=\\\"fixed\\\"> {{$:/core/images/fixed-height}} \u003C\u003Clingo Caption/Fixed>> \u003C$edit-text tag=\\\"input\\\" tiddler=\\\"$:/config/TextEditor/EditorHeight/Height\\\" default=\\\"100px\\\"/>\u003C/$radio>\\n\"},\"$:/core/ui/EditorToolbar/editor-height\":{\"title\":\"$:/core/ui/EditorToolbar/editor-height\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/fixed-height\",\"custom-icon\":\"yes\",\"caption\":\"{{$:/language/Buttons/EditorHeight/Caption}}\",\"description\":\"{{$:/language/Buttons/EditorHeight/Hint}}\",\"condition\":\"[\u003CtargetTiddler>type[]] [\u003CtargetTiddler>get[type]prefix[text/]] [\u003CtargetTiddler>get[type]match[application/javascript]] [\u003CtargetTiddler>get[type]match[application/json]] [\u003CtargetTiddler>get[type]match[application/x-tiddler-dictionary]] [\u003CtargetTiddler>get[type]match[image/svg+xml]] +[first[]]\",\"dropdown\":\"$:/core/ui/EditorToolbar/editor-height-dropdown\",\"text\":\"\u003C$reveal tag=\\\"span\\\" state=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" type=\\\"match\\\" text=\\\"fixed\\\">\\n{{$:/core/images/fixed-height}}\\n\u003C/$reveal>\\n\u003C$reveal tag=\\\"span\\\" state=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" type=\\\"match\\\" text=\\\"auto\\\">\\n{{$:/core/images/auto-height}}\\n\u003C/$reveal>\\n\"},\"$:/core/ui/EditorToolbar/excise-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/excise-dropdown\",\"text\":\"\\\\define lingo-base() $:/language/Buttons/Excise/\\n\\n\\\\define body(config-title)\\n''\u003C\u003Clingo Hint>>''\\n\\n\u003C\u003Clingo Caption/NewTitle>> \u003C$edit-text tag=\\\"input\\\" tiddler=\\\"$config-title$/new-title\\\" default=\\\"\\\" focus=\\\"true\\\"/>\\n\\n\u003C$set name=\\\"new-title\\\" value={{$config-title$/new-title}}>\\n\u003C$list filter=\\\"\\\"\\\"[\u003Cnew-title>is[tiddler]]\\\"\\\"\\\">\\n\u003Cdiv class=\\\"tc-error\\\">\\n\u003C\u003Clingo Caption/TiddlerExists>>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/$set>\\n\\n\u003C$checkbox tiddler=\\\"\\\"\\\"$config-title$/tagnew\\\"\\\"\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"false\\\"> \u003C\u003Clingo Caption/Tag>>\u003C/$checkbox>\\n\\n\u003C\u003Clingo Caption/Replace>> \u003C$select tiddler=\\\"\\\"\\\"$config-title$/type\\\"\\\"\\\" default=\\\"transclude\\\">\\n\u003Coption value=\\\"link\\\">\u003C\u003Clingo Caption/Replace/Link>>\u003C/option>\\n\u003Coption value=\\\"transclude\\\">\u003C\u003Clingo Caption/Replace/Transclusion>>\u003C/option>\\n\u003Coption value=\\\"macro\\\">\u003C\u003Clingo Caption/Replace/Macro>>\u003C/option>\\n\u003C/$select>\\n\\n\u003C$reveal state=\\\"\\\"\\\"$config-title$/type\\\"\\\"\\\" type=\\\"match\\\" text=\\\"macro\\\">\\n\u003C\u003Clingo Caption/MacroName>> \u003C$edit-text tag=\\\"input\\\" tiddler=\\\"\\\"\\\"$config-title$/macro-title\\\"\\\"\\\" default=\\\"translink\\\"/>\\n\u003C/$reveal>\\n\\n\u003C$button>\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"excise\\\"\\n\\ttitle={{$config-title$/new-title}}\\n\\ttype={{$config-title$/type}}\\n\\tmacro={{$config-title$/macro-title}}\\n\\ttagnew={{$config-title$/tagnew}}\\n/>\\n\u003C$action-deletetiddler\\n\\t$tiddler=\\\"$config-title$/new-title\\\"\\n/>\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\u003C\u003Clingo Caption/Excise>>\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$macrocall $name=\\\"body\\\" config-title=\u003C\u003Cqualify \\\"$:/state/Excise/\\\">>/>\\n\"},\"$:/core/ui/EditorToolbar/excise\":{\"title\":\"$:/core/ui/EditorToolbar/excise\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/excise\",\"caption\":\"{{$:/language/Buttons/Excise/Caption}}\",\"description\":\"{{$:/language/Buttons/Excise/Hint}}\",\"condition\":\"[\u003CtargetTiddler>type[]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]] +[first[]]\",\"shortcuts\":\"((excise))\",\"dropdown\":\"$:/core/ui/EditorToolbar/excise-dropdown\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/file-import\":{\"title\":\"$:/core/ui/EditorToolbar/file-import\",\"tags\":\"$:/tags/EditorTools\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"text\":\"\\\\define lingo-base() $:/language/Import/\\n\\n\\\\define closePopupActions()\\n\u003C$action-deletetiddler $filter=\\\"[title\u003CimportState>] [title\u003CimportTitle>]\\\"/>\\n\\\\end\\n\\n\\\\define replacement-text-image() [img[$title$]]\\n\\n\\\\define replacement-text-file() [[$title$]]\\n\\n\\\\define postImportActions()\\n\u003C$list filter=\\\"[\u003CimportTitle>links[]] :reduce[get[type]prefix[image]then\u003Creplacement-text-image>else\u003Creplacement-text-file>search-replace[$title$],\u003CcurrentTiddler>addprefix\u003Caccumulator>]\\\" variable=\\\"imageTitle\\\">\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"insert-text\\\"\\n\\ttext=\u003C\u003CimageTitle>>\\n/>\\n\u003C/$list>\\n\u003C\u003CclosePopupActions>>\\n\\\\end\\n\\n\\\\define buttons()\\n\u003C$button class=\\\"tc-btn-invisible\\\" actions=\u003C\u003CclosePopupActions>> >\u003C\u003Clingo Listing/Cancel/Caption>>\u003C/$button>\\n\u003C$button class=\\\"tc-btn-invisible\\\" message=\\\"tm-perform-import\\\" param=\u003C\u003CimportTitle>> actions=\u003C\u003CpostImportActions>> >\u003C\u003Clingo Listing/Import/Caption>>\u003C/$button>\\n\\\\end\\n\\n\u003C$reveal type=\\\"popup\\\" state=\u003C\u003CimportState>> tag=\\\"div\\\" class=\\\"tc-editor-importpopup\\\">\\n\u003Cdiv class=\\\"tc-editor-import\\\">\\n\u003C$list filter=\\\"[\u003CimportTitle>field:plugin-type[import]]\\\">\\n\u003Ch2>\u003C\u003Clingo Editor/Import/Heading>>\u003C/h2>\\n\u003C$tiddler tiddler=\u003C\u003CimportTitle>>>\\n{{||$:/core/ui/ImportListing}}\\n\u003C\u003Cbuttons>>\\n\u003C/$tiddler>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/EditorToolbar/heading-1\":{\"title\":\"$:/core/ui/EditorToolbar/heading-1\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/heading-1\",\"caption\":\"{{$:/language/Buttons/Heading1/Caption}}\",\"description\":\"{{$:/language/Buttons/Heading1/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"button-classes\":\"tc-text-editor-toolbar-item-start-group\",\"shortcuts\":\"((heading-1))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"!\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/heading-2\":{\"title\":\"$:/core/ui/EditorToolbar/heading-2\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/heading-2\",\"caption\":\"{{$:/language/Buttons/Heading2/Caption}}\",\"description\":\"{{$:/language/Buttons/Heading2/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((heading-2))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"!\\\"\\n\\tcount=\\\"2\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/heading-3\":{\"title\":\"$:/core/ui/EditorToolbar/heading-3\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/heading-3\",\"caption\":\"{{$:/language/Buttons/Heading3/Caption}}\",\"description\":\"{{$:/language/Buttons/Heading3/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((heading-3))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"!\\\"\\n\\tcount=\\\"3\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/heading-4\":{\"title\":\"$:/core/ui/EditorToolbar/heading-4\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/heading-4\",\"caption\":\"{{$:/language/Buttons/Heading4/Caption}}\",\"description\":\"{{$:/language/Buttons/Heading4/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((heading-4))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"!\\\"\\n\\tcount=\\\"4\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/heading-5\":{\"title\":\"$:/core/ui/EditorToolbar/heading-5\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/heading-5\",\"caption\":\"{{$:/language/Buttons/Heading5/Caption}}\",\"description\":\"{{$:/language/Buttons/Heading5/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((heading-5))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"!\\\"\\n\\tcount=\\\"5\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/heading-6\":{\"title\":\"$:/core/ui/EditorToolbar/heading-6\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/heading-6\",\"caption\":\"{{$:/language/Buttons/Heading6/Caption}}\",\"description\":\"{{$:/language/Buttons/Heading6/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((heading-6))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"!\\\"\\n\\tcount=\\\"6\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/italic\":{\"title\":\"$:/core/ui/EditorToolbar/italic\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/italic\",\"caption\":\"{{$:/language/Buttons/Italic/Caption}}\",\"description\":\"{{$:/language/Buttons/Italic/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((italic))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"//\\\"\\n\\tsuffix=\\\"//\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/line-width-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/line-width-dropdown\",\"text\":\"\\\\define lingo-base() $:/language/Buttons/LineWidth/\\n\\n\\\\define toolbar-line-width-inner()\\n\u003C$button tag=\\\"a\\\" tooltip=\\\"\\\"\\\"$(line-width)$\\\"\\\"\\\">\\n\\n\u003C$action-setfield\\n\\t$tiddler=\\\"$:/config/BitmapEditor/LineWidth\\\"\\n\\t$value=\\\"$(line-width)$\\\"\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\u003Cdiv style=\\\"display: inline-block; margin: 4px calc(80px - $(line-width)$); background-color: #000; width: calc(100px + $(line-width)$ * 2); height: $(line-width)$; border-radius: 120px; vertical-align: middle;\\\"/>\\n\\n\u003Cspan style=\\\"margin-left: 8px;\\\">\\n\\n\u003C$text text=\\\"\\\"\\\"$(line-width)$\\\"\\\"\\\"/>\\n\\n\u003C$reveal state=\\\"$:/config/BitmapEditor/LineWidth\\\" type=\\\"match\\\" text=\\\"\\\"\\\"$(line-width)$\\\"\\\"\\\" tag=\\\"span\\\">\\n\\n\u003C$entity entity=\\\"&nbsp;\\\"/>\\n\\n\u003C$entity entity=\\\"&#x2713;\\\"/>\\n\\n\u003C/$reveal>\\n\\n\u003C/span>\\n\\n\u003C/$button>\\n\\\\end\\n\\n''\u003C\u003Clingo Hint>>''\\n\\n\u003C$list filter={{$:/config/BitmapEditor/LineWidths}} variable=\\\"line-width\\\">\\n\\n\u003C\u003Ctoolbar-line-width-inner>>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/EditorToolbar/line-width\":{\"title\":\"$:/core/ui/EditorToolbar/line-width\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/line-width\",\"caption\":\"{{$:/language/Buttons/LineWidth/Caption}}\",\"description\":\"{{$:/language/Buttons/LineWidth/Hint}}\",\"condition\":\"[\u003CtargetTiddler>is[image]] -[\u003CtargetTiddler>type[image/svg+xml]]\",\"dropdown\":\"$:/core/ui/EditorToolbar/line-width-dropdown\",\"text\":\"\u003C$text text={{$:/config/BitmapEditor/LineWidth}}/>\\n\"},\"$:/core/ui/EditorToolbar/link-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/link-dropdown\",\"text\":\"\\\\define lingo-base() $:/language/Buttons/Link/\\n\\n\\\\define add-link-actions()\\n\u003C$action-sendmessage $message=\\\"tm-edit-text-operation\\\" $param=\\\"make-link\\\" text={{$(linkTiddler)$}} />\\n\u003C$action-deletetiddler $filter=\\\"[\u003Cdropdown-state>] [\u003CsearchTiddler>] [\u003ClinkTiddler>] [\u003CstoreTitle>] [\u003CsearchListState>]\\\"/>\\n\\\\end\\n\\n\\\\define get-focus-selector() [data-tiddler-title=\\\"$(cssEscapedTitle)$\\\"] .tc-create-wikitext-link input\\n\\n\\\\define cancel-search-actions-inner()\\n\u003C$set name=\\\"userInput\\\" value={{{ [\u003CstoreTitle>get[text]] }}}>\u003C$list filter=\\\"[\u003CsearchTiddler>get[text]!match\u003CuserInput>]\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-deletetiddler $filter=\\\"[\u003CsearchTiddler>] [\u003ClinkTiddler>] [\u003CstoreTitle>] [\u003CsearchListState>]\\\"/>\\\"\\\"\\\">\u003C$action-setfield $tiddler=\u003C\u003CsearchTiddler>> text=\u003C\u003CuserInput>>/>\u003C$action-setfield $tiddler=\u003C\u003CrefreshTitle>> text=\\\"yes\\\"/>\u003C/$list>\u003C/$set>\\n\\\\end\\n\\n\\\\define cancel-search-actions() \u003C$list filter=\\\"[\u003CstoreTitle>!has[text]] +[\u003CsearchTiddler>!has[text]]\\\" emptyMessage=\\\"\\\"\\\"\u003C\u003Ccancel-search-actions-inner>>\\\"\\\"\\\">\u003C$action-sendmessage $message=\\\"tm-edit-text-operation\\\" $param=\\\"focus-editor\\\"/>\u003C/$list>\\n\\n\\\\define external-link()\\n\u003C$button class=\\\"tc-btn-invisible\\\" style=\\\"width: auto; display: inline-block; background-colour: inherit;\\\" actions=\u003C\u003Cadd-link-actions>>>\\n{{$:/core/images/chevron-right}}\\n\u003C/$button>\\n\\\\end\\n\\n\\\\define set-next-input-tab(beforeafter:\\\"after\\\") \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab/search-results/sidebar\\\" tag=\\\"$:/tags/SearchResults\\\" beforeafter=\\\"$beforeafter$\\\" defaultState={{$:/config/SearchResults/Default}} actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/search/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define body(config-title)\\n''\u003C\u003Clingo Hint>>''\\n\\n\u003C$vars searchTiddler=\\\"\\\"\\\"$config-title$/search\\\"\\\"\\\" linkTiddler=\\\"\\\"\\\"$config-title$/link\\\"\\\"\\\" linktext=\\\"\\\" searchListState=\u003C\u003Cqualify \\\"$:/temp/link-search/selected-item\\\">> refreshTitle=\u003C\u003Cqualify \\\"$:/temp/link-search/refresh\\\">> storeTitle=\u003C\u003Cqualify \\\"$:/temp/link-search/input\\\">>>\\n\\n\u003C$vars linkTiddler=\u003C\u003CsearchTiddler>>>\\n\u003C$keyboard key=\\\"((input-tab-right))\\\" actions=\u003C\u003Cset-next-input-tab>>>\\n\u003C$keyboard key=\\\"((input-tab-left))\\\" actions=\u003C\u003Cset-next-input-tab \\\"before\\\">> class=\\\"tc-create-wikitext-link\\\">\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\u003C\u003CsearchTiddler>> storeTitle=\u003C\u003CstoreTitle>>\\n\\t\\tselectionStateTitle=\u003C\u003CsearchListState>> refreshTitle=\u003C\u003CrefreshTitle>> type=\\\"search\\\" filterMinLength=\\\"1\\\"\\n\\t\\ttag=\\\"input\\\" focus=\\\"true\\\" class=\\\"tc-popup-handle\\\" inputCancelActions=\u003C\u003Ccancel-search-actions>> \\n\\t\\tinputAcceptActions=\u003C\u003Cadd-link-actions>> placeholder={{$:/language/Search/Search}} default=\\\"\\\" \\n\\t\\tconfigTiddlerFilter=\\\"[[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}]\\\" />\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C$reveal tag=\\\"span\\\" state=\u003C\u003CstoreTitle>> type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C\u003Cexternal-link>>\\n\u003C$button class=\\\"tc-btn-invisible\\\" style=\\\"width: auto; display: inline-block; background-colour: inherit;\\\">\\n\u003C\u003Ccancel-search-actions>>\u003C$set name=\\\"cssEscapedTitle\\\" value={{{ [\u003CstoryTiddler>escapecss[]] }}}>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\u003C\u003Cget-focus-selector>>/>\u003C/$set>\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/$vars>\\n\\n\u003C$reveal tag=\\\"div\\\" state=\u003C\u003CstoreTitle>> type=\\\"nomatch\\\" text=\\\"\\\">\\n\\n\u003C$linkcatcher actions=\u003C\u003Cadd-link-actions>> to=\u003C\u003ClinkTiddler>>>\\n\\n\u003C$vars userInput={{{ [\u003CstoreTitle>get[text]] }}} configTiddler={{{ [[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}] }}}>\\n\\n{{$:/core/ui/SearchResults}}\\n\\n\u003C/$vars>\\n\\n\u003C/$linkcatcher>\\n\\n\u003C/$reveal>\\n\\n\u003C/$vars>\\n\\n\\\\end\\n\\n\u003C$macrocall $name=\\\"body\\\" config-title=\u003C\u003Cqualify \\\"$:/state/Link/\\\">>/>\\n\"},\"$:/core/ui/EditorToolbar/link\":{\"title\":\"$:/core/ui/EditorToolbar/link\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/link\",\"caption\":\"{{$:/language/Buttons/Link/Caption}}\",\"description\":\"{{$:/language/Buttons/Link/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"button-classes\":\"tc-text-editor-toolbar-item-start-group\",\"shortcuts\":\"((link))\",\"dropdown\":\"$:/core/ui/EditorToolbar/link-dropdown\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/linkify\":{\"title\":\"$:/core/ui/EditorToolbar/linkify\",\"caption\":\"{{$:/language/Buttons/Linkify/Caption}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"{{$:/language/Buttons/Linkify/Hint}}\",\"icon\":\"$:/core/images/linkify\",\"list-before\":\"$:/core/ui/EditorToolbar/mono-block\",\"shortcuts\":\"((linkify))\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"[[\\\"\\n\\tsuffix=\\\"]]\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/list-bullet\":{\"title\":\"$:/core/ui/EditorToolbar/list-bullet\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/list-bullet\",\"caption\":\"{{$:/language/Buttons/ListBullet/Caption}}\",\"description\":\"{{$:/language/Buttons/ListBullet/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((list-bullet))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"*\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/list-number\":{\"title\":\"$:/core/ui/EditorToolbar/list-number\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/list-number\",\"caption\":\"{{$:/language/Buttons/ListNumber/Caption}}\",\"description\":\"{{$:/language/Buttons/ListNumber/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((list-number))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"prefix-lines\\\"\\n\\tcharacter=\\\"#\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/mono-block\":{\"title\":\"$:/core/ui/EditorToolbar/mono-block\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/mono-block\",\"caption\":\"{{$:/language/Buttons/MonoBlock/Caption}}\",\"description\":\"{{$:/language/Buttons/MonoBlock/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"button-classes\":\"tc-text-editor-toolbar-item-start-group\",\"shortcuts\":\"((mono-block))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-lines\\\"\\n\\tprefix=\\\"\\n```\\\"\\n\\tsuffix=\\\"```\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/mono-line\":{\"title\":\"$:/core/ui/EditorToolbar/mono-line\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/mono-line\",\"caption\":\"{{$:/language/Buttons/MonoLine/Caption}}\",\"description\":\"{{$:/language/Buttons/MonoLine/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((mono-line))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"`\\\"\\n\\tsuffix=\\\"`\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/more-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/more-dropdown\",\"text\":\"\\\\define config-title()\\n$:/config/EditorToolbarButtons/Visibility/$(toolbarItem)$\\n\\\\end\\n\\n\\\\define conditional-button()\\n\u003C$list filter={{$(toolbarItem)$!!condition}} variable=\\\"condition\\\">\\n\u003C$transclude tiddler=\\\"$:/core/ui/EditTemplate/body/toolbar/button\\\" mode=\\\"inline\\\"/> \u003C$transclude tiddler=\u003C\u003CtoolbarItem>> field=\\\"description\\\"/>\\n\u003C/$list>\\n\\\\end\\n\\n\u003Cdiv class=\\\"tc-text-editor-toolbar-more\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditorToolbar]!has[draft.of]] -[[$:/core/ui/EditorToolbar/more]]\\\">\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cconfig-visibility-title>> text=\\\"hide\\\" tag=\\\"div\\\">\\n\u003C\u003Cconditional-button>>\\n\u003C/$reveal>\\n\u003C/$list>\\n\u003C/div>\\n\"},\"$:/core/ui/EditorToolbar/more\":{\"title\":\"$:/core/ui/EditorToolbar/more\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/down-arrow\",\"caption\":\"{{$:/language/Buttons/More/Caption}}\",\"description\":\"{{$:/language/Buttons/More/Hint}}\",\"condition\":\"[\u003CtargetTiddler>]\",\"dropdown\":\"$:/core/ui/EditorToolbar/more-dropdown\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/opacity-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/opacity-dropdown\",\"text\":\"\\\\define lingo-base() $:/language/Buttons/Opacity/\\n\\n\\\\define toolbar-opacity-inner()\\n\u003C$button tag=\\\"a\\\" tooltip=\\\"\\\"\\\"$(opacity)$\\\"\\\"\\\">\\n\\n\u003C$action-setfield\\n\\t$tiddler=\\\"$:/config/BitmapEditor/Opacity\\\"\\n\\t$value=\\\"$(opacity)$\\\"\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\u003Cdiv style=\\\"display: inline-block; vertical-align: middle; background-color: $(current-paint-colour)$; opacity: $(opacity)$; width: 1em; height: 1em; border-radius: 50%;\\\"/>\\n\\n\u003Cspan style=\\\"margin-left: 8px;\\\">\\n\\n\u003C$text text=\\\"\\\"\\\"$(opacity)$\\\"\\\"\\\"/>\\n\\n\u003C$reveal state=\\\"$:/config/BitmapEditor/Opacity\\\" type=\\\"match\\\" text=\\\"\\\"\\\"$(opacity)$\\\"\\\"\\\" tag=\\\"span\\\">\\n\\n\u003C$entity entity=\\\"&nbsp;\\\"/>\\n\\n\u003C$entity entity=\\\"&#x2713;\\\"/>\\n\\n\u003C/$reveal>\\n\\n\u003C/span>\\n\\n\u003C/$button>\\n\\\\end\\n\\n\\\\define toolbar-opacity()\\n''\u003C\u003Clingo Hint>>''\\n\\n\u003C$list filter={{$:/config/BitmapEditor/Opacities}} variable=\\\"opacity\\\">\\n\\n\u003C\u003Ctoolbar-opacity-inner>>\\n\\n\u003C/$list>\\n\\\\end\\n\\n\u003C$set name=\\\"current-paint-colour\\\" value={{$:/config/BitmapEditor/Colour}}>\\n\\n\u003C$set name=\\\"current-opacity\\\" value={{$:/config/BitmapEditor/Opacity}}>\\n\\n\u003C\u003Ctoolbar-opacity>>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\"},\"$:/core/ui/EditorToolbar/opacity\":{\"title\":\"$:/core/ui/EditorToolbar/opacity\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/opacity\",\"caption\":\"{{$:/language/Buttons/Opacity/Caption}}\",\"description\":\"{{$:/language/Buttons/Opacity/Hint}}\",\"condition\":\"[\u003CtargetTiddler>is[image]] -[\u003CtargetTiddler>type[image/svg+xml]]\",\"dropdown\":\"$:/core/ui/EditorToolbar/opacity-dropdown\",\"text\":\"\u003C$text text={{$:/config/BitmapEditor/Opacity}}/>\\n\"},\"$:/core/ui/EditorToolbar/paint-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/paint-dropdown\",\"text\":\"''{{$:/language/Buttons/Paint/Hint}}''\\n\\n\u003C$macrocall $name=\\\"colour-picker\\\" actions=\\\"\\\"\\\"\\n\\n\u003C$action-setfield\\n\\t$tiddler=\\\"$:/config/BitmapEditor/Colour\\\"\\n\\t$value=\u003C\u003Ccolour-picker-value>>\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\\\"\\\"\\\"/>\\n\"},\"$:/core/ui/EditorToolbar/paint\":{\"title\":\"$:/core/ui/EditorToolbar/paint\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/paint\",\"caption\":\"{{$:/language/Buttons/Paint/Caption}}\",\"description\":\"{{$:/language/Buttons/Paint/Hint}}\",\"condition\":\"[\u003CtargetTiddler>is[image]] -[\u003CtargetTiddler>type[image/svg+xml]]\",\"dropdown\":\"$:/core/ui/EditorToolbar/paint-dropdown\",\"text\":\"\\\\define toolbar-paint()\\n\u003Cdiv style=\\\"display: inline-block; vertical-align: middle; background-color: $(colour-picker-value)$; width: 1em; height: 1em; border-radius: 50%;\\\"/>\\n\\\\end\\n\u003C$set name=\\\"colour-picker-value\\\" value={{$:/config/BitmapEditor/Colour}}>\\n\u003C\u003Ctoolbar-paint>>\\n\u003C/$set>\\n\"},\"$:/core/ui/EditorToolbar/picture-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/picture-dropdown\",\"text\":\"\\\\define replacement-text()\\n[img[$(imageTitle)$]]\\n\\\\end\\n\\n''{{$:/language/Buttons/Picture/Hint}}''\\n\\n\u003C$macrocall $name=\\\"image-picker\\\" actions=\\\"\\\"\\\"\\n\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"replace-selection\\\"\\n\\ttext=\u003C\u003Creplacement-text>>\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\\\"\\\"\\\"/>\\n\"},\"$:/core/ui/EditorToolbar/picture\":{\"title\":\"$:/core/ui/EditorToolbar/picture\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/picture\",\"caption\":\"{{$:/language/Buttons/Picture/Caption}}\",\"description\":\"{{$:/language/Buttons/Picture/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((picture))\",\"dropdown\":\"$:/core/ui/EditorToolbar/picture-dropdown\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/preview-type-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/preview-type-dropdown\",\"text\":\"\\\\define preview-type-button()\\n\u003C$button tag=\\\"a\\\">\\n\\n\u003C$action-setfield $tiddler=\\\"$:/state/editpreviewtype\\\" $value=\\\"$(previewType)$\\\"/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\u003C$transclude tiddler=\u003C\u003CpreviewType>> field=\\\"caption\\\" mode=\\\"inline\\\">\\n\\n\u003C$view tiddler=\u003C\u003CpreviewType>> field=\\\"title\\\" mode=\\\"inline\\\"/>\\n\\n\u003C/$transclude> \\n\\n\u003C$reveal tag=\\\"span\\\" state=\\\"$:/state/editpreviewtype\\\" type=\\\"match\\\" text=\u003C\u003CpreviewType>> default=\\\"$:/core/ui/EditTemplate/body/preview/output\\\">\\n\\n\u003C$entity entity=\\\"&nbsp;\\\"/>\\n\\n\u003C$entity entity=\\\"&#x2713;\\\"/>\\n\\n\u003C/$reveal>\\n\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EditPreview]!has[draft.of]]\\\" variable=\\\"previewType\\\">\\n\\n\u003C\u003Cpreview-type-button>>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/EditorToolbar/preview-type\":{\"title\":\"$:/core/ui/EditorToolbar/preview-type\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/chevron-down\",\"caption\":\"{{$:/language/Buttons/PreviewType/Caption}}\",\"description\":\"{{$:/language/Buttons/PreviewType/Hint}}\",\"condition\":\"[all[shadows+tiddlers]tag[$:/tags/EditPreview]!has[draft.of]butfirst[]limit[1]]\",\"button-classes\":\"tc-text-editor-toolbar-item-adjunct\",\"dropdown\":\"$:/core/ui/EditorToolbar/preview-type-dropdown\"},\"$:/core/ui/EditorToolbar/preview\":{\"title\":\"$:/core/ui/EditorToolbar/preview\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/preview-open\",\"custom-icon\":\"yes\",\"caption\":\"{{$:/language/Buttons/Preview/Caption}}\",\"description\":\"{{$:/language/Buttons/Preview/Hint}}\",\"condition\":\"[\u003CtargetTiddler>]\",\"button-classes\":\"tc-text-editor-toolbar-item-start-group\",\"shortcuts\":\"((preview))\",\"text\":\"\u003C$reveal state=\u003C\u003Cedit-preview-state>> type=\\\"match\\\" text=\\\"yes\\\" tag=\\\"span\\\">\\n{{$:/core/images/preview-open}}\\n\u003C$action-setfield $tiddler=\u003C\u003Cedit-preview-state>> $value=\\\"no\\\"/>\\n\u003C/$reveal>\\n\u003C$reveal state=\u003C\u003Cedit-preview-state>> type=\\\"nomatch\\\" text=\\\"yes\\\" tag=\\\"span\\\">\\n{{$:/core/images/preview-closed}}\\n\u003C$action-setfield $tiddler=\u003C\u003Cedit-preview-state>> $value=\\\"yes\\\"/>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/EditorToolbar/quote\":{\"title\":\"$:/core/ui/EditorToolbar/quote\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/quote\",\"caption\":\"{{$:/language/Buttons/Quote/Caption}}\",\"description\":\"{{$:/language/Buttons/Quote/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((quote))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-lines\\\"\\n\\tprefix=\\\"\\n\u003C\u003C\u003C\\\"\\n\\tsuffix=\\\"\u003C\u003C\u003C\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/rotate-left\":{\"title\":\"$:/core/ui/EditorToolbar/rotate-left\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/rotate-left\",\"caption\":\"{{$:/language/Buttons/RotateLeft/Caption}}\",\"description\":\"{{$:/language/Buttons/RotateLeft/Hint}}\",\"condition\":\"[\u003CtargetTiddler>is[image]] -[\u003CtargetTiddler>type[image/svg+xml]]\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-bitmap-operation\\\"\\n\\t$param=\\\"rotate-left\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/size-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/size-dropdown\",\"text\":\"\\\\define lingo-base() $:/language/Buttons/Size/\\n\\n\\\\define toolbar-button-size-preset(config-title)\\n\u003C$set name=\\\"width\\\" filter=\\\"$(sizePair)$ +[first[]]\\\">\\n\\n\u003C$set name=\\\"height\\\" filter=\\\"$(sizePair)$ +[last[]]\\\">\\n\\n\u003C$button tag=\\\"a\\\">\\n\\n\u003C$action-setfield\\n\\t$tiddler=\\\"\\\"\\\"$config-title$/new-width\\\"\\\"\\\"\\n\\t$value=\u003C\u003Cwidth>>\\n/>\\n\\n\u003C$action-setfield\\n\\t$tiddler=\\\"\\\"\\\"$config-title$/new-height\\\"\\\"\\\"\\n\\t$value=\u003C\u003Cheight>>\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\\\"\\\"\\\"$config-title$/presets-popup\\\"\\\"\\\"\\n/>\\n\\n\u003C$text text=\u003C\u003Cwidth>>/> &times; \u003C$text text=\u003C\u003Cheight>>/>\\n\\n\u003C/$button>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define toolbar-button-size(config-title)\\n''{{$:/language/Buttons/Size/Hint}}''\\n\\n\u003C\u003Clingo Caption/Width>> \u003C$edit-text tag=\\\"input\\\" tiddler=\\\"\\\"\\\"$config-title$/new-width\\\"\\\"\\\" default=\u003C\u003Ctv-bitmap-editor-width>> focus=\\\"true\\\" size=\\\"8\\\"/> \u003C\u003Clingo Caption/Height>> \u003C$edit-text tag=\\\"input\\\" tiddler=\\\"\\\"\\\"$config-title$/new-height\\\"\\\"\\\" default=\u003C\u003Ctv-bitmap-editor-height>> size=\\\"8\\\"/> \u003C$button popup=\\\"\\\"\\\"$config-title$/presets-popup\\\"\\\"\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\" style=\\\"width: auto; display: inline-block; background-colour: inherit;\\\" selectedClass=\\\"tc-selected\\\">\\n{{$:/core/images/down-arrow}}\\n\u003C/$button>\\n\\n\u003C$reveal tag=\\\"span\\\" state=\\\"\\\"\\\"$config-title$/presets-popup\\\"\\\"\\\" type=\\\"popup\\\" position=\\\"belowleft\\\" animate=\\\"yes\\\">\\n\\n\u003Cdiv class=\\\"tc-drop-down tc-popup-keep\\\">\\n\\n\u003C$list filter={{$:/config/BitmapEditor/ImageSizes}} variable=\\\"sizePair\\\">\\n\\n\u003C$macrocall $name=\\\"toolbar-button-size-preset\\\" config-title=\\\"$config-title$\\\"/>\\n\\n\u003C/$list>\\n\\n\u003C/div>\\n\\n\u003C/$reveal>\\n\\n\u003C$button>\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-bitmap-operation\\\"\\n\\t$param=\\\"resize\\\"\\n\\twidth={{$config-title$/new-width}}\\n\\theight={{$config-title$/new-height}}\\n/>\\n\u003C$action-deletetiddler\\n\\t$tiddler=\\\"\\\"\\\"$config-title$/new-width\\\"\\\"\\\"\\n/>\\n\u003C$action-deletetiddler\\n\\t$tiddler=\\\"\\\"\\\"$config-title$/new-height\\\"\\\"\\\"\\n/>\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\u003C\u003Clingo Caption/Resize>>\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$macrocall $name=\\\"toolbar-button-size\\\" config-title=\u003C\u003Cqualify \\\"$:/state/Size/\\\">>/>\\n\"},\"$:/core/ui/EditorToolbar/size\":{\"title\":\"$:/core/ui/EditorToolbar/size\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/size\",\"caption\":\"{{$:/language/Buttons/Size/Caption}}\",\"description\":\"{{$:/language/Buttons/Size/Hint}}\",\"condition\":\"[\u003CtargetTiddler>is[image]] -[\u003CtargetTiddler>type[image/svg+xml]]\",\"dropdown\":\"$:/core/ui/EditorToolbar/size-dropdown\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/StampDropdown/ItemTemplate\":{\"title\":\"$:/core/ui/EditorToolbar/StampDropdown/ItemTemplate\",\"text\":\"\u003C$linkcatcher actions=\\\"\\\"\\\"\\n\\n\u003C$list filter=\\\"[\u003Cmodifier>!match[ctrl]]\\\" variable=\\\"ignore\\\">\\n\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>addsuffix[/prefix]!is[tiddler]!is[shadow]removesuffix[/prefix]addsuffix[/suffix]!is[tiddler]!is[shadow]]\\\" variable=\\\"ignore\\\">\\n\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"replace-selection\\\"\\n\\ttext={{{ [\u003CcurrentTiddler>get[text]] }}}\\n/>\\n\\n\u003C/$list>\\n\\n\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>addsuffix[/prefix]] [\u003CcurrentTiddler>addsuffix[/suffix]] +[is[shadow]] :else[is[tiddler]] +[limit[1]]\\\" variable=\\\"ignore\\\">\\n\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix={{{ [\u003CcurrentTiddler>addsuffix[/prefix]get[text]] }}}\\n  suffix={{{ [\u003CcurrentTiddler>addsuffix[/suffix]get[text]] }}}\\n/>\\n\\n\u003C/$list>\\n\\n\u003C/$list>\\n\\n\u003C$list filter=\\\"[\u003Cmodifier>match[ctrl]]\\\" variable=\\\"ignore\\\">\\n\\n\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\"/>\\n\\n\u003C/$list>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\\\"\\\"\\\">\\n\\n\u003C$link tooltip={{{ [\u003CcurrentTiddler>get[description]] }}}>\\n\\n\u003C$transclude tiddler=\u003C\u003CcurrentTiddler>> field=\\\"caption\\\" mode=\\\"inline\\\">\\n\\n\u003C$view tiddler=\u003C\u003CcurrentTiddler>> field=\\\"title\\\" />\\n\\n\u003C/$transclude>\\n\\n\u003C/$link>\\n\\n\u003C/$linkcatcher>\\n\"},\"$:/core/ui/EditorToolbar/stamp-dropdown\":{\"title\":\"$:/core/ui/EditorToolbar/stamp-dropdown\",\"text\":\"\u003C$macrocall $name=\\\"list-tagged-draggable\\\" tag=\\\"$:/tags/TextEditor/Snippet\\\" subFilter=\\\"!is[draft]\\\" itemTemplate=\\\"$:/core/ui/EditorToolbar/StampDropdown/ItemTemplate\\\"/>\\n\\n----\\n\\n\u003C$button tag=\\\"a\\\">\\n\\n\u003C$action-sendmessage\\n\\t$message=\\\"tm-new-tiddler\\\"\\n\\ttags=\\\"$:/tags/TextEditor/Snippet\\\"\\n\\tcaption={{$:/language/Buttons/Stamp/New/Title}}\\n\\ttext={{$:/language/Buttons/Stamp/New/Text}}\\n/>\\n\\n\u003C$action-deletetiddler\\n\\t$tiddler=\u003C\u003Cdropdown-state>>\\n/>\\n\\n\u003Cem>\\n\\n\u003C$text text={{$:/language/Buttons/Stamp/Caption/New}}/>\\n\\n\u003C/em>\\n\\n\u003C/$button>\\n\"},\"$:/core/ui/EditorToolbar/stamp\":{\"title\":\"$:/core/ui/EditorToolbar/stamp\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/stamp\",\"caption\":\"{{$:/language/Buttons/Stamp/Caption}}\",\"description\":\"{{$:/language/Buttons/Stamp/Hint}}\",\"condition\":\"[\u003CtargetTiddler>type[]] [\u003CtargetTiddler>get[type]prefix[text/]] [\u003CtargetTiddler>get[type]match[application/javascript]] [\u003CtargetTiddler>get[type]match[application/json]] [\u003CtargetTiddler>get[type]match[application/x-tiddler-dictionary]] [\u003CtargetTiddler>get[type]match[image/svg+xml]] +[first[]]\",\"shortcuts\":\"((stamp))\",\"dropdown\":\"$:/core/ui/EditorToolbar/stamp-dropdown\",\"button-classes\":\"tc-editortoolbar-stamp-button\",\"text\":\"\"},\"$:/core/ui/EditorToolbar/strikethrough\":{\"title\":\"$:/core/ui/EditorToolbar/strikethrough\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/strikethrough\",\"caption\":\"{{$:/language/Buttons/Strikethrough/Caption}}\",\"description\":\"{{$:/language/Buttons/Strikethrough/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((strikethrough))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"~~\\\"\\n\\tsuffix=\\\"~~\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/subscript\":{\"title\":\"$:/core/ui/EditorToolbar/subscript\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/subscript\",\"caption\":\"{{$:/language/Buttons/Subscript/Caption}}\",\"description\":\"{{$:/language/Buttons/Subscript/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((subscript))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\",,\\\"\\n\\tsuffix=\\\",,\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/superscript\":{\"title\":\"$:/core/ui/EditorToolbar/superscript\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/superscript\",\"caption\":\"{{$:/language/Buttons/Superscript/Caption}}\",\"description\":\"{{$:/language/Buttons/Superscript/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((superscript))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"^^\\\"\\n\\tsuffix=\\\"^^\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/transcludify\":{\"title\":\"$:/core/ui/EditorToolbar/transcludify\",\"caption\":\"{{$:/language/Buttons/Transcludify/Caption}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"description\":\"{{$:/language/Buttons/Transcludify/Hint}}\",\"icon\":\"$:/core/images/transcludify\",\"list-before\":\"$:/core/ui/EditorToolbar/mono-block\",\"shortcuts\":\"((transcludify))\",\"tags\":\"$:/tags/EditorToolbar\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"{{\\\"\\n\\tsuffix=\\\"}}\\\"\\n/>\\n\"},\"$:/core/ui/EditorToolbar/underline\":{\"title\":\"$:/core/ui/EditorToolbar/underline\",\"tags\":\"$:/tags/EditorToolbar\",\"icon\":\"$:/core/images/underline\",\"caption\":\"{{$:/language/Buttons/Underline/Caption}}\",\"description\":\"{{$:/language/Buttons/Underline/Hint}}\",\"condition\":\"[\u003CtargetTiddler>!has[type]] [\u003CtargetTiddler>type[text/vnd.tiddlywiki]]\",\"shortcuts\":\"((underline))\",\"text\":\"\u003C$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"wrap-selection\\\"\\n\\tprefix=\\\"__\\\"\\n\\tsuffix=\\\"__\\\"\\n/>\\n\"},\"$:/core/ui/ExportTiddlyWikiCore\":{\"title\":\"$:/core/ui/ExportTiddlyWikiCore\",\"text\":\"\\\\define jsFileName() tiddlywikicore-$(version)$.js\\n\\\\define noExportMsg()\\nIt appears that you have a wiki with an external ~TiddlyWiki core. The export action cannot be performed.\\n\u003Cp>You will need to view the page source in your browser. Then go to the very bottom the the source, find the last `\u003Cscript>` \\nelement, and right-click its `src` URI. Save the link as ''$(jsFileName)$''\u003C/p>\\n\\\\end\\n\\n''For advanced users''\\n\\nExport the ~TiddlyWiki core ~JavaScript code for running with external ~JavaScript:\\n\\n\u003C$button tooltip=\\\"Export the ~TiddlyWiki core code for running with external ~JavaScript\\\" aria-label=\\\"export TiddlyWiki core\\\" class=\\\"tc-btn-big-green\\\">\\n\u003C$list filter=\\\"[[$:/boot/boot.js]is[missing]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/core/templates/tiddlywiki5.js\\\" filename=\u003C\u003CjsFileName>>/>\\\"\\\"\\\" >\\n\u003C$action-setfield $tiddler=\u003C\u003Cqualify \\\"$:/temp/alert\\\">> text=\u003C\u003CnoExportMsg>> subtitle=\\\"Export ~TiddllyWiki Core\\\"/>\\n\u003C$action-sendmessage $message=\\\"tm-modal\\\" $param=\u003C\u003Cqualify \\\"$:/temp/alert\\\">>/>\\n\u003C/$list>\\n{{$:/core/images/download-button}} Download ~TiddlyWiki core\\n\u003C/$button>\\n\\n[[Further information|https://tiddlywiki.com/#Using%20the%20external%20JavaScript%20template]]\\n\"},\"$:/core/Filters/AllTags\":{\"title\":\"$:/core/Filters/AllTags\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[tags[]!is[system]sort[title]]\",\"description\":\"{{$:/language/Filters/AllTags}}\",\"text\":\"\"},\"$:/core/Filters/AllTiddlers\":{\"title\":\"$:/core/Filters/AllTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[!is[system]sort[title]]\",\"description\":\"{{$:/language/Filters/AllTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/Drafts\":{\"title\":\"$:/core/Filters/Drafts\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[has[draft.of]sort[title]]\",\"description\":\"{{$:/language/Filters/Drafts}}\",\"text\":\"\"},\"$:/core/Filters/Missing\":{\"title\":\"$:/core/Filters/Missing\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[all[missing]sort[title]]\",\"description\":\"{{$:/language/Filters/Missing}}\",\"text\":\"\"},\"$:/core/Filters/Orphans\":{\"title\":\"$:/core/Filters/Orphans\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[all[orphans]sort[title]]\",\"description\":\"{{$:/language/Filters/Orphans}}\",\"text\":\"\"},\"$:/core/Filters/OverriddenShadowTiddlers\":{\"title\":\"$:/core/Filters/OverriddenShadowTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[is[shadow]]\",\"description\":\"{{$:/language/Filters/OverriddenShadowTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/RecentSystemTiddlers\":{\"title\":\"$:/core/Filters/RecentSystemTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[has[modified]!sort[modified]limit[50]]\",\"description\":\"{{$:/language/Filters/RecentSystemTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/RecentTiddlers\":{\"title\":\"$:/core/Filters/RecentTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[!is[system]has[modified]!sort[modified]limit[50]]\",\"description\":\"{{$:/language/Filters/RecentTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/SessionTiddlers\":{\"title\":\"$:/core/Filters/SessionTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[haschanged[]]\",\"description\":\"{{$:/language/Filters/SessionTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/ShadowTiddlers\":{\"title\":\"$:/core/Filters/ShadowTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[all[shadows]sort[title]]\",\"description\":\"{{$:/language/Filters/ShadowTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/StoryList\":{\"title\":\"$:/core/Filters/StoryList\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[list[$:/StoryList]] -$:/AdvancedSearch\",\"description\":\"{{$:/language/Filters/StoryList}}\",\"text\":\"\"},\"$:/core/Filters/SystemTags\":{\"title\":\"$:/core/Filters/SystemTags\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[all[shadows+tiddlers]tags[]is[system]sort[title]]\",\"description\":\"{{$:/language/Filters/SystemTags}}\",\"text\":\"\"},\"$:/core/Filters/SystemTiddlers\":{\"title\":\"$:/core/Filters/SystemTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[is[system]sort[title]]\",\"description\":\"{{$:/language/Filters/SystemTiddlers}}\",\"text\":\"\"},\"$:/core/Filters/TypedTiddlers\":{\"title\":\"$:/core/Filters/TypedTiddlers\",\"tags\":\"$:/tags/Filter\",\"filter\":\"[!is[system]has[type]each[type]sort[type]] -[type[text/vnd.tiddlywiki]]\",\"description\":\"{{$:/language/Filters/TypedTiddlers}}\",\"text\":\"\"},\"$:/core/ui/ImportListing\":{\"title\":\"$:/core/ui/ImportListing\",\"text\":\"\\\\define lingo-base() $:/language/Import/\\n\\n\\\\define messageField() message-$(payloadTiddler)$\\n\\n\\\\define payloadTitleFilter() [\u003CcurrentTiddler>get\u003CrenameField>minlength[1]else\u003CpayloadTiddler>]\\n\\n\\\\define overWriteWarning()\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>!has\u003CsuppressedField>]\\\">\\n\u003C$text text={{{[subfilter\u003CpayloadTitleFilter>!is[tiddler]then[]] ~[\u003Clingo-base>addsuffix[Listing/Rename/OverwriteWarning]get[text]]}}}/>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define selectionInfo()\\n\\\\whitespace trim\\n\u003C$set name=\\\"escUnselected\\\" value={{{[{$:/language/Import/Upgrader/Tiddler/Unselected}escaperegexp[]addprefix[(?g)]]}}}>\\n\\t\u003C$list filter=\\\"[all[current]get\u003CmessageField>regexp\u003CescUnselected>]\\\" variable=\\\"ignore\\\">\\n\\t\\t\u003C$text text={{{[all[current]get\u003CselectionField>match[checked]then{$:/language/Import/Upgrader/Tiddler/Selected}else[]]}}}/>\\n\\t\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define libraryInfo()\\n\\\\whitespace trim\\n\u003C$set name=\\\"escUnselected\\\" value={{{[{$:/language/Import/Upgrader/Tiddler/Unselected}escaperegexp[]addprefix[(?g)]]}}}>\\n\\t\u003C$list filter=\\\"[all[current]get\u003CmessageField>!regexp\u003CescUnselected>]\\\" variable=\\\"ignore\\\">\\n\\t\\t\u003C$text text={{{[all[current]get\u003CmessageField>]}}}/>\\n\\t\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define selectionField() selection-$(payloadTiddler)$\\n\\n\\\\define renameField() rename-$(payloadTiddler)$\\n\\n\\\\define suppressedField() suppressed-$(payloadTiddler)$\\n\\n\\\\define newImportTitleTiddler() $:/temp/NewImportTitle-$(payloadTiddler)$\\n\\n\\\\define previewPopupState() $(currentTiddler)$!!popup-$(payloadTiddler)$\\n\\n\\\\define renameFieldState() $(currentTiddler)$!!state-rename-$(payloadTiddler)$\\n\\n\\\\define select-all-actions()\\n\u003C$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n\u003C$action-setfield $field={{{ [\u003CpayloadTiddler>addprefix[selection-]] }}} $value={{$:/state/import/select-all}}/>\\n\u003C/$list>\\n\\\\end\\n\\n\u003Ctable class=\\\"tc-import-table\\\">\\n\u003Ctbody>\\n\u003Ctr>\\n\u003Cth align=\\\"left\\\">\\n\u003C$checkbox tiddler=\\\"$:/state/import/select-all\\\" field=\\\"text\\\" checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\" actions=\u003C\u003Cselect-all-actions>>>\\n\u003C\u003Clingo Listing/Select/Caption>>\\n\u003C/$checkbox>\\n\u003C/th>\\n\u003Cth>\\n\u003C\u003Clingo Listing/Title/Caption>>\\n\u003C/th>\\n\u003Cth>\\n\u003C\u003Clingo Listing/Status/Caption>>\\n\u003C/th>\\n\u003C/tr>\\n\u003C$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" variable=\\\"payloadTiddler\\\">\\n\u003Ctr class={{{[\u003CcurrentTiddler>has\u003CsuppressedField>then[tc-row-disabled]] ~[subfilter\u003CpayloadTitleFilter>is[tiddler]then[tc-row-warning]] }}}>\\n\u003Ctd>\\n\u003C$checkbox field=\u003C\u003CselectionField>> checked=\\\"checked\\\" unchecked=\\\"unchecked\\\" default=\\\"checked\\\" disabled={{{[\u003CcurrentTiddler>has\u003CsuppressedField>then[yes]else[no]]}}}/>\\n\u003C/td>\\n\u003Ctd>\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CrenameFieldState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CpreviewPopupState>> text=\\\"yes\\\" tag=\\\"div\\\" class=\\\"tc-flex\\\">\\n\u003C$button class=\\\"tc-btn-invisible tc-btn-dropdown tc-flex-grow-1 tc-word-break\\\" set=\u003C\u003CpreviewPopupState>> setTo=\\\"yes\\\" disabled={{{[\u003CcurrentTiddler>has\u003CsuppressedField>then[yes]else[no]]}}}>\\n\u003Cspan class=\\\"tc-small-gap-right\\\">{{$:/core/images/right-arrow}}\u003C/span>\u003C$text text={{{[subfilter\u003CpayloadTitleFilter>]}}}/>\\n\u003C/$button>\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>!has\u003CsuppressedField>]\\\">\u003C$button class=\\\"tc-btn-invisible\\\" set=\u003C\u003CrenameFieldState>> setTo=\\\"yes\\\" tooltip={{{[\u003Clingo-base>addsuffix[Listing/Rename/Tooltip]get[text]]}}}>{{$:/core/images/edit-button}}\u003C/$button>\u003C/$list>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CpreviewPopupState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n\u003C$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=\u003C\u003CpreviewPopupState>> setTo=\\\"no\\\">\\n\u003Cspan class=\\\"tc-small-gap-right\\\">{{$:/core/images/down-arrow}}\u003C/span>\u003C$text text={{{[subfilter\u003CpayloadTitleFilter>]}}}/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CrenameFieldState>> text=\\\"yes\\\" tag=\\\"div\\\">\\n\u003C$text text={{{[\u003Clingo-base>addsuffix[Listing/Rename/Prompt]get[text]]}}}/>\\n\u003C/$reveal>\\n\u003C/td>\\n\u003Ctd>\\n\u003C\u003CselectionInfo>>\\n\u003C\u003ClibraryInfo>>\\n\u003C\u003CoverWriteWarning>>\\n\u003C/td>\\n\u003C/tr>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CrenameFieldState>> text=\\\"yes\\\" tag=\\\"tr\\\">\\n\u003Ctd colspan=\\\"3\\\">\\n\u003Cdiv class=\\\"tc-flex\\\">\\n\u003C$edit-text tiddler=\u003C\u003CnewImportTitleTiddler>>  default={{{[subfilter\u003CpayloadTitleFilter>]}}} tag=\\\"input\\\" class=\\\"tc-import-rename tc-flex-grow-1\\\"/>\u003Cspan class=\\\"tc-small-gap-left\\\">\u003C$button  class=\\\"tc-btn-invisible\\\" set=\u003C\u003CrenameFieldState>> setTo=\\\"no\\\" tooltip={{{[\u003Clingo-base>addsuffix[Listing/Rename/CancelRename]get[text]]}}}>{{$:/core/images/close-button}}\u003C$action-deletetiddler $tiddler=\u003C\u003CnewImportTitleTiddler>>/>\u003C/$button>\u003Cspan class=\\\"tc-small-gap-right\\\"/>\u003C/span>\u003C$button  class=\\\"tc-btn-invisible\\\" set=\u003C\u003CrenameFieldState>> setTo=\\\"no\\\" tooltip={{{[\u003Clingo-base>addsuffix[Listing/Rename/ConfirmRename]get[text]]}}}>{{$:/core/images/done-button}}\u003C$action-setfield $field=\u003C\u003CrenameField>> $value={{{[\u003CnewImportTitleTiddler>get[text]minlength[1]else\u003CpayloadTiddler>]}}} />\u003C$action-deletetiddler $tiddler=\u003C\u003CnewImportTitleTiddler>>/>\u003C/$button>\\n\u003C/div>\\n\u003C/td>\\n\u003C/$reveal>\\n\u003Ctr>\\n\u003Ctd colspan=\\\"3\\\">\\n\u003C$reveal type=\\\"match\\\" text=\\\"yes\\\" state=\u003C\u003CpreviewPopupState>> tag=\\\"div\\\">\\n\u003C$list filter=\\\"[{$:/state/importpreviewtype}has[text]]\\\" variable=\\\"listItem\\\" emptyMessage={{$:/core/ui/ImportPreviews/Text}}>\\n\u003C$transclude tiddler={{$:/state/importpreviewtype}}/>\\n\u003C/$list>\\n\u003C/$reveal>\\n\u003C/td>\\n\u003C/tr>\\n\u003C/$list>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/core/ui/ImportPreviews/Diff\":{\"title\":\"$:/core/ui/ImportPreviews/Diff\",\"tags\":\"$:/tags/ImportPreview\",\"caption\":\"{{$:/language/Import/Listing/Preview/Diff}}\",\"text\":\"\u003C$macrocall $name=\\\"compareTiddlerText\\\" sourceTiddlerTitle=\u003C\u003CpayloadTiddler>> destTiddlerTitle=\u003C\u003CcurrentTiddler>> destSubTiddlerTitle=\u003C\u003CpayloadTiddler>>/>\\n\"},\"$:/core/ui/ImportPreviews/DiffFields\":{\"title\":\"$:/core/ui/ImportPreviews/DiffFields\",\"tags\":\"$:/tags/ImportPreview\",\"caption\":\"{{$:/language/Import/Listing/Preview/DiffFields}}\",\"text\":\"\u003C$macrocall $name=\\\"compareTiddlers\\\" sourceTiddlerTitle=\u003C\u003CpayloadTiddler>> destTiddlerTitle=\u003C\u003CcurrentTiddler>> destSubTiddlerTitle=\u003C\u003CpayloadTiddler>> exclude=\\\"text\\\"/>\\n\"},\"$:/core/ui/ImportPreviews/Fields\":{\"title\":\"$:/core/ui/ImportPreviews/Fields\",\"tags\":\"$:/tags/ImportPreview\",\"caption\":\"{{$:/language/Import/Listing/Preview/Fields}}\",\"text\":\"\u003Ctable class=\\\"tc-view-field-table\\\">\\n\u003Ctbody>\\n\u003C$list filter=\\\"[\u003CpayloadTiddler>subtiddlerfields\u003CcurrentTiddler>sort[]] -text\\\" variable=\\\"fieldName\\\">\\n\u003Ctr class=\\\"tc-view-field\\\">\\n\u003Ctd class=\\\"tc-view-field-name\\\">\\n\u003C$text text=\u003C\u003CfieldName>>/>\\n\u003C/td>\\n\u003Ctd class=\\\"tc-view-field-value\\\">\\n\u003C$view field=\u003C\u003CfieldName>> tiddler=\u003C\u003CcurrentTiddler>> subtiddler=\u003C\u003CpayloadTiddler>>/>\\n\u003C/td>\\n\u003C/tr>\\n\u003C/$list>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/core/ui/ImportPreviews/Text\":{\"title\":\"$:/core/ui/ImportPreviews/Text\",\"tags\":\"$:/tags/ImportPreview\",\"caption\":\"{{$:/language/Import/Listing/Preview/Text}}\",\"text\":\"\u003C$transclude tiddler=\u003C\u003CcurrentTiddler>> subtiddler=\u003C\u003CpayloadTiddler>> mode=\\\"block\\\"/>\\n\"},\"$:/core/ui/ImportPreviews/TextRaw\":{\"title\":\"$:/core/ui/ImportPreviews/TextRaw\",\"tags\":\"$:/tags/ImportPreview\",\"caption\":\"{{$:/language/Import/Listing/Preview/TextRaw}}\",\"text\":\"\u003Cpre>\u003Ccode>\u003C$view tiddler=\u003C\u003CcurrentTiddler>> subtiddler=\u003C\u003CpayloadTiddler>> />\u003C/code>\u003C/pre>\"},\"$:/core/ui/KeyboardShortcuts/advanced-search\":{\"title\":\"$:/core/ui/KeyboardShortcuts/advanced-search\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((advanced-search))\",\"text\":\"\u003C$navigator story=\\\"$:/StoryList\\\" history=\\\"$:/HistoryList\\\">\\n\u003C$action-navigate $to=\\\"$:/AdvancedSearch\\\"/>\\n\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\"\\\"\\\"[data-tiddler-title=\\\"$:/AdvancedSearch\\\"] .tc-search input\\\"\\\"\\\" preventScroll=\\\"true\\\"/>\\n\u003C/$navigator>\\n\"},\"$:/core/ui/KeyboardShortcuts/change-sidebar-layout\":{\"title\":\"$:/core/ui/KeyboardShortcuts/change-sidebar-layout\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((change-sidebar-layout))\",\"text\":\"\u003C$list filter=\\\"[{$:/themes/tiddlywiki/vanilla/options/sidebarlayout}match[fixed-fluid]]\\\" \\nemptyMessage=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\" text=\\\"fixed-fluid\\\"/>\\\"\\\"\\\">\\n\u003C$action-setfield $tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\" text=\\\"fluid-fixed\\\"/>\\n\u003C/$list>\\n\"},\"$:/core/ui/KeyboardShortcuts/new-image\":{\"title\":\"$:/core/ui/KeyboardShortcuts/new-image\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((new-image))\",\"text\":\"\u003C$navigator story=\\\"$:/StoryList\\\" history=\\\"$:/HistoryList\\\" openLinkFromInsideRiver={{$:/config/Navigation/openLinkFromInsideRiver}} openLinkFromOutsideRiver={{$:/config/Navigation/openLinkFromOutsideRiver}} relinkOnRename={{$:/config/RelinkOnRename}}>\\n{{$:/core/ui/Actions/new-image}}\\n\u003C/$navigator>\\n\"},\"$:/core/ui/KeyboardShortcuts/new-journal\":{\"title\":\"$:/core/ui/KeyboardShortcuts/new-journal\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((new-journal))\",\"text\":\"\u003C$navigator story=\\\"$:/StoryList\\\" history=\\\"$:/HistoryList\\\" openLinkFromInsideRiver={{$:/config/Navigation/openLinkFromInsideRiver}} openLinkFromOutsideRiver={{$:/config/Navigation/openLinkFromOutsideRiver}} relinkOnRename={{$:/config/RelinkOnRename}}>\\n{{$:/core/ui/Actions/new-journal}}\\n\u003C/$navigator>\\n\"},\"$:/core/ui/KeyboardShortcuts/new-tiddler\":{\"title\":\"$:/core/ui/KeyboardShortcuts/new-tiddler\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((new-tiddler))\",\"text\":\"\u003C$navigator story=\\\"$:/StoryList\\\" history=\\\"$:/HistoryList\\\" openLinkFromInsideRiver={{$:/config/Navigation/openLinkFromInsideRiver}} openLinkFromOutsideRiver={{$:/config/Navigation/openLinkFromOutsideRiver}} relinkOnRename={{$:/config/RelinkOnRename}}>\\n{{$:/core/ui/Actions/new-tiddler}}\\n\u003C/$navigator>\\n\"},\"$:/core/ui/KeyboardShortcuts/save-wiki\":{\"title\":\"$:/core/ui/KeyboardShortcuts/save-wiki\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((save-wiki))\",\"text\":\"\u003C$wikify name=\\\"site-title\\\" text={{$:/config/SaveWikiButton/Filename}}>\\n\u003C$action-sendmessage $message=\\\"tm-save-wiki\\\" $param={{$:/config/SaveWikiButton/Template}} filename=\u003C\u003Csite-title>>/>\\n\u003C/$wikify>\\n\"},\"$:/core/ui/KeyboardShortcuts/sidebar-search\":{\"title\":\"$:/core/ui/KeyboardShortcuts/sidebar-search\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((sidebar-search))\",\"text\":\"\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\".tc-search input\\\"/>\\n\"},\"$:/core/ui/KeyboardShortcuts/switcher\":{\"title\":\"$:/core/ui/KeyboardShortcuts/switcher\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((layout-switcher))\",\"text\":\"\u003C$action-sendmessage $message=\\\"tm-show-switcher\\\" switch=\\\"layout\\\"/>\"},\"$:/core/ui/KeyboardShortcuts/toggle-sidebar\":{\"title\":\"$:/core/ui/KeyboardShortcuts/toggle-sidebar\",\"tags\":\"$:/tags/KeyboardShortcut\",\"key\":\"((toggle-sidebar))\",\"text\":\"\u003C$list filter=\\\"[[$:/state/sidebar]is[missing]] [{$:/state/sidebar}removeprefix[yes]]\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$action-setfield $tiddler=\\\"$:/state/sidebar\\\" text=\\\"yes\\\"/>\\n\\\"\\\"\\\">\\n\u003C$action-setfield $tiddler=\\\"$:/state/sidebar\\\" text=\\\"no\\\"/>\\n\u003C/$list>\\n\"},\"$:/snippets/LayoutSwitcher\":{\"title\":\"$:/snippets/LayoutSwitcher\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ControlPanel/LayoutSwitcher/Caption}}\",\"text\":\"\u003C$linkcatcher to=\\\"$:/layout\\\">\\n\u003Cdiv class=\\\"tc-chooser\\\">\\n\u003C$list filter=\\\"[all[tiddlers+shadows]tag[$:/tags/Layout]] [[$:/core/ui/PageTemplate]] +[!is[draft]sort[name]]\\\">\\n\u003C$list filter=\\\"[{$:/layout}!has[text]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$set name=\\\"cls\\\" filter=\\\"[all[current]field:title{$:/layout}]\\\" value=\\\"tc-chooser-item tc-chosen\\\" emptyValue=\\\"tc-chooser-item\\\">\u003Cdiv class=\u003C\u003Ccls>>>\u003C$link to={{!!title}}>''\u003C$transclude field=\\\"name\\\"/>'' - \u003C$transclude field=\\\"description\\\"/>\u003C/$link>\u003C/div>\\n\u003C/$set>\\n\\\"\\\"\\\">\\n\u003C$set name=\\\"cls\\\" filter=\\\"[all[current]field:title[$:/core/ui/PageTemplate]]\\\" value=\\\"tc-chooser-item tc-chosen\\\" emptyValue=\\\"tc-chooser-item\\\">\u003Cdiv class=\u003C\u003Ccls>>>\u003C$link to={{!!title}}>''\u003C$transclude field=\\\"name\\\"/>'' - \u003C$transclude field=\\\"description\\\"/>\u003C/$link>\u003C/div>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$linkcatcher>\\n\"},\"$:/core/ui/ListItemTemplate\":{\"title\":\"$:/core/ui/ListItemTemplate\",\"text\":\"\u003Cdiv class=\\\"tc-menu-list-item\\\">\\n\u003C$link />\\n\u003C/div>\"},\"$:/snippets/ListTaggedCascade\":{\"title\":\"$:/snippets/ListTaggedCascade\",\"text\":\"{{||$:/language/ControlPanel/Cascades/TagPrompt}}\\n\\n\u003Col>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag\u003CcurrentTiddler>]\\\">\\n\u003Cli>\\n\u003Cdiv>\\n\u003C$link>\u003C$text text=\u003C\u003CcurrentTiddler>>/>\u003C/$link>\\n\u003C/div>\\n\u003C$codeblock code={{!!text}}/>\\n\u003C/li>\\n\u003C/$list>\\n\u003C/ol>\\n\"},\"$:/Manager/ItemMain/Fields\":{\"title\":\"$:/Manager/ItemMain/Fields\",\"tags\":\"$:/tags/Manager/ItemMain\",\"caption\":\"{{$:/language/Manager/Item/Fields}}\",\"text\":\"\u003Ctable>\\n\u003Ctbody>\\n\u003C$list filter=\\\"[all[current]fields[]sort[title]] -text\\\" template=\\\"$:/core/ui/TiddlerFieldTemplate\\\" variable=\\\"listItem\\\"/>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/Manager/ItemMain/RawText\":{\"title\":\"$:/Manager/ItemMain/RawText\",\"tags\":\"$:/tags/Manager/ItemMain\",\"caption\":\"{{$:/language/Manager/Item/RawText}}\",\"text\":\"\u003Cpre>\u003Ccode>\u003C$view/>\u003C/code>\u003C/pre>\\n\"},\"$:/Manager/ItemMain/WikifiedText\":{\"title\":\"$:/Manager/ItemMain/WikifiedText\",\"tags\":\"$:/tags/Manager/ItemMain\",\"caption\":\"{{$:/language/Manager/Item/WikifiedText}}\",\"text\":\"\u003C$transclude mode=\\\"block\\\"/>\\n\"},\"$:/Manager/ItemSidebar/Colour\":{\"title\":\"$:/Manager/ItemSidebar/Colour\",\"tags\":\"$:/tags/Manager/ItemSidebar\",\"caption\":\"{{$:/language/Manager/Item/Colour}}\",\"text\":\"\\\\define swatch-styles()\\nheight: 1em;\\nbackground-color: $(colour)$\\n\\\\end\\n\\n\u003C$vars colour={{!!color}}>\\n\u003Cp style=\u003C\u003Cswatch-styles>>/>\\n\u003C/$vars>\\n\u003Cp>\\n\u003C$edit-text field=\\\"color\\\" tag=\\\"input\\\" type=\\\"color\\\"/> / \u003C$edit-text field=\\\"color\\\" tag=\\\"input\\\" type=\\\"text\\\" size=\\\"9\\\"/>\\n\u003C/p>\\n\"},\"$:/Manager/ItemSidebar/Icon\":{\"title\":\"$:/Manager/ItemSidebar/Icon\",\"tags\":\"$:/tags/Manager/ItemSidebar\",\"caption\":\"{{$:/language/Manager/Item/Icon}}\",\"text\":\"\u003Cp>\\n\u003Cdiv class=\\\"tc-manager-icon-editor\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/image-picker\\\">> class=\\\"tc-btn-invisible\\\">\\n\u003C$transclude tiddler={{!!icon}}>\\n{{$:/language/Manager/Item/Icon/None}}\\n\u003C/$transclude>\\n\u003C/$button>\\n\u003Cdiv class=\\\"tc-block-dropdown-wrapper\\\" style=\\\"position: static;\\\">\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/image-picker\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\" tag=\\\"div\\\" class=\\\"tc-popup\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-popup-keep\\\" style=\\\"width: 80%; left: 10%; right: 10%; padding: 0.5em;\\\">\\n\u003C$macrocall $name=\\\"image-picker-include-tagged-images\\\" actions=\\\"\\\"\\\"\\n\u003C$action-setfield $field=\\\"icon\\\" $value=\u003C\u003CimageTitle>>/>\\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cqualify \\\"$:/state/popup/image-picker\\\">>/>\\n\\\"\\\"\\\"/>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/div>\\n\u003C/div>\\n\u003C/p>\\n\"},\"$:/Manager/ItemSidebar/Tags\":{\"title\":\"$:/Manager/ItemSidebar/Tags\",\"tags\":\"$:/tags/Manager/ItemSidebar\",\"caption\":\"{{$:/language/Manager/Item/Tags}}\",\"text\":\"\\\\whitespace trim\\n\\\\define tag-checkbox-actions()\\n\u003C$action-listops\\n\\t$tiddler=\\\"$:/config/Manager/RecentTags\\\"\\n\\t$subfilter=\\\"[\u003Ctag>] [list[$:/config/Manager/RecentTags]] +[limit[12]]\\\"\\n/>\\n\\\\end\\n\\n\\\\define tag-picker-actions()\\n\u003C\u003Ctag-checkbox-actions>>\\n\\\\end\\n\\n\u003Cp>\\n\u003C$list filter=\\\"[all[current]tags[]] [list[$:/config/Manager/RecentTags]] +[sort[title]] \\\" variable=\\\"tag\\\" storyview=\\\"pop\\\">\\n\u003Cdiv>\\n\u003C$checkbox tiddler=\u003C\u003CcurrentTiddler>> tag=\u003C\u003Ctag>> actions=\u003C\u003Ctag-checkbox-actions>>>\\n\u003C$macrocall $name=\\\"tag-pill\\\" tag=\u003C\u003Ctag>>/>\\n\u003C/$checkbox>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/p>\\n\u003Cp>\\n\u003C$fieldmangler>\\n\u003C$macrocall $name=\\\"tag-picker\\\" actions=\u003C\u003Ctag-picker-actions>>/>\\n\u003C/$fieldmangler>\\n\u003C/p>\\n\"},\"$:/Manager/ItemSidebar/Tools\":{\"title\":\"$:/Manager/ItemSidebar/Tools\",\"tags\":\"$:/tags/Manager/ItemSidebar\",\"caption\":\"{{$:/language/Manager/Item/Tools}}\",\"text\":\"\u003Cp>\\n\u003C$button to=\u003C\u003CcurrentTiddler>>>{{$:/core/images/link}} open\u003C/$button>\\n\u003C/p>\\n\u003Cp>\\n\u003C$button message=\\\"tm-edit-tiddler\\\" param=\u003C\u003CcurrentTiddler>>>{{$:/core/images/edit-button}} edit\u003C/$button>\\n\u003C/p>\\n\"},\"$:/Manager\":{\"title\":\"$:/Manager\",\"icon\":\"$:/core/images/list\",\"color\":\"#bbb\",\"text\":\"\\\\define lingo-base() $:/language/Manager/\\n\\n\\\\define list-item-content-item()\\n\u003Cdiv class=\\\"tc-manager-list-item-content-item\\\">\\n\\t\u003C$vars state-title=\\\"\\\"\\\"$:/state/popup/manager/item/$(listItem)$\\\"\\\"\\\">\\n\\t\\t\u003C$reveal state=\u003C\u003Cstate-title>> type=\\\"match\\\" text=\\\"show\\\" default=\\\"show\\\" tag=\\\"div\\\">\\n\\t\\t\\t\u003C$button set=\u003C\u003Cstate-title>> setTo=\\\"hide\\\" class=\\\"tc-btn-invisible tc-manager-list-item-content-item-heading\\\">\\n\\t\\t\\t\\t{{$:/core/images/down-arrow}} \u003C$transclude tiddler=\u003C\u003ClistItem>> field=\\\"caption\\\"/>\\n\\t\\t\\t\u003C/$button>\\n\\t\\t\u003C/$reveal>\\n\\t\\t\u003C$reveal state=\u003C\u003Cstate-title>> type=\\\"nomatch\\\" text=\\\"show\\\" default=\\\"show\\\" tag=\\\"div\\\">\\n\\t\\t\\t\u003C$button set=\u003C\u003Cstate-title>> setTo=\\\"show\\\" class=\\\"tc-btn-invisible tc-manager-list-item-content-item-heading\\\">\\n\\t\\t\\t\\t{{$:/core/images/right-arrow}} \u003C$transclude tiddler=\u003C\u003ClistItem>> field=\\\"caption\\\"/>\\n\\t\\t\\t\u003C/$button>\\n\\t\\t\u003C/$reveal>\\n\\t\\t\u003C$reveal state=\u003C\u003Cstate-title>> type=\\\"match\\\" text=\\\"show\\\" default=\\\"show\\\" tag=\\\"div\\\" class=\\\"tc-manager-list-item-content-item-body\\\">\\n\\t\\t\\t\u003C$transclude tiddler=\u003C\u003ClistItem>>/>\\n\\t\\t\u003C/$reveal>\\n\\t\u003C/$vars>\\n\u003C/div>\\n\\\\end\\n\\n\u003Cdiv class=\\\"tc-manager-wrapper\\\">\\n\\t\u003Cdiv class=\\\"tc-manager-controls\\\">\\n\\t\\t\u003Cdiv class=\\\"tc-manager-control\\\">\\n\\t\\t\\t\u003C\u003Clingo Controls/Show/Prompt>> \u003C$select tiddler=\\\"$:/config/Manager/Show\\\" default=\\\"tiddlers\\\">\\n\\t\\t\\t\\t\u003Coption value=\\\"tiddlers\\\">\u003C\u003Clingo Controls/Show/Option/Tiddlers>>\u003C/option>\\n\\t\\t\\t\\t\u003Coption value=\\\"tags\\\">\u003C\u003Clingo Controls/Show/Option/Tags>>\u003C/option>\\n\\t\\t\\t\u003C/$select>\\n\\t\\t\u003C/div>\\n\\t\\t\u003Cdiv class=\\\"tc-manager-control\\\">\\n\\t\\t\\t\u003C\u003Clingo Controls/Search/Prompt>> \u003C$edit-text tiddler=\\\"$:/config/Manager/Filter\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder={{$:/language/Manager/Controls/Search/Placeholder}}/>\\n\\t\\t\u003C/div>\\n\\t\\t\u003Cdiv class=\\\"tc-manager-control\\\">\\n\\t\\t\\t\u003C\u003Clingo Controls/FilterByTag/Prompt>> \u003C$select tiddler=\\\"$:/config/Manager/Tag\\\" default=\\\"\\\">\\n\\t\\t\\t\\t\u003Coption value=\\\"\\\">\u003C\u003Clingo Controls/FilterByTag/None>>\u003C/option>\\n\\t\\t\\t\\t\u003C$list filter=\\\"[!is{$:/config/Manager/System}tags[]!is[system]sort[title]]\\\" variable=\\\"tag\\\">\\n\\t\\t\\t\\t\\t\u003Coption value=\u003C\u003Ctag>>>\u003C$text text=\u003C\u003Ctag>>/>\u003C/option>\\n\\t\\t\\t\\t\u003C/$list>\\n\\t\\t\\t\u003C/$select>\\n\\t\\t\u003C/div>\\n\\t\\t\u003Cdiv class=\\\"tc-manager-control\\\">\\n\\t\\t\\t\u003C\u003Clingo Controls/Sort/Prompt>> \u003C$select tiddler=\\\"$:/config/Manager/Sort\\\" default=\\\"title\\\">\\n\\t\\t\\t\\t\u003Coptgroup label=\\\"Common\\\">\\n\\t\\t\\t\\t\\t\u003C$list filter=\\\"title modified modifier created creator created\\\" variable=\\\"field\\\">\\n\\t\\t\\t\\t\\t\\t\u003Coption value=\u003C\u003Cfield>>>\u003C$text text=\u003C\u003Cfield>>/>\u003C/option>\\n\\t\\t\\t\\t\\t\u003C/$list>\\n\\t\\t\\t\\t\u003C/optgroup>\\n\\t\\t\\t\\t\u003Coptgroup label=\\\"All\\\">\\n\\t\\t\\t\\t\\t\u003C$list filter=\\\"[all{$:/config/Manager/Show}!is{$:/config/Manager/System}fields[]sort[title]] -title -modified -modifier -created -creator -created\\\" variable=\\\"field\\\">\\n\\t\\t\\t\\t\\t\\t\u003Coption value=\u003C\u003Cfield>>>\u003C$text text=\u003C\u003Cfield>>/>\u003C/option>\\n\\t\\t\\t\\t\\t\u003C/$list>\\n\\t\\t\\t\\t\u003C/optgroup>\\n\\t\\t\\t\u003C/$select>\\n\\t\\t\\t\u003C$checkbox tiddler=\\\"$:/config/Manager/Order\\\" field=\\\"text\\\" checked=\\\"reverse\\\" unchecked=\\\"forward\\\" default=\\\"forward\\\">\\n\\t\\t\\t\\t\u003C\u003Clingo Controls/Order/Prompt>>\\n\\t\\t\\t\u003C/$checkbox>\\n\\t\\t\u003C/div>\\n\\t\\t\u003Cdiv class=\\\"tc-manager-control\\\">\\n\\t\\t\\t\u003C$checkbox tiddler=\\\"$:/config/Manager/System\\\" field=\\\"text\\\" checked=\\\"\\\" unchecked=\\\"system\\\" default=\\\"system\\\">\\n\\t\\t\\t\\t{{$:/language/SystemTiddlers/Include/Prompt}}\\n\\t\\t\\t\u003C/$checkbox>\\n\\t\\t\u003C/div>\\n\\t\u003C/div>\\n\\t\u003Cdiv class=\\\"tc-manager-list\\\">\\n\\t\\t\u003C$list filter=\\\"[all{$:/config/Manager/Show}!is{$:/config/Manager/System}search{$:/config/Manager/Filter}tag:strict{$:/config/Manager/Tag}sort{$:/config/Manager/Sort}order{$:/config/Manager/Order}]\\\">\\n\\t\\t\\t\u003C$vars transclusion=\u003C\u003CcurrentTiddler>>>\\n\\t\\t\\t\\t\u003Cdiv style=\\\"tc-manager-list-item\\\">\\n\\t\\t\\t\\t\\t\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/manager/popup\\\">> class=\\\"tc-btn-invisible tc-manager-list-item-heading\\\" selectedClass=\\\"tc-manager-list-item-heading-selected\\\">\\n\\t\\t\\t\\t\\t\\t\u003C$text text=\u003C\u003CcurrentTiddler>>/>\\n\\t\\t\\t\\t\\t\u003C/$button>\\n\\t\\t\\t\\t\\t\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/manager/popup\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\" tag=\\\"div\\\" class=\\\"tc-manager-list-item-content tc-popup-handle\\\">\\n\\t\\t\\t\\t\\t\\t\u003Cdiv class=\\\"tc-manager-list-item-content-tiddler\\\">\\n\\t\\t\\t\\t\\t\\t\\t\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Manager/ItemMain]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\u003C\u003Clist-item-content-item>>\\n\\t\\t\\t\\t\\t\\t\\t\u003C/$list>\\n\\t\\t\\t\\t\\t\\t\u003C/div>\\n\\t\\t\\t\\t\\t\\t\u003Cdiv class=\\\"tc-manager-list-item-content-sidebar\\\">\\n\\t\\t\\t\\t\\t\\t\\t\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Manager/ItemSidebar]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\u003C\u003Clist-item-content-item>>\\n\\t\\t\\t\\t\\t\\t\\t\u003C/$list>\\n\\t\\t\\t\\t\\t\\t\u003C/div>\\n\\t\\t\\t\\t\\t\u003C/$reveal>\\n\\t\\t\\t\\t\u003C/div>\\n\\t\\t\\t\u003C/$vars>\\n\\t\\t\u003C/$list>\\n\\t\u003C/div>\\n\u003C/div>\\n\"},\"$:/core/ui/MissingTemplate\":{\"title\":\"$:/core/ui/MissingTemplate\",\"text\":\"\u003Cdiv class=\\\"tc-tiddler-missing\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/missing\\\">> class=\\\"tc-btn-invisible tc-missing-tiddler-label\\\">\\n\u003C$view field=\\\"title\\\" format=\\\"text\\\" />\\n\u003C/$button>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/missing\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003Chr>\\n\u003C$list filter=\\\"[all[current]backlinks[]sort[title]]\\\" template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/div>\\n\"},\"$:/core/ui/MoreSideBar/All\":{\"title\":\"$:/core/ui/MoreSideBar/All\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/All/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/AllTiddlers!!filter}} template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/Drafts\":{\"title\":\"$:/core/ui/MoreSideBar/Drafts\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Drafts/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/Drafts!!filter}} template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/Explorer\":{\"title\":\"$:/core/ui/MoreSideBar/Explorer\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Explorer/Caption}}\",\"text\":\"\u003C\u003Ctree \\\"$:/\\\">>\\n\"},\"$:/core/ui/MoreSideBar/Missing\":{\"title\":\"$:/core/ui/MoreSideBar/Missing\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Missing/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/Missing!!filter}} template=\\\"$:/core/ui/MissingTemplate\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/Orphans\":{\"title\":\"$:/core/ui/MoreSideBar/Orphans\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Orphans/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/Orphans!!filter}} template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/Plugins\":{\"title\":\"$:/core/ui/MoreSideBar/Plugins\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Caption}}\",\"text\":\"\\n{{$:/language/ControlPanel/Plugins/Installed/Hint}}\\n\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/MoreSideBar/Plugins]!has[draft.of]]\\\" default=\\\"$:/core/ui/MoreSideBar/Plugins/Plugins\\\" explicitState=\\\"$:/state/tab-1163638994\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/Recent\":{\"title\":\"$:/core/ui/MoreSideBar/Recent\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Recent/Caption}}\",\"text\":\"\u003C$macrocall $name=\\\"timeline\\\" format={{$:/language/RecentChanges/DateFormat}}/>\\n\"},\"$:/core/ui/MoreSideBar/Shadows\":{\"title\":\"$:/core/ui/MoreSideBar/Shadows\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Shadows/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/ShadowTiddlers!!filter}} template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/System\":{\"title\":\"$:/core/ui/MoreSideBar/System\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/System/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/SystemTiddlers!!filter}} template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/MoreSideBar/Tags\":{\"title\":\"$:/core/ui/MoreSideBar/Tags\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Tags/Caption}}\",\"text\":\"\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\n{{$:/core/ui/Buttons/tag-manager}}\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C$list filter={{$:/core/Filters/AllTags!!filter}}>\\n\\n\u003C$transclude tiddler=\\\"$:/core/ui/TagTemplate\\\"/>\\n\\n\u003C/$list>\\n\\n\u003Chr class=\\\"tc-untagged-separator\\\">\\n\\n{{$:/core/ui/UntaggedTemplate}}\\n\"},\"$:/core/ui/MoreSideBar/Types\":{\"title\":\"$:/core/ui/MoreSideBar/Types\",\"tags\":\"$:/tags/MoreSideBar\",\"caption\":\"{{$:/language/SideBar/Types/Caption}}\",\"text\":\"\u003C$list filter={{$:/core/Filters/TypedTiddlers!!filter}}>\\n\u003Cdiv class=\\\"tc-menu-list-item\\\">\\n\u003C$view field=\\\"type\\\"/>\\n\u003C$list filter=\\\"[type{!!type}!is[system]sort[title]]\\\">\\n\u003Cdiv class=\\\"tc-menu-list-subitem\\\">\\n\u003C$link to={{!!title}}>\u003C$view field=\\\"title\\\"/>\u003C/$link>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$list>\\n\"},\"$:/core/ui/MoreSideBar/Plugins/Languages\":{\"title\":\"$:/core/ui/MoreSideBar/Plugins/Languages\",\"tags\":\"$:/tags/MoreSideBar/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Languages/Caption}}\",\"text\":\"\u003C$list filter=\\\"[!has[draft.of]plugin-type[language]sort[name]]\\\" template=\\\"$:/core/ui/PluginListItemTemplate\\\" emptyMessage={{$:/language/ControlPanel/Plugins/Empty/Hint}}/>\\n\"},\"$:/core/ui/MoreSideBar/Plugins/Plugins\":{\"title\":\"$:/core/ui/MoreSideBar/Plugins/Plugins\",\"tags\":\"$:/tags/MoreSideBar/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Plugins/Caption}}\",\"text\":\"\u003C$list filter=\\\"[!has[draft.of]plugin-type[plugin]sort[name]]\\\" template=\\\"$:/core/ui/PluginListItemTemplate\\\" emptyMessage={{$:/language/ControlPanel/Plugins/Empty/Hint}}>>/>\\n\"},\"$:/core/ui/MoreSideBar/Plugins/Theme\":{\"title\":\"$:/core/ui/MoreSideBar/Plugins/Theme\",\"tags\":\"$:/tags/MoreSideBar/Plugins\",\"caption\":\"{{$:/language/ControlPanel/Plugins/Themes/Caption}}\",\"text\":\"\u003C$list filter=\\\"[!has[draft.of]plugin-type[theme]sort[name]]\\\" template=\\\"$:/core/ui/PluginListItemTemplate\\\" emptyMessage={{$:/language/ControlPanel/Plugins/Empty/Hint}}/>\\n\"},\"$:/core/ui/Buttons/advanced-search\":{\"title\":\"$:/core/ui/Buttons/advanced-search\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/advanced-search-button}} {{$:/language/Buttons/AdvancedSearch/Caption}}\",\"description\":\"{{$:/language/Buttons/AdvancedSearch/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define advanced-search-button(class)\\n\\\\whitespace trim\\n\u003C$button to=\\\"$:/AdvancedSearch\\\" tooltip={{$:/language/Buttons/AdvancedSearch/Hint}} aria-label={{$:/language/Buttons/AdvancedSearch/Caption}} class=\\\"\\\"\\\"$(tv-config-toolbar-class)$ $class$\\\"\\\"\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/advanced-search-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/AdvancedSearch/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$list filter=\\\"[list[$:/StoryList]] +[field:title[$:/AdvancedSearch]]\\\" emptyMessage=\u003C\u003Cadvanced-search-button>>>\\n\u003C\u003Cadvanced-search-button \\\"tc-selected\\\">>\\n\u003C/$list>\\n\"},\"$:/core/ui/Buttons/close-all\":{\"title\":\"$:/core/ui/Buttons/close-all\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/close-all-button}} {{$:/language/Buttons/CloseAll/Caption}}\",\"description\":\"{{$:/language/Buttons/CloseAll/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-close-all-tiddlers\\\" tooltip={{$:/language/Buttons/CloseAll/Hint}} aria-label={{$:/language/Buttons/CloseAll/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/close-all-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/CloseAll/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/control-panel\":{\"title\":\"$:/core/ui/Buttons/control-panel\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/options-button}} {{$:/language/Buttons/ControlPanel/Caption}}\",\"description\":\"{{$:/language/Buttons/ControlPanel/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define control-panel-button(class)\\n\\\\whitespace trim\\n\u003C$button to=\\\"$:/ControlPanel\\\" tooltip={{$:/language/Buttons/ControlPanel/Hint}} aria-label={{$:/language/Buttons/ControlPanel/Caption}} class=\\\"\\\"\\\"$(tv-config-toolbar-class)$ $class$\\\"\\\"\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/options-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/ControlPanel/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$list filter=\\\"[list[$:/StoryList]] +[field:title[$:/ControlPanel]]\\\" emptyMessage=\u003C\u003Ccontrol-panel-button>>>\\n\u003C\u003Ccontrol-panel-button \\\"tc-selected\\\">>\\n\u003C/$list>\\n\"},\"$:/core/ui/Buttons/encryption\":{\"title\":\"$:/core/ui/Buttons/encryption\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/locked-padlock}} {{$:/language/Buttons/Encryption/Caption}}\",\"description\":\"{{$:/language/Buttons/Encryption/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$reveal type=\\\"match\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n\u003C$button message=\\\"tm-clear-password\\\" tooltip={{$:/language/Buttons/Encryption/ClearPassword/Hint}} aria-label={{$:/language/Buttons/Encryption/ClearPassword/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/locked-padlock}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Encryption/ClearPassword/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/isEncrypted\\\" text=\\\"yes\\\">\\n\u003C$button message=\\\"tm-set-password\\\" tooltip={{$:/language/Buttons/Encryption/SetPassword/Hint}} aria-label={{$:/language/Buttons/Encryption/SetPassword/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/unlocked-padlock}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Encryption/SetPassword/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/export-page\":{\"title\":\"$:/core/ui/Buttons/export-page\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/export-button}} {{$:/language/Buttons/ExportPage/Caption}}\",\"description\":\"{{$:/language/Buttons/ExportPage/Hint}}\",\"text\":\"\u003C$macrocall $name=\\\"exportButton\\\" exportFilter=\\\"[!is[system]sort[title]]\\\" lingoBase=\\\"$:/language/Buttons/ExportPage/\\\"/>\"},\"$:/core/ui/Buttons/fold-all\":{\"title\":\"$:/core/ui/Buttons/fold-all\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/fold-all-button}} {{$:/language/Buttons/FoldAll/Caption}}\",\"description\":\"{{$:/language/Buttons/FoldAll/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/FoldAll/Hint}} aria-label={{$:/language/Buttons/FoldAll/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-sendmessage $message=\\\"tm-fold-all-tiddlers\\\" $param=\u003C\u003CcurrentTiddler>> foldedStatePrefix=\\\"$:/state/folded/\\\"/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\" variable=\\\"listItem\\\">\\n{{$:/core/images/fold-all-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/FoldAll/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/full-screen\":{\"title\":\"$:/core/ui/Buttons/full-screen\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/full-screen-button}} {{$:/language/Buttons/FullScreen/Caption}}\",\"description\":\"{{$:/language/Buttons/FullScreen/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-full-screen\\\" tooltip={{$:/language/Buttons/FullScreen/Hint}} aria-label={{$:/language/Buttons/FullScreen/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/full-screen-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/FullScreen/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/home\":{\"title\":\"$:/core/ui/Buttons/home\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/home-button}} {{$:/language/Buttons/Home/Caption}}\",\"description\":\"{{$:/language/Buttons/Home/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-home\\\" tooltip={{$:/language/Buttons/Home/Hint}} aria-label={{$:/language/Buttons/Home/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/home-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Home/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/import\":{\"title\":\"$:/core/ui/Buttons/import\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/import-button}} {{$:/language/Buttons/Import/Caption}}\",\"description\":\"{{$:/language/Buttons/Import/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003Cdiv class=\\\"tc-file-input-wrapper\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Import/Hint}} aria-label={{$:/language/Buttons/Import/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/import-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Import/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C$browse tooltip={{$:/language/Buttons/Import/Hint}}/>\\n\u003C/div>\"},\"$:/core/ui/Buttons/language\":{\"title\":\"$:/core/ui/Buttons/language\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/globe}} {{$:/language/Buttons/Language/Caption}}\",\"description\":\"{{$:/language/Buttons/Language/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define flag-title()\\n$(languagePluginTitle)$/icon\\n\\\\end\\n\u003Cspan class=\\\"tc-popup-keep\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/language\\\">> tooltip={{$:/language/Buttons/Language/Hint}} aria-label={{$:/language/Buttons/Language/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-image-button\\\">\\n\u003C$set name=\\\"languagePluginTitle\\\" value={{$:/language}}>\\n\u003C$image source=\u003C\u003Cflag-title>>/>\\n\u003C/$set>\\n\u003C/span>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/Language/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/span>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/language\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n{{$:/snippets/languageswitcher}}\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/manager\":{\"title\":\"$:/core/ui/Buttons/manager\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/list}} {{$:/language/Buttons/Manager/Caption}}\",\"description\":\"{{$:/language/Buttons/Manager/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define manager-button(class)\\n\\\\whitespace trim\\n\u003C$button to=\\\"$:/Manager\\\" tooltip={{$:/language/Buttons/Manager/Hint}} aria-label={{$:/language/Buttons/Manager/Caption}} class=\\\"\\\"\\\"$(tv-config-toolbar-class)$ $class$\\\"\\\"\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/list}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Manager/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$list filter=\\\"[list[$:/StoryList]] +[field:title[$:/Manager]]\\\" emptyMessage=\u003C\u003Cmanager-button>>>\\n\u003C\u003Cmanager-button \\\"tc-selected\\\">>\\n\u003C/$list>\\n\"},\"$:/core/ui/Buttons/more-page-actions\":{\"title\":\"$:/core/ui/Buttons/more-page-actions\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/down-arrow}} {{$:/language/Buttons/More/Caption}}\",\"description\":\"{{$:/language/Buttons/More/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define config-title()\\n$:/config/PageControlButtons/Visibility/$(listItem)$\\n\\\\end\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/more\\\">> tooltip={{$:/language/Buttons/More/Hint}} aria-label={{$:/language/Buttons/More/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/down-arrow}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/More/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/more\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" value=\\\"tc-btn-invisible\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/PageControls]!has[draft.of]] -[[$:/core/ui/Buttons/more-page-actions]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cconfig-title>> text=\\\"hide\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[\u003Ctv-config-toolbar-class>] [\u003ClistItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"inline\\\"/>\\n\\n\u003C/$set>\\n\\n\u003C/$reveal>\\n\\n\u003C/$list>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/div>\\n\\n\u003C/$reveal>\"},\"$:/core/ui/Buttons/new-image\":{\"title\":\"$:/core/ui/Buttons/new-image\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/new-image-button}} {{$:/language/Buttons/NewImage/Caption}}\",\"description\":\"{{$:/language/Buttons/NewImage/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/NewImage/Hint}} aria-label={{$:/language/Buttons/NewImage/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> actions={{$:/core/ui/Actions/new-image}}>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-image-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/NewImage/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\"},\"$:/core/ui/Buttons/new-journal\":{\"title\":\"$:/core/ui/Buttons/new-journal\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/new-journal-button}} {{$:/language/Buttons/NewJournal/Caption}}\",\"description\":\"{{$:/language/Buttons/NewJournal/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define journalButton()\\n\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/NewJournal/Hint}} aria-label={{$:/language/Buttons/NewJournal/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> actions={{$:/core/ui/Actions/new-journal}}>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-journal-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/NewJournal/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\u003C\u003CjournalButton>>\\n\"},\"$:/core/ui/Buttons/new-tiddler\":{\"title\":\"$:/core/ui/Buttons/new-tiddler\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/new-button}} {{$:/language/Buttons/NewTiddler/Caption}}\",\"description\":\"{{$:/language/Buttons/NewTiddler/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button actions={{$:/core/ui/Actions/new-tiddler}} tooltip={{$:/language/Buttons/NewTiddler/Hint}} aria-label={{$:/language/Buttons/NewTiddler/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/NewTiddler/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\"},\"$:/core/ui/Buttons/palette\":{\"title\":\"$:/core/ui/Buttons/palette\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/palette}} {{$:/language/Buttons/Palette/Caption}}\",\"description\":\"{{$:/language/Buttons/Palette/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003Cspan class=\\\"tc-popup-keep\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/palette\\\">> tooltip={{$:/language/Buttons/Palette/Hint}} aria-label={{$:/language/Buttons/Palette/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/palette}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/Palette/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/span>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/palette\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\" style=\\\"font-size:0.7em;\\\">\\n{{$:/snippets/paletteswitcher}}\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/print\":{\"title\":\"$:/core/ui/Buttons/print\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/print-button}} {{$:/language/Buttons/Print/Caption}}\",\"description\":\"{{$:/language/Buttons/Print/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-print\\\" tooltip={{$:/language/Buttons/Print/Hint}} aria-label={{$:/language/Buttons/Print/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/print-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Print/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/refresh\":{\"title\":\"$:/core/ui/Buttons/refresh\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/refresh-button}} {{$:/language/Buttons/Refresh/Caption}}\",\"description\":\"{{$:/language/Buttons/Refresh/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-browser-refresh\\\" tooltip={{$:/language/Buttons/Refresh/Hint}} aria-label={{$:/language/Buttons/Refresh/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/refresh-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Refresh/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/save-wiki\":{\"title\":\"$:/core/ui/Buttons/save-wiki\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/save-button}} {{$:/language/Buttons/SaveWiki/Caption}}\",\"description\":\"{{$:/language/Buttons/SaveWiki/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/SaveWiki/Hint}} aria-label={{$:/language/Buttons/SaveWiki/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$wikify name=\\\"site-title\\\" text={{$:/config/SaveWikiButton/Filename}}>\\n\u003C$action-sendmessage $message=\\\"tm-save-wiki\\\" $param={{$:/config/SaveWikiButton/Template}} filename=\u003C\u003Csite-title>>/>\\n\u003C/$wikify>\\n\u003Cspan class=\\\"tc-dirty-indicator\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/save-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/SaveWiki/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/span>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/storyview\":{\"title\":\"$:/core/ui/Buttons/storyview\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/storyview-classic}} {{$:/language/Buttons/StoryView/Caption}}\",\"description\":\"{{$:/language/Buttons/StoryView/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define icon()\\n$:/core/images/storyview-$(storyview)$\\n\\\\end\\n\u003Cspan class=\\\"tc-popup-keep\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/storyview\\\">> tooltip={{$:/language/Buttons/StoryView/Hint}} aria-label={{$:/language/Buttons/StoryView/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n\u003C$set name=\\\"storyview\\\" value={{$:/view}}>\\n\u003C$transclude tiddler=\u003C\u003Cicon>>/>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/StoryView/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/span>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/storyview\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n{{$:/snippets/viewswitcher}}\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/tag-manager\":{\"title\":\"$:/core/ui/Buttons/tag-manager\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/tag-button}} {{$:/language/Buttons/TagManager/Caption}}\",\"description\":\"{{$:/language/Buttons/TagManager/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define control-panel-button(class)\\n\\\\whitespace trim\\n\u003C$button to=\\\"$:/TagManager\\\" tooltip={{$:/language/Buttons/TagManager/Hint}} aria-label={{$:/language/Buttons/TagManager/Caption}} class=\\\"\\\"\\\"$(tv-config-toolbar-class)$ $class$\\\"\\\"\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/tag-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/TagManager/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\\n\u003C$list filter=\\\"[list[$:/StoryList]] +[field:title[$:/TagManager]]\\\" emptyMessage=\u003C\u003Ccontrol-panel-button>>>\\n\u003C\u003Ccontrol-panel-button \\\"tc-selected\\\">>\\n\u003C/$list>\\n\"},\"$:/core/ui/Buttons/theme\":{\"title\":\"$:/core/ui/Buttons/theme\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/theme-button}} {{$:/language/Buttons/Theme/Caption}}\",\"description\":\"{{$:/language/Buttons/Theme/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003Cspan class=\\\"tc-popup-keep\\\">\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/theme\\\">> tooltip={{$:/language/Buttons/Theme/Hint}} aria-label={{$:/language/Buttons/Theme/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/theme-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text={{$:/language/Buttons/Theme/Caption}}/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/span>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/theme\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\u003C$linkcatcher to=\\\"$:/theme\\\">\\n{{$:/snippets/themeswitcher}}\\n\u003C/$linkcatcher>\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/timestamp\":{\"title\":\"$:/core/ui/Buttons/timestamp\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/timestamp-on}} {{$:/language/Buttons/Timestamp/Caption}}\",\"description\":\"{{$:/language/Buttons/Timestamp/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/config/TimestampDisable\\\" text=\\\"yes\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Timestamp/On/Hint}} aria-label={{$:/language/Buttons/Timestamp/On/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-setfield $tiddler=\\\"$:/config/TimestampDisable\\\" $value=\\\"yes\\\"/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/timestamp-on}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Timestamp/On/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\\\"$:/config/TimestampDisable\\\" text=\\\"yes\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Timestamp/Off/Hint}} aria-label={{$:/language/Buttons/Timestamp/Off/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-setfield $tiddler=\\\"$:/config/TimestampDisable\\\" $value=\\\"no\\\"/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/timestamp-off}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Timestamp/Off/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/unfold-all\":{\"title\":\"$:/core/ui/Buttons/unfold-all\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/unfold-all-button}} {{$:/language/Buttons/UnfoldAll/Caption}}\",\"description\":\"{{$:/language/Buttons/UnfoldAll/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/UnfoldAll/Hint}} aria-label={{$:/language/Buttons/UnfoldAll/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-sendmessage $message=\\\"tm-unfold-all-tiddlers\\\" $param=\u003C\u003CcurrentTiddler>> foldedStatePrefix=\\\"$:/state/folded/\\\"/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\" variable=\\\"listItem\\\">\\n{{$:/core/images/unfold-all-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/UnfoldAll/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/PageTemplate/pagecontrols\":{\"title\":\"$:/core/ui/PageTemplate/pagecontrols\",\"text\":\"\\\\whitespace trim\\n\\\\define config-title()\\n$:/config/PageControlButtons/Visibility/$(listItem)$\\n\\\\end\\n\u003Cdiv class=\\\"tc-page-controls\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/PageControls]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\u003C$set name=\\\"hidden\\\" value=\u003C\u003Cconfig-title>>>\\n\u003C$list filter=\\\"[\u003Chidden>!text[hide]]\\\" storyview=\\\"pop\\\" variable=\\\"ignore\\\">\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[\u003Ctv-config-toolbar-class>] [\u003ClistItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"inline\\\"/>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/div>\\n\"},\"$:/core/ui/PageStylesheet\":{\"title\":\"$:/core/ui/PageStylesheet\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\n\u003C$set name=\\\"currentTiddler\\\" value={{$:/language}}>\\n\\n\u003C$set name=\\\"languageTitle\\\" value={{!!name}}>\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Stylesheet]!has[draft.of]]\\\">\\n\u003C$transclude mode=\\\"block\\\"/>\\n\u003C/$list>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\"},\"$:/core/ui/PageTemplate/alerts\":{\"title\":\"$:/core/ui/PageTemplate/alerts\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\u003Cdiv class=\\\"tc-alerts\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Alert]!has[draft.of]]\\\" template=\\\"$:/core/ui/AlertTemplate\\\" storyview=\\\"pop\\\"/>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/PageTemplate/drafts\":{\"title\":\"$:/core/ui/PageTemplate/drafts\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\\\\whitespace trim\\n\u003C$reveal state=\\\"$:/status/IsReadOnly\\\" type=\\\"nomatch\\\" text=\\\"yes\\\" tag=\\\"div\\\" class=\\\"tc-drafts-list\\\">\\n\u003C$list filter=\\\"[has[draft.of]!sort[modified]] -[list[$:/StoryList]]\\\">\\n\u003C$link>\\n{{$:/core/images/edit-button}} \u003C$text text=\u003C\u003CcurrentTiddler>>/>\\n\u003C/$link>\\n\u003C/$list>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/PageTemplate/pluginreloadwarning\":{\"title\":\"$:/core/ui/PageTemplate/pluginreloadwarning\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\\\\define lingo-base() $:/language/\\n\\n\u003C$list filter=\\\"[{$:/status/RequireReloadDueToPluginChange}match[yes]]\\\">\\n\\n\u003C$reveal type=\\\"nomatch\\\" state=\\\"$:/temp/HidePluginWarning\\\" text=\\\"yes\\\">\\n\\n\u003Cdiv class=\\\"tc-plugin-reload-warning\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\n\u003C\u003Clingo PluginReloadWarning>> \u003C$button set=\\\"$:/temp/HidePluginWarning\\\" setTo=\\\"yes\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/close-button}}\u003C/$button>\\n\\n\u003C/$set>\\n\\n\u003C/div>\\n\\n\u003C/$reveal>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/PageTemplate/sidebar\":{\"title\":\"$:/core/ui/PageTemplate/sidebar\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\\\\whitespace trim\\n\\\\define config-title()\\n$:/config/SideBarSegments/Visibility/$(listItem)$\\n\\\\end\\n\\n\u003C$scrollable fallthrough=\\\"no\\\" class=\\\"tc-sidebar-scrollable\\\">\\n\\n\u003Cdiv class=\\\"tc-sidebar-header\\\">\\n\\n\u003C$reveal state=\\\"$:/state/sidebar\\\" type=\\\"match\\\" text=\\\"yes\\\" default=\\\"yes\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SideBarSegment]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cconfig-title>> text=\\\"hide\\\"  tag=\\\"div\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"block\\\"/>\\n\\n\u003C/$reveal>\\n\\n\u003C/$list>\\n\\n\u003C/$reveal>\\n\\n\u003C/div>\\n\\n\u003C/$scrollable>\\n\"},\"$:/core/ui/PageTemplate/story\":{\"title\":\"$:/core/ui/PageTemplate/story\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\\\\whitespace trim\\n\u003Csection class=\\\"tc-story-river\\\">\\n\\n\u003Csection class=\\\"story-backdrop\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/AboveStory]!has[draft.of]]\\\">\\n\\n\u003C$transclude/>\\n\\n\u003C/$list>\\n\\n\u003C/section>\\n\\n\u003C$list filter=\\\"[list[$:/StoryList]]\\\" history=\\\"$:/HistoryList\\\" template=\\\"$:/core/ui/StoryTiddlerTemplate\\\" storyview={{$:/view}} emptyMessage={{$:/config/EmptyStoryMessage}}/>\\n\\n\u003Csection class=\\\"story-frontdrop\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/BelowStory]!has[draft.of]]\\\">\\n\\n\u003C$transclude/>\\n\\n\u003C/$list>\\n\\n\u003C/section>\\n\\n\u003C/section>\\n\"},\"$:/core/ui/PageTemplate/topleftbar\":{\"title\":\"$:/core/ui/PageTemplate/topleftbar\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\u003Cspan class=\\\"tc-topbar tc-topbar-left\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TopLeftBar]!has[draft.of]]\\\" variable=\\\"listItem\\\" storyview=\\\"pop\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"inline\\\"/>\\n\\n\u003C/$list>\\n\\n\u003C/span>\\n\"},\"$:/core/ui/PageTemplate/toprightbar\":{\"title\":\"$:/core/ui/PageTemplate/toprightbar\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\u003Cspan class=\\\"tc-topbar tc-topbar-right\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TopRightBar]!has[draft.of]]\\\" variable=\\\"listItem\\\" storyview=\\\"pop\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"inline\\\"/>\\n\\n\u003C/$list>\\n\\n\u003C/span>\\n\"},\"$:/core/ui/PageTemplate\":{\"title\":\"$:/core/ui/PageTemplate\",\"name\":\"{{$:/language/PageTemplate/Name}}\",\"description\":\"{{$:/language/PageTemplate/Description}}\",\"text\":\"\\\\whitespace trim\\n\\\\define containerClasses()\\ntc-page-container tc-page-view-$(storyviewTitle)$ tc-language-$(languageTitle)$\\n\\\\end\\n\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\n\u003C$vars\\n\\ttv-config-toolbar-icons={{$:/config/Toolbar/Icons}}\\n\\ttv-config-toolbar-text={{$:/config/Toolbar/Text}}\\n\\ttv-config-toolbar-class={{$:/config/Toolbar/ButtonClass}}\\n\\ttv-enable-drag-and-drop={{$:/config/DragAndDrop/Enable}}\\n\\ttv-show-missing-links={{$:/config/MissingLinks}}\\n\\tstoryviewTitle={{$:/view}}\\n\\tlanguageTitle={{{ [{$:/language}get[name]] }}}>\\n\\n\u003Cdiv class=\u003C\u003CcontainerClasses>>>\\n\\n\u003C$navigator story=\\\"$:/StoryList\\\" history=\\\"$:/HistoryList\\\" openLinkFromInsideRiver={{$:/config/Navigation/openLinkFromInsideRiver}} openLinkFromOutsideRiver={{$:/config/Navigation/openLinkFromOutsideRiver}} relinkOnRename={{$:/config/RelinkOnRename}}>\\n\\n\u003C$dropzone enable=\u003C\u003Ctv-enable-drag-and-drop>>>\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/PageTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>>/>\\n\\n\u003C/$list>\\n\\n\u003C/$dropzone>\\n\\n\u003C/$navigator>\\n\\n\u003C/div>\\n\\n\u003C/$vars>\\n\"},\"$:/PaletteManager\":{\"title\":\"$:/PaletteManager\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Palette/Editor/\\n\\\\define describePaletteColour(colour)\\n\u003C$transclude tiddler=\\\"$:/language/Docs/PaletteColours/$colour$\\\">\u003C$text text=\\\"$colour$\\\"/>\u003C/$transclude>\\n\\\\end\\n\\\\define edit-colour-placeholder()\\n edit $(colourName)$\\n\\\\end\\n\\\\define colour-tooltip(showhide) $showhide$ editor for $(newColourName)$ \\n\\\\define resolve-colour(macrocall)\\n\\\\import $:/core/macros/utils\\n\\\\whitespace trim\\n\u003C$wikify name=\\\"name\\\" text=\\\"\\\"\\\"$macrocall$\\\"\\\"\\\">\\n\u003C\u003Cname>>\\n\u003C/$wikify>\\n\\\\end\\n\\\\define delete-colour-index-actions() \u003C$action-setfield $index=\u003C\u003CcolourName>>/>\\n\\\\define palette-manager-colour-row-segment()\\n\\\\whitespace trim\\n\u003C$edit-text index=\u003C\u003CcolourName>> tag=\\\"input\\\" placeholder=\u003C\u003Cedit-colour-placeholder>> default=\\\"\\\"/>\\n\u003Cbr>\\n\u003C$edit-text index=\u003C\u003CcolourName>> type=\\\"color\\\" tag=\\\"input\\\" class=\\\"tc-palette-manager-colour-input\\\"/>\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>getindex\u003CcolourName>removeprefix[\u003C\u003C]removesuffix[>>]] [\u003CcurrentTiddler>getindex\u003CcolourName>removeprefix[\u003C$]removesuffix[/>]]\\\" variable=\\\"ignore\\\">\\n\u003C$set name=\\\"state\\\" value={{{ [[$:/state/palettemanager/]addsuffix\u003CcurrentTiddler>addsuffix[/]addsuffix\u003CcolourName>] }}}>\\n\u003C$wikify name=\\\"newColourName\\\" text=\\\"\\\"\\\"\u003C$macrocall $name=\\\"resolve-colour\\\" macrocall={{{ [\u003CcurrentTiddler>getindex\u003CcolourName>] }}}/>\\\"\\\"\\\">\\n\u003C$reveal state=\u003C\u003Cstate>> type=\\\"nomatch\\\" text=\\\"show\\\">\\n\u003C$button tooltip=\u003C\u003Ccolour-tooltip show>> aria-label=\u003C\u003Ccolour-tooltip show>> class=\\\"tc-btn-invisible\\\" set=\u003C\u003Cstate>> setTo=\\\"show\\\">{{$:/core/images/down-arrow}}\u003C$text text=\u003C\u003CnewColourName>> class=\\\"tc-small-gap-left\\\"/>\u003C/$button>\u003Cbr>\\n\u003C/$reveal>\\n\u003C$reveal state=\u003C\u003Cstate>> type=\\\"match\\\" text=\\\"show\\\">\\n\u003C$button tooltip=\u003C\u003Ccolour-tooltip hide>> aria-label=\u003C\u003Ccolour-tooltip show>> class=\\\"tc-btn-invisible\\\" actions=\\\"\\\"\\\"\u003C$action-deletetiddler $tiddler=\u003C\u003Cstate>>/>\\\"\\\"\\\">{{$:/core/images/up-arrow}}\u003C$text text=\u003C\u003CnewColourName>> class=\\\"tc-small-gap-left\\\"/>\u003C/$button>\u003Cbr>\\n\u003C/$reveal>\\n\u003C$reveal state=\u003C\u003Cstate>> type=\\\"match\\\" text=\\\"show\\\">\\n\u003C$set name=\\\"colourName\\\" value=\u003C\u003CnewColourName>>>\\n\u003Cbr>\\n\u003C\u003Cpalette-manager-colour-row-segment>>\\n\u003Cbr>\u003Cbr>\\n\u003C/$set>\\n\u003C/$reveal>\\n\u003C/$wikify>\\n\u003C/$set>\\n\u003C/$list>\\n\\\\end\\n\\\\define palette-manager-colour-row()\\n\\\\whitespace trim\\n\u003Ctr>\\n\u003Ctd>\\n\u003Cspan style=\\\"float:right;\\\">\\n\u003C$button tooltip={{$:/language/ControlPanel/Palette/Editor/Delete/Hint}} aria-label={{$:/language/ControlPanel/Palette/Editor/Delete/Hint}} class=\\\"tc-btn-invisible\\\" actions=\u003C\u003Cdelete-colour-index-actions>>>\\n{{$:/core/images/delete-button}}\u003C/$button>\\n\u003C/span>\\n''\u003C$macrocall $name=\\\"describePaletteColour\\\" colour=\u003C\u003CcolourName>>/>''\u003Cbr/>\\n\u003C$macrocall $name=\\\"colourName\\\" $output=\\\"text/plain\\\"/>\\n\u003C/td>\\n\u003Ctd>\\n\u003C\u003Cpalette-manager-colour-row-segment>>\\n\u003C/td>\\n\u003C/tr>\\n\\\\end\\n\\\\define palette-manager-table()\\n\\\\whitespace trim\\n\u003Ctable>\\n\u003Ctbody>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Palette]indexes[]]\\\" variable=\\\"colourName\\\">\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>indexes[]removeprefix\u003CcolourName>suffix[]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$list filter=\\\"[{$:/state/palettemanager/showexternal}removeprefix[yes]suffix[]]\\\" variable=\\\"ignore\\\">\\n\u003C\u003Cpalette-manager-colour-row>>\\n\u003C/$list>\\n\\\"\\\"\\\">\\n\u003C\u003Cpalette-manager-colour-row>>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/tbody>\\n\u003C/table>\\n\\\\end\\n\u003C$set name=\\\"currentTiddler\\\" value={{$:/palette}}>\\n\\n\u003C\u003Clingo Prompt>> \u003C$link to={{$:/palette}}>\u003C$macrocall $name=\\\"currentTiddler\\\" $output=\\\"text/plain\\\"/>\u003C/$link>\\n\\n\u003C$list filter=\\\"[all[current]is[shadow]is[tiddler]]\\\" variable=\\\"listItem\\\">\\n\u003C\u003Clingo Prompt/Modified>>\\n\u003C$button message=\\\"tm-delete-tiddler\\\" param={{$:/palette}}>\u003C\u003Clingo Reset/Caption>>\u003C/$button>\\n\u003C/$list>\\n\\n\u003C$list filter=\\\"[all[current]is[shadow]!is[tiddler]]\\\" variable=\\\"listItem\\\">\\n\u003C\u003Clingo Clone/Prompt>>\\n\u003C/$list>\\n\\n\u003C$button message=\\\"tm-new-tiddler\\\" param={{$:/palette}}>\u003C\u003Clingo Clone/Caption>>\u003C/$button>\\n\\n\u003C$checkbox tiddler=\\\"$:/state/palettemanager/showexternal\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\">\u003Cspan class=\\\"tc-small-gap-left\\\">\u003C\u003Clingo Names/External/Show>>\u003C/span>\u003C/$checkbox>\\n\\n\u003C\u003Cpalette-manager-table>>\\n\"},\"$:/core/ui/PluginInfo\":{\"title\":\"$:/core/ui/PluginInfo\",\"text\":\"\\\\define localised-info-tiddler-title()\\n$(currentTiddler)$/$(languageTitle)$/$(currentTab)$\\n\\\\end\\n\\\\define info-tiddler-title()\\n$(currentTiddler)$/$(currentTab)$\\n\\\\end\\n\\\\define default-tiddler-title()\\n$:/core/ui/PluginInfo/Default/$(currentTab)$\\n\\\\end\\n\u003C$transclude tiddler=\u003C\u003Clocalised-info-tiddler-title>> mode=\\\"block\\\">\\n\u003C$transclude tiddler=\u003C\u003CcurrentTiddler>> subtiddler=\u003C\u003Clocalised-info-tiddler-title>> mode=\\\"block\\\">\\n\u003C$transclude tiddler=\u003C\u003CcurrentTiddler>> subtiddler=\u003C\u003Cinfo-tiddler-title>> mode=\\\"block\\\">\\n\u003C$transclude tiddler=\u003C\u003Cdefault-tiddler-title>> mode=\\\"block\\\">\\n{{$:/language/ControlPanel/Plugin/NoInfoFound/Hint}}\\n\u003C/$transclude>\\n\u003C/$transclude>\\n\u003C/$transclude>\\n\u003C/$transclude>\\n\"},\"$:/core/ui/PluginInfo/Default/contents\":{\"title\":\"$:/core/ui/PluginInfo/Default/contents\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/Advanced/PluginInfo/\\n\u003C\u003Clingo Hint>>\\n\u003Cul>\\n\u003C$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" emptyMessage=\u003C\u003Clingo Empty/Hint>>>\\n\u003Cli>\\n\u003C$link />\\n\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\"},\"$:/core/ui/PluginListItemTemplate\":{\"title\":\"$:/core/ui/PluginListItemTemplate\",\"text\":\"\\\\whitespace trim\\n\u003C$link to={{!!title}} class=\\\"tc-plugin-info\\\">\\n\\t\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-icon\\\">\\n\\t\\t\u003C$transclude tiddler=\u003C\u003CcurrentTiddler>> subtiddler={{{ [\u003CcurrentTiddler>addsuffix[/icon]] }}}>\\n\\t\\t\\t\u003C$transclude tiddler={{{ [\u003CcurrentTiddler>get[plugin-type]addprefix[$:/core/images/plugin-generic-]] }}}/>\\n\\t\\t\u003C/$transclude>\\n\\t\u003C/div>\\n\\t\u003Cdiv class=\\\"tc-plugin-info-chunk tc-plugin-info-description\\\">\\n\\t\\t\u003Ch1>\\n\\t\\t\\t''\u003C$text text={{{ [\u003CcurrentTiddler>get[name]] ~[\u003CcurrentTiddler>split[/]last[1]] }}}/>'':&nbsp;\u003C$view field=\\\"description\\\">\u003C$view field=\\\"title\\\"/>\u003C/$view>\\n\\t\\t\u003C/h1>\\n\\t\u003C/div>\\n\u003C/$link>\\n\"},\"$:/core/ui/RootTemplate\":{\"title\":\"$:/core/ui/RootTemplate\",\"text\":\"\u003C$transclude tiddler={{{ [{$:/layout}has[text]] ~[[$:/core/ui/PageTemplate]] }}} mode=\\\"inline\\\"/>\\n\\n\"},\"$:/core/ui/SearchResults\":{\"title\":\"$:/core/ui/SearchResults\",\"text\":\"\u003Cdiv class=\\\"tc-search-results\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]butfirst[]limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]]\\\">\\n\u003C$transclude mode=\\\"block\\\"/>\\n\u003C/$list>\\n\\\"\\\"\\\">\\n\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/SearchResults]!has[draft.of]]\\\" default={{$:/config/SearchResults/Default}} actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/search/currentTab\\\" text=\u003C\u003CcurrentTab>>/>\\\"\\\"\\\" explicitState=\\\"$:/state/tab/search-results/sidebar\\\"/>\\n\\n\u003C/$list>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/SideBar/More\":{\"title\":\"$:/core/ui/SideBar/More\",\"tags\":\"$:/tags/SideBar\",\"caption\":\"{{$:/language/SideBar/More/Caption}}\",\"text\":\"\u003Cdiv class=\\\"tc-more-sidebar\\\">\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/MoreSideBar]!has[draft.of]]\\\" default={{$:/config/DefaultMoreSidebarTab}} state=\\\"$:/state/tab/moresidebar\\\" class=\\\"tc-vertical tc-sidebar-tabs-more\\\" explicitState=\\\"$:/state/tab/moresidebar-1850697562\\\"/>\\n\u003C/div>\\n\"},\"$:/core/ui/SideBar/Open\":{\"title\":\"$:/core/ui/SideBar/Open\",\"tags\":\"$:/tags/SideBar\",\"caption\":\"{{$:/language/SideBar/Open/Caption}}\",\"text\":\"\\\\whitespace trim\\n\\\\define lingo-base() $:/language/CloseAll/\\n\\n\\\\define drop-actions()\\n\u003C$action-listops $tiddler=\u003C\u003Ctv-story-list>> $subfilter=\\\"+[insertbefore\u003CactionTiddler>,\u003CcurrentTiddler>]\\\"/>\\n\\\\end\\n\\n\\\\define placeholder()\\n\u003Cdiv class=\\\"tc-droppable-placeholder\\\"/>\\n\\\\end\\n\\n\\\\define droppable-item(button)\\n\\\\whitespace trim\\n\u003C$droppable actions=\u003C\u003Cdrop-actions>> enable=\u003C\u003Ctv-allow-drag-and-drop>> tag=\\\"div\\\">\\n\u003C\u003Cplaceholder>>\\n\u003Cdiv>\\n$button$\\n\u003C/div>\\n\u003C/$droppable>\\n\\\\end\\n\\n\u003Cdiv class=\\\"tc-sidebar-tab-open\\\">\\n\u003C$list filter=\\\"[list\u003Ctv-story-list>]\\\" history=\u003C\u003Ctv-history-list>> storyview=\\\"pop\\\">\\n\u003Cdiv class=\\\"tc-sidebar-tab-open-item\\\">\\n\u003C$macrocall $name=\\\"droppable-item\\\" button=\\\"\\\"\\\"\u003C$button message=\\\"tm-close-tiddler\\\" tooltip={{$:/language/Buttons/Close/Hint}} aria-label={{$:/language/Buttons/Close/Caption}} class=\\\"tc-btn-invisible tc-btn-mini tc-small-gap-right\\\">{{$:/core/images/close-button}}\u003C/$button>\u003C$link to={{!!title}}>\u003C$view field=\\\"title\\\"/>\u003C/$link>\\\"\\\"\\\"/>\\n\u003C/div>\\n\u003C/$list>\\n\u003C$tiddler tiddler=\\\"\\\">\\n\u003Cdiv>\\n\u003C$macrocall $name=\\\"droppable-item\\\" button=\\\"\\\"\\\"\u003C$button message=\\\"tm-close-all-tiddlers\\\" class=\\\"tc-btn-invisible tc-btn-mini\\\">\u003C\u003Clingo Button>>\u003C/$button>\\\"\\\"\\\"/>\\n\u003C/div>\\n\u003C/$tiddler>\\n\u003C/div>\\n\"},\"$:/core/ui/SideBar/Recent\":{\"title\":\"$:/core/ui/SideBar/Recent\",\"tags\":\"$:/tags/SideBar\",\"caption\":\"{{$:/language/SideBar/Recent/Caption}}\",\"text\":\"\u003C$macrocall $name=\\\"timeline\\\" format={{$:/language/RecentChanges/DateFormat}}/>\\n\"},\"$:/core/ui/SideBar/Tools\":{\"title\":\"$:/core/ui/SideBar/Tools\",\"tags\":\"$:/tags/SideBar\",\"caption\":\"{{$:/language/SideBar/Tools/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/\\n\\\\define config-title()\\n$:/config/PageControlButtons/Visibility/$(listItem)$\\n\\\\end\\n\\n\u003C\u003Clingo Basics/Version/Prompt>> \u003C\u003Cversion>>\\n\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/PageControls]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n\u003Cdiv style=\\\"position:relative;\\\" class={{{ [\u003ClistItem>encodeuricomponent[]addprefix[tc-btn-]] }}}>\\n\\n\u003C$checkbox tiddler=\u003C\u003Cconfig-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> \u003C$transclude tiddler=\u003C\u003ClistItem>>/> \u003Ci class=\\\"tc-muted\\\">\u003C$transclude tiddler=\u003C\u003ClistItem>> field=\\\"description\\\"/>\u003C/i>\\n\\n\u003C/div>\\n\\n\u003C/$list>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\"},\"$:/core/ui/SideBarLists\":{\"title\":\"$:/core/ui/SideBarLists\",\"text\":\"\u003C$transclude tiddler=\\\"$:/core/ui/SideBarSegments/search\\\"/>\\n\\n\u003C$transclude tiddler=\\\"$:/core/ui/SideBarSegments/tabs\\\"/>\\n\\n\"},\"$:/core/ui/SideBarSegments/page-controls\":{\"title\":\"$:/core/ui/SideBarSegments/page-controls\",\"tags\":\"$:/tags/SideBarSegment\",\"text\":\"{{||$:/core/ui/PageTemplate/pagecontrols}}\\n\"},\"$:/core/ui/SideBarSegments/search\":{\"title\":\"$:/core/ui/SideBarSegments/search\",\"tags\":\"$:/tags/SideBarSegment\",\"text\":\"\\\\whitespace trim\\n\\n\\\\define count-popup-button()\\n\\\\whitespace trim\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/search-dropdown\\\">> class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/down-arrow}}\\n\u003C$list filter=\\\"[{$(searchTiddler)$}minlength{$:/config/Search/MinLength}limit[1]]\\\" variable=\\\"listItem\\\">\\n\u003C$vars userInput={{{ [\u003CsearchTiddler>get[text]] }}} configTiddler={{{ [[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}] }}} replaceRegexp=\\\"limit\\\\[\\\\d+\\\\]\\\">\\n\u003C$vars primaryListFilter={{{ [\u003CconfigTiddler>get[first-search-filter]search-replace:g:regexp\u003CreplaceRegexp>,[]] }}} secondaryListFilter={{{ [\u003CconfigTiddler>get[second-search-filter]search-replace:g:regexp\u003CreplaceRegexp>,[]] }}}>\\n\u003C$set name=\\\"resultCount\\\" value=\\\"\\\"\\\"\u003C$count filter=\\\"[subfilter\u003CprimaryListFilter>] [subfilter\u003CsecondaryListFilter>]\\\"/>\\\"\\\"\\\">\\n{{$:/language/Search/Matches}}\\n\u003C/$set>\\n\u003C/$vars>\\n\u003C/$vars>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\\n\\\\define search-results-list()\\n\\\\whitespace trim\\n\u003C$vars userInput={{$(searchTiddler)$}} configTiddler={{{ [[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}] }}}>\\n\u003C$list filter=\\\"[\u003CuserInput>minlength{$:/config/Search/MinLength}limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003Cdiv class=\\\"tc-search-results\\\">{{$:/language/Search/Search/TooShort}}\u003C/div>\\\"\\\"\\\" variable=\\\"listItem\\\">\\n\\n\u003C$tiddler tiddler=\u003C\u003CconfigTiddler>>>\\n\\n{{$:/core/ui/SearchResults}}\\n\\n\u003C/$tiddler>\\n\\n\u003C/$list>\\n\u003C/$vars>\\n\\\\end\\n\\n\\\\define cancel-search-actions() \u003C$list filter=\\\"[\u003CsearchTiddler>get[text]!match{$:/temp/search}]\\\" emptyMessage=\\\"\\\"\\\"\u003C$action-deletetiddler $filter=\\\"[[$:/temp/search]] [\u003CsearchTiddler>] [\u003CsearchListState>]\\\"/>\\\"\\\"\\\">\u003C$action-setfield $tiddler=\\\"$:/temp/search\\\" text={{{ [\u003CsearchTiddler>get[text]] }}}/>\u003C$action-setfield $tiddler=\\\"$:/temp/search/refresh\\\" text=\\\"yes\\\"/>\u003C/$list>\\n\\n\\\\define input-accept-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\\"\\\"\\\">\u003C$action-navigate $to={{{ [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\\n\\n\\\\define input-accept-variant-actions() \u003C$list filter=\\\"[{$:/config/Search/NavigateOnEnter/enable}match[yes]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$list filter=\\\"[\u003C__tiddler__>get[text]!is[missing]] ~[\u003C__tiddler__>get[text]is[shadow]]\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\\"\\\"\\\">\u003C$list filter=\\\"[\u003C__tiddler__>get[text]minlength[1]]\\\">\u003C$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param={{{  [\u003C__tiddler__>get[text]] }}}/>\u003C/$list>\u003C/$list>\\n\\n\\\\define set-next-input-tab(beforeafter:\\\"after\\\") \u003C$macrocall $name=\\\"change-input-tab\\\" stateTitle=\\\"$:/state/tab/search-results/sidebar\\\" tag=\\\"$:/tags/SearchResults\\\" beforeafter=\\\"$beforeafter$\\\" defaultState={{$:/config/SearchResults/Default}} actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\\\"$:/state/search/currentTab\\\" text=\u003C\u003CnextTab>>/>\\\"\\\"\\\"/>\\n\\n\\\\define advanced-search-actions() \u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch\\\" text={{$:/temp/search/input}}/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/input\\\" text={{$:/temp/search/input}}/>\u003C\u003Cdelete-state-tiddlers>>\u003C$action-navigate $to=\\\"$:/AdvancedSearch\\\"/>\u003C$action-setfield $tiddler=\\\"$:/temp/advancedsearch/refresh\\\" text=\\\"yes\\\"/>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\"\\\"\\\"[data-tiddler-title=\\\"$:/AdvancedSearch\\\"] .tc-search input\\\"\\\"\\\" preventScroll=\\\"true\\\"/>\u003C$action-deletetiddler $filter=\\\"$:/temp/search $:/temp/search/input $:/temp/search/refresh [\u003CsearchListState>]\\\"/>\\n\\n\u003Cdiv class=\\\"tc-sidebar-lists tc-sidebar-search\\\">\\n\\n\u003C$vars editTiddler=\\\"$:/temp/search\\\" searchTiddler=\\\"$:/temp/search/input\\\" searchListState=\u003C\u003Cqualify \\\"$:/state/search-list/selected-item\\\">>>\\n\u003Cdiv class=\\\"tc-search\\\">\\n\u003C$keyboard key=\\\"((input-tab-right))\\\" actions=\u003C\u003Cset-next-input-tab>>>\\n\u003C$keyboard key=\\\"((input-tab-left))\\\" actions=\u003C\u003Cset-next-input-tab \\\"before\\\">>>\\n\u003C$keyboard key=\\\"((advanced-search-sidebar))\\\" actions=\u003C\u003Cadvanced-search-actions>>>\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\u003C\u003CeditTiddler>> storeTitle=\u003C\u003CsearchTiddler>> \\n\\t\\tselectionStateTitle=\u003C\u003CsearchListState>> refreshTitle=\\\"$:/temp/search/refresh\\\" type=\\\"search\\\" \\n\\t\\ttag=\\\"input\\\" focus={{$:/config/Search/AutoFocus}} focusPopup=\u003C\u003Cqualify \\\"$:/state/popup/search-dropdown\\\">> \\n\\t\\tclass=\\\"tc-popup-handle\\\" filterMinLength={{$:/config/Search/MinLength}} inputCancelActions=\u003C\u003Ccancel-search-actions>> \\n\\t\\tinputAcceptActions=\u003C\u003Cinput-accept-actions>> inputAcceptVariantActions=\u003C\u003Cinput-accept-variant-actions>> cancelPopups=\\\"yes\\\" \\n\\t\\tconfigTiddlerFilter=\\\"[[$:/state/search/currentTab]!is[missing]get[text]] ~[{$:/config/SearchResults/Default}]\\\"/>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C$reveal state=\u003C\u003CsearchTiddler>> type=\\\"nomatch\\\" text=\\\"\\\">\\n\u003C$button tooltip={{$:/language/Buttons/AdvancedSearch/Hint}} aria-label={{$:/language/Buttons/AdvancedSearch/Caption}} class=\\\"tc-btn-invisible\\\">\\n\u003C\u003Cadvanced-search-actions>>\\n{{$:/core/images/advanced-search-button}}\\n\u003C/$button>\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C\u003Ccancel-search-actions>>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\\\".tc-search input\\\"/>\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C\u003Ccount-popup-button>>\\n\u003C/$reveal>\\n\u003C$reveal state=\u003C\u003CsearchTiddler>> type=\\\"match\\\" text=\\\"\\\">\\n\u003C$button to=\\\"$:/AdvancedSearch\\\" tooltip={{$:/language/Buttons/AdvancedSearch/Hint}} aria-label={{$:/language/Buttons/AdvancedSearch/Caption}} class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/advanced-search-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/div>\\n\\n\u003C$reveal tag=\\\"div\\\" class=\\\"tc-block-dropdown-wrapper\\\" state=\u003C\u003CsearchTiddler>> type=\\\"nomatch\\\" text=\\\"\\\">\\n\\n\u003C$reveal tag=\\\"div\\\" class=\\\"tc-block-dropdown tc-search-drop-down tc-popup-handle\\\" state=\u003C\u003Cqualify \\\"$:/state/popup/search-dropdown\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n\\n\u003C\u003Csearch-results-list>>\\n\\n\u003C/$reveal>\\n\\n\u003C/$reveal>\\n\\n\u003C/$vars>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/SideBarSegments/site-subtitle\":{\"title\":\"$:/core/ui/SideBarSegments/site-subtitle\",\"tags\":\"$:/tags/SideBarSegment\",\"text\":\"\u003Cdiv class=\\\"tc-site-subtitle\\\">\\n\\n\u003C$transclude tiddler=\\\"$:/SiteSubtitle\\\" mode=\\\"inline\\\"/>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/SideBarSegments/site-title\":{\"title\":\"$:/core/ui/SideBarSegments/site-title\",\"tags\":\"$:/tags/SideBarSegment\",\"text\":\"\u003Ch1 class=\\\"tc-site-title\\\">\\n\\n\u003C$transclude tiddler=\\\"$:/SiteTitle\\\" mode=\\\"inline\\\"/>\\n\\n\u003C/h1>\\n\"},\"$:/core/ui/SideBarSegments/tabs\":{\"title\":\"$:/core/ui/SideBarSegments/tabs\",\"tags\":\"$:/tags/SideBarSegment\",\"text\":\"\u003Cdiv class=\\\"tc-sidebar-lists tc-sidebar-tabs\\\">\\n\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/SideBar]!has[draft.of]]\\\" default={{$:/config/DefaultSidebarTab}} state=\\\"$:/state/tab/sidebar\\\" class=\\\"tc-sidebar-tabs-main\\\" explicitState=\\\"$:/state/tab/sidebar--595412856\\\"/>\\n\\n\u003C/div>\\n\"},\"$:/core/ui/StoryTiddlerTemplate\":{\"title\":\"$:/core/ui/StoryTiddlerTemplate\",\"text\":\"\u003C$transclude tiddler={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/StoryTiddlerTemplateFilter]!is[draft]get[text]] :and[!is[blank]else{$:/config/ui/ViewTemplate}] }}} />\\n\"},\"$:/core/ui/SwitcherModal\":{\"title\":\"$:/core/ui/SwitcherModal\",\"subtitle\":\"\u003C$text text={{{[\u003Cswitch>lookup[$:/language/Switcher/Subtitle/]]}}}/>\",\"class\":\"tc-modal-centered\",\"text\":\"\u003C$tiddler tiddler={{{[\u003Cswitch>lookup[$:/config/SwitcherTargets/]]}}}>\\n\\n\\n\u003C$transclude/>\\n\\n\\n\u003C/$tiddler>\"},\"$:/TagManager\":{\"title\":\"$:/TagManager\",\"icon\":\"$:/core/images/tag-button\",\"color\":\"#bbb\",\"text\":\"\\\\define lingo-base() $:/language/TagManager/\\n\\\\define iconEditorTab(type)\\n\\\\whitespace trim\\n\u003C$link to=\\\"\\\">\u003C\u003Clingo Icons/None>>\u003C/$link>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]is[image]] [all[shadows+tiddlers]tag[$:/tags/Image]] -[type[application/pdf]] +[sort[title]] +[$type$is[system]]\\\">\\n\u003C$link to={{!!title}}>\\n\u003C$transclude/> \u003C$view field=\\\"title\\\"/>\\n\u003C/$link>\\n\u003C/$list>\\n\\\\end\\n\\\\define iconEditor(title)\\n\\\\whitespace trim\\n\u003Cdiv class=\\\"tc-drop-down-wrapper\\\">\\n\u003C$button popupTitle={{{ [[$:/state/popup/icon/]addsuffix\u003C__title__>] }}} class=\\\"tc-btn-invisible tc-btn-dropdown\\\">{{$:/core/images/down-arrow}}\u003C/$button>\\n\u003C$reveal stateTitle={{{ [[$:/state/popup/icon/]addsuffix\u003C__title__>] }}} type=\\\"popup\\\" position=\\\"belowleft\\\" text=\\\"\\\" default=\\\"\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\u003C$linkcatcher actions=\\\"\\\"\\\"\u003C$action-setfield $tiddler=\u003C\u003C__title__>> icon=\u003C\u003CnavigateTo>>/>\\\"\\\"\\\">\\n\u003C\u003CiconEditorTab type:\\\"!\\\">>\\n\u003Chr/>\\n\u003C\u003CiconEditorTab type:\\\"\\\">>\\n\u003C/$linkcatcher>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/div>\\n\\\\end\\n\\\\define toggleButton(state)\\n\\\\whitespace trim\\n\u003C$reveal stateTitle=\u003C\u003C__state__>> type=\\\"match\\\" text=\\\"closed\\\" default=\\\"closed\\\">\\n\u003C$button setTitle=\u003C\u003C__state__>> setTo=\\\"open\\\" class=\\\"tc-btn-invisible tc-btn-dropdown\\\" selectedClass=\\\"tc-selected\\\">\\n{{$:/core/images/info-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal stateTitle=\u003C\u003C__state__>> type=\\\"match\\\" text=\\\"open\\\" default=\\\"closed\\\">\\n\u003C$button setTitle=\u003C\u003C__state__>> setTo=\\\"closed\\\" class=\\\"tc-btn-invisible tc-btn-dropdown\\\" selectedClass=\\\"tc-selected\\\">\\n{{$:/core/images/info-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\\\\end\\n\\\\whitespace trim\\n\u003Ctable class=\\\"tc-tag-manager-table\\\">\\n\u003Ctbody>\\n\u003Ctr>\\n\u003Cth>\u003C\u003Clingo Colour/Heading>>\u003C/th>\\n\u003Cth class=\\\"tc-tag-manager-tag\\\">\u003C\u003Clingo Tag/Heading>>\u003C/th>\\n\u003Cth>\u003C\u003Clingo Count/Heading>>\u003C/th>\\n\u003Cth>\u003C\u003Clingo Icon/Heading>>\u003C/th>\\n\u003Cth>\u003C\u003Clingo Info/Heading>>\u003C/th>\\n\u003C/tr>\\n\u003C$list filter=\\\"[tags[]!is[system]sort[title]]\\\">\\n\u003Ctr>\\n\u003Ctd>\u003C$edit-text field=\\\"color\\\" tag=\\\"input\\\" type=\\\"color\\\"/>\u003C/td>\\n\u003Ctd>{{||$:/core/ui/TagTemplate}}\u003C/td>\\n\u003Ctd>\u003C$count filter=\\\"[all[current]tagging[]]\\\"/>\u003C/td>\\n\u003Ctd>\\n\u003C$macrocall $name=\\\"iconEditor\\\" title={{!!title}}/>\\n\u003C/td>\\n\u003Ctd>\\n\u003C$macrocall $name=\\\"toggleButton\\\" state={{{ [[$:/state/tag-manager/]addsuffix\u003CcurrentTiddler>] }}} /> \\n\u003C/td>\\n\u003C/tr>\\n\u003Ctr>\\n\u003Ctd>\u003C/td>\\n\u003Ctd colspan=\\\"4\\\">\\n\u003C$reveal stateTitle={{{ [[$:/state/tag-manager/]addsuffix\u003CcurrentTiddler>] }}} type=\\\"match\\\" text=\\\"open\\\" default=\\\"\\\">\\n\u003Ctable>\\n\u003Ctbody>\\n\u003Ctr>\u003Ctd>\u003C\u003Clingo Colour/Heading>>\u003C/td>\u003Ctd>\u003C$edit-text field=\\\"color\\\" tag=\\\"input\\\" type=\\\"text\\\" size=\\\"9\\\"/>\u003C/td>\u003C/tr>\\n\u003Ctr>\u003Ctd>\u003C\u003Clingo Icon/Heading>>\u003C/td>\u003Ctd>\u003C$edit-text field=\\\"icon\\\" tag=\\\"input\\\" size=\\\"45\\\"/>\u003C/td>\u003C/tr>\\n\u003C/tbody>\\n\u003C/table>\\n\u003C/$reveal>\\n\u003C/td>\\n\u003C/tr>\\n\u003C/$list>\\n\u003Ctr>\\n\u003Ctd>\u003C/td>\\n\u003Ctd style=\\\"position:relative;\\\">\\n{{$:/core/ui/UntaggedTemplate}}\\n\u003C/td>\\n\u003Ctd>\\n\u003Csmall class=\\\"tc-menu-list-count\\\">\u003C$count filter=\\\"[untagged[]!is[system]] -[tags[]]\\\"/>\u003C/small>\\n\u003C/td>\\n\u003Ctd>\u003C/td>\\n\u003Ctd>\u003C/td>\\n\u003C/tr>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/core/ui/TagPickerTagTemplate\":{\"title\":\"$:/core/ui/TagPickerTagTemplate\",\"text\":\"\\\\whitespace trim\\n\u003C$button class=\u003C\u003Cbutton-classes>> tag=\\\"a\\\" tooltip={{$:/language/EditTemplate/Tags/Add/Button/Hint}}>\\n\u003C$list filter=\\\"[\u003CsaveTiddler>minlength[1]]\\\">\\n\u003C$action-listops $tiddler=\u003C\u003CsaveTiddler>> $field=\u003C\u003CtagField>> $subfilter=\\\"[\u003Ctag>]\\\"/>\\n\u003C/$list>\\n\u003C$set name=\\\"currentTiddlerCSSEscaped\\\" value={{{ [\u003CsaveTiddler>escapecss[]] }}}>\\n\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\u003C\u003Cget-tagpicker-focus-selector>> preventScroll=\\\"true\\\"/>\\n\u003C/$set>\\n\u003C\u003Cdelete-tag-state-tiddlers>>\\n\u003C$list filter=\\\"[\u003CrefreshTitle>minlength[1]]\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003CrefreshTitle>> text=\\\"yes\\\"/>\\n\u003C/$list>\\n\u003C\u003Cactions>>\\n\u003C$set name=\\\"backgroundColor\\\" value={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerColourFilter]!is[draft]get[text]] }}}>\\n\u003C$wikify name=\\\"foregroundColor\\\" text=\\\"\\\"\\\"\u003C$macrocall $name=\\\"contrastcolour\\\" target=\u003C\u003CbackgroundColor>> fallbackTarget=\u003C\u003CfallbackTarget>> colourA=\u003C\u003CcolourA>> colourB=\u003C\u003CcolourB>>/>\\\"\\\"\\\">\\n\u003Cspan class=\\\"tc-tag-label tc-btn-invisible\\\" style=\u003C\u003Ctag-pill-styles>>>\\n{{||$:/core/ui/TiddlerIcon}}\u003C$view field=\\\"title\\\" format=\\\"text\\\"/>\\n\u003C/span>\\n\u003C/$wikify>\\n\u003C/$set>\\n\u003C/$button>\\n\"},\"$:/core/ui/TagTemplate\":{\"title\":\"$:/core/ui/TagTemplate\",\"text\":\"\\\\whitespace trim\\n\u003Cspan class=\\\"tc-tag-list-item\\\" data-tag-title=\u003C\u003CcurrentTiddler>>>\\n\u003C$set name=\\\"transclusion\\\" value=\u003C\u003CcurrentTiddler>>>\\n\u003C$macrocall $name=\\\"tag-pill-body\\\" tag=\u003C\u003CcurrentTiddler>> icon={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerIconFilter]!is[draft]get[text]] }}} colour={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerColourFilter]!is[draft]get[text]] }}} palette={{$:/palette}} element-tag=\\\"\\\"\\\"$button\\\"\\\"\\\" element-attributes=\\\"\\\"\\\"popup=\u003C\u003Cqualify \\\"$:/state/popup/tag\\\">> dragFilter='[all[current]tagging[]]' tag='span'\\\"\\\"\\\"/>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/tag\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\" class=\\\"tc-drop-down\\\">\\n\u003C$set name=\\\"tv-show-missing-links\\\" value=\\\"yes\\\">\\n\u003C$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/$set>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TagDropdown]!has[draft.of]]\\\" variable=\\\"listItem\\\"> \\n\u003C$transclude tiddler=\u003C\u003ClistItem>>/> \\n\u003C/$list>\\n\u003Chr>\\n\u003C$macrocall $name=\\\"list-tagged-draggable\\\" tag=\u003C\u003CcurrentTiddler>>/>\\n\u003C/$reveal>\\n\u003C/$set>\\n\u003C/span>\\n\"},\"$:/core/ui/TiddlerFieldTemplate\":{\"title\":\"$:/core/ui/TiddlerFieldTemplate\",\"text\":\"\u003Ctr class=\\\"tc-view-field\\\">\\n\u003Ctd class=\\\"tc-view-field-name\\\">\\n\u003C$text text=\u003C\u003ClistItem>>/>\\n\u003C/td>\\n\u003Ctd class=\\\"tc-view-field-value\\\">\\n\u003C$view field=\u003C\u003ClistItem>>/>\\n\u003C/td>\\n\u003C/tr>\"},\"$:/core/ui/TiddlerFields\":{\"title\":\"$:/core/ui/TiddlerFields\",\"text\":\"\u003Ctable class=\\\"tc-view-field-table\\\">\\n\u003Ctbody>\\n\u003C$list filter=\\\"[all[current]fields[]sort[title]] -text\\\" template=\\\"$:/core/ui/TiddlerFieldTemplate\\\" variable=\\\"listItem\\\"/>\\n\u003C/tbody>\\n\u003C/table>\\n\"},\"$:/core/ui/TiddlerIcon\":{\"title\":\"$:/core/ui/TiddlerIcon\",\"text\":\"\\\\whitespace trim\\n\u003C$let tiddlerIcon={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerIconFilter]!is[draft]get[text]] }}}>\\n\u003C$list filter=\\\"[\u003CtiddlerIcon>!is[blank]]\\\" variable=\\\"ignore\\\">\\n\u003C$transclude tiddler=\u003C\u003CtiddlerIcon>>/>\\n\u003C/$list>\\n\u003C/$let>\\n\"},\"$:/core/ui/TiddlerInfo/Advanced/PluginInfo\":{\"title\":\"$:/core/ui/TiddlerInfo/Advanced/PluginInfo\",\"tags\":\"$:/tags/TiddlerInfo/Advanced\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/Advanced/PluginInfo/\\n\u003C$list filter=\\\"[all[current]has[plugin-type]]\\\">\\n\\n! \u003C\u003Clingo Heading>>\\n\\n\u003C\u003Clingo Hint>>\\n\u003Cul>\\n\u003C$list filter=\\\"[all[current]plugintiddlers[]sort[title]]\\\" emptyMessage=\u003C\u003Clingo Empty/Hint>>>\\n\u003Cli>\\n\u003C$link to={{!!title}}>\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$link>\\n\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/TiddlerInfo/Advanced/ShadowInfo\":{\"title\":\"$:/core/ui/TiddlerInfo/Advanced/ShadowInfo\",\"tags\":\"$:/tags/TiddlerInfo/Advanced\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/Advanced/ShadowInfo/\\n\u003C$set name=\\\"infoTiddler\\\" value=\u003C\u003CcurrentTiddler>>>\\n\\n''\u003C\u003Clingo Heading>>''\\n\\n\u003C$list filter=\\\"[all[current]!is[shadow]]\\\">\\n\\n\u003C\u003Clingo NotShadow/Hint>>\\n\\n\u003C/$list>\\n\\n\u003C$list filter=\\\"[all[current]is[shadow]]\\\">\\n\\n\u003C\u003Clingo Shadow/Hint>>\\n\\n\u003C$list filter=\\\"[all[current]shadowsource[]]\\\">\\n\\n\u003C$set name=\\\"pluginTiddler\\\" value=\u003C\u003CcurrentTiddler>>>\\n\u003C\u003Clingo Shadow/Source>>\\n\u003C/$set>\\n\\n\u003C/$list>\\n\\n\u003C$list filter=\\\"[all[current]is[shadow]is[tiddler]]\\\">\\n\\n\u003C\u003Clingo OverriddenShadow/Hint>>\\n\\n\u003C/$list>\\n\\n\\n\u003C/$list>\\n\u003C/$set>\\n\"},\"$:/core/ui/TiddlerInfo/Advanced\":{\"title\":\"$:/core/ui/TiddlerInfo/Advanced\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/Advanced/Caption}}\",\"text\":\"\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TiddlerInfo/Advanced]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"block\\\"/>\\n\u003C/$list>\\n\"},\"$:/core/ui/TiddlerInfo/Fields\":{\"title\":\"$:/core/ui/TiddlerInfo/Fields\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/Fields/Caption}}\",\"text\":\"\u003C$transclude tiddler=\\\"$:/core/ui/TiddlerFields\\\"/>\\n\"},\"$:/core/ui/TiddlerInfo/List\":{\"title\":\"$:/core/ui/TiddlerInfo/List\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/List/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\u003C$list filter=\\\"[list{!!title}]\\\" emptyMessage=\u003C\u003Clingo List/Empty>> template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/TiddlerInfo/Listed\":{\"title\":\"$:/core/ui/TiddlerInfo/Listed\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/Listed/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\u003C$list filter=\\\"[all[current]listed[]!is[system]]\\\" emptyMessage=\u003C\u003Clingo Listed/Empty>> template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/TiddlerInfo/References\":{\"title\":\"$:/core/ui/TiddlerInfo/References\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/References/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\u003C$list filter=\\\"[all[current]backlinks[]sort[title]]\\\" emptyMessage=\u003C\u003Clingo References/Empty>> template=\\\"$:/core/ui/ListItemTemplate\\\">\\n\u003C/$list>\"},\"$:/core/ui/TiddlerInfo/Tagging\":{\"title\":\"$:/core/ui/TiddlerInfo/Tagging\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/Tagging/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\u003C$list filter=\\\"[all[current]tagging[]]\\\" emptyMessage=\u003C\u003Clingo Tagging/Empty>> template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\"},\"$:/core/ui/TiddlerInfo/Tools\":{\"title\":\"$:/core/ui/TiddlerInfo/Tools\",\"tags\":\"$:/tags/TiddlerInfo\",\"caption\":\"{{$:/language/TiddlerInfo/Tools/Caption}}\",\"text\":\"\\\\define lingo-base() $:/language/TiddlerInfo/\\n\\\\define config-title()\\n$:/config/ViewToolbarButtons/Visibility/$(listItem)$\\n\\\\end\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" value=\\\"\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$checkbox tiddler=\u003C\u003Cconfig-title>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"show\\\"/> \u003C$transclude tiddler=\u003C\u003ClistItem>>/> \u003Ci class=\\\"tc-muted\\\">\u003C$transclude tiddler=\u003C\u003ClistItem>> field=\\\"description\\\"/>\u003C/i>\\n\\n\u003C/$list>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\"},\"$:/core/ui/TiddlerInfo\":{\"title\":\"$:/core/ui/TiddlerInfo\",\"text\":\"\u003Cdiv style=\\\"position:relative;\\\">\\n\u003Cdiv class=\\\"tc-tiddler-controls\\\" style=\\\"position:absolute;right:0;\\\">\\n\u003C$reveal state=\\\"$:/config/TiddlerInfo/Mode\\\" type=\\\"match\\\" text=\\\"sticky\\\">\\n\u003C$button set=\u003C\u003CtiddlerInfoState>> setTo=\\\"\\\" tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/close-button}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/div>\\n\u003C/div>\\n\\n\u003C$macrocall $name=\\\"tabs\\\" tabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/TiddlerInfo]!has[draft.of]]\\\" default={{$:/config/TiddlerInfo/Default}}/>\\n\"},\"$:/core/ui/TopBar/menu\":{\"title\":\"$:/core/ui/TopBar/menu\",\"tags\":\"$:/tags/TopRightBar\",\"text\":\"\u003C$list filter=\\\"[[$:/state/sidebar]get[text]] +[else[yes]!match[no]]\\\" variable=\\\"ignore\\\">\\n\u003C$button set=\\\"$:/state/sidebar\\\" setTo=\\\"no\\\" tooltip={{$:/language/Buttons/HideSideBar/Hint}} aria-label={{$:/language/Buttons/HideSideBar/Caption}} class=\\\"tc-btn-invisible tc-hide-sidebar-btn\\\">{{$:/core/images/chevron-right}}\u003C/$button>\\n\u003C/$list>\\n\u003C$list filter=\\\"[[$:/state/sidebar]get[text]] +[else[yes]match[no]]\\\" variable=\\\"ignore\\\">\\n\u003C$button set=\\\"$:/state/sidebar\\\" setTo=\\\"yes\\\" tooltip={{$:/language/Buttons/ShowSideBar/Hint}} aria-label={{$:/language/Buttons/ShowSideBar/Caption}} class=\\\"tc-btn-invisible tc-show-sidebar-btn\\\">{{$:/core/images/chevron-left}}\u003C/$button>\\n\u003C/$list>\\n\"},\"$:/core/ui/UntaggedTemplate\":{\"title\":\"$:/core/ui/UntaggedTemplate\",\"text\":\"\\\\define lingo-base() $:/language/SideBar/\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/tag\\\">> class=\\\"tc-btn-invisible tc-untagged-label tc-tag-label\\\">\\n\u003C\u003Clingo Tags/Untagged/Caption>>\\n\u003C/$button>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/tag\\\">> type=\\\"popup\\\" position=\\\"below\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\u003C$list filter=\\\"[untagged[]!is[system]] -[tags[]] +[sort[title]]\\\" template=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/ViewTemplate/body/blank\":{\"title\":\"$:/core/ui/ViewTemplate/body/blank\",\"text\":\"\u003C!-- Intentionally blank -->\\n\"},\"$:/core/ui/ViewTemplate/body/code\":{\"title\":\"$:/core/ui/ViewTemplate/body/code\",\"text\":\"\u003C$codeblock code={{{ [\u003CcurrentTiddler>get[text]] }}} language={{{ [\u003CcurrentTiddler>get[type]else[text/vnd.tiddlywiki]] }}}/>\\n\"},\"$:/core/ui/ViewTemplate/body/default\":{\"title\":\"$:/core/ui/ViewTemplate/body/default\",\"text\":\"\u003C$transclude>\\n\\n\u003C$transclude tiddler=\\\"$:/language/MissingTiddler/Hint\\\"/>\\n\\n\u003C/$transclude>\\n\"},\"$:/core/ui/ViewTemplate/body/import\":{\"title\":\"$:/core/ui/ViewTemplate/body/import\",\"text\":\"\\\\define lingo-base() $:/language/Import/\\n\\n\\\\define confirmCancel()\\n\u003C$action-confirm $message={{$:/language/Import/Listing/Cancel/Warning}} >\\n\u003C$action-deletetiddler $tiddler=\u003C\u003CcurrentTiddler>>/>\\n\u003C$action-sendmessage $message=\\\"tm-close-tiddler\\\" title=\u003C\u003CcurrentTiddler>>/>\\n\u003C/$action-confirm>\\n\\\\end\\n\\n\\\\define buttons()\\n\u003C$button actions=\u003C\u003CconfirmCancel>> >\u003C\u003Clingo Listing/Cancel/Caption>>\u003C/$button>\\n\u003C$button message=\\\"tm-perform-import\\\" param=\u003C\u003CcurrentTiddler>>>\u003C\u003Clingo Listing/Import/Caption>>\u003C/$button>\\n\u003C\u003Clingo Listing/Preview>> \u003C$select tiddler=\\\"$:/state/importpreviewtype\\\" default=\\\"$:/core/ui/ImportPreviews/Text\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ImportPreview]!has[draft.of]]\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>{{!!caption}}\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\\n\\\\end\\n\\n\u003C$list filter=\\\"[all[current]field:plugin-type[import]]\\\">\\n\\n\u003Cdiv class=\\\"tc-import\\\">\\n\\n\u003C\u003Clingo Listing/Hint>>\\n\\n\u003C\u003Cbuttons>>\\n\\n{{||$:/core/ui/ImportListing}}\\n\\n\u003C\u003Cbuttons>>\\n\\n\u003C/div>\\n\\n\u003C/$list>\\n\"},\"$:/core/ui/ViewTemplate/body/plugin\":{\"title\":\"$:/core/ui/ViewTemplate/body/plugin\",\"text\":\"\u003Cdiv class=\\\"tc-tiddler-plugin-info\\\">\\n\u003C$let plugin-type={{!!plugin-type}}\\n\\tdefault-popup-state=\\\"yes\\\"\\n\\tqualified-state=\u003C\u003Cqualify \\\"$:/state/plugin-info\\\">>\\n>\\n{{||$:/core/ui/Components/plugin-info}}\\n\u003C/$let>\\n\u003C/div>\"},\"$:/core/ui/ViewTemplate/body\":{\"title\":\"$:/core/ui/ViewTemplate/body\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"\u003C$reveal tag=\\\"div\\\" class=\\\"tc-tiddler-body\\\" type=\\\"nomatch\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"hide\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\\n\u003C$transclude tiddler={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/ViewTemplateBodyFilter]!is[draft]get[text]] :and[!is[blank]else[$:/core/ui/ViewTemplate/body/default]] }}} />\\n\\n\u003C/$reveal>\\n\"},\"$:/core/ui/ViewTemplate/classic\":{\"title\":\"$:/core/ui/ViewTemplate/classic\",\"tags\":\"$:/tags/ViewTemplate $:/tags/EditTemplate\",\"text\":\"\\\\define lingo-base() $:/language/ClassicWarning/\\n\u003C$list filter=\\\"[all[current]type[text/x-tiddlywiki]]\\\">\\n\u003Cdiv class=\\\"tc-message-box\\\">\\n\\n\u003C\u003Clingo Hint>>\\n\\n\u003C$button set=\\\"!!type\\\" setTo=\\\"text/vnd.tiddlywiki\\\">\u003C\u003Clingo Upgrade/Caption>>\u003C/$button>\\n\\n\u003C/div>\\n\u003C/$list>\\n\"},\"$:/core/ui/ViewTemplate/subtitle\":{\"title\":\"$:/core/ui/ViewTemplate/subtitle\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"\\\\whitespace trim\\n\u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"hide\\\" tag=\\\"div\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-subtitle\\\">\\n\u003C$link to={{!!modifier}} />\\n\u003C$view field=\\\"modified\\\" format=\\\"date\\\" template={{$:/language/Tiddler/DateFormat}}/>\\n\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/ViewTemplate/tags\":{\"title\":\"$:/core/ui/ViewTemplate/tags\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"\u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"hide\\\" tag=\\\"div\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-tags-wrapper\\\">\u003C$list filter=\\\"[all[current]tags[]sort[title]]\\\" template=\\\"$:/core/ui/TagTemplate\\\" storyview=\\\"pop\\\"/>\u003C/div>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/ViewTemplate/title/default\":{\"title\":\"$:/core/ui/ViewTemplate/title/default\",\"text\":\"\\\\whitespace trim\\n\u003Ch2 class=\\\"tc-title\\\">\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/h2>\\n\"},\"$:/core/ui/ViewTemplate/title/system\":{\"title\":\"$:/core/ui/ViewTemplate/title/system\",\"text\":\"\\\\whitespace trim\\n\u003Ch2 class=\\\"tc-title\\\" title={{$:/language/SystemTiddler/Tooltip}}>\\n\u003Cspan class=\\\"tc-system-title-prefix\\\">$:/\u003C/span>\u003C$text text={{{ [\u003CcurrentTiddler>removeprefix[$:/]] }}}/>\\n\u003C/h2>\"},\"$:/core/ui/ViewTemplate/title\":{\"title\":\"$:/core/ui/ViewTemplate/title\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"\\\\whitespace trim\\n\\\\define title-styles()\\nfill:$(foregroundColor)$;\\n\\\\end\\n\u003Cdiv class=\\\"tc-tiddler-title\\\">\\n\u003Cdiv class=\\\"tc-titlebar\\\">\\n\u003Cspan class=\\\"tc-tiddler-controls\\\">\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]] :filter[lookup[$:/config/ViewToolbarButtons/Visibility/]!match[hide]]\\\" storyview=\\\"pop\\\" variable=\\\"listItem\\\">\u003C$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[\u003Ctv-config-toolbar-class>] [\u003ClistItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\u003C$transclude tiddler=\u003C\u003ClistItem>>/>\u003C/$set>\u003C/$list>\\n\u003C/span>\\n\u003C$set name=\\\"tv-wikilinks\\\" value={{$:/config/Tiddlers/TitleLinks}}>\\n\u003C$link>\\n\u003C$let foregroundColor={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerColourFilter]!is[draft]get[text]] }}}>\\n\u003Cspan class=\\\"tc-tiddler-title-icon\\\" style=\u003C\u003Ctitle-styles>>>\\n{{||$:/core/ui/TiddlerIcon}}\\n\u003C/span>\\n\u003C/$let>\\n\u003C$transclude tiddler={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/ViewTemplateTitleFilter]!is[draft]get[text]] :and[!is[blank]else[$:/core/ui/ViewTemplate/title/default]] }}} />\\n\u003C/$link>\\n\u003C/$set>\\n\u003C/div>\\n\\n\u003C$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\" state=\u003C\u003CtiddlerInfoState>> class=\\\"tc-tiddler-info tc-popup-handle\\\" animate=\\\"yes\\\" retain=\\\"yes\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TiddlerInfoSegment]!has[draft.of]] [[$:/core/ui/TiddlerInfo]]\\\" variable=\\\"listItem\\\">\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"block\\\"/>\u003C/$list>\\n\\n\u003C/$reveal>\\n\u003C/div>\\n\"},\"$:/core/ui/ViewTemplate/unfold\":{\"title\":\"$:/core/ui/ViewTemplate/unfold\",\"tags\":\"$:/tags/ViewTemplate\",\"text\":\"\u003C$reveal tag=\\\"div\\\" type=\\\"nomatch\\\" state=\\\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold-bar\\\" text=\\\"hide\\\">\\n\u003C$reveal tag=\\\"div\\\" type=\\\"nomatch\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"hide\\\" default=\\\"show\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Fold/Hint}} aria-label={{$:/language/Buttons/Fold/Caption}} class=\\\"tc-fold-banner\\\">\\n\u003C$action-sendmessage $message=\\\"tm-fold-tiddler\\\" $param=\u003C\u003CcurrentTiddler>> foldedState=\u003C\u003Cfolded-state>>/>\\n{{$:/core/images/chevron-up}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal tag=\\\"div\\\" type=\\\"nomatch\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"show\\\" default=\\\"show\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Unfold/Hint}} aria-label={{$:/language/Buttons/Unfold/Caption}} class=\\\"tc-unfold-banner\\\">\\n\u003C$action-sendmessage $message=\\\"tm-fold-tiddler\\\" $param=\u003C\u003CcurrentTiddler>> foldedState=\u003C\u003Cfolded-state>>/>\\n{{$:/core/images/chevron-down}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/ViewTemplate\":{\"title\":\"$:/core/ui/ViewTemplate\",\"text\":\"\\\\whitespace trim\\n\\\\define folded-state()\\n$:/state/folded/$(currentTiddler)$\\n\\\\end\\n\\\\define cancel-delete-tiddler-actions(message) \u003C$action-sendmessage $message=\\\"tm-$message$-tiddler\\\"/>\\n\\\\import [all[shadows+tiddlers]tag[$:/tags/Macro/View]!has[draft.of]]\\n\u003C$vars storyTiddler=\u003C\u003CcurrentTiddler>> tiddlerInfoState=\u003C\u003Cqualify \\\"$:/state/popup/tiddler-info\\\">>>\\n\u003Cdiv data-tiddler-title=\u003C\u003CcurrentTiddler>> data-tags={{!!tags}} class={{{ tc-tiddler-frame tc-tiddler-view-frame [\u003CcurrentTiddler>is[tiddler]then[tc-tiddler-exists]] [\u003CcurrentTiddler>is[missing]!is[shadow]then[tc-tiddler-missing]] [\u003CcurrentTiddler>is[shadow]then[tc-tiddler-exists tc-tiddler-shadow]] [\u003CcurrentTiddler>is[shadow]is[tiddler]then[tc-tiddler-overridden-shadow]] [\u003CcurrentTiddler>is[system]then[tc-tiddler-system]] [{!!class}] [\u003CcurrentTiddler>tags[]encodeuricomponent[]addprefix[tc-tagged-]] +[join[ ]] }}}>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n\u003C$transclude tiddler=\u003C\u003ClistItem>>/>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$vars>\\n\"},\"$:/core/ui/Buttons/clone\":{\"title\":\"$:/core/ui/Buttons/clone\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/clone-button}} {{$:/language/Buttons/Clone/Caption}}\",\"description\":\"{{$:/language/Buttons/Clone/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-new-tiddler\\\" param=\u003C\u003CcurrentTiddler>> tooltip={{$:/language/Buttons/Clone/Hint}} aria-label={{$:/language/Buttons/Clone/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/clone-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Clone/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/close-others\":{\"title\":\"$:/core/ui/Buttons/close-others\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/close-others-button}} {{$:/language/Buttons/CloseOthers/Caption}}\",\"description\":\"{{$:/language/Buttons/CloseOthers/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-close-other-tiddlers\\\" param=\u003C\u003CcurrentTiddler>> tooltip={{$:/language/Buttons/CloseOthers/Hint}} aria-label={{$:/language/Buttons/CloseOthers/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/close-others-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/CloseOthers/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/close\":{\"title\":\"$:/core/ui/Buttons/close\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/close-button}} {{$:/language/Buttons/Close/Caption}}\",\"description\":\"{{$:/language/Buttons/Close/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-close-tiddler\\\" tooltip={{$:/language/Buttons/Close/Hint}} aria-label={{$:/language/Buttons/Close/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/close-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Close/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/edit\":{\"title\":\"$:/core/ui/Buttons/edit\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/edit-button}} {{$:/language/Buttons/Edit/Caption}}\",\"description\":\"{{$:/language/Buttons/Edit/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-edit-tiddler\\\" tooltip={{$:/language/Buttons/Edit/Hint}} aria-label={{$:/language/Buttons/Edit/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/edit-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Edit/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/export-tiddler\":{\"title\":\"$:/core/ui/Buttons/export-tiddler\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/export-button}} {{$:/language/Buttons/ExportTiddler/Caption}}\",\"description\":\"{{$:/language/Buttons/ExportTiddler/Hint}}\",\"text\":\"\\\\define makeExportFilter()\\n[[$(currentTiddler)$]]\\n\\\\end\\n\u003C$macrocall $name=\\\"exportButton\\\" exportFilter=\u003C\u003CmakeExportFilter>> lingoBase=\\\"$:/language/Buttons/ExportTiddler/\\\" baseFilename=\u003C\u003CcurrentTiddler>>/>\"},\"$:/core/ui/Buttons/fold-bar\":{\"title\":\"$:/core/ui/Buttons/fold-bar\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/chevron-up}} {{$:/language/Buttons/Fold/FoldBar/Caption}}\",\"description\":\"{{$:/language/Buttons/Fold/FoldBar/Hint}}\",\"text\":\"\u003C!-- This dummy toolbar button is here to allow visibility of the fold-bar to be controlled as if it were a toolbar button -->\"},\"$:/core/ui/Buttons/fold-others\":{\"title\":\"$:/core/ui/Buttons/fold-others\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/fold-others-button}} {{$:/language/Buttons/FoldOthers/Caption}}\",\"description\":\"{{$:/language/Buttons/FoldOthers/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/FoldOthers/Hint}} aria-label={{$:/language/Buttons/FoldOthers/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-sendmessage $message=\\\"tm-fold-other-tiddlers\\\" $param=\u003C\u003CcurrentTiddler>> foldedStatePrefix=\\\"$:/state/folded/\\\"/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\" variable=\\\"listItem\\\">\\n{{$:/core/images/fold-others-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/FoldOthers/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/fold\":{\"title\":\"$:/core/ui/Buttons/fold\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/fold-button}} {{$:/language/Buttons/Fold/Caption}}\",\"description\":\"{{$:/language/Buttons/Fold/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"hide\\\" default=\\\"show\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Fold/Hint}} aria-label={{$:/language/Buttons/Fold/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-sendmessage $message=\\\"tm-fold-tiddler\\\" $param=\u003C\u003CcurrentTiddler>> foldedState=\u003C\u003Cfolded-state>>/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\" variable=\\\"listItem\\\">\\n{{$:/core/images/fold-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Fold/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Cfolded-state>> text=\\\"hide\\\" default=\\\"show\\\">\\n\u003C$button tooltip={{$:/language/Buttons/Unfold/Hint}} aria-label={{$:/language/Buttons/Unfold/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$action-sendmessage $message=\\\"tm-fold-tiddler\\\" $param=\u003C\u003CcurrentTiddler>> foldedState=\u003C\u003Cfolded-state>>/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\" variable=\\\"listItem\\\">\\n{{$:/core/images/unfold-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Unfold/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C/$reveal>\\n\"},\"$:/core/ui/Buttons/info\":{\"title\":\"$:/core/ui/Buttons/info\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/info-button}} {{$:/language/Buttons/Info/Caption}}\",\"description\":\"{{$:/language/Buttons/Info/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define button-content()\\n\\\\whitespace trim\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/info-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Info/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\\\\end\\n\u003C$reveal state=\\\"$:/config/TiddlerInfo/Mode\\\" type=\\\"match\\\" text=\\\"popup\\\">\\n\u003C$button popup=\u003C\u003CtiddlerInfoState>> tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$macrocall $name=\\\"button-content\\\" mode=\\\"inline\\\"/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal state=\\\"$:/config/TiddlerInfo/Mode\\\" type=\\\"match\\\" text=\\\"sticky\\\">\\n\u003C$reveal state=\u003C\u003CtiddlerInfoState>> type=\\\"match\\\" text=\\\"\\\" default=\\\"\\\">\\n\u003C$button set=\u003C\u003CtiddlerInfoState>> setTo=\\\"yes\\\" tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$macrocall $name=\\\"button-content\\\" mode=\\\"inline\\\"/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal state=\u003C\u003CtiddlerInfoState>> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n\u003C$button set=\u003C\u003CtiddlerInfoState>> setTo=\\\"\\\" tooltip={{$:/language/Buttons/Info/Hint}} aria-label={{$:/language/Buttons/Info/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$macrocall $name=\\\"button-content\\\" mode=\\\"inline\\\"/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C/$reveal>\"},\"$:/core/ui/Buttons/more-tiddler-actions\":{\"title\":\"$:/core/ui/Buttons/more-tiddler-actions\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/down-arrow}} {{$:/language/Buttons/More/Caption}}\",\"description\":\"{{$:/language/Buttons/More/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define config-title()\\n$:/config/ViewToolbarButtons/Visibility/$(listItem)$\\n\\\\end\\n\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/more\\\">> tooltip={{$:/language/Buttons/More/Hint}} aria-label={{$:/language/Buttons/More/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/down-arrow}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/More/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/more\\\">> type=\\\"popup\\\" position=\\\"belowleft\\\" animate=\\\"yes\\\">\\n\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-icons\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-text\\\" value=\\\"yes\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" value=\\\"tc-btn-invisible\\\">\\n\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]] -[[$:/core/ui/Buttons/more-tiddler-actions]]\\\" variable=\\\"listItem\\\">\\n\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cconfig-title>> text=\\\"hide\\\">\\n\\n\u003C$set name=\\\"tv-config-toolbar-class\\\" filter=\\\"[\u003Ctv-config-toolbar-class>] [\u003ClistItem>encodeuricomponent[]addprefix[tc-btn-]]\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003ClistItem>> mode=\\\"inline\\\"/>\\n\\n\u003C/$set>\\n\\n\u003C/$reveal>\\n\\n\u003C/$list>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/$set>\\n\\n\u003C/div>\\n\\n\u003C/$reveal>\"},\"$:/core/ui/Buttons/new-here\":{\"title\":\"$:/core/ui/Buttons/new-here\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/new-here-button}} {{$:/language/Buttons/NewHere/Caption}}\",\"description\":\"{{$:/language/Buttons/NewHere/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define newHereActions()\\n\u003C$set name=\\\"tags\\\" filter=\\\"[\u003CcurrentTiddler>] [{$:/config/NewTiddler/Tags}]\\\">\\n\u003C$action-sendmessage $message=\\\"tm-new-tiddler\\\" tags=\u003C\u003Ctags>>/>\\n\u003C/$set>\\n\\\\end\\n\\\\define newHereButton()\\n\\\\whitespace trim\\n\u003C$button actions=\u003C\u003CnewHereActions>> tooltip={{$:/language/Buttons/NewHere/Hint}} aria-label={{$:/language/Buttons/NewHere/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-here-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/NewHere/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\\n\\\\end\\n\u003C\u003CnewHereButton>>\\n\"},\"$:/core/ui/Buttons/new-journal-here\":{\"title\":\"$:/core/ui/Buttons/new-journal-here\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/new-journal-button}} {{$:/language/Buttons/NewJournalHere/Caption}}\",\"description\":\"{{$:/language/Buttons/NewJournalHere/Hint}}\",\"text\":\"\\\\whitespace trim\\n\\\\define journalButtonTags()\\n[[$(currentTiddlerTag)$]] $(journalTags)$\\n\\\\end\\n\\\\define journalButton()\\n\\\\whitespace trim\\n\u003C$button tooltip={{$:/language/Buttons/NewJournalHere/Hint}} aria-label={{$:/language/Buttons/NewJournalHere/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$wikify name=\\\"journalTitle\\\" text=\\\"\\\"\\\"\u003C$macrocall $name=\\\"now\\\" format=\u003C\u003CjournalTitleTemplate>>/>\\\"\\\"\\\">\\n\u003C$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=\u003C\u003CjournalTitle>> tags=\u003C\u003CjournalButtonTags>>/>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/new-journal-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/NewJournalHere/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$wikify>\\n\u003C/$button>\\n\\\\end\\n\u003C$set name=\\\"journalTitleTemplate\\\" value={{$:/config/NewJournal/Title}}>\\n\u003C$set name=\\\"journalTags\\\" value={{$:/config/NewJournal/Tags}}>\\n\u003C$set name=\\\"currentTiddlerTag\\\" value=\u003C\u003CcurrentTiddler>>>\\n\u003C\u003CjournalButton>>\\n\u003C/$set>\\n\u003C/$set>\\n\u003C/$set>\\n\"},\"$:/core/ui/Buttons/open-window\":{\"title\":\"$:/core/ui/Buttons/open-window\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/open-window}} {{$:/language/Buttons/OpenWindow/Caption}}\",\"description\":\"{{$:/language/Buttons/OpenWindow/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-open-window\\\" tooltip={{$:/language/Buttons/OpenWindow/Hint}} aria-label={{$:/language/Buttons/OpenWindow/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/open-window}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/OpenWindow/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/permalink\":{\"title\":\"$:/core/ui/Buttons/permalink\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/permalink-button}} {{$:/language/Buttons/Permalink/Caption}}\",\"description\":\"{{$:/language/Buttons/Permalink/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-permalink\\\" tooltip={{$:/language/Buttons/Permalink/Hint}} aria-label={{$:/language/Buttons/Permalink/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/permalink-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Permalink/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/core/ui/Buttons/permaview\":{\"title\":\"$:/core/ui/Buttons/permaview\",\"tags\":\"$:/tags/ViewToolbar $:/tags/PageControls\",\"caption\":\"{{$:/core/images/permaview-button}} {{$:/language/Buttons/Permaview/Caption}}\",\"description\":\"{{$:/language/Buttons/Permaview/Hint}}\",\"text\":\"\\\\whitespace trim\\n\u003C$button message=\\\"tm-permaview\\\" tooltip={{$:/language/Buttons/Permaview/Hint}} aria-label={{$:/language/Buttons/Permaview/Caption}} class=\u003C\u003Ctv-config-toolbar-class>>>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/permaview-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\\n\u003C$text text={{$:/language/Buttons/Permaview/Caption}}/>\\n\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\"},\"$:/DefaultTiddlers\":{\"title\":\"$:/DefaultTiddlers\",\"text\":\"GettingStarted\\n\"},\"$:/temp/advancedsearch\":{\"title\":\"$:/temp/advancedsearch\",\"text\":\"\"},\"$:/snippets/allfields\":{\"title\":\"$:/snippets/allfields\",\"text\":\"\\\\define renderfield(title)\\n\u003Ctr class=\\\"tc-view-field\\\">\u003Ctd class=\\\"tc-view-field-name\\\">''\u003C$text text=\u003C\u003C__title__>>/>'':\u003C/td>\u003Ctd class=\\\"tc-view-field-value\\\">//{{$:/language/Docs/Fields/$title$}}//\u003C/td>\u003C/tr>\\n\\\\end\\n\u003Ctable class=\\\"tc-view-field-table\\\">\u003Ctbody>\u003C$list filter=\\\"[fields[]sort[title]]\\\" variable=\\\"listItem\\\">\u003C$macrocall $name=\\\"renderfield\\\" title=\u003C\u003ClistItem>>/>\u003C/$list>\\n\u003C/tbody>\u003C/table>\\n\"},\"$:/config/AnimationDuration\":{\"title\":\"$:/config/AnimationDuration\",\"text\":\"400\"},\"$:/config/AutoFocus\":{\"title\":\"$:/config/AutoFocus\",\"text\":\"title\"},\"$:/config/AutoSave\":{\"title\":\"$:/config/AutoSave\",\"text\":\"yes\"},\"$:/config/BitmapEditor/Colour\":{\"title\":\"$:/config/BitmapEditor/Colour\",\"text\":\"#444\"},\"$:/config/BitmapEditor/ImageSizes\":{\"title\":\"$:/config/BitmapEditor/ImageSizes\",\"text\":\"[[62px 100px]] [[100px 62px]] [[124px 200px]] [[200px 124px]] [[248px 400px]] [[371px 600px]] [[400px 248px]] [[556px 900px]] [[600px 371px]] [[742px 1200px]] [[900px 556px]] [[1200px 742px]]\"},\"$:/config/BitmapEditor/LineWidth\":{\"title\":\"$:/config/BitmapEditor/LineWidth\",\"text\":\"3px\"},\"$:/config/BitmapEditor/LineWidths\":{\"title\":\"$:/config/BitmapEditor/LineWidths\",\"text\":\"0.25px 0.5px 1px 2px 3px 4px 6px 8px 10px 16px 20px 28px 40px 56px 80px\"},\"$:/config/BitmapEditor/Opacities\":{\"title\":\"$:/config/BitmapEditor/Opacities\",\"text\":\"0.01 0.025 0.05 0.075 0.1 0.15 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\"},\"$:/config/BitmapEditor/Opacity\":{\"title\":\"$:/config/BitmapEditor/Opacity\",\"text\":\"1.0\"},\"$:/config/DefaultMoreSidebarTab\":{\"title\":\"$:/config/DefaultMoreSidebarTab\",\"text\":\"$:/core/ui/MoreSideBar/Tags\"},\"$:/config/DefaultSidebarTab\":{\"title\":\"$:/config/DefaultSidebarTab\",\"text\":\"$:/core/ui/SideBar/Open\"},\"$:/config/DownloadSaver/AutoSave\":{\"title\":\"$:/config/DownloadSaver/AutoSave\",\"text\":\"no\"},\"$:/config/Drafts/TypingTimeout\":{\"title\":\"$:/config/Drafts/TypingTimeout\",\"text\":\"400\"},\"$:/config/EditMode/fieldname-filter\":{\"title\":\"$:/config/EditMode/fieldname-filter\",\"first-search-filter\":\"[!is[shadow]!is[system]fields[]search:title\u003CuserInput>sort[]] -created -creator -draft.of -draft.title -modified -modifier -tags -text -title -type\",\"second-search-filter\":\"[fields[]search:title\u003CuserInput>sort[]] -[!is[shadow]!is[system]fields[]]\"},\"$:/config/EditTabIndex\":{\"title\":\"$:/config/EditTabIndex\",\"text\":\"1\"},\"$:/config/EditTemplateBodyFilters/canonical-uri\":{\"title\":\"$:/config/EditTemplateBodyFilters/canonical-uri\",\"tags\":\"$:/tags/EditTemplateBodyFilter\",\"text\":\"[has[_canonical_uri]then[$:/core/ui/EditTemplate/body/canonical-uri]]\"},\"$:/config/EditTemplateBodyFilters/default\":{\"title\":\"$:/config/EditTemplateBodyFilters/default\",\"tags\":\"$:/tags/EditTemplateBodyFilter\",\"text\":\"[[$:/core/ui/EditTemplate/body/default]]\"},\"$:/config/EditTemplateFields/Visibility/title\":{\"title\":\"$:/config/EditTemplateFields/Visibility/title\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/tags\":{\"title\":\"$:/config/EditTemplateFields/Visibility/tags\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/text\":{\"title\":\"$:/config/EditTemplateFields/Visibility/text\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/creator\":{\"title\":\"$:/config/EditTemplateFields/Visibility/creator\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/created\":{\"title\":\"$:/config/EditTemplateFields/Visibility/created\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/modified\":{\"title\":\"$:/config/EditTemplateFields/Visibility/modified\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/modifier\":{\"title\":\"$:/config/EditTemplateFields/Visibility/modifier\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/type\":{\"title\":\"$:/config/EditTemplateFields/Visibility/type\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/draft.title\":{\"title\":\"$:/config/EditTemplateFields/Visibility/draft.title\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/draft.of\":{\"title\":\"$:/config/EditTemplateFields/Visibility/draft.of\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/revision\":{\"title\":\"$:/config/EditTemplateFields/Visibility/revision\",\"text\":\"hide\"},\"$:/config/EditTemplateFields/Visibility/bag\":{\"title\":\"$:/config/EditTemplateFields/Visibility/bag\",\"text\":\"hide\"},\"$:/config/Editor/EnableImportFilter\":{\"title\":\"$:/config/Editor/EnableImportFilter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[all[current]type[text/vnd.tiddlywiki]] [all[current]!has[type]]\"},\"$:/config/Editor/ImportContentTypesFilter\":{\"title\":\"$:/config/Editor/ImportContentTypesFilter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[prefix[image/]]\"},\"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-4\":{\"title\":\"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-4\",\"text\":\"hide\"},\"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-5\":{\"title\":\"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-5\",\"text\":\"hide\"},\"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-6\":{\"title\":\"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-6\",\"text\":\"hide\"},\"$:/config/EditorTypeMappings/image/gif\":{\"title\":\"$:/config/EditorTypeMappings/image/gif\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/webp\":{\"title\":\"$:/config/EditorTypeMappings/image/webp\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/heic\":{\"title\":\"$:/config/EditorTypeMappings/image/heic\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/heif\":{\"title\":\"$:/config/EditorTypeMappings/image/heif\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/jpeg\":{\"title\":\"$:/config/EditorTypeMappings/image/jpeg\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/jpg\":{\"title\":\"$:/config/EditorTypeMappings/image/jpg\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/png\":{\"title\":\"$:/config/EditorTypeMappings/image/png\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/image/x-icon\":{\"title\":\"$:/config/EditorTypeMappings/image/x-icon\",\"text\":\"bitmap\"},\"$:/config/EditorTypeMappings/text/vnd.tiddlywiki\":{\"title\":\"$:/config/EditorTypeMappings/text/vnd.tiddlywiki\",\"text\":\"text\"},\"$:/config/FieldEditorFilters/default\":{\"title\":\"$:/config/FieldEditorFilters/default\",\"tags\":\"$:/tags/FieldEditorFilter\",\"text\":\"[[$:/core/ui/EditTemplate/fieldEditor/default]]\"},\"$:/config/Manager/Show\":{\"title\":\"$:/config/Manager/Show\",\"text\":\"tiddlers\"},\"$:/config/Manager/Filter\":{\"title\":\"$:/config/Manager/Filter\",\"text\":\"\"},\"$:/config/Manager/Order\":{\"title\":\"$:/config/Manager/Order\",\"text\":\"forward\"},\"$:/config/Manager/Sort\":{\"title\":\"$:/config/Manager/Sort\",\"text\":\"title\"},\"$:/config/Manager/System\":{\"title\":\"$:/config/Manager/System\",\"text\":\"system\"},\"$:/config/Manager/Tag\":{\"title\":\"$:/config/Manager/Tag\",\"text\":\"\"},\"$:/state/popup/manager/item/$:/Manager/ItemMain/RawText\":{\"title\":\"$:/state/popup/manager/item/$:/Manager/ItemMain/RawText\",\"text\":\"hide\"},\"$:/config/MissingLinks\":{\"title\":\"$:/config/MissingLinks\",\"text\":\"yes\"},\"$:/config/Navigation/UpdateAddressBar\":{\"title\":\"$:/config/Navigation/UpdateAddressBar\",\"text\":\"no\"},\"$:/config/Navigation/UpdateHistory\":{\"title\":\"$:/config/Navigation/UpdateHistory\",\"text\":\"no\"},\"$:/config/NewImageType\":{\"title\":\"$:/config/NewImageType\",\"text\":\"jpeg\"},\"$:/config/OfficialPluginLibrary\":{\"title\":\"$:/config/OfficialPluginLibrary\",\"tags\":\"$:/tags/PluginLibrary\",\"url\":\"https://tiddlywiki.com/library/v5.2.2/index.html\",\"caption\":\"{{$:/language/OfficialPluginLibrary}}\",\"text\":\"{{$:/language/OfficialPluginLibrary/Hint}}\\n\"},\"$:/config/Navigation/openLinkFromInsideRiver\":{\"title\":\"$:/config/Navigation/openLinkFromInsideRiver\",\"text\":\"below\"},\"$:/config/Navigation/openLinkFromOutsideRiver\":{\"title\":\"$:/config/Navigation/openLinkFromOutsideRiver\",\"text\":\"top\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/advanced-search\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/advanced-search\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/close-all\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/close-all\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/export-page\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/export-page\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/fold-all\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/fold-all\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/full-screen\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/full-screen\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/refresh\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/refresh\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/import\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/import\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/language\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/language\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/tag-manager\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/tag-manager\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/manager\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/manager\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/new-journal\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/new-journal\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/new-image\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/new-image\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/palette\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/palette\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/permaview\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/permaview\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/print\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/print\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/storyview\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/storyview\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/timestamp\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/timestamp\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/theme\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/theme\",\"text\":\"hide\"},\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/unfold-all\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/unfold-all\",\"text\":\"hide\"},\"$:/config/Performance/Instrumentation\":{\"title\":\"$:/config/Performance/Instrumentation\",\"text\":\"no\"},\"$:/config/RegisterPluginType/plugin\":{\"title\":\"$:/config/RegisterPluginType/plugin\",\"text\":\"yes\"},\"$:/config/RegisterPluginType/theme\":{\"title\":\"$:/config/RegisterPluginType/theme\",\"text\":\"no\"},\"$:/config/RegisterPluginType/language\":{\"title\":\"$:/config/RegisterPluginType/language\",\"text\":\"no\"},\"$:/config/RegisterPluginType/info\":{\"title\":\"$:/config/RegisterPluginType/info\",\"text\":\"yes\"},\"$:/config/RegisterPluginType/import\":{\"title\":\"$:/config/RegisterPluginType/import\",\"text\":\"no\"},\"$:/config/SaveWikiButton/Template\":{\"title\":\"$:/config/SaveWikiButton/Template\",\"text\":\"$:/core/save/all\"},\"$:/config/SaverFilter\":{\"title\":\"$:/config/SaverFilter\",\"text\":\"[all[]] -[prefix[$:/HistoryList]] -[prefix[$:/StoryList]] -[status[pending]plugin-type[import]] -[[$:/isEncrypted]] -[[$:/UploadName]] -[prefix[$:/state/]] -[prefix[$:/temp/]]\\n\"},\"$:/config/Search/AutoFocus\":{\"title\":\"$:/config/Search/AutoFocus\",\"text\":\"true\"},\"$:/config/Search/MinLength\":{\"title\":\"$:/config/Search/MinLength\",\"text\":\"3\"},\"$:/config/SearchResults/Default\":{\"title\":\"$:/config/SearchResults/Default\",\"text\":\"$:/core/ui/DefaultSearchResultList\"},\"$:/config/Server/ExternalFilters/[all[tiddlers]!is[system]sort[title]]\":{\"title\":\"$:/config/Server/ExternalFilters/[all[tiddlers]!is[system]sort[title]]\",\"text\":\"yes\"},\"$:/config/ShortcutInfo/add-field\":{\"title\":\"$:/config/ShortcutInfo/add-field\",\"text\":\"{{$:/language/EditTemplate/Fields/Add/Button/Hint}}\"},\"$:/config/ShortcutInfo/advanced-search\":{\"title\":\"$:/config/ShortcutInfo/advanced-search\",\"text\":\"{{$:/language/Buttons/AdvancedSearch/Hint}}\"},\"$:/config/ShortcutInfo/advanced-search-sidebar\":{\"title\":\"$:/config/ShortcutInfo/advanced-search-sidebar\",\"text\":\"{{$:/language/Shortcuts/Input/AdvancedSearch/Hint}}\"},\"$:/config/ShortcutInfo/bold\":{\"title\":\"$:/config/ShortcutInfo/bold\",\"text\":\"{{$:/language/Buttons/Bold/Hint}}\"},\"$:/config/ShortcutInfo/cancel-edit-tiddler\":{\"title\":\"$:/config/ShortcutInfo/cancel-edit-tiddler\",\"text\":\"{{$:/language/Buttons/Cancel/Hint}}\"},\"$:/config/ShortcutInfo/change-sidebar-layout\":{\"title\":\"$:/config/ShortcutInfo/change-sidebar-layout\",\"text\":\"{{$:/language/Shortcuts/SidebarLayout/Hint}}\"},\"$:/config/ShortcutInfo/delete-field\":{\"title\":\"$:/config/ShortcutInfo/delete-field\",\"text\":\"{{$:/language/EditTemplate/Field/Remove/Hint}}\"},\"$:/config/ShortcutInfo/excise\":{\"title\":\"$:/config/ShortcutInfo/excise\",\"text\":\"{{$:/language/Buttons/Excise/Hint}}\"},\"$:/config/ShortcutInfo/heading-1\":{\"title\":\"$:/config/ShortcutInfo/heading-1\",\"text\":\"{{$:/language/Buttons/Heading1/Hint}}\"},\"$:/config/ShortcutInfo/heading-2\":{\"title\":\"$:/config/ShortcutInfo/heading-2\",\"text\":\"{{$:/language/Buttons/Heading2/Hint}}\"},\"$:/config/ShortcutInfo/heading-3\":{\"title\":\"$:/config/ShortcutInfo/heading-3\",\"text\":\"{{$:/language/Buttons/Heading3/Hint}}\"},\"$:/config/ShortcutInfo/heading-4\":{\"title\":\"$:/config/ShortcutInfo/heading-4\",\"text\":\"{{$:/language/Buttons/Heading4/Hint}}\"},\"$:/config/ShortcutInfo/heading-5\":{\"title\":\"$:/config/ShortcutInfo/heading-5\",\"text\":\"{{$:/language/Buttons/Heading5/Hint}}\"},\"$:/config/ShortcutInfo/heading-6\":{\"title\":\"$:/config/ShortcutInfo/heading-6\",\"text\":\"{{$:/language/Buttons/Heading6/Hint}}\"},\"$:/config/ShortcutInfo/input-accept\":{\"title\":\"$:/config/ShortcutInfo/input-accept\",\"text\":\"{{$:/language/Shortcuts/Input/Accept/Hint}}\"},\"$:/config/ShortcutInfo/input-accept-variant\":{\"title\":\"$:/config/ShortcutInfo/input-accept-variant\",\"text\":\"{{$:/language/Shortcuts/Input/AcceptVariant/Hint}}\"},\"$:/config/ShortcutInfo/input-cancel\":{\"title\":\"$:/config/ShortcutInfo/input-cancel\",\"text\":\"{{$:/language/Shortcuts/Input/Cancel/Hint}}\"},\"$:/config/ShortcutInfo/input-down\":{\"title\":\"$:/config/ShortcutInfo/input-down\",\"text\":\"{{$:/language/Shortcuts/Input/Down/Hint}}\"},\"$:/config/ShortcutInfo/input-tab-left\":{\"title\":\"$:/config/ShortcutInfo/input-tab-left\",\"text\":\"{{$:/language/Shortcuts/Input/Tab-Left/Hint}}\"},\"$:/config/ShortcutInfo/input-tab-right\":{\"title\":\"$:/config/ShortcutInfo/input-tab-right\",\"text\":\"{{$:/language/Shortcuts/Input/Tab-Right/Hint}}\"},\"$:/config/ShortcutInfo/input-up\":{\"title\":\"$:/config/ShortcutInfo/input-up\",\"text\":\"{{$:/language/Shortcuts/Input/Up/Hint}}\"},\"$:/config/ShortcutInfo/italic\":{\"title\":\"$:/config/ShortcutInfo/italic\",\"text\":\"{{$:/language/Buttons/Italic/Hint}}\"},\"$:/config/ShortcutInfo/layout-switcher\":{\"title\":\"$:/config/ShortcutInfo/layout-switcher\",\"text\":\"{{$:/language/LayoutSwitcher/Description}}\"},\"$:/config/ShortcutInfo/link\":{\"title\":\"$:/config/ShortcutInfo/link\",\"text\":\"{{$:/language/Buttons/Link/Hint}}\"},\"$:/config/ShortcutInfo/linkify\":{\"title\":\"$:/config/ShortcutInfo/linkify\",\"text\":\"{{$:/language/Buttons/Linkify/Hint}}\"},\"$:/config/ShortcutInfo/list-bullet\":{\"title\":\"$:/config/ShortcutInfo/list-bullet\",\"text\":\"{{$:/language/Buttons/ListBullet/Hint}}\"},\"$:/config/ShortcutInfo/list-number\":{\"title\":\"$:/config/ShortcutInfo/list-number\",\"text\":\"{{$:/language/Buttons/ListNumber/Hint}}\"},\"$:/config/ShortcutInfo/mono-block\":{\"title\":\"$:/config/ShortcutInfo/mono-block\",\"text\":\"{{$:/language/Buttons/MonoBlock/Hint}}\"},\"$:/config/ShortcutInfo/mono-line\":{\"title\":\"$:/config/ShortcutInfo/mono-line\",\"text\":\"{{$:/language/Buttons/MonoLine/Hint}}\"},\"$:/config/ShortcutInfo/new-image\":{\"title\":\"$:/config/ShortcutInfo/new-image\",\"text\":\"{{$:/language/Buttons/NewImage/Hint}}\"},\"$:/config/ShortcutInfo/new-journal\":{\"title\":\"$:/config/ShortcutInfo/new-journal\",\"text\":\"{{$:/language/Buttons/NewJournal/Hint}}\"},\"$:/config/ShortcutInfo/new-tiddler\":{\"title\":\"$:/config/ShortcutInfo/new-tiddler\",\"text\":\"{{$:/language/Buttons/NewTiddler/Hint}}\"},\"$:/config/ShortcutInfo/picture\":{\"title\":\"$:/config/ShortcutInfo/picture\",\"text\":\"{{$:/language/Buttons/Picture/Hint}}\"},\"$:/config/ShortcutInfo/preview\":{\"title\":\"$:/config/ShortcutInfo/preview\",\"text\":\"{{$:/language/Buttons/Preview/Hint}}\"},\"$:/config/ShortcutInfo/quote\":{\"title\":\"$:/config/ShortcutInfo/quote\",\"text\":\"{{$:/language/Buttons/Quote/Hint}}\"},\"$:/config/ShortcutInfo/save-tiddler\":{\"title\":\"$:/config/ShortcutInfo/save-tiddler\",\"text\":\"{{$:/language/Buttons/Save/Hint}}\"},\"$:/config/ShortcutInfo/save-wiki\":{\"title\":\"$:/config/ShortcutInfo/save-wiki\",\"text\":\"{{$:/language/Buttons/SaveWiki/Hint}}\"},\"$:/config/ShortcutInfo/sidebar-search\":{\"title\":\"$:/config/ShortcutInfo/sidebar-search\",\"text\":\"{{$:/language/Buttons/SidebarSearch/Hint}}\"},\"$:/config/ShortcutInfo/stamp\":{\"title\":\"$:/config/ShortcutInfo/stamp\",\"text\":\"{{$:/language/Buttons/Stamp/Hint}}\"},\"$:/config/ShortcutInfo/strikethrough\":{\"title\":\"$:/config/ShortcutInfo/strikethrough\",\"text\":\"{{$:/language/Buttons/Strikethrough/Hint}}\"},\"$:/config/ShortcutInfo/subscript\":{\"title\":\"$:/config/ShortcutInfo/subscript\",\"text\":\"{{$:/language/Buttons/Subscript/Hint}}\"},\"$:/config/ShortcutInfo/superscript\":{\"title\":\"$:/config/ShortcutInfo/superscript\",\"text\":\"{{$:/language/Buttons/Superscript/Hint}}\"},\"$:/config/ShortcutInfo/toggle-sidebar\":{\"title\":\"$:/config/ShortcutInfo/toggle-sidebar\",\"text\":\"{{$:/language/Buttons/ToggleSidebar/Hint}}\"},\"$:/config/ShortcutInfo/transcludify\":{\"title\":\"$:/config/ShortcutInfo/transcludify\",\"text\":\"{{$:/language/Buttons/Transcludify/Hint}}\"},\"$:/config/ShortcutInfo/underline\":{\"title\":\"$:/config/ShortcutInfo/underline\",\"text\":\"{{$:/language/Buttons/Underline/Hint}}\"},\"$:/config/StoryTiddlerTemplateFilters/draft\":{\"title\":\"$:/config/StoryTiddlerTemplateFilters/draft\",\"tags\":\"$:/tags/StoryTiddlerTemplateFilter\",\"text\":\"[is[draft]then{$:/config/ui/EditTemplate}]\"},\"$:/config/StoryTiddlerTemplateFilters/default\":{\"title\":\"$:/config/StoryTiddlerTemplateFilters/default\",\"tags\":\"$:/tags/StoryTiddlerTemplateFilter\",\"text\":\"[{$:/config/ui/ViewTemplate}]\"},\"$:/config/SwitcherTargets/layout\":{\"title\":\"$:/config/SwitcherTargets/layout\",\"text\":\"$:/snippets/LayoutSwitcher\"},\"$:/config/SwitcherTargets/language\":{\"title\":\"$:/config/SwitcherTargets/language\",\"text\":\"$:/snippets/languageswitcher\"},\"$:/config/SwitcherTargets/palette\":{\"title\":\"$:/config/SwitcherTargets/palette\",\"text\":\"$:/core/ui/ControlPanel/Palette\"},\"$:/config/SwitcherTargets/theme\":{\"title\":\"$:/config/SwitcherTargets/theme\",\"text\":\"$:/core/ui/ControlPanel/Theme\"},\"$:/config/SyncFilter\":{\"title\":\"$:/config/SyncFilter\",\"text\":\"[is[tiddler]] -[[$:/core]] -[[$:/library/sjcl.js]] -[prefix[$:/boot/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/isEncrypted]] -[prefix[$:/status/]] -[prefix[$:/state/]] -[prefix[$:/temp/]]\\n\"},\"$:/config/SyncSystemTiddlersFromServer\":{\"title\":\"$:/config/SyncSystemTiddlersFromServer\",\"text\":\"no\"},\"$:/config/Tags/MinLength\":{\"title\":\"$:/config/Tags/MinLength\",\"text\":\"0\"},\"$:/config/TextEditor/EditorHeight/Height\":{\"title\":\"$:/config/TextEditor/EditorHeight/Height\",\"text\":\"400px\"},\"$:/config/TextEditor/EditorHeight/Mode\":{\"title\":\"$:/config/TextEditor/EditorHeight/Mode\",\"text\":\"auto\"},\"$:/config/TiddlerColourFilters/color-field\":{\"title\":\"$:/config/TiddlerColourFilters/color-field\",\"tags\":\"$:/tags/TiddlerColourFilter\",\"text\":\"[has[color]then{!!color}]\"},\"$:/config/TiddlerColourFilters/default\":{\"title\":\"$:/config/TiddlerColourFilters/default\",\"tags\":\"$:/tags/TiddlerColourFilter\",\"text\":\"[[$:/config/DefaultTiddlerColour]has[text]get[text]trim[]]\"},\"$:/config/TiddlerIconFilters/icon-field\":{\"title\":\"$:/config/TiddlerIconFilters/icon-field\",\"tags\":\"$:/tags/TiddlerIconFilter\",\"text\":\"[has[icon]then{!!icon}]\"},\"$:/config/TiddlerIconFilters/default\":{\"title\":\"$:/config/TiddlerIconFilters/default\",\"tags\":\"$:/tags/TiddlerIconFilter\",\"text\":\"[{$:/config/DefaultTiddlerIcon}has[text]]\"},\"$:/config/TiddlerInfo/Default\":{\"title\":\"$:/config/TiddlerInfo/Default\",\"text\":\"$:/core/ui/TiddlerInfo/Fields\"},\"$:/config/TiddlerInfo/Mode\":{\"title\":\"$:/config/TiddlerInfo/Mode\",\"text\":\"popup\"},\"$:/config/Tiddlers/TitleLinks\":{\"title\":\"$:/config/Tiddlers/TitleLinks\",\"text\":\"no\"},\"$:/config/Toolbar/ButtonClass\":{\"title\":\"$:/config/Toolbar/ButtonClass\",\"text\":\"tc-btn-invisible\"},\"$:/config/Toolbar/Icons\":{\"title\":\"$:/config/Toolbar/Icons\",\"text\":\"yes\"},\"$:/config/Toolbar/Text\":{\"title\":\"$:/config/Toolbar/Text\",\"text\":\"no\"},\"$:/config/ViewTemplateBodyFilters/system\":{\"title\":\"$:/config/ViewTemplateBodyFilters/system\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[prefix[$:/boot/]] [prefix[$:/config/]] [prefix[$:/core/macros]] [prefix[$:/core/save/]] [prefix[$:/core/templates/]] [prefix[$:/core/ui/]split[/]count[]compare:number:eq[4]] [prefix[$:/info/]] [prefix[$:/language/]] [prefix[$:/languages/]] [prefix[$:/snippets/]] [prefix[$:/state/]] [prefix[$:/status/]] [prefix[$:/info/]] [prefix[$:/temp/]] +[limit[1]then[$:/core/ui/ViewTemplate/body/code]]\"},\"$:/config/ViewTemplateBodyFilters/code-body\":{\"title\":\"$:/config/ViewTemplateBodyFilters/code-body\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[field:code-body[yes]then[$:/core/ui/ViewTemplate/body/code]]\"},\"$:/config/ViewTemplateBodyFilters/import\":{\"title\":\"$:/config/ViewTemplateBodyFilters/import\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[field:plugin-type[import]then[$:/core/ui/ViewTemplate/body/import]]\"},\"$:/config/ViewTemplateBodyFilters/plugin\":{\"title\":\"$:/config/ViewTemplateBodyFilters/plugin\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[has[plugin-type]then[$:/core/ui/ViewTemplate/body/plugin]]\"},\"$:/config/ViewTemplateBodyFilters/hide-body\":{\"title\":\"$:/config/ViewTemplateBodyFilters/hide-body\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[field:hide-body[yes]then[$:/core/ui/ViewTemplate/body/blank]]\"},\"$:/config/ViewTemplateBodyFilters/default\":{\"title\":\"$:/config/ViewTemplateBodyFilters/default\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[[$:/core/ui/ViewTemplate/body/default]]\"},\"$:/config/ViewTemplateTitleFilters/system\":{\"title\":\"$:/config/ViewTemplateTitleFilters/system\",\"tags\":\"$:/tags/ViewTemplateTitleFilter\",\"text\":\"[prefix[$:/]then[$:/core/ui/ViewTemplate/title/system]]\"},\"$:/config/ViewTemplateTitleFilters/default\":{\"title\":\"$:/config/ViewTemplateTitleFilters/default\",\"tags\":\"$:/tags/ViewTemplateTitleFilter\",\"text\":\"[[$:/core/ui/ViewTemplate/title/default]]\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/clone\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/clone\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/close-others\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/close-others\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/export-tiddler\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/export-tiddler\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/info\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/info\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/more-tiddler-actions\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/more-tiddler-actions\",\"text\":\"show\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-here\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-here\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-journal-here\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-journal-here\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/open-window\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/open-window\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/permalink\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/permalink\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/permaview\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/permaview\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/delete\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/delete\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold-bar\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold-bar\",\"text\":\"hide\"},\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold-others\":{\"title\":\"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/fold-others\",\"text\":\"hide\"},\"$:/config/shortcuts-mac/bold\":{\"title\":\"$:/config/shortcuts-mac/bold\",\"text\":\"meta-B\"},\"$:/config/shortcuts-mac/italic\":{\"title\":\"$:/config/shortcuts-mac/italic\",\"text\":\"meta-I\"},\"$:/config/shortcuts-mac/underline\":{\"title\":\"$:/config/shortcuts-mac/underline\",\"text\":\"meta-U\"},\"$:/config/shortcuts-mac/new-image\":{\"title\":\"$:/config/shortcuts-mac/new-image\",\"text\":\"ctrl-I\"},\"$:/config/shortcuts-mac/new-journal\":{\"title\":\"$:/config/shortcuts-mac/new-journal\",\"text\":\"ctrl-J\"},\"$:/config/shortcuts-mac/new-tiddler\":{\"title\":\"$:/config/shortcuts-mac/new-tiddler\",\"text\":\"ctrl-N\"},\"$:/config/shortcuts-mac/save-wiki\":{\"title\":\"$:/config/shortcuts-mac/save-wiki\",\"text\":\"meta-S\"},\"$:/config/shortcuts-not-mac/bold\":{\"title\":\"$:/config/shortcuts-not-mac/bold\",\"text\":\"ctrl-B\"},\"$:/config/shortcuts-not-mac/italic\":{\"title\":\"$:/config/shortcuts-not-mac/italic\",\"text\":\"ctrl-I\"},\"$:/config/shortcuts-not-mac/underline\":{\"title\":\"$:/config/shortcuts-not-mac/underline\",\"text\":\"ctrl-U\"},\"$:/config/shortcuts-not-mac/new-image\":{\"title\":\"$:/config/shortcuts-not-mac/new-image\",\"text\":\"alt-I\"},\"$:/config/shortcuts-not-mac/new-journal\":{\"title\":\"$:/config/shortcuts-not-mac/new-journal\",\"text\":\"alt-J\"},\"$:/config/shortcuts-not-mac/new-tiddler\":{\"title\":\"$:/config/shortcuts-not-mac/new-tiddler\",\"text\":\"alt-N\"},\"$:/config/shortcuts/add-field\":{\"title\":\"$:/config/shortcuts/add-field\",\"text\":\"enter\"},\"$:/config/shortcuts/advanced-search\":{\"title\":\"$:/config/shortcuts/advanced-search\",\"text\":\"ctrl-shift-A\"},\"$:/config/shortcuts/advanced-search-sidebar\":{\"title\":\"$:/config/shortcuts/advanced-search-sidebar\",\"text\":\"alt-Enter\"},\"$:/config/shortcuts/cancel-edit-tiddler\":{\"title\":\"$:/config/shortcuts/cancel-edit-tiddler\",\"text\":\"escape\"},\"$:/config/shortcuts/change-sidebar-layout\":{\"title\":\"$:/config/shortcuts/change-sidebar-layout\",\"text\":\"shift-alt-Down\"},\"$:/config/shortcuts/delete-field\":{\"title\":\"$:/config/shortcuts/delete-field\",\"text\":\"shift-alt-D\"},\"$:/config/shortcuts/excise\":{\"title\":\"$:/config/shortcuts/excise\",\"text\":\"ctrl-E\"},\"$:/config/shortcuts/sidebar-search\":{\"title\":\"$:/config/shortcuts/sidebar-search\",\"text\":\"ctrl-shift-F\"},\"$:/config/shortcuts/heading-1\":{\"title\":\"$:/config/shortcuts/heading-1\",\"text\":\"ctrl-1\"},\"$:/config/shortcuts/heading-2\":{\"title\":\"$:/config/shortcuts/heading-2\",\"text\":\"ctrl-2\"},\"$:/config/shortcuts/heading-3\":{\"title\":\"$:/config/shortcuts/heading-3\",\"text\":\"ctrl-3\"},\"$:/config/shortcuts/heading-4\":{\"title\":\"$:/config/shortcuts/heading-4\",\"text\":\"ctrl-4\"},\"$:/config/shortcuts/heading-5\":{\"title\":\"$:/config/shortcuts/heading-5\",\"text\":\"ctrl-5\"},\"$:/config/shortcuts/heading-6\":{\"title\":\"$:/config/shortcuts/heading-6\",\"text\":\"ctrl-6\"},\"$:/config/shortcuts/input-accept\":{\"title\":\"$:/config/shortcuts/input-accept\",\"text\":\"Enter\"},\"$:/config/shortcuts/input-accept-variant\":{\"title\":\"$:/config/shortcuts/input-accept-variant\",\"text\":\"ctrl-Enter\"},\"$:/config/shortcuts/input-cancel\":{\"title\":\"$:/config/shortcuts/input-cancel\",\"text\":\"Escape\"},\"$:/config/shortcuts/input-down\":{\"title\":\"$:/config/shortcuts/input-down\",\"text\":\"Down\"},\"$:/config/shortcuts/input-tab-left\":{\"title\":\"$:/config/shortcuts/input-tab-left\",\"text\":\"alt-ctrl-Left\"},\"$:/config/shortcuts/input-tab-right\":{\"title\":\"$:/config/shortcuts/input-tab-right\",\"text\":\"alt-ctrl-Right\"},\"$:/config/shortcuts/input-up\":{\"title\":\"$:/config/shortcuts/input-up\",\"text\":\"Up\"},\"$:/config/shortcuts/layout-switcher\":{\"title\":\"$:/config/shortcuts/layout-switcher\",\"text\":\"ctrl-shift-L\"},\"$:/config/shortcuts/link\":{\"title\":\"$:/config/shortcuts/link\",\"text\":\"ctrl-L\"},\"$:/config/shortcuts/linkify\":{\"title\":\"$:/config/shortcuts/linkify\",\"text\":\"alt-shift-L\"},\"$:/config/shortcuts/list-bullet\":{\"title\":\"$:/config/shortcuts/list-bullet\",\"text\":\"ctrl-shift-L\"},\"$:/config/shortcuts/list-number\":{\"title\":\"$:/config/shortcuts/list-number\",\"text\":\"ctrl-shift-N\"},\"$:/config/shortcuts/mono-block\":{\"title\":\"$:/config/shortcuts/mono-block\",\"text\":\"ctrl-shift-M\"},\"$:/config/shortcuts/mono-line\":{\"title\":\"$:/config/shortcuts/mono-line\",\"text\":\"ctrl-M\"},\"$:/config/shortcuts/picture\":{\"title\":\"$:/config/shortcuts/picture\",\"text\":\"ctrl-shift-I\"},\"$:/config/shortcuts/preview\":{\"title\":\"$:/config/shortcuts/preview\",\"text\":\"alt-P\"},\"$:/config/shortcuts/quote\":{\"title\":\"$:/config/shortcuts/quote\",\"text\":\"ctrl-Q\"},\"$:/config/shortcuts/save-tiddler\":{\"title\":\"$:/config/shortcuts/save-tiddler\",\"text\":\"ctrl+enter\"},\"$:/config/shortcuts/save-wiki\":{\"title\":\"$:/config/shortcuts/save-wiki\",\"text\":\"ctrl-S\"},\"$:/config/shortcuts/stamp\":{\"title\":\"$:/config/shortcuts/stamp\",\"text\":\"ctrl-S\"},\"$:/config/shortcuts/strikethrough\":{\"title\":\"$:/config/shortcuts/strikethrough\",\"text\":\"ctrl-T\"},\"$:/config/shortcuts/subscript\":{\"title\":\"$:/config/shortcuts/subscript\",\"text\":\"ctrl-shift-B\"},\"$:/config/shortcuts/superscript\":{\"title\":\"$:/config/shortcuts/superscript\",\"text\":\"ctrl-shift-P\"},\"$:/config/shortcuts/toggle-sidebar\":{\"title\":\"$:/config/shortcuts/toggle-sidebar\",\"text\":\"alt-shift-S\"},\"$:/config/shortcuts/transcludify\":{\"title\":\"$:/config/shortcuts/transcludify\",\"text\":\"alt-shift-T\"},\"$:/config/ui/EditTemplate\":{\"title\":\"$:/config/ui/EditTemplate\",\"text\":\"$:/core/ui/EditTemplate\"},\"$:/config/ui/ViewTemplate\":{\"title\":\"$:/config/ui/ViewTemplate\",\"text\":\"$:/core/ui/ViewTemplate\"},\"$:/config/WikiParserRules/Inline/wikilink\":{\"title\":\"$:/config/WikiParserRules/Inline/wikilink\",\"text\":\"enable\"},\"$:/snippets/currpalettepreview\":{\"title\":\"$:/snippets/currpalettepreview\",\"text\":\"\\\\define resolve-colour(macrocall)\\n\\\\import $:/core/macros/utils\\n\\\\whitespace trim\\n\u003C$wikify name=\\\"name\\\" text=\\\"\\\"\\\"$macrocall$\\\"\\\"\\\">\\n\u003C\u003Cname>>\\n\u003C/$wikify>\\n\\\\end\\n\\\\define swatchStyle()\\nbackground-color: $(swatchColour)$;\\n\\\\end\\n\\\\define swatch-inner()\\n\u003C$set name=\\\"swatchColour\\\" value={{##$(colourResolved)$}}>\\n\u003C$list filter=\\\"[\u003CswatchColour>!prefix[\u003C\u003Ccolour ]!suffix[>>]]\\\" variable=\\\"ignore\\\">\\n\u003Cdiv class=\\\"tc-swatch\\\" style=\u003C\u003CswatchStyle>> title=\u003C\u003CswatchTitle>>/>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003CswatchColour>prefix[\u003C\u003Ccolour ]suffix[>>]]\\\" variable=\\\"ignore\\\">\\n\u003C$wikify name=\\\"colourResolved\\\" text=\\\"\\\"\\\"\u003C$macrocall $name=\\\"resolve-colour\\\" macrocall=\u003C\u003CswatchColour>>/>\\\"\\\"\\\">\\n\u003C\u003Cswatch-inner>>\\n\u003C/$wikify>\\n\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\\\define swatch()\\n\u003C$set name=\\\"swatchColour\\\" value={{##$(colour)$}}>\\n\u003C$set name=\\\"swatchTitle\\\" value=\u003C\u003Ccolour>>>\\n\u003C$list filter=\\\"[\u003CswatchColour>!prefix[\u003C\u003Ccolour ]!suffix[>>]]\\\" variable=\\\"ignore\\\">\\n\u003Cdiv class=\\\"tc-swatch\\\" style=\u003C\u003CswatchStyle>> title=\u003C\u003CswatchTitle>>/>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003CswatchColour>prefix[\u003C\u003Ccolour ]suffix[>>]]\\\" variable=\\\"ignore\\\">\\n\u003C$wikify name=\\\"colourResolved\\\" text=\\\"\\\"\\\"\u003C$macrocall $name=\\\"resolve-colour\\\" macrocall=\u003C\u003CswatchColour>>/>\\\"\\\"\\\">\\n\u003C\u003Cswatch-inner>>\\n\u003C/$wikify>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$set>\\n\\\\end\\n\u003Cdiv class=\\\"tc-swatches-horiz\\\">\u003C$list filter=\\\"\\nforeground\\nbackground\\nmuted-foreground\\nprimary\\npage-background\\ntab-background\\ntiddler-info-background\\n\\\" variable=\\\"colour\\\">\u003C\u003Cswatch>>\u003C/$list>\u003C/div>\\n\"},\"$:/snippets/DebugStylesheets\":{\"title\":\"$:/snippets/DebugStylesheets\",\"text\":\"\u003Cstyle>[test]{list-style:'❌'}\u003C/style>\\n\u003Cul>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Stylesheet]has[modified]]\\\" counter=\\\"n\\\">\\n\u003Cstyle>{{!!text}}[test=\\\"\u003C\u003Cn>>\\\"]{list-style:disc;}\u003C/style>\\n\u003Cli test=\u003C\u003Cn>>>\u003C$link/>\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\"},\"$:/snippets/download-wiki-button\":{\"title\":\"$:/snippets/download-wiki-button\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Tools/Download/\\n\u003C$button class=\\\"tc-btn-big-green\\\">\\n\u003C$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/core/save/all\\\" filename=\\\"index.html\\\"/>\\n\u003C\u003Clingo Full/Caption>> {{$:/core/images/save-button}}\\n\u003C/$button>\"},\"$:/language\":{\"title\":\"$:/language\",\"text\":\"$:/languages/en-GB\"},\"$:/snippets/languageswitcher\":{\"title\":\"$:/snippets/languageswitcher\",\"text\":\"\\\\define flag-title()\\n$(languagePluginTitle)$/icon\\n\\\\end\\n\\n\u003C$linkcatcher to=\\\"$:/language\\\">\\n\u003Cdiv class=\\\"tc-chooser tc-language-chooser\\\">\\n\u003C$list filter=\\\"[[$:/languages/en-GB]] [plugin-type[language]sort[description]]\\\">\\n\u003C$set name=\\\"cls\\\" filter=\\\"[all[current]field:title{$:/language}]\\\" value=\\\"tc-chooser-item tc-chosen\\\" emptyValue=\\\"tc-chooser-item\\\">\u003Cdiv class=\u003C\u003Ccls>>>\\n\u003C$link>\\n\u003Cspan class=\\\"tc-image-button\\\">\\n\u003C$set name=\\\"languagePluginTitle\\\" value=\u003C\u003CcurrentTiddler>>>\\n\u003C$transclude subtiddler=\u003C\u003Cflag-title>>>\\n\u003C$list filter=\\\"[all[current]field:title[$:/languages/en-GB]]\\\">\\n\u003C$transclude tiddler=\\\"$:/languages/en-GB/icon\\\"/>\\n\u003C/$list>\\n\u003C/$transclude>\\n\u003C/$set>\\n\u003C/span>\\n\u003C$view field=\\\"description\\\">\\n\u003C$view field=\\\"name\\\">\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$view>\\n\u003C/$view>\\n\u003C/$link>\\n\u003C/div>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$linkcatcher>\"},\"$:/core/macros/CSS\":{\"title\":\"$:/core/macros/CSS\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define colour(name)\\n\u003C$transclude tiddler={{$:/palette}} index=\\\"$name$\\\">\u003C$transclude tiddler=\\\"$:/palettes/Vanilla\\\" index=\\\"$name$\\\">\u003C$transclude tiddler=\\\"$:/config/DefaultColourMappings/$name$\\\"/>\u003C/$transclude>\u003C/$transclude>\\n\\\\end\\n\\n\\\\define color(name)\\n\u003C\u003Ccolour $name$>>\\n\\\\end\\n\\n\\\\define box-shadow(shadow)\\n``\\n  -webkit-box-shadow: $shadow$;\\n     -moz-box-shadow: $shadow$;\\n          box-shadow: $shadow$;\\n``\\n\\\\end\\n\\n\\\\define filter(filter)\\n``\\n  -webkit-filter: $filter$;\\n     -moz-filter: $filter$;\\n          filter: $filter$;\\n``\\n\\\\end\\n\\n\\\\define transition(transition)\\n``\\n  -webkit-transition: $transition$;\\n     -moz-transition: $transition$;\\n          transition: $transition$;\\n``\\n\\\\end\\n\\n\\\\define transform-origin(origin)\\n``\\n  -webkit-transform-origin: $origin$;\\n     -moz-transform-origin: $origin$;\\n          transform-origin: $origin$;\\n``\\n\\\\end\\n\\n\\\\define background-linear-gradient(gradient)\\n``\\nbackground-image: linear-gradient($gradient$);\\nbackground-image: -o-linear-gradient($gradient$);\\nbackground-image: -moz-linear-gradient($gradient$);\\nbackground-image: -webkit-linear-gradient($gradient$);\\nbackground-image: -ms-linear-gradient($gradient$);\\n``\\n\\\\end\\n\\n\\\\define column-count(columns)\\n``\\n-moz-column-count: $columns$;\\n-webkit-column-count: $columns$;\\ncolumn-count: $columns$;\\n``\\n\\\\end\\n\\n\\\\define datauri(title)\\n\u003C$macrocall $name=\\\"makedatauri\\\" type={{$title$!!type}} text={{$title$}} _canonical_uri={{$title$!!_canonical_uri}}/>\\n\\\\end\\n\\n\\\\define if-sidebar(text)\\n\u003C$reveal state=\\\"$:/state/sidebar\\\" type=\\\"match\\\" text=\\\"yes\\\" default=\\\"yes\\\">$text$\u003C/$reveal>\\n\\\\end\\n\\n\\\\define if-no-sidebar(text)\\n\u003C$reveal state=\\\"$:/state/sidebar\\\" type=\\\"nomatch\\\" text=\\\"yes\\\" default=\\\"yes\\\">$text$\u003C/$reveal>\\n\\\\end\\n\\n\\\\define if-background-attachment(text)\\n\u003C$reveal state=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\" type=\\\"nomatch\\\" text=\\\"\\\">$text$\u003C/$reveal>\\n\\\\end\\n\"},\"$:/core/macros/colour-picker\":{\"title\":\"$:/core/macros/colour-picker\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define colour-picker-update-recent()\\n\u003C$action-listops\\n\\t$tiddler=\\\"$:/config/ColourPicker/Recent\\\"\\n\\t$subfilter=\\\"$(colour-picker-value)$ [list[$:/config/ColourPicker/Recent]remove[$(colour-picker-value)$]] +[limit[8]]\\\"\\n/>\\n\\\\end\\n\\n\\\\define colour-picker-inner(actions)\\n\u003C$button tag=\\\"a\\\" tooltip=\\\"\\\"\\\"$(colour-picker-value)$\\\"\\\"\\\">\\n\\n$(colour-picker-update-recent)$\\n\\n$actions$\\n\\n\u003Cspan style=\\\"display:inline-block; background-color: $(colour-picker-value)$; width: 100%; height: 100%; border-radius: 50%;\\\"/>\\n\\n\u003C/$button>\\n\\\\end\\n\\n\\\\define colour-picker-recent-inner(actions)\\n\u003C$set name=\\\"colour-picker-value\\\" value=\\\"$(recentColour)$\\\">\\n\u003C$macrocall $name=\\\"colour-picker-inner\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define colour-picker-recent(actions)\\n{{$:/language/ColourPicker/Recent}} \u003C$list filter=\\\"[list[$:/config/ColourPicker/Recent]]\\\" variable=\\\"recentColour\\\">\\n\u003C$macrocall $name=\\\"colour-picker-recent-inner\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\u003C/$list>\\n\\\\end\\n\\n\\\\define colour-picker(actions)\\n\u003Cdiv class=\\\"tc-colour-chooser\\\">\\n\\n\u003C$macrocall $name=\\\"colour-picker-recent\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\\n---\\n\\n\u003C$list filter=\\\"LightPink Pink Crimson LavenderBlush PaleVioletRed HotPink DeepPink MediumVioletRed Orchid Thistle Plum Violet Magenta Fuchsia DarkMagenta Purple MediumOrchid DarkViolet DarkOrchid Indigo BlueViolet MediumPurple MediumSlateBlue SlateBlue DarkSlateBlue Lavender GhostWhite Blue MediumBlue MidnightBlue DarkBlue Navy RoyalBlue CornflowerBlue LightSteelBlue LightSlateGrey SlateGrey DodgerBlue AliceBlue SteelBlue LightSkyBlue SkyBlue DeepSkyBlue LightBlue PowderBlue CadetBlue Azure LightCyan PaleTurquoise Cyan Aqua DarkTurquoise DarkSlateGrey DarkCyan Teal MediumTurquoise LightSeaGreen Turquoise Aquamarine MediumAquamarine MediumSpringGreen MintCream SpringGreen MediumSeaGreen SeaGreen Honeydew LightGreen PaleGreen DarkSeaGreen LimeGreen Lime ForestGreen Green DarkGreen Chartreuse LawnGreen GreenYellow DarkOliveGreen YellowGreen OliveDrab Beige LightGoldenrodYellow Ivory LightYellow Yellow Olive DarkKhaki LemonChiffon PaleGoldenrod Khaki Gold Cornsilk Goldenrod DarkGoldenrod FloralWhite OldLace Wheat Moccasin Orange PapayaWhip BlanchedAlmond NavajoWhite AntiqueWhite Tan BurlyWood Bisque DarkOrange Linen Peru PeachPuff SandyBrown Chocolate SaddleBrown Seashell Sienna LightSalmon Coral OrangeRed DarkSalmon Tomato MistyRose Salmon Snow LightCoral RosyBrown IndianRed Red Brown FireBrick DarkRed Maroon White WhiteSmoke Gainsboro LightGrey Silver DarkGrey Grey DimGrey Black\\\" variable=\\\"colour-picker-value\\\">\\n\u003C$macrocall $name=\\\"colour-picker-inner\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$list>\\n\\n---\\n\\n\u003C$edit-text tiddler=\\\"$:/config/ColourPicker/New\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder=\\\"\\\"/>\\n\u003C$edit-text tiddler=\\\"$:/config/ColourPicker/New\\\" type=\\\"color\\\" tag=\\\"input\\\"/>\\n\u003C$set name=\\\"colour-picker-value\\\" value={{$:/config/ColourPicker/New}}>\\n\u003C$macrocall $name=\\\"colour-picker-inner\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$set>\\n\\n\u003C/div>\\n\\n\\\\end\\n\"},\"$:/core/macros/copy-to-clipboard\":{\"title\":\"$:/core/macros/copy-to-clipboard\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define copy-to-clipboard(src,class:\\\"tc-btn-invisible\\\",style)\\n\u003C$button class=\u003C\u003C__class__>> style=\u003C\u003C__style__>> message=\\\"tm-copy-to-clipboard\\\" param=\u003C\u003C__src__>> tooltip={{$:/language/Buttons/CopyToClipboard/Hint}}>\\n{{$:/core/images/copy-clipboard}} \u003C$text text={{$:/language/Buttons/CopyToClipboard/Caption}}/>\\n\u003C/$button>\\n\\\\end\\n\\n\\\\define copy-to-clipboard-above-right(src,class:\\\"tc-btn-invisible\\\",style)\\n\u003Cdiv style=\\\"position: relative;\\\">\\n\u003Cdiv style=\\\"position: absolute; bottom: 0; right: 0;\\\">\\n\u003C$macrocall $name=\\\"copy-to-clipboard\\\" src=\u003C\u003C__src__>> class=\u003C\u003C__class__>> style=\u003C\u003C__style__>>/>\\n\u003C/div>\\n\u003C/div>\\n\\\\end\\n\\n\"},\"$:/core/macros/diff\":{\"title\":\"$:/core/macros/diff\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define compareTiddlerText(sourceTiddlerTitle,sourceSubTiddlerTitle,destTiddlerTitle,destSubTiddlerTitle)\\n\u003C$set name=\\\"source\\\" tiddler=\u003C\u003C__sourceTiddlerTitle__>> subtiddler=\u003C\u003C__sourceSubTiddlerTitle__>>>\\n\u003C$set name=\\\"dest\\\" tiddler=\u003C\u003C__destTiddlerTitle__>> subtiddler=\u003C\u003C__destSubTiddlerTitle__>>>\\n\u003C$diff-text source=\u003C\u003Csource>> dest=\u003C\u003Cdest>>/>\\n\u003C/$set>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define compareTiddlers(sourceTiddlerTitle,sourceSubTiddlerTitle,destTiddlerTitle,destSubTiddlerTitle,exclude)\\n\u003Ctable class=\\\"tc-diff-tiddlers\\\">\\n\u003Ctbody>\\n\u003C$set name=\\\"sourceFields\\\" filter=\\\"[\u003C__sourceTiddlerTitle__>fields[]sort[]]\\\">\\n\u003C$set name=\\\"destFields\\\" filter=\\\"[\u003C__destSubTiddlerTitle__>subtiddlerfields\u003C__destTiddlerTitle__>sort[]]\\\">\\n\u003C$list filter=\\\"[enlist\u003CsourceFields>] [enlist\u003CdestFields>] -[enlist\u003C__exclude__>] +[sort[]]\\\" variable=\\\"fieldName\\\">\\n\u003Ctr>\\n\u003Cth>\\n\u003C$text text=\u003C\u003CfieldName>>/> \\n\u003C/th>\\n\u003Ctd>\\n\u003C$set name=\\\"source\\\" tiddler=\u003C\u003C__sourceTiddlerTitle__>> subtiddler=\u003C\u003C__sourceSubTiddlerTitle__>> field=\u003C\u003CfieldName>>>\\n\u003C$set name=\\\"dest\\\" tiddler=\u003C\u003C__destTiddlerTitle__>> subtiddler=\u003C\u003C__destSubTiddlerTitle__>> field=\u003C\u003CfieldName>>>\\n\u003C$diff-text source=\u003C\u003Csource>> dest=\u003C\u003Cdest>>>\\n\u003C/$diff-text>\\n\u003C/$set>\\n\u003C/$set>\\n\u003C/td>\\n\u003C/tr>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/$set>\\n\u003C/tbody>\\n\u003C/table>\\n\\\\end\\n\"},\"$:/core/macros/dumpvariables\":{\"title\":\"$:/core/macros/dumpvariables\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define dumpvariables()\\n\u003Cul>\\n\u003C$list filter=\\\"[variables[]]\\\" variable=\\\"varname\\\">\\n\u003Cli>\\n\u003Cstrong>\u003Ccode>\u003C$text text=\u003C\u003Cvarname>>/>\u003C/code>\u003C/strong>:\u003Cbr/>\\n\u003C$codeblock code={{{ [\u003Cvarname>getvariable[]] }}}/>\\n\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\\\\end\\n\"},\"$:/core/macros/export\":{\"title\":\"$:/core/macros/export\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define exportButtonFilename(baseFilename)\\n$baseFilename$$(extension)$\\n\\\\end\\n\\n\\\\define exportButton(exportFilter:\\\"[!is[system]sort[title]]\\\",lingoBase,baseFilename:\\\"tiddlers\\\")\\n\\\\whitespace trim\\n\u003C$vars hint={{{ [\u003C__lingoBase__>addsuffix[Hint]get[text]] }}} caption={{{  [\u003C__lingoBase__>addsuffix[Caption]get[text]] }}}>\\n\u003Cspan class=\\\"tc-popup-keep\\\">\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/export\\\">> tooltip=\u003C\u003Chint>> aria-label=\u003C\u003Ccaption>> class=\u003C\u003Ctv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\">\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/export-button}}\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Ctv-config-toolbar-text>match[yes]]\\\">\\n\u003Cspan class=\\\"tc-btn-text\\\">\u003C$text text=\u003C\u003Ccaption>>/>\u003C/span>\\n\u003C/$list>\\n\u003C/$button>\u003C/span>\u003C/$vars>\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/export\\\">> type=\\\"popup\\\" position=\\\"below\\\" animate=\\\"yes\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\">\\n\u003C$set name=\\\"count\\\" value={{{ [subfilter\u003C__exportFilter__>count[]] }}}>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Exporter]]\\\">\\n\u003C$list filter=\\\"[\u003CcurrentTiddler>has[condition]subfilter{!!condition}limit[1]] ~[\u003CcurrentTiddler>!has[condition]then[true]]\\\" variable=\\\"ignore\\\">\\n\u003C$button class=\\\"tc-btn-invisible\\\">\\n\u003C$action-sendmessage $message=\\\"tm-download-file\\\" $param=\u003C\u003CcurrentTiddler>> exportFilter=\u003C\u003C__exportFilter__>> filename={{{ [\u003C__baseFilename__>addsuffix{!!extension}] }}}/>\\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cqualify \\\"$:/state/popup/export\\\">>/>\\n\u003C$transclude field=\\\"description\\\"/>\\n\u003C/$button>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/$set>\\n\u003C/div>\\n\u003C/$reveal>\\n\\\\end\\n\"},\"$:/core/macros/image-picker\":{\"title\":\"$:/core/macros/image-picker\",\"created\":\"20170715180840889\",\"modified\":\"20170715180914005\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define image-picker-thumbnail(actions)\\n\u003C$button tag=\\\"a\\\" tooltip=\\\"\\\"\\\"$(imageTitle)$\\\"\\\"\\\">\\n$actions$\\n\u003C$transclude tiddler=\u003C\u003CimageTitle>>/>\\n\u003C/$button>\\n\\\\end\\n\\n\\\\define image-picker-list(filter,actions)\\n\u003C$list filter=\\\"\\\"\\\"$filter$\\\"\\\"\\\" variable=\\\"imageTitle\\\">\\n\u003C$macrocall $name=\\\"image-picker-thumbnail\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define image-picker(actions,filter:\\\"[all[shadows+tiddlers]is[image]] -[type[application/pdf]] +[!has[draft.of]$subfilter$sort[title]]\\\",subfilter:\\\"\\\")\\n\u003Cdiv class=\\\"tc-image-chooser\\\">\\n\u003C$vars state-system=\u003C\u003Cqualify \\\"$:/state/image-picker/system\\\">>>\\n\u003C$checkbox tiddler=\u003C\u003Cstate-system>> field=\\\"text\\\" checked=\\\"show\\\" unchecked=\\\"hide\\\" default=\\\"hide\\\">\\n{{$:/language/SystemTiddlers/Include/Prompt}}\\n\u003C/$checkbox>\\n\u003C$reveal state=\u003C\u003Cstate-system>> type=\\\"match\\\" text=\\\"hide\\\" default=\\\"hide\\\" tag=\\\"div\\\">\\n\u003C$macrocall $name=\\\"image-picker-list\\\" filter=\\\"\\\"\\\"$filter$ +[!is[system]]\\\"\\\"\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$reveal>\\n\u003C$reveal state=\u003C\u003Cstate-system>> type=\\\"nomatch\\\" text=\\\"hide\\\" default=\\\"hide\\\" tag=\\\"div\\\">\\n\u003C$macrocall $name=\\\"image-picker-list\\\" filter=\\\"\\\"\\\"$filter$\\\"\\\"\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$reveal>\\n\u003C/$vars>\\n\u003C/div>\\n\\\\end\\n\\n\\\\define image-picker-include-tagged-images(actions)\\n\u003C$macrocall $name=\\\"image-picker\\\" filter=\\\"[all[shadows+tiddlers]is[image]] [all[shadows+tiddlers]tag[$:/tags/Image]] -[type[application/pdf]] +[!has[draft.of]sort[title]]\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\\\\end\\n\"},\"$:/core/macros/keyboard-driven-input\":{\"title\":\"$:/core/macros/keyboard-driven-input\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define change-input-tab(stateTitle,tag,beforeafter,defaultState,actions)\\n\u003C$set name=\\\"tabsList\\\" filter=\\\"[all[shadows+tiddlers]tag\u003C__tag__>!has[draft.of]]\\\">\\n\u003C$vars currentState={{{ [\u003C__stateTitle__>!is[missing]get[text]] ~[\u003C__defaultState__>] }}} firstTab={{{ [enlist\u003CtabsList>nth[1]] }}} lastTab={{{ [enlist\u003CtabsList>last[]] }}}>\\n\u003C$set name=\\\"nextTab\\\" value={{{ [all[shadows+tiddlers]tag\u003C__tag__>!has[draft.of]$beforeafter$\u003CcurrentState>] ~[[$beforeafter$]removeprefix[after]suffix[]addprefix\u003CfirstTab>] ~[[$beforeafter$]removeprefix[before]suffix[]addprefix\u003ClastTab>] }}}>\\n\u003C$action-setfield $tiddler=\u003C\u003C__stateTitle__>> text=\u003C\u003CnextTab>>/>\\n$actions$\\n\u003C/$set>\\n\u003C/$vars>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define keyboard-input-actions()\\n\u003C$list filter=\\\"[\u003C__index__>match[]]\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003C__storeTitle__>> text={{{ [\u003C__tiddler__>get\u003C__field__>] }}}/>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003C__index__>!match[]]\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003C__storeTitle__>> text={{{ [\u003C__tiddler__>getindex\u003C__index__>] }}}/>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define input-next-actions-inner()\\n\u003C$list filter=\\\"[\u003CnextItem>minlength[1]]\\\" variable=\\\"ignore\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003C__selectionStateTitle__>> text=\u003C\u003CnextItem>>/>\\n\u003C$list filter=\\\"[\u003C__index__>match[]]\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003C__tiddler__>> $field=\u003C\u003C__field__>> $value={{{ [\u003CnextItem>] +[splitregexp[(?:.(?!-))+$]] }}}/>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003C__index__>!match[]]\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003C__tiddler__>> $index=\u003C\u003C__index__>> $value={{{ [\u003CnextItem>] +[splitregexp[(?:.(?!-))+$]] }}}/>\\n\u003C/$list>\\n\u003C$action-setfield $tiddler=\u003C\u003C__refreshTitle__>> text=\\\"yes\\\"/>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define input-next-actions(afterOrBefore:\\\"after\\\",reverse:\\\"\\\")\\n\u003C$list filter=\\\"[\u003C__storeTitle__>get[text]minlength\u003C__filterMinLength__>] [\u003C__filterMinLength__>match[0]] +[limit[1]]\\\" variable=\\\"ignore\\\">\\n\u003C$vars userInput={{{ [\u003C__storeTitle__>get[text]] }}} selectedItem={{{ [\u003C__selectionStateTitle__>get[text]] }}}>\\n\u003C$set name=\\\"configTiddler\\\" value={{{ [subfilter\u003C__configTiddlerFilter__>] }}}>\\n\u003C$vars primaryListFilter={{{ [\u003CconfigTiddler>get\u003C__firstSearchFilterField__>] }}} secondaryListFilter={{{ [\u003CconfigTiddler>get\u003C__secondSearchFilterField__>] }}}>\\n\u003C$set name=\\\"filteredList\\\" filter=\\\"[subfilter\u003CprimaryListFilter>addsuffix[-primaryList]] =[subfilter\u003CsecondaryListFilter>addsuffix[-secondaryList]]\\\">\\n\u003C$vars nextItem={{{ [enlist\u003CfilteredList>$afterOrBefore$\u003CselectedItem>] ~[enlist\u003CfilteredList>$reverse$nth[1]] }}} firstItem={{{ [enlist\u003CfilteredList>nth[1]] }}} lastItem={{{ [enlist\u003CfilteredList>last[]] }}}>\\n\u003C$list filter=\\\"[\u003CselectedItem>match\u003CfirstItem>!match\u003ClastItem>]\\\" variable=\\\"ignore\\\">\\n\u003C$set name=\\\"nextItem\\\" value={{{ [[$afterOrBefore$]match[before]then\u003CuserInput>addsuffix[-userInput]] ~[\u003CnextItem>] }}}>\\n\u003C\u003Cinput-next-actions-inner>>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003CselectedItem>match\u003ClastItem>!match\u003CfirstItem>]\\\" variable=\\\"ignore\\\">\\n\u003C$set name=\\\"nextItem\\\" value={{{ [[$afterOrBefore$]match[after]then\u003CuserInput>addsuffix[-userInput]] ~[\u003CnextItem>] }}}>\\n\u003C\u003Cinput-next-actions-inner>>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003CselectedItem>match\u003CfirstItem>match\u003ClastItem>]\\\" variable=\\\"ignore\\\">\\n\u003C$set name=\\\"nextItem\\\" value={{{ [\u003CuserInput>addsuffix[-userInput]] }}}>\\n\u003C\u003Cinput-next-actions-inner>>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003CselectedItem>!match\u003CfirstItem>!match\u003ClastItem>]\\\" variable=\\\"ignore\\\">\\n\u003C\u003Cinput-next-actions-inner>>\\n\u003C/$list>\\n\u003C/$vars>\\n\u003C/$set>\\n\u003C/$vars>\\n\u003C/$set>\\n\u003C/$vars>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define keyboard-driven-input(tiddler,storeTitle,field:\\\"text\\\",index:\\\"\\\",tag:\\\"input\\\",type,focus:\\\"\\\",inputAcceptActions,inputAcceptVariantActions,inputCancelActions,placeholder:\\\"\\\",default:\\\"\\\",class,focusPopup,rows,minHeight,tabindex,size,autoHeight,filterMinLength:\\\"0\\\",refreshTitle,selectionStateTitle,cancelPopups:\\\"\\\",configTiddlerFilter,firstSearchFilterField:\\\"first-search-filter\\\",secondSearchFilterField:\\\"second-search-filter\\\")\\n\\\\whitespace trim\\n\u003C$keyboard key=\\\"((input-accept))\\\" actions=\u003C\u003C__inputAcceptActions__>>>\\n\u003C$keyboard key=\\\"((input-accept-variant))\\\" actions=\u003C\u003C__inputAcceptVariantActions__>>>\\n\u003C$keyboard key=\\\"((input-up))\\\" actions=\u003C\u003Cinput-next-actions \\\"before\\\" \\\"reverse[]\\\">>>\\n\u003C$keyboard key=\\\"((input-down))\\\" actions=\u003C\u003Cinput-next-actions>>>\\n\u003C$keyboard key=\\\"((input-cancel))\\\" actions=\u003C\u003C__inputCancelActions__>>>\\n\u003C$edit-text tiddler=\u003C\u003C__tiddler__>> field=\u003C\u003C__field__>> index=\u003C\u003C__index__>> \\n\\t\\tinputActions=\u003C\u003Ckeyboard-input-actions>> tag=\u003C\u003C__tag__>> class=\u003C\u003C__class__>> \\n\\t\\tplaceholder=\u003C\u003C__placeholder__>> default=\u003C\u003C__default__>> focusPopup=\u003C\u003C__focusPopup__>> \\n\\t\\tfocus=\u003C\u003C__focus__>> type=\u003C\u003C__type__>> rows=\u003C\u003C__rows__>> minHeight=\u003C\u003C__minHeight__>> \\n\\t\\ttabindex=\u003C\u003C__tabindex__>> size=\u003C\u003C__size__>> autoHeight=\u003C\u003C__autoHeight__>> \\n\\t\\trefreshTitle=\u003C\u003C__refreshTitle__>> cancelPopups=\u003C\u003C__cancelPopups__>>/>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\u003C/$keyboard>\\n\\\\end\\n\"},\"$:/core/macros/lingo\":{\"title\":\"$:/core/macros/lingo\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define lingo-base()\\n$:/language/\\n\\\\end\\n\\n\\\\define lingo(title)\\n{{$(lingo-base)$$title$}}\\n\\\\end\\n\"},\"$:/core/macros/list\":{\"title\":\"$:/core/macros/list\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define list-links(filter,type:\\\"ul\\\",subtype:\\\"li\\\",class:\\\"\\\",emptyMessage)\\n\\\\whitespace trim\\n\u003C$type$ class=\\\"$class$\\\">\\n\u003C$list filter=\\\"$filter$\\\" emptyMessage=\u003C\u003C__emptyMessage__>>>\\n\u003C$subtype$>\\n\u003C$link to={{!!title}}>\\n\u003C$transclude field=\\\"caption\\\">\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$transclude>\\n\u003C/$link>\\n\u003C/$subtype$>\\n\u003C/$list>\\n\u003C/$type$>\\n\\\\end\\n\\n\\\\define list-links-draggable-drop-actions()\\n\u003C$action-listops $tiddler=\u003C\u003CtargetTiddler>> $field=\u003C\u003CtargetField>> $subfilter=\\\"+[insertbefore\u003CactionTiddler>,\u003CcurrentTiddler>]\\\"/>\\n\\\\end\\n\\n\\\\define list-links-draggable(tiddler,field:\\\"list\\\",type:\\\"ul\\\",subtype:\\\"li\\\",class:\\\"\\\",itemTemplate)\\n\\\\whitespace trim\\n\u003Cspan class=\\\"tc-links-draggable-list\\\">\\n\u003C$vars targetTiddler=\\\"\\\"\\\"$tiddler$\\\"\\\"\\\" targetField=\\\"\\\"\\\"$field$\\\"\\\"\\\">\\n\u003C$type$ class=\\\"$class$\\\">\\n\u003C$list filter=\\\"[list[$tiddler$!!$field$]]\\\">\\n\u003C$droppable actions=\u003C\u003Clist-links-draggable-drop-actions>> tag=\\\"\\\"\\\"$subtype$\\\"\\\"\\\" enable=\u003C\u003Ctv-enable-drag-and-drop>>>\\n\u003Cdiv class=\\\"tc-droppable-placeholder\\\"/>\\n\u003Cdiv>\\n\u003C$transclude tiddler=\\\"\\\"\\\"$itemTemplate$\\\"\\\"\\\">\\n\u003C$link to={{!!title}}>\\n\u003C$transclude field=\\\"caption\\\">\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$transclude>\\n\u003C/$link>\\n\u003C/$transclude>\\n\u003C/div>\\n\u003C/$droppable>\\n\u003C/$list>\\n\u003C$tiddler tiddler=\\\"\\\">\\n\u003C$droppable actions=\u003C\u003Clist-links-draggable-drop-actions>> tag=\\\"div\\\" enable=\u003C\u003Ctv-enable-drag-and-drop>>>\\n\u003Cdiv class=\\\"tc-droppable-placeholder\\\">\\n{{$:/core/images/blank}}\\n\u003C/div>\\n\u003Cdiv style=\\\"height:0.5em;\\\"/>\\n\u003C/$droppable>\\n\u003C/$tiddler>\\n\u003C/$type$>\\n\u003C/$vars>\\n\u003C/span>\\n\\\\end\\n\\n\\\\define list-tagged-draggable-drop-actions(tag)\\n\u003C!-- Save the current ordering of the tiddlers with this tag -->\\n\u003C$set name=\\\"order\\\" filter=\\\"[\u003C__tag__>tagging[]]\\\">\\n\u003C!-- Remove any list-after or list-before fields from the tiddlers with this tag -->\\n\u003C$list filter=\\\"[\u003C__tag__>tagging[]]\\\">\\n\u003C$action-deletefield $field=\\\"list-before\\\"/>\\n\u003C$action-deletefield $field=\\\"list-after\\\"/>\\n\u003C/$list>\\n\u003C!-- Save the new order to the Tag Tiddler -->\\n\u003C$action-listops $tiddler=\u003C\u003C__tag__>> $field=\\\"list\\\" $filter=\\\"+[enlist\u003Corder>] +[insertbefore\u003CactionTiddler>,\u003CcurrentTiddler>]\\\"/>\\n\u003C!-- Make sure the newly added item has the right tag -->\\n\u003C!-- Removing this line makes dragging tags within the dropdown work as intended -->\\n\u003C!--\u003C$action-listops $tiddler=\u003C\u003CactionTiddler>> $tags=\u003C\u003C__tag__>>/>-->\\n\u003C!-- Using the following 5 lines as replacement makes dragging titles from outside into the dropdown apply the tag -->\\n\u003C$list filter=\\\"[\u003CactionTiddler>!contains:tags\u003C__tag__>]\\\">\\n\u003C$fieldmangler tiddler=\u003C\u003CactionTiddler>>>\\n\u003C$action-sendmessage $message=\\\"tm-add-tag\\\" $param=\u003C\u003C__tag__>>/>\\n\u003C/$fieldmangler>\\n\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define list-tagged-draggable(tag,subFilter,emptyMessage,itemTemplate,elementTag:\\\"div\\\",storyview:\\\"\\\")\\n\\\\whitespace trim\\n\u003Cspan class=\\\"tc-tagged-draggable-list\\\">\\n\u003C$set name=\\\"tag\\\" value=\u003C\u003C__tag__>>>\\n\u003C$list filter=\\\"[\u003C__tag__>tagging[]$subFilter$]\\\" emptyMessage=\u003C\u003C__emptyMessage__>> storyview=\u003C\u003C__storyview__>>>\\n\u003C$elementTag$ class=\\\"tc-menu-list-item\\\">\\n\u003C$droppable actions=\\\"\\\"\\\"\u003C$macrocall $name=\\\"list-tagged-draggable-drop-actions\\\" tag=\u003C\u003C__tag__>>/>\\\"\\\"\\\" enable=\u003C\u003Ctv-enable-drag-and-drop>>>\\n\u003C$elementTag$ class=\\\"tc-droppable-placeholder\\\"/>\\n\u003C$elementTag$>\\n\u003C$transclude tiddler=\\\"\\\"\\\"$itemTemplate$\\\"\\\"\\\">\\n\u003C$link to={{!!title}}>\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$link>\\n\u003C/$transclude>\\n\u003C/$elementTag$>\\n\u003C/$droppable>\\n\u003C/$elementTag$>\\n\u003C/$list>\\n\u003C$tiddler tiddler=\\\"\\\">\\n\u003C$droppable actions=\\\"\\\"\\\"\u003C$macrocall $name=\\\"list-tagged-draggable-drop-actions\\\" tag=\u003C\u003C__tag__>>/>\\\"\\\"\\\" enable=\u003C\u003Ctv-enable-drag-and-drop>>>\\n\u003C$elementTag$ class=\\\"tc-droppable-placeholder\\\"/>\\n\u003C$elementTag$ style=\\\"height:0.5em;\\\">\\n\u003C/$elementTag$>\\n\u003C/$droppable>\\n\u003C/$tiddler>\\n\u003C/$set>\\n\u003C/span>\\n\\\\end\\n\"},\"$:/core/macros/tabs\":{\"title\":\"$:/core/macros/tabs\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define tabs(tabsList,default,state:\\\"$:/state/tab\\\",class,template,buttonTemplate,retain,actions,explicitState)\\n\u003C$set name=\\\"qualifiedState\\\" value=\u003C\u003Cqualify \\\"$state$\\\">>>\\n\u003C$vars tabsState={{{ [\u003C__explicitState__>minlength[1]] ~[\u003CqualifiedState>] }}}>\\n\u003Cdiv class=\\\"tc-tab-set $class$\\\">\\n\u003Cdiv class=\\\"tc-tab-buttons $class$\\\">\\n\u003C$list filter=\\\"$tabsList$\\\" variable=\\\"currentTab\\\" storyview=\\\"pop\\\">\u003C$set name=\\\"save-currentTiddler\\\" value=\u003C\u003CcurrentTiddler>>>\u003C$tiddler tiddler=\u003C\u003CcurrentTab>>>\u003C$button set=\u003C\u003CtabsState>> setTo=\u003C\u003CcurrentTab>> default=\\\"$default$\\\" selectedClass=\\\"tc-tab-selected\\\" tooltip={{!!tooltip}}>\\n\u003C$tiddler tiddler=\u003C\u003Csave-currentTiddler>>>\\n\u003C$set name=\\\"tv-wikilinks\\\" value=\\\"no\\\">\\n\u003C$transclude tiddler=\\\"$buttonTemplate$\\\" mode=\\\"inline\\\">\\n\u003C$transclude tiddler=\u003C\u003CcurrentTab>> field=\\\"caption\\\">\\n\u003C$macrocall $name=\\\"currentTab\\\" $type=\\\"text/plain\\\" $output=\\\"text/plain\\\"/>\\n\u003C/$transclude>\\n\u003C/$transclude>\\n\u003C/$set>\u003C/$tiddler>$actions$\u003C/$button>\u003C/$tiddler>\u003C/$set>\u003C/$list>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-tab-divider $class$\\\"/>\\n\u003Cdiv class=\\\"tc-tab-content $class$\\\">\\n\u003C$list filter=\\\"$tabsList$\\\" variable=\\\"currentTab\\\">\\n\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CtabsState>> text=\u003C\u003CcurrentTab>> default=\\\"$default$\\\" retain=\\\"\\\"\\\"$retain$\\\"\\\"\\\">\\n\\n\u003C$transclude tiddler=\\\"$template$\\\" mode=\\\"block\\\">\\n\\n\u003C$transclude tiddler=\u003C\u003CcurrentTab>> mode=\\\"block\\\"/>\\n\\n\u003C/$transclude>\\n\\n\u003C/$reveal>\\n\\n\u003C/$list>\\n\u003C/div>\\n\u003C/div>\\n\u003C/$vars>\\n\u003C/$set>\\n\\\\end\\n\"},\"$:/core/macros/tag-picker\":{\"title\":\"$:/core/macros/tag-picker\",\"tags\":\"$:/tags/Macro\",\"first-search-filter\":\"[tags[]!is[system]search:title\u003CuserInput>sort[]]\",\"second-search-filter\":\"[tags[]is[system]search:title\u003CuserInput>sort[]]\",\"text\":\"\\\\define get-tagpicker-focus-selector() [data-tiddler-title=\\\"$(currentTiddlerCSSEscaped)$\\\"] .tc-add-tag-name input\\n\\n\\\\define delete-tag-state-tiddlers() \u003C$action-deletetiddler $filter=\\\"[\u003CnewTagNameTiddler>] [\u003CstoreTitle>] [\u003CtagSelectionState>]\\\"/>\\n\\n\\\\define add-tag-actions(actions,tagField:\\\"tags\\\")\\n\u003C$set name=\\\"tag\\\" value={{{ [\u003C__tiddler__>get[text]] }}}>\\n\u003C$list filter=\\\"[\u003CsaveTiddler>!contains:$tagField$\u003Ctag>!match[]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\\n\u003C$action-listops $tiddler=\u003C\u003CsaveTiddler>> $field=\u003C\u003C__tagField__>> $subfilter=\\\"-[\u003Ctag>]\\\"/>\\n\\\"\\\"\\\">\\n\u003C$action-listops $tiddler=\u003C\u003CsaveTiddler>> $field=\u003C\u003C__tagField__>> $subfilter=\\\"[\u003Ctag>]\\\"/>\\n$actions$\\n\u003C/$list>\\n\u003C/$set>\\n\u003C\u003Cdelete-tag-state-tiddlers>>\\n\u003C$action-setfield $tiddler=\u003C\u003CrefreshTitle>> text=\\\"yes\\\"/>\\n\\\\end\\n\\n\\\\define clear-tags-actions-inner()\\n\u003C$list filter=\\\"[\u003CstoreTitle>has[text]] [\u003CnewTagNameTiddler>has[text]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\\\"\\\"\u003C\u003Ccancel-delete-tiddler-actions \\\"cancel\\\">>\\\"\\\"\\\">\\n\u003C\u003Cdelete-tag-state-tiddlers>>\\n\u003C/$list>\\n\\\\end\\n\\n\\\\define clear-tags-actions()\\n\u003C$set name=\\\"userInput\\\" value={{{ [\u003CstoreTitle>get[text]] }}}>\\n\u003C$list filter=\\\"[\u003CnewTagNameTiddler>get[text]!match\u003CuserInput>]\\\" emptyMessage=\\\"\\\"\\\"\u003C\u003Cclear-tags-actions-inner>>\\\"\\\"\\\">\\n\u003C$action-setfield $tiddler=\u003C\u003CnewTagNameTiddler>> text=\u003C\u003CuserInput>>/>\u003C$action-setfield $tiddler=\u003C\u003CrefreshTitle>> text=\\\"yes\\\"/>\\n\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define tag-picker-inner(actions,tagField:\\\"tags\\\")\\n\\\\whitespace trim\\n\u003C$vars newTagNameInputTiddlerQualified=\u003C\u003Cqualify \\\"$:/temp/NewTagName/input\\\">> newTagNameSelectionTiddlerQualified=\u003C\u003Cqualify \\\"$:/temp/NewTagName/selected-item\\\">> fallbackTarget={{$(palette)$##tag-background}} colourA={{$(palette)$##foreground}} colourB={{$(palette)$##background}}>\\n\u003C$vars storeTitle={{{ [\u003CnewTagNameInputTiddler>!match[]] ~[\u003CnewTagNameInputTiddlerQualified>] }}} tagSelectionState={{{ [\u003CnewTagNameSelectionTiddler>!match[]] ~[\u003CnewTagNameSelectionTiddlerQualified>] }}}>\\n\u003C$vars refreshTitle=\u003C\u003Cqualify \\\"$:/temp/NewTagName/refresh\\\">> nonSystemTagsFilter=\\\"[tags[]!is[system]search:title\u003CuserInput>sort[]]\\\" systemTagsFilter=\\\"[tags[]is[system]search:title\u003CuserInput>sort[]]\\\">\\n\u003Cdiv class=\\\"tc-edit-add-tag\\\">\\n\u003Cdiv>\\n\u003Cspan class=\\\"tc-add-tag-name tc-small-gap-right\\\">\\n\u003C$macrocall $name=\\\"keyboard-driven-input\\\" tiddler=\u003C\u003CnewTagNameTiddler>> storeTitle=\u003C\u003CstoreTitle>> refreshTitle=\u003C\u003CrefreshTitle>>\\n\\t\\tselectionStateTitle=\u003C\u003CtagSelectionState>> inputAcceptActions=\\\"\\\"\\\"\u003C$macrocall $name=\\\"add-tag-actions\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>>/>\\\"\\\"\\\"\\n\\t\\tinputCancelActions=\u003C\u003Cclear-tags-actions>> tag=\\\"input\\\" placeholder={{$:/language/EditTemplate/Tags/Add/Placeholder}}\\n\\t\\tfocusPopup=\u003C\u003Cqualify \\\"$:/state/popup/tags-auto-complete\\\">> class=\\\"tc-edit-texteditor tc-popup-handle\\\" tabindex=\u003C\u003CtabIndex>> \\n\\t\\tfocus={{{ [{$:/config/AutoFocus}match[tags]then[true]] ~[[false]] }}} filterMinLength={{$:/config/Tags/MinLength}} \\n\\t\\tcancelPopups=\u003C\u003CcancelPopups>> configTiddlerFilter=\\\"[[$:/core/macros/tag-picker]]\\\"/>\\n\u003C/span>\u003C$button popup=\u003C\u003Cqualify \\\"$:/state/popup/tags-auto-complete\\\">> class=\\\"tc-btn-invisible tc-btn-dropdown\\\" tooltip={{$:/language/EditTemplate/Tags/Dropdown/Hint}} aria-label={{$:/language/EditTemplate/Tags/Dropdown/Caption}}>{{$:/core/images/down-arrow}}\u003C/$button>\u003C$reveal state=\u003C\u003CstoreTitle>> type=\\\"nomatch\\\" text=\\\"\\\">\u003C$button class=\\\"tc-btn-invisible tc-small-gap tc-btn-dropdown\\\" tooltip={{$:/language/EditTemplate/Tags/ClearInput/Hint}} aria-label={{$:/language/EditTemplate/Tags/ClearInput/Caption}}>{{$:/core/images/close-button}}\u003C\u003Cdelete-tag-state-tiddlers>>\u003C/$button>\u003C/$reveal>\u003Cspan class=\\\"tc-add-tag-button tc-small-gap-left\\\">\\n\u003C$set name=\\\"tag\\\" value={{{ [\u003CnewTagNameTiddler>get[text]] }}}>\\n\u003C$button set=\u003C\u003CnewTagNameTiddler>> setTo=\\\"\\\" class=\\\"\\\">\\n\u003C$action-listops $tiddler=\u003C\u003CsaveTiddler>> $field=\u003C\u003C__tagField__>> $subfilter=\\\"[\u003Ctag>]\\\"/>\\n$actions$\\n\u003C$set name=\\\"currentTiddlerCSSEscaped\\\" value={{{ [\u003CsaveTiddler>escapecss[]] }}}>\\n\u003C\u003Cdelete-tag-state-tiddlers>>\u003C$action-sendmessage $message=\\\"tm-focus-selector\\\" $param=\u003C\u003Cget-tagpicker-focus-selector>>/>\\n\u003C/$set>\\n{{$:/language/EditTemplate/Tags/Add/Button}}\\n\u003C/$button>\\n\u003C/$set>\\n\u003C/span>\\n\u003C/div>\\n\u003Cdiv class=\\\"tc-block-dropdown-wrapper\\\">\\n\u003C$reveal state=\u003C\u003Cqualify \\\"$:/state/popup/tags-auto-complete\\\">> type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\">\\n\u003Cdiv class=\\\"tc-block-dropdown tc-block-tags-dropdown\\\">\\n\u003C$set name=\\\"userInput\\\" value={{{ [\u003CstoreTitle>get[text]] }}}>\\n\u003C$list filter=\\\"[\u003CuserInput>minlength{$:/config/Tags/MinLength}limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003Cdiv class=\\\"tc-search-results\\\">{{$:/language/Search/Search/TooShort}}\u003C/div>\\\"\\\"\\\" variable=\\\"listItem\\\">\\n\u003C$list filter=\u003C\u003CnonSystemTagsFilter>> variable=\\\"tag\\\">\\n\u003C$list filter=\\\"[\u003Ctag>addsuffix[-primaryList]] -[\u003CtagSelectionState>get[text]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$vars button-classes=\\\"tc-btn-invisible tc-tag-button-selected\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>> currentTiddler=\u003C\u003Ctag>>>{{||$:/core/ui/TagPickerTagTemplate}}\u003C/$vars>\\\"\\\"\\\">\\n\u003C$vars button-classes=\\\"tc-btn-invisible\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>> currentTiddler=\u003C\u003Ctag>>>{{||$:/core/ui/TagPickerTagTemplate}}\u003C/$vars>\\n\u003C/$list>\\n\u003C/$list>\u003C/$list>\\n\u003Chr>\\n\u003C$list filter=\\\"[\u003CuserInput>minlength{$:/config/Tags/MinLength}limit[1]]\\\" emptyMessage=\\\"\\\"\\\"\u003Cdiv class=\\\"tc-search-results\\\">{{$:/language/Search/Search/TooShort}}\u003C/div>\\\"\\\"\\\" variable=\\\"listItem\\\">\\n\u003C$list filter=\u003C\u003CsystemTagsFilter>> variable=\\\"tag\\\">\\n\u003C$list filter=\\\"[\u003Ctag>addsuffix[-secondaryList]] -[\u003CtagSelectionState>get[text]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$vars button-classes=\\\"tc-btn-invisible tc-tag-button-selected\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>> currentTiddler=\u003C\u003Ctag>>>{{||$:/core/ui/TagPickerTagTemplate}}\u003C/$vars>\\\"\\\"\\\">\\n\u003C$vars button-classes=\\\"tc-btn-invisible\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>> currentTiddler=\u003C\u003Ctag>>>{{||$:/core/ui/TagPickerTagTemplate}}\u003C/$vars>\\n\u003C/$list>\\n\u003C/$list>\u003C/$list>\\n\u003C/$set>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/div>\\n\u003C/div>\\n\u003C/$vars>\\n\u003C/$vars>\\n\u003C/$vars>\\n\\\\end\\n\\\\define tag-picker(actions,tagField:\\\"tags\\\")\\n\\\\whitespace trim\\n\u003C$vars saveTiddler=\u003C\u003CcurrentTiddler>> palette={{$:/palette}}>\\n\u003C$list filter=\\\"[\u003CnewTagNameTiddler>match[]]\\\" emptyMessage=\\\"\\\"\\\"\u003C$macrocall $name=\\\"tag-picker-inner\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>>/>\\\"\\\"\\\">\\n\u003C$set name=\\\"newTagNameTiddler\\\" value=\u003C\u003Cqualify \\\"$:/temp/NewTagName\\\">>>\\n\u003C$macrocall $name=\\\"tag-picker-inner\\\" actions=\u003C\u003C__actions__>> tagField=\u003C\u003C__tagField__>>/>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/$vars>\\n\\\\end\\n\"},\"$:/core/macros/tag\":{\"title\":\"$:/core/macros/tag\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define tag-pill-styles()\\nbackground-color:$(backgroundColor)$;\\nfill:$(foregroundColor)$;\\ncolor:$(foregroundColor)$;\\n\\\\end\\n\\n\\\\define tag-pill-inner(tag,icon,colour,fallbackTarget,colourA,colourB,element-tag,element-attributes,actions)\\n\u003C$vars foregroundColor=\u003C\u003Ccontrastcolour target:\\\"\\\"\\\"$colour$\\\"\\\"\\\" fallbackTarget:\\\"\\\"\\\"$fallbackTarget$\\\"\\\"\\\" colourA:\\\"\\\"\\\"$colourA$\\\"\\\"\\\" colourB:\\\"\\\"\\\"$colourB$\\\"\\\"\\\">> backgroundColor=\\\"\\\"\\\"$colour$\\\"\\\"\\\">\\n\u003C$element-tag$ $element-attributes$ class=\\\"tc-tag-label tc-btn-invisible\\\" style=\u003C\u003Ctag-pill-styles>>>\\n$actions$\u003C$transclude tiddler=\\\"\\\"\\\"$icon$\\\"\\\"\\\"/>\u003C$view tiddler=\u003C\u003C__tag__>> field=\\\"title\\\" format=\\\"text\\\" />\\n\u003C/$element-tag$>\\n\u003C/$vars>\\n\\\\end\\n\\n\\\\define tag-pill-body(tag,icon,colour,palette,element-tag,element-attributes,actions)\\n\u003C$macrocall $name=\\\"tag-pill-inner\\\" tag=\u003C\u003C__tag__>> icon=\\\"\\\"\\\"$icon$\\\"\\\"\\\" colour=\\\"\\\"\\\"$colour$\\\"\\\"\\\" fallbackTarget={{$palette$##tag-background}} colourA={{$palette$##foreground}} colourB={{$palette$##background}} element-tag=\\\"\\\"\\\"$element-tag$\\\"\\\"\\\" element-attributes=\\\"\\\"\\\"$element-attributes$\\\"\\\"\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\\\\end\\n\\n\\\\define tag-pill(tag,element-tag:\\\"span\\\",element-attributes:\\\"\\\",actions:\\\"\\\")\\n\u003Cspan class=\\\"tc-tag-list-item\\\" data-tag-title=\u003C\u003C__tag__>>>\\n\u003C$let currentTiddler=\u003C\u003C__tag__>>>\\n\u003C$macrocall $name=\\\"tag-pill-body\\\" tag=\u003C\u003C__tag__>> icon={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerIconFilter]!is[draft]get[text]] }}} colour={{{ [\u003CcurrentTiddler>] :cascade[all[shadows+tiddlers]tag[$:/tags/TiddlerColourFilter]!is[draft]get[text]] }}} palette={{$:/palette}} element-tag=\\\"\\\"\\\"$element-tag$\\\"\\\"\\\" element-attributes=\\\"\\\"\\\"$element-attributes$\\\"\\\"\\\" actions=\\\"\\\"\\\"$actions$\\\"\\\"\\\"/>\\n\u003C/$let>\\n\u003C/span>\\n\\\\end\\n\\n\\\\define tag(tag)\\n{{$tag$||$:/core/ui/TagTemplate}}\\n\\\\end\\n\"},\"$:/core/macros/thumbnails\":{\"title\":\"$:/core/macros/thumbnails\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define thumbnail(link,icon,color,background-color,image,caption,width:\\\"280\\\",height:\\\"157\\\")\\n\u003C$link to=\\\"\\\"\\\"$link$\\\"\\\"\\\">\u003Cdiv class=\\\"tc-thumbnail-wrapper\\\">\\n\u003Cdiv class=\\\"tc-thumbnail-image\\\" style=\\\"width:$width$px;height:$height$px;\\\">\u003C$reveal type=\\\"nomatch\\\" text=\\\"\\\" default=\\\"\\\"\\\"$image$\\\"\\\"\\\" tag=\\\"div\\\" style=\\\"width:$width$px;height:$height$px;\\\">\\n[img[$image$]]\\n\u003C/$reveal>\u003C$reveal type=\\\"match\\\" text=\\\"\\\" default=\\\"\\\"\\\"$image$\\\"\\\"\\\" tag=\\\"div\\\" class=\\\"tc-thumbnail-background\\\" style=\\\"width:$width$px;height:$height$px;background-color:$background-color$;\\\">\u003C/$reveal>\u003C/div>\u003Cdiv class=\\\"tc-thumbnail-icon\\\" style=\\\"fill:$color$;color:$color$;\\\">\\n$icon$\\n\u003C/div>\u003Cdiv class=\\\"tc-thumbnail-caption\\\">\\n$caption$\\n\u003C/div>\\n\u003C/div>\u003C/$link>\\n\\\\end\\n\\n\\\\define thumbnail-right(link,icon,color,background-color,image,caption,width:\\\"280\\\",height:\\\"157\\\")\\n\u003Cdiv class=\\\"tc-thumbnail-right-wrapper\\\">\u003C\u003Cthumbnail \\\"\\\"\\\"$link$\\\"\\\"\\\" \\\"\\\"\\\"$icon$\\\"\\\"\\\" \\\"\\\"\\\"$color$\\\"\\\"\\\" \\\"\\\"\\\"$background-color$\\\"\\\"\\\" \\\"\\\"\\\"$image$\\\"\\\"\\\" \\\"\\\"\\\"$caption$\\\"\\\"\\\" \\\"\\\"\\\"$width$\\\"\\\"\\\" \\\"\\\"\\\"$height$\\\"\\\"\\\">>\u003C/div>\\n\\\\end\\n\\n\\\\define list-thumbnails(filter,width:\\\"280\\\",height:\\\"157\\\")\\n\u003C$list filter=\\\"\\\"\\\"$filter$\\\"\\\"\\\">\u003C$macrocall $name=\\\"thumbnail\\\" link={{!!link}} icon={{!!icon}} color={{!!color}} background-color={{!!background-color}} image={{!!image}} caption={{!!caption}} width=\\\"\\\"\\\"$width$\\\"\\\"\\\" height=\\\"\\\"\\\"$height$\\\"\\\"\\\"/>\u003C/$list>\\n\\\\end\\n\"},\"$:/core/macros/timeline\":{\"title\":\"$:/core/macros/timeline\",\"created\":\"20141212105914482\",\"modified\":\"20141212110330815\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define timeline-title()\\n\\\\whitespace trim\\n\u003C!-- Override this macro with a global macro \\n     of the same name if you need to change \\n     how titles are displayed on the timeline \\n     -->\\n\u003C$view field=\\\"title\\\"/>\\n\\\\end\\n\\\\define timeline(limit:\\\"100\\\",format:\\\"DDth MMM YYYY\\\",subfilter:\\\"\\\",dateField:\\\"modified\\\")\\n\u003Cdiv class=\\\"tc-timeline\\\">\\n\u003C$list filter=\\\"[!is[system]$subfilter$has[$dateField$]!sort[$dateField$]limit[$limit$]eachday[$dateField$]]\\\">\\n\u003Cdiv class=\\\"tc-menu-list-item\\\">\\n\u003C$view field=\\\"$dateField$\\\" format=\\\"date\\\" template=\\\"$format$\\\"/>\\n\u003C$list filter=\\\"[sameday:$dateField${!!$dateField$}!is[system]$subfilter$!sort[$dateField$]]\\\">\\n\u003Cdiv class=\\\"tc-menu-list-subitem\\\">\\n\u003C$link to={{!!title}}>\u003C\u003Ctimeline-title>>\u003C/$link>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$list>\\n\u003C/div>\\n\\\\end\\n\"},\"$:/core/macros/toc\":{\"title\":\"$:/core/macros/toc\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define toc-caption()\\n\u003C$set name=\\\"tv-wikilinks\\\" value=\\\"no\\\">\\n  \u003C$transclude field=\\\"caption\\\">\\n    \u003C$view field=\\\"title\\\"/>\\n  \u003C/$transclude>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define toc-body(tag,sort:\\\"\\\",itemClassFilter,exclude,path)\\n\u003Col class=\\\"tc-toc\\\">\\n  \u003C$list filter=\\\"\\\"\\\"[all[shadows+tiddlers]tag\u003C__tag__>!has[draft.of]$sort$] -[\u003C__tag__>] -[enlist\u003C__exclude__>]\\\"\\\"\\\">\\n    \u003C$vars item=\u003C\u003CcurrentTiddler>> path={{{ [\u003C__path__>addsuffix[/]addsuffix\u003C__tag__>] }}}>\\n      \u003C$set name=\\\"excluded\\\" filter=\\\"\\\"\\\"[enlist\u003C__exclude__>] [\u003C__tag__>]\\\"\\\"\\\">\\n        \u003C$set name=\\\"toc-item-class\\\" filter=\u003C\u003C__itemClassFilter__>> emptyValue=\\\"toc-item-selected\\\" value=\\\"toc-item\\\">\\n          \u003Cli class=\u003C\u003Ctoc-item-class>>>\\n            \u003C$list filter=\\\"[all[current]toc-link[no]]\\\" emptyMessage=\\\"\u003C$link to={{{ [\u003CcurrentTiddler>get[target]else\u003CcurrentTiddler>] }}}>\u003C$view field='caption'>\u003C$view field='title'/>\u003C/$view>\u003C/$link>\\\">\\n              \u003C\u003Ctoc-caption>>\\n            \u003C/$list>\\n            \u003C$macrocall $name=\\\"toc-body\\\" tag=\u003C\u003Citem>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> exclude=\u003C\u003Cexcluded>> path=\u003C\u003Cpath>>/>\\n          \u003C/li>\\n        \u003C/$set>\\n      \u003C/$set>\\n    \u003C/$vars>\\n  \u003C/$list>\\n\u003C/ol>\\n\\\\end\\n\\n\\\\define toc(tag,sort:\\\"\\\",itemClassFilter:\\\"\\\")\\n\u003C$macrocall $name=\\\"toc-body\\\"  tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> />\\n\\\\end\\n\\n\\\\define toc-linked-expandable-body(tag,sort:\\\"\\\",itemClassFilter,exclude,path)\\n\u003C!-- helper function -->\\n\u003C$qualify name=\\\"toc-state\\\" title={{{ [[$:/state/toc]addsuffix\u003C__path__>addsuffix[-]addsuffix\u003CcurrentTiddler>] }}}>\\n  \u003C$set name=\\\"toc-item-class\\\" filter=\u003C\u003C__itemClassFilter__>> emptyValue=\\\"toc-item-selected\\\" value=\\\"toc-item\\\">\\n    \u003Cli class=\u003C\u003Ctoc-item-class>>>\\n    \u003C$link to={{{ [\u003CcurrentTiddler>get[target]else\u003CcurrentTiddler>] }}}>\\n      \u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"open\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n          {{$:/core/images/right-arrow}}\\n        \u003C/$button>\\n      \u003C/$reveal>\\n      \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"close\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n          {{$:/core/images/down-arrow}}\\n        \u003C/$button>\\n      \u003C/$reveal>\\n      \u003C\u003Ctoc-caption>>\\n    \u003C/$link>\\n    \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n      \u003C$macrocall $name=\\\"toc-expandable\\\" tag=\u003C\u003CcurrentTiddler>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> exclude=\u003C\u003C__exclude__>> path=\u003C\u003C__path__>>/>\\n    \u003C/$reveal>\\n    \u003C/li>\\n  \u003C/$set>\\n\u003C/$qualify>\\n\\\\end\\n\\n\\\\define toc-unlinked-expandable-body(tag,sort:\\\"\\\",itemClassFilter,exclude,path)\\n\u003C!-- helper function -->\\n\u003C$qualify name=\\\"toc-state\\\" title={{{ [[$:/state/toc]addsuffix\u003C__path__>addsuffix[-]addsuffix\u003CcurrentTiddler>] }}}>\\n  \u003C$set name=\\\"toc-item-class\\\" filter=\u003C\u003C__itemClassFilter__>> emptyValue=\\\"toc-item-selected\\\" value=\\\"toc-item\\\">\\n    \u003Cli class=\u003C\u003Ctoc-item-class>>>\\n      \u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"open\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n          {{$:/core/images/right-arrow}}\\n          \u003C\u003Ctoc-caption>>\\n        \u003C/$button>\\n      \u003C/$reveal>\\n      \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"close\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n          {{$:/core/images/down-arrow}}\\n          \u003C\u003Ctoc-caption>>\\n        \u003C/$button>\\n      \u003C/$reveal>\\n      \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$macrocall $name=\\\"toc-expandable\\\" tag=\u003C\u003CcurrentTiddler>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> exclude=\u003C\u003C__exclude__>> path=\u003C\u003C__path__>>/>\\n      \u003C/$reveal>\\n    \u003C/li>\\n  \u003C/$set>\\n\u003C/$qualify>\\n\\\\end\\n\\n\\\\define toc-expandable-empty-message()\\n\u003C$macrocall $name=\\\"toc-linked-expandable-body\\\" tag=\u003C\u003Ctag>> sort=\u003C\u003Csort>> itemClassFilter=\u003C\u003CitemClassFilter>> exclude=\u003C\u003Cexcluded>> path=\u003C\u003Cpath>>/>\\n\\\\end\\n\\n\\\\define toc-expandable(tag,sort:\\\"\\\",itemClassFilter:\\\"\\\",exclude,path)\\n\u003C$vars tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> path={{{ [\u003C__path__>addsuffix[/]addsuffix\u003C__tag__>] }}}>\\n  \u003C$set name=\\\"excluded\\\" filter=\\\"\\\"\\\"[enlist\u003C__exclude__>] [\u003C__tag__>]\\\"\\\"\\\">\\n    \u003Col class=\\\"tc-toc toc-expandable\\\">\\n      \u003C$list filter=\\\"\\\"\\\"[all[shadows+tiddlers]tag\u003C__tag__>!has[draft.of]$sort$] -[\u003C__tag__>] -[enlist\u003C__exclude__>]\\\"\\\"\\\">\\n        \u003C$list filter=\\\"[all[current]toc-link[no]]\\\" emptyMessage=\u003C\u003Ctoc-expandable-empty-message>> >\\n          \u003C$macrocall $name=\\\"toc-unlinked-expandable-body\\\" tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> itemClassFilter=\\\"\\\"\\\"itemClassFilter\\\"\\\"\\\" exclude=\u003C\u003Cexcluded>> path=\u003C\u003Cpath>> />\\n        \u003C/$list>\\n      \u003C/$list>\\n    \u003C/ol>\\n  \u003C/$set>\\n\u003C/$vars>\\n\\\\end\\n\\n\\\\define toc-linked-selective-expandable-body(tag,sort:\\\"\\\",itemClassFilter,exclude,path)\\n\u003C$qualify name=\\\"toc-state\\\" title={{{ [[$:/state/toc]addsuffix\u003C__path__>addsuffix[-]addsuffix\u003CcurrentTiddler>] }}}>\\n  \u003C$set name=\\\"toc-item-class\\\" filter=\u003C\u003C__itemClassFilter__>> emptyValue=\\\"toc-item-selected\\\" value=\\\"toc-item\\\" >\\n    \u003Cli class=\u003C\u003Ctoc-item-class>>>\\n      \u003C$link to={{{ [\u003CcurrentTiddler>get[target]else\u003CcurrentTiddler>] }}}>\\n          \u003C$list filter=\\\"[all[current]tagging[]$sort$limit[1]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\u003C$button class='tc-btn-invisible'>{{$:/core/images/blank}}\u003C/$button>\\\">\\n          \u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n            \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"open\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n              {{$:/core/images/right-arrow}}\\n            \u003C/$button>\\n          \u003C/$reveal>\\n          \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n            \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"close\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n              {{$:/core/images/down-arrow}}\\n            \u003C/$button>\\n          \u003C/$reveal>\\n        \u003C/$list>\\n        \u003C\u003Ctoc-caption>>\\n      \u003C/$link>\\n      \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$macrocall $name=\\\"toc-selective-expandable\\\" tag=\u003C\u003CcurrentTiddler>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> exclude=\u003C\u003C__exclude__>> path=\u003C\u003C__path__>>/>\\n      \u003C/$reveal>\\n    \u003C/li>\\n  \u003C/$set>\\n\u003C/$qualify>\\n\\\\end\\n\\n\\\\define toc-unlinked-selective-expandable-body(tag,sort:\\\"\\\",itemClassFilter,exclude,path)\\n\u003C$qualify name=\\\"toc-state\\\" title={{{ [[$:/state/toc]addsuffix\u003C__path__>addsuffix[-]addsuffix\u003CcurrentTiddler>] }}}>\\n  \u003C$set name=\\\"toc-item-class\\\" filter=\u003C\u003C__itemClassFilter__>> emptyValue=\\\"toc-item-selected\\\" value=\\\"toc-item\\\">\\n    \u003Cli class=\u003C\u003Ctoc-item-class>>>\\n      \u003C$list filter=\\\"[all[current]tagging[]$sort$limit[1]]\\\" variable=\\\"ignore\\\" emptyMessage=\\\"\u003C$button class='tc-btn-invisible'>{{$:/core/images/blank}}\u003C/$button> \u003C$view field='caption'>\u003C$view field='title'/>\u003C/$view>\\\">\\n        \u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n          \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"open\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n            {{$:/core/images/right-arrow}}\\n            \u003C\u003Ctoc-caption>>\\n          \u003C/$button>\\n        \u003C/$reveal>\\n        \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n          \u003C$button setTitle=\u003C\u003Ctoc-state>> setTo=\\\"close\\\" class=\\\"tc-btn-invisible tc-popup-keep\\\">\\n            {{$:/core/images/down-arrow}}\\n            \u003C\u003Ctoc-caption>>\\n          \u003C/$button>\\n        \u003C/$reveal>\\n      \u003C/$list>\\n      \u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Ctoc-state>> text=\\\"open\\\">\\n        \u003C$macrocall $name=\\\"toc-selective-expandable\\\" tag=\u003C\u003CcurrentTiddler>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> exclude=\u003C\u003C__exclude__>> path=\u003C\u003C__path__>>/>\\n      \u003C/$reveal>\\n    \u003C/li>\\n  \u003C/$set>\\n\u003C/$qualify>\\n\\\\end\\n\\n\\\\define toc-selective-expandable-empty-message()\\n\u003C$macrocall $name=\\\"toc-linked-selective-expandable-body\\\" tag=\u003C\u003Ctag>> sort=\u003C\u003Csort>> itemClassFilter=\u003C\u003CitemClassFilter>> exclude=\u003C\u003Cexcluded>> path=\u003C\u003Cpath>>/>\\n\\\\end\\n\\n\\\\define toc-selective-expandable(tag,sort:\\\"\\\",itemClassFilter,exclude,path)\\n\u003C$vars tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> path={{{ [\u003C__path__>addsuffix[/]addsuffix\u003C__tag__>] }}}>\\n  \u003C$set name=\\\"excluded\\\" filter=\\\"\\\"\\\"[enlist\u003C__exclude__>] [\u003C__tag__>]\\\"\\\"\\\">\\n    \u003Col class=\\\"tc-toc toc-selective-expandable\\\">\\n      \u003C$list filter=\\\"\\\"\\\"[all[shadows+tiddlers]tag\u003C__tag__>!has[draft.of]$sort$] -[\u003C__tag__>] -[enlist\u003C__exclude__>]\\\"\\\"\\\">\\n        \u003C$list filter=\\\"[all[current]toc-link[no]]\\\" variable=\\\"ignore\\\" emptyMessage=\u003C\u003Ctoc-selective-expandable-empty-message>> >\\n          \u003C$macrocall $name=\\\"toc-unlinked-selective-expandable-body\\\" tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> itemClassFilter=\u003C\u003C__itemClassFilter__>> exclude=\u003C\u003Cexcluded>> path=\u003C\u003Cpath>>/>\\n        \u003C/$list>\\n      \u003C/$list>\\n    \u003C/ol>\\n  \u003C/$set>\\n\u003C/$vars>\\n\\\\end\\n\\n\\\\define toc-tabbed-external-nav(tag,sort:\\\"\\\",selectedTiddler:\\\"$:/temp/toc/selectedTiddler\\\",unselectedText,missingText,template:\\\"\\\")\\n\u003C$tiddler tiddler={{{ [\u003C__selectedTiddler__>get[text]] }}}>\\n  \u003Cdiv class=\\\"tc-tabbed-table-of-contents\\\">\\n    \u003C$linkcatcher to=\u003C\u003C__selectedTiddler__>>>\\n      \u003Cdiv class=\\\"tc-table-of-contents\\\">\\n        \u003C$macrocall $name=\\\"toc-selective-expandable\\\" tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> itemClassFilter=\\\"[all[current]] -[\u003C__selectedTiddler__>get[text]]\\\"/>\\n      \u003C/div>\\n    \u003C/$linkcatcher>\\n    \u003Cdiv class=\\\"tc-tabbed-table-of-contents-content\\\">\\n      \u003C$reveal stateTitle=\u003C\u003C__selectedTiddler__>> type=\\\"nomatch\\\" text=\\\"\\\">\\n        \u003C$transclude mode=\\\"block\\\" tiddler=\u003C\u003C__template__>>>\\n          \u003Ch1>\u003C\u003Ctoc-caption>>\u003C/h1>\\n          \u003C$transclude mode=\\\"block\\\">$missingText$\u003C/$transclude>\\n        \u003C/$transclude>\\n      \u003C/$reveal>\\n      \u003C$reveal stateTitle=\u003C\u003C__selectedTiddler__>> type=\\\"match\\\" text=\\\"\\\">\\n        $unselectedText$\\n      \u003C/$reveal>\\n    \u003C/div>\\n  \u003C/div>\\n\u003C/$tiddler>\\n\\\\end\\n\\n\\\\define toc-tabbed-internal-nav(tag,sort:\\\"\\\",selectedTiddler:\\\"$:/temp/toc/selectedTiddler\\\",unselectedText,missingText,template:\\\"\\\")\\n\u003C$linkcatcher to=\u003C\u003C__selectedTiddler__>>>\\n  \u003C$macrocall $name=\\\"toc-tabbed-external-nav\\\" tag=\u003C\u003C__tag__>> sort=\u003C\u003C__sort__>> selectedTiddler=\u003C\u003C__selectedTiddler__>> unselectedText=\u003C\u003C__unselectedText__>> missingText=\u003C\u003C__missingText__>> template=\u003C\u003C__template__>>/>\\n\u003C/$linkcatcher>\\n\\\\end\\n\\n\"},\"$:/core/macros/translink\":{\"title\":\"$:/core/macros/translink\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define translink(title,mode:\\\"block\\\")\\n\u003Cdiv style=\\\"border:1px solid #ccc; padding: 0.5em; background: black; foreground; white;\\\">\\n\u003C$link to=\\\"\\\"\\\"$title$\\\"\\\"\\\">\\n\u003C$text text=\\\"\\\"\\\"$title$\\\"\\\"\\\"/>\\n\u003C/$link>\\n\u003Cdiv style=\\\"border:1px solid #ccc; padding: 0.5em; background: white; foreground; black;\\\">\\n\u003C$transclude tiddler=\\\"\\\"\\\"$title$\\\"\\\"\\\" mode=\\\"$mode$\\\">\\n\\\"\u003C$text text=\\\"\\\"\\\"$title$\\\"\\\"\\\"/>\\\" is missing\\n\u003C/$transclude>\\n\u003C/div>\\n\u003C/div>\\n\\\\end\\n\"},\"$:/core/macros/tree\":{\"title\":\"$:/core/macros/tree\",\"tags\":\"$:/tags/Macro\",\"text\":\"\\\\define leaf-link(full-title,chunk,separator: \\\"/\\\")\\n\u003C$link to=\u003C\u003C__full-title__>>>\u003C$text text=\u003C\u003C__chunk__>>/>\u003C/$link>\\n\\\\end\\n\\n\\\\define leaf-node(prefix,chunk)\\n\u003Cli>\\n\u003C$list filter=\\\"[\u003C__prefix__>addsuffix\u003C__chunk__>is[shadow]] [\u003C__prefix__>addsuffix\u003C__chunk__>is[tiddler]]\\\" variable=\\\"full-title\\\">\\n\u003C$list filter=\\\"[\u003Cfull-title>removeprefix\u003C__prefix__>]\\\" variable=\\\"chunk\\\">\\n\u003Cspan>{{$:/core/images/file}}\u003C/span> \u003C$macrocall $name=\\\"leaf-link\\\" full-title=\u003C\u003Cfull-title>> chunk=\u003C\u003Cchunk>>/>\\n\u003C/$list>\\n\u003C/$list>\\n\u003C/li>\\n\\\\end\\n\\n\\\\define branch-node(prefix,chunk,separator: \\\"/\\\")\\n\u003Cli>\\n\u003C$set name=\\\"reveal-state\\\" value={{{ [[$:/state/tree/]addsuffix\u003C__prefix__>addsuffix\u003C__chunk__>] }}}>\\n\u003C$reveal type=\\\"nomatch\\\" stateTitle=\u003C\u003Creveal-state>> text=\\\"show\\\">\\n\u003C$button setTitle=\u003C\u003Creveal-state>> setTo=\\\"show\\\" class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/folder}} \u003C$text text=\u003C\u003C__chunk__>>/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Creveal-state>> text=\\\"show\\\">\\n\u003C$button setTitle=\u003C\u003Creveal-state>> setTo=\\\"hide\\\" class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/folder}} \u003C$text text=\u003C\u003C__chunk__>>/>\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003Cspan>(\u003C$count filter=\\\"[all[shadows+tiddlers]removeprefix\u003C__prefix__>removeprefix\u003C__chunk__>] -[\u003C__prefix__>addsuffix\u003C__chunk__>]\\\"/>)\u003C/span>\\n\u003C$reveal type=\\\"match\\\" stateTitle=\u003C\u003Creveal-state>> text=\\\"show\\\">\\n\u003C$macrocall $name=\\\"tree-node\\\" prefix={{{ [\u003C__prefix__>addsuffix\u003C__chunk__>] }}} separator=\u003C\u003C__separator__>>/>\\n\u003C/$reveal>\\n\u003C/$set>\\n\u003C/li>\\n\\\\end\\n\\n\\\\define tree-node(prefix,separator: \\\"/\\\")\\n\u003Col>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]removeprefix\u003C__prefix__>splitbefore\u003C__separator__>sort[]!suffix\u003C__separator__>]\\\" variable=\\\"chunk\\\">\\n\u003C$macrocall $name=\\\"leaf-node\\\" prefix=\u003C\u003C__prefix__>> chunk=\u003C\u003Cchunk>> separator=\u003C\u003C__separator__>>/>\\n\u003C/$list>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]removeprefix\u003C__prefix__>splitbefore\u003C__separator__>sort[]suffix\u003C__separator__>]\\\" variable=\\\"chunk\\\">\\n\u003C$macrocall $name=\\\"branch-node\\\" prefix=\u003C\u003C__prefix__>> chunk=\u003C\u003Cchunk>> separator=\u003C\u003C__separator__>>/>\\n\u003C/$list>\\n\u003C/ol>\\n\\\\end\\n\\n\\\\define tree(prefix: \\\"$:/\\\",separator: \\\"/\\\")\\n\u003Cdiv class=\\\"tc-tree\\\">\\n\u003Cspan>\u003C$text text=\u003C\u003C__prefix__>>/>\u003C/span>\\n\u003Cdiv>\\n\u003C$macrocall $name=\\\"tree-node\\\" prefix=\u003C\u003C__prefix__>> separator=\u003C\u003C__separator__>>/>\\n\u003C/div>\\n\u003C/div>\\n\\\\end\\n\"},\"$:/core/macros/utils\":{\"title\":\"$:/core/macros/utils\",\"text\":\"\\\\define colour(colour)\\n$colour$\\n\\\\end\\n\"},\"$:/snippets/minifocusswitcher\":{\"title\":\"$:/snippets/minifocusswitcher\",\"text\":\"\u003C$select tiddler=\\\"$:/config/AutoFocus\\\">\\n\u003C$list filter=\\\"title tags text type fields\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>\u003C\u003CcurrentTiddler>>\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\\n\"},\"$:/snippets/minilanguageswitcher\":{\"title\":\"$:/snippets/minilanguageswitcher\",\"text\":\"\u003C$select tiddler=\\\"$:/language\\\">\\n\u003C$list filter=\\\"[[$:/languages/en-GB]] [plugin-type[language]sort[title]]\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>\u003C$view field=\\\"description\\\">\u003C$view field=\\\"name\\\">\u003C$view field=\\\"title\\\"/>\u003C/$view>\u003C/$view>\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\"},\"$:/snippets/minithemeswitcher\":{\"title\":\"$:/snippets/minithemeswitcher\",\"text\":\"\\\\define lingo-base() $:/language/ControlPanel/Theme/\\n\u003C\u003Clingo Prompt>> \u003C$select tiddler=\\\"$:/theme\\\">\\n\u003C$list filter=\\\"[plugin-type[theme]sort[title]]\\\">\\n\u003Coption value=\u003C\u003CcurrentTiddler>>>\u003C$view field=\\\"name\\\">\u003C$view field=\\\"title\\\"/>\u003C/$view>\u003C/option>\\n\u003C/$list>\\n\u003C/$select>\"},\"$:/snippets/modules\":{\"title\":\"$:/snippets/modules\",\"text\":\"\\\\define describeModuleType(type)\\n{{$:/language/Docs/ModuleTypes/$type$}}\\n\\\\end\\n\u003C$list filter=\\\"[moduletypes[]]\\\">\\n\\n!! \u003C$macrocall $name=\\\"currentTiddler\\\" $type=\\\"text/plain\\\" $output=\\\"text/plain\\\"/>\\n\\n\u003C$macrocall $name=\\\"describeModuleType\\\" type=\u003C\u003CcurrentTiddler>>/>\\n\\n\u003Cul>\u003C$list filter=\\\"[all[current]modules[]]\\\">\u003Cli>\u003C$link>\u003C\u003CcurrentTiddler>>\u003C/$link>\\n\u003C/li>\\n\u003C/$list>\\n\u003C/ul>\\n\u003C/$list>\\n\"},\"$:/palette\":{\"title\":\"$:/palette\",\"text\":\"$:/palettes/Vanilla\"},\"$:/snippets/paletteeditor\":{\"title\":\"$:/snippets/paletteeditor\",\"text\":\"\u003C$transclude tiddler=\\\"$:/PaletteManager\\\"/>\\n\"},\"$:/snippets/palettepreview\":{\"title\":\"$:/snippets/palettepreview\",\"text\":\"\u003C$set name=\\\"currentTiddler\\\" value={{$:/palette}}>\\n{{||$:/snippets/currpalettepreview}}\\n\u003C/$set>\\n\"},\"$:/snippets/paletteswitcher\":{\"title\":\"$:/snippets/paletteswitcher\",\"text\":\"\u003C$linkcatcher to=\\\"$:/palette\\\">\\n\u003Cdiv class=\\\"tc-chooser\\\">\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Palette]sort[name]]\\\">\u003C$set name=\\\"cls\\\" filter=\\\"[all[current]prefix{$:/palette}]\\\" value=\\\"tc-chooser-item tc-chosen\\\" emptyValue=\\\"tc-chooser-item\\\">\u003Cdiv class=\u003C\u003Ccls>>>\u003C$link to={{!!title}}>''\u003C$view field=\\\"name\\\" format=\\\"text\\\"/>'' - \u003C$view field=\\\"description\\\" format=\\\"text\\\"/>{{||$:/snippets/currpalettepreview}}\u003C/$link>\\n\u003C/div>\u003C/$set>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$linkcatcher>\\n\"},\"$:/snippets/peek-stylesheets\":{\"title\":\"$:/snippets/peek-stylesheets\",\"text\":\"\\\\define expandable-stylesheets-list()\\n\\\\whitespace trim\\n\u003Col>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Stylesheet]!has[draft.of]]\\\">\\n\u003C$vars state=\u003C\u003Cqualify \\\"$:/state/peek-stylesheets/open/\\\">>>\\n\u003C$set name=\\\"state\\\" value={{{ [\u003Cstate>addsuffix\u003CcurrentTiddler>] }}}>\\n\u003Cli>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cstate>> text=\\\"yes\\\" tag=\\\"span\\\">\\n\u003C$button set=\u003C\u003Cstate>> setTo=\\\"no\\\" class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/down-arrow}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003Cstate>> text=\\\"yes\\\" tag=\\\"span\\\">\\n\u003C$button set=\u003C\u003Cstate>> setTo=\\\"yes\\\" class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/right-arrow}}\\n\u003C/$button>\\n\u003C/$reveal>\\n\u003C$link>\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$link>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003Cstate>> text=\\\"yes\\\" tag=\\\"div\\\">\\n\u003C$set name=\\\"source\\\" tiddler=\u003C\u003CcurrentTiddler>>>\\n\u003C$wikify name=\\\"styles\\\" text=\u003C\u003Csource>>>\\n\u003Cpre>\\n\u003Ccode>\\n\u003C$text text=\u003C\u003Cstyles>>/>\\n\u003C/code>\\n\u003C/pre>\\n\u003C/$wikify>\\n\u003C/$set>\\n\u003C/$reveal>\\n\u003C/li>\\n\u003C/$set>\\n\u003C/$vars>\\n\u003C/$list>\\n\u003C/ol>\\n\\\\end\\n\\n\\\\define stylesheets-list()\\n\\\\whitespace trim\\n\u003Col>\\n\u003C$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/Stylesheet]!has[draft.of]]\\\">\\n\u003Cli>\\n\u003C$link>\\n\u003C$view field=\\\"title\\\"/>\\n\u003C/$link>\\n\u003C$set name=\\\"source\\\" tiddler=\u003C\u003CcurrentTiddler>>>\\n\u003C$wikify name=\\\"styles\\\" text=\u003C\u003Csource>>>\\n\u003Cpre>\\n\u003Ccode>\\n\u003C$text text=\u003C\u003Cstyles>>/>\\n\u003C/code>\\n\u003C/pre>\\n\u003C/$wikify>\\n\u003C/$set>\\n\u003C/li>\\n\u003C/$list>\\n\u003C/ol>\\n\\\\end\\n\\\\whitespace trim\\n\\n\u003C$vars modeState=\u003C\u003Cqualify \\\"$:/state/peek-stylesheets/mode/\\\">>>\\n\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CmodeState>> text=\\\"expanded\\\" tag=\\\"div\\\">\\n\u003C$button set=\u003C\u003CmodeState>> setTo=\\\"expanded\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/chevron-right}} {{$:/language/ControlPanel/Stylesheets/Expand/Caption}}\u003C/$button>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CmodeState>> text=\\\"expanded\\\" tag=\\\"div\\\">\\n\u003C$button set=\u003C\u003CmodeState>> setTo=\\\"restored\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/chevron-down}} {{$:/language/ControlPanel/Stylesheets/Restore/Caption}}\u003C/$button>\\n\u003C/$reveal>\\n\\n\u003C$reveal type=\\\"nomatch\\\" state=\u003C\u003CmodeState>> text=\\\"expanded\\\" tag=\\\"div\\\">\\n\u003C\u003Cexpandable-stylesheets-list>>\\n\u003C/$reveal>\\n\u003C$reveal type=\\\"match\\\" state=\u003C\u003CmodeState>> text=\\\"expanded\\\" tag=\\\"div\\\">\\n\u003C\u003Cstylesheets-list>>\\n\u003C/$reveal>\\n\\n\u003C/$vars>\\n\"},\"$:/temp/search\":{\"title\":\"$:/temp/search\",\"text\":\"\"},\"$:/tags/AdvancedSearch\":{\"title\":\"$:/tags/AdvancedSearch\",\"list\":\"[[$:/core/ui/AdvancedSearch/Standard]] [[$:/core/ui/AdvancedSearch/System]] [[$:/core/ui/AdvancedSearch/Shadows]] [[$:/core/ui/AdvancedSearch/Filter]]\"},\"$:/tags/AdvancedSearch/FilterButton\":{\"title\":\"$:/tags/AdvancedSearch/FilterButton\",\"list\":\"$:/core/ui/AdvancedSearch/Filter/FilterButtons/dropdown $:/core/ui/AdvancedSearch/Filter/FilterButtons/clear $:/core/ui/AdvancedSearch/Filter/FilterButtons/export $:/core/ui/AdvancedSearch/Filter/FilterButtons/delete\"},\"$:/tags/ControlPanel\":{\"title\":\"$:/tags/ControlPanel\",\"list\":\"$:/core/ui/ControlPanel/Info $:/core/ui/ControlPanel/Appearance $:/core/ui/ControlPanel/Settings $:/core/ui/ControlPanel/Saving $:/core/ui/ControlPanel/Plugins $:/core/ui/ControlPanel/Tools $:/core/ui/ControlPanel/Internals\"},\"$:/tags/ControlPanel/Info\":{\"title\":\"$:/tags/ControlPanel/Info\",\"list\":\"$:/core/ui/ControlPanel/Basics $:/core/ui/ControlPanel/Advanced\"},\"$:/tags/ControlPanel/Plugins\":{\"title\":\"$:/tags/ControlPanel/Plugins\",\"list\":\"$:/core/ui/ControlPanel/Plugins/Installed/Plugins $:/core/ui/ControlPanel/Plugins/Installed/Themes $:/core/ui/ControlPanel/Plugins/Installed/Languages\"},\"$:/tags/EditTemplate\":{\"title\":\"$:/tags/EditTemplate\",\"list\":\"[[$:/core/ui/EditTemplate/controls]] [[$:/core/ui/EditTemplate/title]] [[$:/core/ui/EditTemplate/tags]] [[$:/core/ui/EditTemplate/shadow]] [[$:/core/ui/ViewTemplate/classic]] [[$:/core/ui/EditTemplate/body]] [[$:/core/ui/EditTemplate/type]] [[$:/core/ui/EditTemplate/fields]]\"},\"$:/tags/EditTemplateBodyFilter\":{\"title\":\"$:/tags/EditTemplateBodyFilter\",\"list\":\"$:/config/EditTemplateBodyFilters/canonical-uri $:/config/EditTemplateBodyFilters/default\"},\"$:/tags/EditToolbar\":{\"title\":\"$:/tags/EditToolbar\",\"list\":\"[[$:/core/ui/Buttons/delete]] [[$:/core/ui/Buttons/cancel]] [[$:/core/ui/Buttons/save]]\"},\"$:/tags/EditorToolbar\":{\"title\":\"$:/tags/EditorToolbar\",\"list\":\"$:/core/ui/EditorToolbar/paint $:/core/ui/EditorToolbar/opacity $:/core/ui/EditorToolbar/line-width $:/core/ui/EditorToolbar/rotate-left $:/core/ui/EditorToolbar/clear $:/core/ui/EditorToolbar/bold $:/core/ui/EditorToolbar/italic $:/core/ui/EditorToolbar/strikethrough $:/core/ui/EditorToolbar/underline $:/core/ui/EditorToolbar/superscript $:/core/ui/EditorToolbar/subscript $:/core/ui/EditorToolbar/mono-line $:/core/ui/EditorToolbar/mono-block $:/core/ui/EditorToolbar/quote $:/core/ui/EditorToolbar/list-bullet $:/core/ui/EditorToolbar/list-number $:/core/ui/EditorToolbar/heading-1 $:/core/ui/EditorToolbar/heading-2 $:/core/ui/EditorToolbar/heading-3 $:/core/ui/EditorToolbar/heading-4 $:/core/ui/EditorToolbar/heading-5 $:/core/ui/EditorToolbar/heading-6 $:/core/ui/EditorToolbar/link $:/core/ui/EditorToolbar/excise $:/core/ui/EditorToolbar/picture $:/core/ui/EditorToolbar/stamp $:/core/ui/EditorToolbar/size $:/core/ui/EditorToolbar/editor-height $:/core/ui/EditorToolbar/more $:/core/ui/EditorToolbar/preview $:/core/ui/EditorToolbar/preview-type\"},\"$:/tags/Manager/ItemMain\":{\"title\":\"$:/tags/Manager/ItemMain\",\"list\":\"$:/Manager/ItemMain/WikifiedText $:/Manager/ItemMain/RawText $:/Manager/ItemMain/Fields\"},\"$:/tags/Manager/ItemSidebar\":{\"title\":\"$:/tags/Manager/ItemSidebar\",\"list\":\"$:/Manager/ItemSidebar/Tags $:/Manager/ItemSidebar/Colour $:/Manager/ItemSidebar/Icon $:/Manager/ItemSidebar/Tools\"},\"$:/tags/MoreSideBar\":{\"title\":\"$:/tags/MoreSideBar\",\"list\":\"[[$:/core/ui/MoreSideBar/All]] [[$:/core/ui/MoreSideBar/Recent]] [[$:/core/ui/MoreSideBar/Tags]] [[$:/core/ui/MoreSideBar/Missing]] [[$:/core/ui/MoreSideBar/Drafts]] [[$:/core/ui/MoreSideBar/Orphans]] [[$:/core/ui/MoreSideBar/Types]] [[$:/core/ui/MoreSideBar/System]] [[$:/core/ui/MoreSideBar/Shadows]] [[$:/core/ui/MoreSideBar/Explorer]] [[$:/core/ui/MoreSideBar/Plugins]]\",\"text\":\"\"},\"$:/tags/PageControls\":{\"title\":\"$:/tags/PageControls\",\"list\":\"[[$:/core/ui/Buttons/home]] [[$:/core/ui/Buttons/close-all]] [[$:/core/ui/Buttons/fold-all]] [[$:/core/ui/Buttons/unfold-all]] [[$:/core/ui/Buttons/permaview]] [[$:/core/ui/Buttons/new-tiddler]] [[$:/core/ui/Buttons/new-journal]] [[$:/core/ui/Buttons/new-image]] [[$:/core/ui/Buttons/import]] [[$:/core/ui/Buttons/export-page]] [[$:/core/ui/Buttons/control-panel]] [[$:/core/ui/Buttons/advanced-search]] [[$:/core/ui/Buttons/manager]] [[$:/core/ui/Buttons/tag-manager]] [[$:/core/ui/Buttons/language]] [[$:/core/ui/Buttons/palette]] [[$:/core/ui/Buttons/theme]] [[$:/core/ui/Buttons/storyview]] [[$:/core/ui/Buttons/encryption]] [[$:/core/ui/Buttons/timestamp]] [[$:/core/ui/Buttons/full-screen]] [[$:/core/ui/Buttons/print]] [[$:/core/ui/Buttons/save-wiki]] [[$:/core/ui/Buttons/refresh]] [[$:/core/ui/Buttons/more-page-actions]]\"},\"$:/tags/PageTemplate\":{\"title\":\"$:/tags/PageTemplate\",\"list\":\"[[$:/core/ui/PageTemplate/topleftbar]] [[$:/core/ui/PageTemplate/toprightbar]] [[$:/core/ui/PageTemplate/sidebar]] [[$:/core/ui/PageTemplate/story]] [[$:/core/ui/PageTemplate/alerts]]\",\"text\":\"\"},\"$:/tags/PluginLibrary\":{\"title\":\"$:/tags/PluginLibrary\",\"list\":\"$:/config/OfficialPluginLibrary\"},\"$:/tags/SideBar\":{\"title\":\"$:/tags/SideBar\",\"list\":\"[[$:/core/ui/SideBar/Open]] [[$:/core/ui/SideBar/Recent]] [[$:/core/ui/SideBar/Tools]] [[$:/core/ui/SideBar/More]]\",\"text\":\"\"},\"$:/tags/SideBarSegment\":{\"title\":\"$:/tags/SideBarSegment\",\"list\":\"[[$:/core/ui/SideBarSegments/site-title]] [[$:/core/ui/SideBarSegments/site-subtitle]] [[$:/core/ui/SideBarSegments/page-controls]] [[$:/core/ui/SideBarSegments/search]] [[$:/core/ui/SideBarSegments/tabs]]\"},\"$:/tags/StoryTiddlerTemplateFilter\":{\"title\":\"$:/tags/StoryTiddlerTemplateFilter\",\"list\":\"$:/config/StoryTiddlerTemplateFilters/draft $:/config/StoryTiddlerTemplateFilters/default\"},\"$:/tags/TiddlerColourFilter\":{\"title\":\"$:/tags/TiddlerColourFilter\",\"list\":\"$:/config/TiddlerColourFilters/color-field $:/config/TiddlerColourFilters/default\",\"text\":\"\"},\"$:/tags/TiddlerIconFilter\":{\"title\":\"$:/tags/TiddlerIconFilter\",\"list\":\"$:/config/TiddlerIconFilters/icon-field $:/config/TiddlerIconFilters/default\",\"text\":\"\"},\"$:/tags/TiddlerInfo\":{\"title\":\"$:/tags/TiddlerInfo\",\"list\":\"[[$:/core/ui/TiddlerInfo/Tools]] [[$:/core/ui/TiddlerInfo/References]] [[$:/core/ui/TiddlerInfo/Tagging]] [[$:/core/ui/TiddlerInfo/List]] [[$:/core/ui/TiddlerInfo/Listed]] [[$:/core/ui/TiddlerInfo/Fields]]\",\"text\":\"\"},\"$:/tags/TiddlerInfo/Advanced\":{\"title\":\"$:/tags/TiddlerInfo/Advanced\",\"list\":\"[[$:/core/ui/TiddlerInfo/Advanced/ShadowInfo]] [[$:/core/ui/TiddlerInfo/Advanced/PluginInfo]]\"},\"$:/tags/ViewTemplate\":{\"title\":\"$:/tags/ViewTemplate\",\"list\":\"[[$:/core/ui/ViewTemplate/title]] [[$:/core/ui/ViewTemplate/unfold]] [[$:/core/ui/ViewTemplate/subtitle]] [[$:/core/ui/ViewTemplate/tags]] [[$:/core/ui/ViewTemplate/classic]] [[$:/core/ui/ViewTemplate/body]]\"},\"$:/tags/ViewTemplateBodyFilter\":{\"title\":\"$:/tags/ViewTemplateBodyFilter\",\"list\":\"$:/config/ViewTemplateBodyFilters/system $:/config/ViewTemplateBodyFilters/code-body $:/config/ViewTemplateBodyFilters/import $:/config/ViewTemplateBodyFilters/plugin $:/config/ViewTemplateBodyFilters/hide-body $:/config/ViewTemplateBodyFilters/default\",\"text\":\"\"},\"$:/tags/ViewTemplateTitleFilter\":{\"title\":\"$:/tags/ViewTemplateTitleFilter\",\"list\":\"$:/config/ViewTemplateTitleFilters/system $:/config/ViewTemplateTitleFilters/default\",\"text\":\"\"},\"$:/tags/ViewToolbar\":{\"title\":\"$:/tags/ViewToolbar\",\"list\":\"[[$:/core/ui/Buttons/more-tiddler-actions]] [[$:/core/ui/Buttons/info]] [[$:/core/ui/Buttons/new-here]] [[$:/core/ui/Buttons/new-journal-here]] [[$:/core/ui/Buttons/clone]] [[$:/core/ui/Buttons/export-tiddler]] [[$:/core/ui/Buttons/edit]] [[$:/core/ui/Buttons/delete]] [[$:/core/ui/Buttons/permalink]] [[$:/core/ui/Buttons/permaview]] [[$:/core/ui/Buttons/open-window]] [[$:/core/ui/Buttons/close-others]] [[$:/core/ui/Buttons/close]] [[$:/core/ui/Buttons/fold-others]] [[$:/core/ui/Buttons/fold]]\"},\"$:/snippets/themeswitcher\":{\"title\":\"$:/snippets/themeswitcher\",\"text\":\"\u003C$linkcatcher to=\\\"$:/theme\\\">\\n\u003Cdiv class=\\\"tc-chooser\\\">\u003C$list filter=\\\"[plugin-type[theme]sort[title]]\\\">\u003C$set name=\\\"cls\\\" filter=\\\"[all[current]field:title{$:/theme}] [[$:/theme]!has[text]addsuffix[s/tiddlywiki/vanilla]field:title\u003CcurrentTiddler>] +[limit[1]]\\\" value=\\\"tc-chooser-item tc-chosen\\\" emptyValue=\\\"tc-chooser-item\\\">\u003Cdiv class=\u003C\u003Ccls>>>\u003C$link to={{!!title}}>''\u003C$view field=\\\"name\\\" format=\\\"text\\\"/>'' \u003C$view field=\\\"description\\\" format=\\\"text\\\"/>\u003C/$link>\u003C/div>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$linkcatcher>\"},\"$:/core/wiki/title\":{\"title\":\"$:/core/wiki/title\",\"text\":\"{{$:/SiteTitle}}\\n\u003C$list filter=\\\"[{$:/SiteSubtitle}trim[]minlength[1]]\\\" variable=\\\"ignore\\\">\\n--- {{$:/SiteSubtitle}}\\n\u003C/$list>\"},\"$:/view\":{\"title\":\"$:/view\",\"text\":\"classic\"},\"$:/snippets/viewswitcher\":{\"title\":\"$:/snippets/viewswitcher\",\"text\":\"\\\\define icon()\\n$:/core/images/storyview-$(storyview)$\\n\\\\end\\n\u003C$linkcatcher to=\\\"$:/view\\\">\\n\u003Cdiv class=\\\"tc-chooser tc-viewswitcher\\\">\\n\u003C$list filter=\\\"[storyviews[]]\\\" variable=\\\"storyview\\\">\\n\u003C$set name=\\\"cls\\\" filter=\\\"[\u003Cstoryview>prefix{$:/view}]\\\" value=\\\"tc-chooser-item tc-chosen\\\" emptyValue=\\\"tc-chooser-item\\\">\u003Cdiv class=\u003C\u003Ccls>>>\\n\u003C$button tag=\\\"a\\\" class=\\\"tc-tiddlylink tc-btn-invisible\\\" to=\u003C\u003Cstoryview>>>\u003C$transclude tiddler=\u003C\u003Cicon>>/>\u003C$text text=\u003C\u003Cstoryview>>/>\u003C/$button>\\n\u003C/div>\\n\u003C/$set>\\n\u003C/$list>\\n\u003C/div>\\n\u003C/$linkcatcher>\\n\"}}}"},
{"created":"20220531064728682","text":"\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\n\\define saveTiddlerFilter()\n[is[tiddler]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] -[prefix[$:/positivesignertemp/]] +[sort[title]] $(publishFilter)$\n\\end\n{{$:/core/templates/tiddlywiki5.html}}\n","title":"$:/core/save/all","modified":"20220531065916055","tags":"$:/positivesigner/tag/startup $:/positivesigner/tag/gcmpr"},
{"created":"20221117022516959","text":"","title":"$:/db/img/A-A baseball ad ae MR.png","type":"image/png","modified":"20221120192704024"},
{"created":"20221117022457346","text":"","title":"$:/db/img/A-A baseball ad ae ST.png","type":"image/png","modified":"20221117022458782"},
{"created":"20221120210029841","text":"\u003C$list variable=cur_card filter=\"[all[tiddlers]prefix[$:/db/img/]]\">\n\n\u003C$link to=\u003C\u003Ccur_card>> />\n\u003C/$list>\u003C!--cur_card-->\n","tags":"","title":"$:/db/index/img","modified":"20221120210039888"},
{"created":"20221120210854477","text":"\u003C$list variable=cur_card filter=\"[all[tiddlers]prefix[$:/db/setting/]]\">\n\n\u003C$link to=\u003C\u003Ccur_card>> />\n\u003C/$list>\u003C!--cur_card-->\n","tags":"","title":"$:/db/index/setting","modified":"20221120210901284"},
{"created":"20221120205137096","text":"\u003C$list variable=cur_card filter=\"[all[tiddlers]prefix[$:/db/index/]!match[$:/db/index/tables]]\">\n\n\u003C$link to=\u003C\u003Ccur_card>> />\n\u003C/$list>\u003C!--cur_card-->\n","tags":"","title":"$:/db/index/tables","modified":"20221120205859694"},
{"created":"20221120205827901","text":"\u003C$list variable=cur_card filter=\"[all[tiddlers]prefix[$:/db/word/]]\">\n\n\u003C$link to=\u003C\u003Ccur_card>> />\n\u003C/$list>\u003C!--cur_card-->\n","tags":"","title":"$:/db/index/word","modified":"20221120205920896"},
{"created":"20221120205902630","text":"\u003C$list variable=cur_card filter=\"[all[tiddlers]prefix[$:/db/word-part/]]\">\n\n\u003C$link to=\u003C\u003Ccur_card>> />\n\u003C/$list>\u003C!--cur_card-->\n","tags":"","title":"$:/db/index/word-part","modified":"20221120205916222"},
{"created":"20221120191505009","text":"\\define db_ask_img_suffix()\n\u003Cdiv style=\"float:right\">\n\u003C$radio tiddler=\"$:/db/setting/mirror_image\" field=\"img_suffix\" value=\"st\">Stage\u003C/$radio>\n\u003C$radio tiddler=\"$:/db/setting/mirror_image\" field=\"img_suffix\" value=\"mr\">Mirror\u003C/$radio>\n\u003C/div>\n\\end\n\\define db_word_entries()\n\u003C$list variable=img_prefix filter=\"[[st]] [[mr]] +[addprefix[img_]]\">\n\u003C$list variable=text_prefix filter=\"[\u003Cimg_prefix>removeprefix[img]addprefix[text]]\">\n\n\u003C$list variable=prop_name filter=\"[all[current]fields[]prefix\u003Cimg_prefix>sort[]]\">\n\u003C$list variable=img_path filter=\"[all[current]get\u003Cprop_name>]\">\n\u003C$link to=\u003C\u003Cimg_path>> >_\u003C/$link>\n\u003C$image source=\u003C\u003Cimg_path>> height=\"200em\" />\n\u003C/$list>\u003C!--img_path-->\n\u003C/$list>\u003C!--prop_name-->\u003Cbr>\n\n\u003C$list variable=prop_name filter=\"[all[current]fields[]prefix\u003Ctext_prefix>!suffix[_img]sort[]]\">\n\u003C$list variable=prop_img filter=\"[\u003Cprop_name>addsuffix[_img]]\">\n\u003C$list variable=text_line filter=\"[all[current]get\u003Cprop_name>]\">\n\u003C\u003Ctext_line>>\n\u003C$list variable=img_path filter=\"[all[current]get\u003Cprop_img>]\">\n\u003C$link to=\u003C\u003Cimg_path>> >_\u003C/$link>\n\u003C$image source=\u003C\u003Cimg_path>> height=\"50em\" />\n\u003C/$list>\u003C!--img_path-->\n\u003C/$list>\u003C!--text_line-->\n\u003C/$list>\u003C!--prop_img-->\n\u003C/$list>\u003C!--prop_name-->\u003Cbr>\n\n\u003C/$list>\u003C!--text_suffix-->\n\u003C/$list>\u003C!--img_suffix-->\n\\end\n\\define db_word_image(ur_word)\n\u003C$list variable=img_suffix filter=\"[[$:/db/setting/mirror_image]get[img_suffix]addprefix[img_]addsuffix[_]]\">\n\u003C$list variable=cur_word filter=\"[[$ur_word$]]\">\n\u003C$list variable=dtitle filter=\"[\u003Ccur_word>get[dtitle]else\u003Ccur_word>]\">\n\n!!\u003C\u003Cdtitle>> \u003Cspan style=\"float:right\">\u003C$link to=\u003C\u003Ccur_word>> >_\u003C/$link> \u003C/span>\n\n\u003C$list variable=prop_name filter=\"[\u003Ccur_word>fields[]prefix\u003Cimg_suffix>sort[]]\">\n\u003C$list variable=img_path filter=\"[\u003Ccur_word>get\u003Cprop_name>]\">\n\u003C$list variable=img_text filter=\"[\u003Cimg_path>get[img_text]else[]]\">\n\u003Cspan style=\"display:inline-block;border-right: 0.05em solid blue;vertical-align:top;\">\n\u003C$image source=\u003C\u003Cimg_path>> height=\"200em\" />\u003Cbr>\n\u003C/span>\n\u003C/$list>\u003C!--img_text-->\n\u003C/$list>\u003C!--img_path-->\n\u003C/$list>\u003C!--prop_name-->\u003Cbr>\n\u003C/$list>\u003C!--cur_word-->\n\u003C/$list>\u003C!--img-suffix-->\n\\end\n","title":"$:/db/setting/mirror_image","tags":"$:/tags/Macro","modified":"20221124084024833","img_suffix":"st"},
{"created":"20221120202221859","text":"","title":"$:/db/word-part/A brn bkrqr MR.png","type":"image/png","modified":"20221120213037124","img_text":"NDH HS A; DH palm left, thumb-side in"},
{"created":"20221120202230630","text":"","title":"$:/db/word-part/A brn bkrqr ST.png","type":"image/png","modified":"20221124082851566"},
{"created":"20221120202237413","text":"","title":"$:/db/word-part/A brn bvkr MR.png","type":"image/png","modified":"20221120204335165","pct_wide":"10"},
{"created":"20221120202244019","text":"","title":"$:/db/word-part/A brn bvkr ST.png","type":"image/png","modified":"20221120204609081","pct_wide":"10"},
{"created":"20221120202250220","text":"","title":"$:/db/word-part/A prn pkqr MR.png","type":"image/png","modified":"20221120203541637","pct_wide":"10"},
{"created":"20221120202256983","text":"","title":"$:/db/word-part/A prn pkqr ST.png","type":"image/png","modified":"20221124082837955"},
{"created":"20221120202114836","text":"","title":"$:/db/word-part/A prn pvrkr MR.png","type":"image/png","modified":"20221120204354998","pct_wide":"10"},
{"created":"20221120202152423","text":"","title":"$:/db/word-part/A prn pvrkr ST.png","type":"image/png","modified":"20221120204508816","pct_wide":"10"},
{"created":"20221120202200750","text":"","title":"$:/db/word-part/A-A brn prn bkrqr pkqr tq Advr FqFk bv pvr MR.png","type":"image/png","modified":"20221120204311819","pct_wide":"20"},
{"created":"20221120202207948","text":"","title":"$:/db/word-part/A-A brn prn bkrqr pkqr tq Advr FqFk bv pvr ST.png","type":"image/png","modified":"20221120204450739","pct_wide":"20"},
{"created":"20221120202215070","text":"","title":"$:/db/word-part/A-A brn prn bkrqr pkqr tq ADvr FqFk bv pvr SV.png","type":"image/png","modified":"20221124082910374"},
{"created":"20221124080958930","text":"","title":"$:/db/word-part/HS-A brnkrqr MR.png","type":"image/png","modified":"20221124080959997"},
{"created":"20221124081006039","text":"","title":"$:/db/word-part/HS-A brnkrqr ST.png","type":"image/png","modified":"20221124081006688"},
{"created":"20221124081016355","text":"","title":"$:/db/word-part/HS-A brnqkr MR.png","type":"image/png","modified":"20221124081016635"},
{"created":"20221124081022811","text":"","title":"$:/db/word-part/HS-A brnqkr ST.png","type":"image/png","modified":"20221124081023047"},
{"created":"20221124081028590","text":"","title":"$:/db/word-part/HS-A prnkqr MR.png","type":"image/png","modified":"20221124081028865"},
{"created":"20221124081033870","text":"","title":"$:/db/word-part/HS-A prnkqr ST.png","type":"image/png","modified":"20221124081034828"},
{"created":"20221124081039723","text":"","title":"$:/db/word-part/HS-A prnqk MR.png","type":"image/png","modified":"20221124081040342"},
{"created":"20221124080947823","text":"","title":"$:/db/word-part/HS-A prnqk ST.png","type":"image/png","modified":"20221124080949774"},
{"created":"20221124081623013","text":"","title":"$:/db/word-part/HS-A-A brn prn bkrqr pkqr tq ADvr MR.png","type":"image/png","modified":"20221124081623733"},
{"created":"20221124081629403","text":"","title":"$:/db/word-part/HS-A-A brn prn bkrqr pkqr tq ADvr ST.png","type":"image/png","modified":"20221124081629696"},
{"created":"20221124081634474","text":"","title":"$:/db/word-part/HS-A-A brn prn bv pvr tk AEvr MR.png","type":"image/png","modified":"20221124081634735"},
{"created":"20221124081641260","text":"iVBORw0KGgoAAAANSUhEUgAAAboAAAEKCAYAAABkPZDwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAKBXSURBVHhe7f0JtG3ZVdePr9Pf5rXVJ5WqJFWVSlPpUQwgVEIXlUZEGQ5g2Axx0AyJggYiDEwDCAICInaIDlQc4hDBHwzaKP8kAgmhEUgICSEJIV2l+vfe7U/7n5+59jp7rrnPPee+evdVvWZ97/u+s/defTv3mqvZrZkgFBQUFBQUXKNoV78FBQUFBQXXJIqgKygoKCi4plEEXUFBQUHBNY0i6AoKCgoKrmkUQVdQUFBQcE2jCLqCgoKCgmsaZXtBwWXBy1782dWVoCXvU7ACVW46ratdC7b4fzFmYSKcVnchTCYTZcJkPFQehpmEMDPvdJ1OW9ip7iRsuW/36vu2xKXdNvF17j2I+tL4S1JtM/P2o3l1I+Aya5Zqbu59eCvMif/UxB+zdtuYT6ZhfDCu7ppotcSHTu0/+bc2GFR3ci/mG/0QBmuDsL6+Frq9ruZhArnX7UxCv98PA3HX7/fEj25lKuFPCX+/ugtSN6ZhOKrLk7LaXD9Z3cX493q96k7KS5LWlzAPAzGfzur6A7L8ErRM/QS2/ElBu137T/i2/oDct5hHCeRE16QXdLr5/axl4idxG41G1Y3EXXzYH7fC7v5+2NraCru7u2F3b68yJexWOBh3w/7BMOztH4SD4VDDzJHHd+rS386zR5qr82FctzcwkTpjMXPpW4VOlr8S3jSvfzPTP4DpLI9Puyqv33nnz+rvKuShFRQUFFxhoNMbHhzMaYXA9QLSPBQBdiDCDBZcHIqgKygouKLBaOxABFziSDr86wmMPmshJ8L+Okv/caCoLgsuC172ks+trgBqh1r1QJVDPTWHGDVUJVb1NpsIa/sTcWtVl9PxJEwnSxo/aqdu/U6H2qTTNapLVeXlqh0TfFT9LWsmYtmqCpuYaZotMvtitLQZenNxutK9MY+qy/o+qt7q/ECNPB7WqiO8sv7hst2q71HrWVUhWTfoR3VeT56jVlQVZrcr7Khqcybl0xVzVHY8T+pLzKUTks57dx5Dr7oMU4n/dDI370iAmyc2qzu5b7XD2nq/uovxRR1t0cgfd+uRqy5jmBZWdUn+zlz5W9UcJpnqUuySBwlEZWKdS1wR5pQTHEvV//AnHpI8God9BP14FHriHvXheDwOY/ndO5hpuxiNxto27NSAwqXf12cpheqqgkvPxOQ/ESasDK08f7x7aWHVVYRXXU5nI6kH1Y1AL49w//vv/Dm9X4Ui6AouC1720s+vrgRSw2w14zoTdNT5rJ3kggMhZ+1zbQUdczzMMx0K6Uy7/bpjoZPycyyEaWHjS6eQxdeDuLqGm0M6ejPH2IAE1VoyZ4mJjc8qcw9MvKBD6CTQKY7oTSvg18TGRy7NFJ2673SMf+JVd1D7h7A7e/pU6A/6YX1tTTq1VpgMD8QkeoIQYY4vztn1JS5iPmLOKZqroMtGLZJ/0tEmaPyNoEBon9zYqO6a5keCyz+bv1z5jjmbwxW7M9fRe/tdIyg1fmaOkZDHRhCQ/6gqU5kiyN73pw/IVV6G5NHe/r78jsLeXj7HNXZzamGSmzcEnXsx8Bi7+o/gy5Gn3+YfaIe8PHx4k+lydbSPb5ojfM87f1F/V2F56goKCgouEgiqPVUzRlWbn1PDnJHJgQg/OuvhdTjntgwICcjL3N7eXtja3q5MCp4oiqArKCg4Vqig29vXFYD7Qj+nhHmcb4vzTiMZkRTkYMSIoGOF5daFreppwRNFUV0WXBZkqktgahlVzla7GXM4bVsNl6sucWvvsck8T0J6I06YSqfRNnN03jzChufiB829h5o7//I78c9OQAisd9i1yec+Sz904ef+C8wDrPr4N+borOpNLIwnuf9Z/OS67cK3YOtBu5fnb1fyO87RdcNavxvOnEC1WPuB6gr1MeZosToB1VptnpePPJ951WWt+iMtJzbWq7tobrcfAD/n1nL3WYIFefheMUf86ye4bKgujTk+rZqjs6pLwNzb1taF8PDDj4YLWzthtrYp9uo4obpT1aW8UKC6FOsZmKuzaDlVY0N16fMjT34YmakC4Ofo/PabhqrXqS7t9hYwmbkEOPj6f7GqyyLoCi4LGoLOQmpc1hFLTzq1+4ikldmOpiHo+DPuO3QcpmHh1nZsuJyZOSWc+mpvbzG7mGaB/xNjn5CyjlIf1OZYtf4TU7sYAKd5+nP7Hk37+RwbV5mgg9a+PJmZfUreHA/sHCL+2/LQTVjd2j6d3GBQC5p+txNuOMXikegH84Obm/Vikpl0clMzR0fZsd+uRlxOk0DcvKDbXF+r7qJ75v8SsJ/Nycq9F3wSieoiIku/wAv6ixJ04lfPxBc0BV0dHvmLALtw4UJ46KGHVdB1T57RXEhgJIyg260EneRIZRLBM4tOlbcJXlB5weQXhx2Mvfo598/vc7NzwKDTytPvMdUXnaOjzNEVFBRcUUAoosKcU9WWNYvqMgeCjo3hzM+x2rQhlAsuGiUHCwoKLiuioNs3NEJP6Ofwrncg6BjNMT/HPF17xYrIgtUoqsuCy4KXvfzV1ZVAdTuumplblt5ny+9bTnWJqXHvVZccN2VVL7i07qdy6TQrmXsubfS8/6uATdxYmOAFTb+s95Ja/UvgyqvOfHy8jxzTlRDTU9+Ts3YKDq+t/1y1zTuvxsYGL5mX59dsrjpSSNhWNcz8C/u8EtR/8TDZYIRijxBjS+OJzYGqu1Dp+fkbjhCzgxrcs20hgbj2OjOpA9Wcn3hoVZdt8WFgtpcAP0oiDIv8Tuw7VZ13P12iuiSCHTNnSOqyfXliPuushdF4rPsHD0T4f/hPP6IvCEqx0u5tqroROwi/nV0Z7UkZcD+We1t/KCpGyhZe9erT5+ubuw0HOgnoHibM2uJf7qNXhWb5IchU34Ks/S+Cj3CVnnf9xi/o7yoUQVewEj//8z8f3va2t4Xv+77vyzq8ZXjpp+SCzs7xNDATQWc2hNPKckEXhVWNXBBh13eOFjRCROlhwCvrH1cX1yywu6KhLgVxt4ImpukwNOO3PHyyfmSs47X1H0HQM2c9evOYP9WNgLDpXBP8hmncsncugXMk2207Z5YLCvbkbYqgW+v3wto6++7a2RwTUevrqCZGAvMNu29uJh39bKjCbW1toAtR/FmYmypY60R4QWU3xAPfEWdTyAKTXMWyOTost9wcXRa+JHDa3dQ9cWwlYCT3yKOPV4aAOca+CC82jMc5OQSdBefBJlA+jJQzuPa3rH4twnCcu7dnmS6CX+zjj8Jksc0yNOLnFkul9v577/h5/V2FPDYFBRWYI3jTm94U/uyf/bPhC7/wC1XIFRRcDjAyYfEFhxLv77OvbnknyOiePXiJQ7dQ4moD6dnZ2Qnbwq1tuFuZVJA+nrzROU3JH64LLg5F0BVkQMC99rWvDadOnQpvfOMbw2//9m9XJiF8wRd8QXVVUHB8mMhofm/vQEc0zOENV3TkjFjSHry4+vDqFnSkJwq5bWl/QrdBHI1EXLgz1I34jdFawUoUQVegYPL7H/2jf6QC7vu///urpyGcOHFirrL8uZ872rlyQKzPaTRGRwJKCVQXRyUgfpbz+Q1lnOOzlH9zHgnWwZEd1VgUb8uLwaL8WQoxzu3GszvneeEKKCUxcRGsf3hp/SPPObbK0pYH83uoPhPTPaO5nZ1d6fR39bSURE5WQdWVmE7yT+RcSJ5PJtGcOSx+qQfs12MPG6rCRNSKzOVZ8mwZrfuj0IL8Jd3ER1HlG+nYFqH2+OOPh3Pnz2vaeYYZccIf3PGMbQR8fod7zG1dbzIGY8EzyycbPo4edV2KPG6UObrrHOelgaGi/MEf/MHqScQXfdEXhfvvv1+F3xPBi19W76Oj2mb7wT3cHB0V3XYWMzpSU/epsXm1pfHU7r057mECl8saEy4z/+U6u280RswOnyNbHR4dV22+yr6HxE7c5xt6LYiZOZJX02L3UemhyH4SpYHcvd1HhXAbGv88mKPrde2+OI9ZaOskWPSTg55P2kObO62w3meOqw7T5k9HKtfmWicMxA7773q9vh4azTxdvO+GdT2EOrrHbc8sVlG4/JuKsMwgwngZ/BydhRatmJNPFnv7e2FbRnDbu/tha8hymJgm/kfQIeTjCHcczm/zvb46zdliINDK48voz2JqzjIFy+a0F2HksuNi5+h8/LL2JFhV32cu/umszDJHV7AU586dC9/4jd8Yzpw5kwm5L/7iLw6/8zu/E372Z3/2CQu5goJLAUKU48PmrNSaiYxsLLDPSsValcl1dY4moz0RGE8l5LWInlxHmuyNQ3vy2GOPhQvnL+j9WEafFogA0pjUlfuSnoJLQxF01yF+7Md+LJw9ezb8i3/xL6onIfzlv/yXw//7f/8v/MzP/Ex4+ctfXj0tKHjygXoOVd2cItz2Rdgl+jk8RvMHByIAlVHIJapq8ykWdIARVDq7Ei3Kww8/HM49fq4SdHn8GO0QdzbWJxZcGorq8jrC//pf/0vVlL//+79fPQnhS77kS8LrX//68LKXvax6cjx42cvM9gKwRFWB6o2Pa+Yw5nK5vJJywFVuw1ZrrvLtCdb3JrDfaBb+3sRflU5uebqHPb4J6Ft+hRhevAaYXLzq8vDwMZlk++zy7QFsL+gb1Rth+3mmGKsI3Dfy1wTPZR4f8a+Vq0bz5GG3jk+MX10fEBKoJRNQ691w9lR1J35J3WnNRro3b6DbC7oSYjz2C7u4ve2Ws+JPNefW7YT19fU6HcK2Va3pozr+lO/MqzINUDuPpIKhoiXvSBthxflI5gsnYQsBrarIKKgRcNGu+C7cU+9jpjBCPS+jvom4Gwnxo2X33Qny/AX5/YFboMM3Gy2aqsu8vJv+O9WsM/e2F58lWoc5RaFuHLXNPkyFD9+pxlP7+P3fOJrqsgi66wCoSV71qleFd73rXdWToCrLt7zlLeGlL31p9eR48SlG0FHB8o6jrqiAKjwxtR67dg5I3cdLBU6t+1ZrKs3U2siBybJ9dB4a3kU0C8L2+7AsEHKTJXNwPjxvvgqr4osgtGeJMldkBV1L4tYx8UPI2Q3fHs34xg47wZcfDqbuTSPvaMW+EXQgcy9+t7v1nBoby0+drOfweMlY63X023a6j07ibucge712eNrNZ0O/Hz8K2+8PwgmdA4xxIOodFXQmTAtewlYIuoNJJ88TEXqM1FSdKkLnwUfrLxBgb2zUlZyTep4tBVWWICAfP3ch3lSYTHLB1RAkDn4lKsLSoinockGW5b+g1873ARJHC59zPn4zV/5+vlKKNAPfmLSwZ51avOudR9swvjy3Cq56/OiP/mi48cYb50IuqSxZ6XW5hFxBweUEo387h8coKf2qytKPZmR0yLYZlu5vb+/oSkeIXdSeqxZWrIS4R3i2pbdm9MaeQNrXY4/Bx4Tn5vOFiVYtSbxTGjQdTjVbcOkogu4axU/91E+FF7/4xeGrv/qrqychfNVXfZU2vH/wD/5B9aSg4OoDo40dESaWy75/x+juwtYFXQSi+9QqoceKRvxqjm4uDghKvtbASJgtDvj76KOPhUceeVT4iF6nOcOa9T5AmPbHRWFdBN1xo6gur0H8u3/378LXfd3XVXch3HDDDeGtb31reNGLXlQ9ufywqkuwrJKhVrSfuVHVV3bfVHVYVVm7PQ1exe9Vg151uUx1CC6mWTCH41WXNjqrVJfAh5abrsay2HrVJWkbm++TEfXWxMRP4tZu1e/A3Kfl3HO4CNrtEUQmyz+59KrLPPkSQ3/GlgXx6eTbAWx9IO8HfP9ORlTMz/UH/XDm9MnKFOfTMOjMdNtCmrfjM0HxyLC10Bc3etamPGdbAnbyBSxSgv57bla1JnklIYgg3dYXyfPnEahbqi5ERanTjd11skFB3iCYE6j7O/vDuA2hAupgC3vEF/CjUJPbCq+69KpG/xkd/5mdS1VdkocWWf0QNNqzU0369ufbVzI/quqyCLprCKzkYi7uPe95T/Uk6IjuR37kR6q7Jw9e0FlQ4Wy1o6Fngo4/c0+js99X8+jQiZm3cvqAhiAz7cyb0+h8w74Y6GIU01DxOQ9/taC7nPDf+yNvs++RkXSzwp2st/nPSMUuBvH5h9Vl5YP/fo6mASfosu+hSVjtTt7R2sUyzNH1zZsOAu3smdPVXZz/OXOy3seH2xPme3hdEeK33HQmrG+s6wEJ7MMbjeyoSl5kzGIpzT8z54UgO3f+QBeQPPLwI/prR5XiOgxn9Zwn7nd26rMq8fnA74tzaLmNqF7QecGx6rQYPwfrg79UQcdLg8UqQTebLj/2jb2SFmkf4bt/s3yP7rrCv/k3/ybccsstcyF30003hXe/+91PiZArKHgqQSdt992pOvMgp1UjclAyZ00m7u25syZXgG/GPfroo7ptYHdvT7+vl9SQc+pewDIH91ShCLprAP/6X//r8Pf+3t+r7kL42q/9Wh3dvfCFL6yeFBRcP2DElAua5jfwMkEn5qgak6Dj/mLA6O5hGcnpvrjdvbjYZI+9f5Fx/rC+Z3N7wZOLorq8ivHggw+qqvK9732v3t988826ZeC+++7T+6cSjTk6o7mgwtlqp6rLTFXiVZeoVvJqau9Qa3SNagO1mlVtYYL6zsKr3rwq5eKActKGn6uWVHWpCssaWXT0xoXvVFMNuPiyReBQYGQCJG+z/HTBq7nRZZFXqPcS9L5bz8GocxM+7r1qK6sAApv/lQ/xMsGn380ZetVlT+eEajfWOYtN1tfrOT7mj6xqE/NTG2vV1oO+fgLomc+8Q8PRsCRu7dYoK2NGcaPRWIXa7u5BeNcffiicO8/HUkVISnysMEN1eZBPsWWqPXy1qvuFcEMS/723TBUtIG4WNr+An0PzxeX965vPLAFfvn4frJ8D5Ag0i2b9yO/z+gFceJX7o6oui6C7SrFIyLHg5AUveIHeP9XI9tFJnbVTNNQ4W+0QMqsEnW0XmFjzTmua6fBp1HbxhNrPJEuO6F+8fuIw4WtHXCe4IegksKzZadxtT5jvS2sid4+Qa89cT2iAV9Y/3C6bU8N87I6lsiB/7Zwd8Y2MoBPig6AWdnELyObgFMviE/1MIC22I9V71xFb/9mQ3e725iEgpG88Wws6Fn70zYZsBN6znvUMFXjM2a2vdcN6nzmvOo4zyT82fTMC3JZR3Ec+8Xj46Mcf0AUpfXFv9yniaug2bF803Gqr7MOtgolbLDNyh1P2erl99vlZ+Dk0G38w6ORnlXpB5ff5eUHabrs5Qee/r+9eME/dHF6q/2WO7hrGD/3QD4XbbrttLuS+/uu/Pjz00ENXjJArKLiSgZDSb99V5Jixhx95bM5PPPBg+K3f/r3wvj/64/CJT3winDv3uM67ZRzxZYW4J+5KOGKsYDmKoLvKwGbvb/iGb6juQnjNa14TfviHf7i6KygoWAU0CHa+jhWKbCtIZIsCqtvtrZ3w4IOPhAdE8CHMLPXzQeKuCLqrA0V1eRWBrwz8w3/4D/X61ltv1Q+jsvDkSsTLX1p/pme16jJ2Pjnqe4zsPizcWvvsYoqfeYnwqku0al512QjNPzBAreJVK81mU99j1c/RTY2qCLfZEUdOdRnDy99B8/AuVXW5KL9raP6a+HFv5+xIm52jI652zgm/G6pPF5zPT+a1LLxqzN7i1M5RoXpsu+XvVvU1FQct+xkicW9Vy6TnRL9Wzan/Yp9f4rmx3g1/5qV3S5jx/EyekT4WraC+3DsYhUfO7ctI8CEdHa6vDbIvLJAy95UZV56L7quLBK+6dKrB8STP74kL0JbXIrTcHJqPT2/VHJ1TLfp9ly131ql377FKdRlzlbMuyz66awpWyKG2ZNHJ8573PL2/EvHSF39edSVVUtroMkHH1apKaOcQWD5uGwp72JgFS1gk6KzuQsNrVPu8I7GIc261B7htuq/vUweZoEtVnKDLGvoCQZeHF93UuHRB14x/DUysOXG1ixu8f8wX8d23BNz6OR7Uhctg5bq6b8wR5unLTzOR9JuzGn3+IehmZk6LqFtzfOqZ8se9nQNcH7TDS194h470WKyCkEkjOV21ORyHhx/fDw8+/KiODk9sbug2A4uJi7/v6H15NPZ1rhB0fk7U57cXPP5Fp+v2KdryBZ2QC6pmfJcLOnyw8O49fPizma8PEeV7dNcQfuAHfuCqEnIFBdcSEEpsP9iG29u6AAVBx1cIEHT55vKCKxFF0F3h+P7v//75B1Cf9rSn6crKIuQKCp48MLq6cGGrOiszCjsVckPm96LAK7iyUVSXVzD++T//5+Gbvumb9Bohx0juuc99rt5f6XihUV3y7anpzKmyTK2LqqZcVWGBXVtJ2XKT7dvh2tx7VaM8CC2n+rmYWt/wT7C62VhzVJd1+Lj17u337MiPbHn8Avv5vdj3+5CMKk4vXf5a55jYfXgYWf+5tqpEjKw5eTPo53M4EuPqKtpv7IM07jV6JnsZQbHYIwGrVtNHVvrysB6Q9m63vmcfm1X1Yd4x5qTdJL9yX9tnj+bNpwdhbdANg0Hcb8ecJCM53Xw+HIcLe5OwvbOrc5m9fk+fJ6jfpvyBnfNUuPxp1DeXXK/am0xy9w3Vo1Ml+n1ybTdH59tje5abN1Wveftuzgnm/pnir5Cbe0gN1P89fv8dZR/dVY3v+77vC9/8zd+s11ebkAPPe1Et6CbTkfIwdKVRxw2/i0EFtc2KTtRWW+YjZnaDM3+mobekkbdNx3axWCToloG4LWtWmFhzYprFV67tvffPu49PSH985v1DyM6WvEhox28FnXiThSfXtmOLi03yOVHmrxIIm4UbCfThI9eR2zkobNriISyOykog/NHIlC/+uznYqak+mPdMR0v5DcxiFcztHBw+jzUWEWpu3POOdNOpDd07qN+7k18W4DCa01NXZET32PndKvdjfIduw7afY/P7yIIRVBK87sWz8EeF+jk2f5aon8NrCDovaB28oGtNV7nP02Prw9GQxzcXpFL/29w34/zud/xydbUcR2+9BU8avvd7v3cu5J7+9KeruvJqEnIFBdcSEFx6hJceGTYMB/txbi4yfman4MpGEXRXGL7ne74nvO51r9NrhBwjuXvvvVfvCwoKnnzEU1BE0FXCTgVetQcvHRpdcGWjqC6vIHzsYx/TY70+8IEPhNtvv12F3HOe85zK9OrC819c76PzqksqnK12HVRF6GsqoDryn2lRVvDuveoSI2ve7rRDp3EEUq6aaTQDc4saZ5XqclUzapjb9EIXH48svTDzD9UmqqP4zPuHVnK16jJPn/WesLLw5drP8djwuG4sZzfv1Hhl3eOyY9RSqOXscnnUnMNhrhrz6ZuaI+Awa6ouc1WaLU9CnrY68yL37pn/7IWxqjNRyaEWZEsFH1kdjfnm3CRMJAXJPfnjz5p0mr8GZm7fmz/L0pefTT/w35Pzn+HxqsjG9gUH5/1K1SXf/LPwqlPvn6lOFVx6MwtN1WUy/oPfOJrqsgi6KwRWyIGf//mfD3/pL/0lvb4aYQUde2wms1rQ0ZFZHTxV3FZzOiHbUbbkHiZQYbNq6wQdnahtiB3poLp9M4cETctr+CeX9t7HxwO71j5+Z/6vMAf+3tr38P7JndwvF3R+jscCQSfdd3XXBEHl4bl7uR4bwUTY2ffI5L5tNmyr/WyOahbaTnDaOSg65f2DfI7XdtRcTbQjjCB829GTvoE7G9KCXZgz6ZiTj9G9EZQi6NbVu2jD+09UObQ5uSd9XtCN56YRjQ+furMwG4LIzfE13DtBl59FegwwH+YFPn5t86IBbP0DqwVt3r5s/dKc7XBfl3Fy/553vll/V+Hw1lvwpOKrvuqr5kKO+bmrWcgVFBQUXEkogu4KwHd/93eHN785vpkwP8c8XUFBQUHB8aCoLp9ivP3tbw+f8RmfodfPeMYzdF7unnvu0furGS948edWVyFMZuMwMUcEoXbI52jy77kxP2F1/O12J7TNPTZttWWObmpUlajF7PJ3nVsxqsuF++KqX4DfmWpV7deqF9Qy1j1up5kPDmJkWxnurWoHs2YrzB/Y/FFkDlBeEt+GJwqeLlNdtsX3rttHZUF+NLoJ4x/lafPb50+8z1VpuX9ybfZhYWTrB/7bsyNBHh2JnwZXP/Th9/U+L8MEPqEErfbPflaI79H1O+RSBL/UyTlIn1Nl+u0DE6N2A5nqUexb1S+w+RPDM5ET2PgDe5Yq6NqzPUGeYVqnLfLYaZJyONWon6Mjjyx8+/KfZWrWp9x+05x790zw7rKP7srHRz7yEZ2X+9CHPnRNCTlw34tfVV1Jo5BObGy+l+Xn0GIFru+9oOOAXXsWn1Z5U20RStY/Ol27jwlB1zf7ephv83McFuqf6Whporbh04izD2eKWX6WpxcMYmg6Cq5sR8V0g9/wa4GQ4+DqBO8+5gjm0Q/+t+GrqbXuQKfXc4fuWsT05IIsi78kYORPLTbQQ5/docB5R4uYtoIun8Njvo49a8vg54jsiwpxXbY4g5CGk1zQpTkgwBxfzwlqC/zaPLFe3UVY92DZh0k1vePD95kSLXsWJ7DlqyUvgtfG33//Typ0dRHhF4tMqrqT4AWrhz/L1EyRKryg83OMHnl9ztO3CMn+u95ezrq84vHjP/7jKuTA3/gbf+OaEXIFBQUFVxKKoHuK8J3f+Z3h277t2/T6W7/1W8N3fdd36XVBQUFBwfGiCLqnAKgsf+zHfkyv77jjjvB3/s7f0etrCaiOEtFCJHUXRK2CauMwiiVVV805hda/WebfKmp8jH9gUbiWmXshrhIj7JP66VGgLiQeiWSQDe9y0IL7LL1SHt6+JWosa59nFtFObm7Tp3OorvxyuPisIKpQvLCMdaSmRxYfpXEv5imtiyj/ZfUHenP1x9DD2lc3BtzGPF5M5re8e89mHuXmHo388H8uPT79YiWngw/fU70wXIWLte9RBN1TgP/8n//zXGX5H//jfwx33323Xl9LYM4skYbkK7ou8DiEwHaMUOf1Kqp/Yiej/HcYpWlkftFQfHwaNH/qgzg6nGrl6BAHeXwWpGcZG/HlmXnu7C+CdS//8WQprX114+DNbf4wP2Xrg104pBDvvHvLZh3x5VHnZaJHbt9zUfg8S1xQXtZ8gf8e4mP2l0OeiEfLacLzzgXYsXmEHUsPm56UpmVcZf9i4d17eqwyX4Ui6J5k/N//+3/D61//er1mteXnfV59+HFBQUFBwfGjCLonEX/6p38a/vbf/tt6feedd4b/8l/+i14XFBQUFFw+FEH3JAKV5Z/8yZ/o9d/8m38z3HXXXXp9LYLP4szJvEFoLWWmpqn8SOBbdpwrmDgVstw9EdVSt9PK2OvWZIZtMh5lnE5qznSPH+qumpzdl8g96rFEVHGWMzdJkaVlQXrkobNDQ+Q0yMNJGhODhmfji2oHdWFkbNY1yWH/xzfY5iSG6AMN8aYm9yxfj6xiNCebH5g3m5MQ2t2ara7EizhGMoWWqcGEFuSJbjGp2Jh/Eootxxx+zs7PMVlVuFjQbVw2C7q6BSVSj3/rTIRiF7KWPqOkS3JiGfPyblL3ii7hRNI8TZTITsRNIuUT8/RwinFOSaNlw4JDS/Iso1jKKH5YNjyUdmLJbgNLqrWld46XlnOzI0LiLLEuuOz48Ic/rHvm+P3Mz/xMVWFey3j+S19ZXQmoYrTECmlxQsJMajZM0M7ImM97yAq6Adzsi2LCvkNrqcA+urHZgMu5gwfDep9Sv98L62uD6k7c05mZQ58Jm7mkBKIyGdfh09nmZ3F2Qsvt07LQ6JvkeMTO43ALsfOow/eI2VOn3wOXtplrZxF7I4UudjBnO3r78UFtHzNbPuI6tM2h0N4cr2x+EnSWf3Lf7dX3wMaP+mD30SG4+AZcDSKI/3Wcs/iJX8vOKlXzwVp1F0GdSuBF5sDsG8O+/X4i9/1uvk8wBy9fef2w6TsKfDft97FlH+RbgJl+uLRGYwO3aZ/A77OTBlBdRFAmFrwQWKxKH23IYuo2evr0eiT/3/XOX9DfVTi89AuOFYzmEHLgjW98o/4WFBQUFFx+FEH3JAAB95/+03/S68/6rM8Kn/3Zn63XBQUFBQWXH0XQPQlAyF1vozlUDzWrhxVQO9g5F7+PS5dIG3Oe4Uciqqtsufp0WoUTiXuOWEpknsf6jyecRZjIPJsFdlB1JepeJus+RNXcnOLehp/8yN3kyMwWmFtYv20YCfhh8yvl2WGU/1TJdxjBIneWy4B5Hh/ua2K+bP6skT6hLc80b2Zp4wZRbycuMreU/yTd7k+iYOmRpY8JPuxYOnj/FsVjGS8VRMmy+SCHyQn9WwWfvkuFr++eF4si6C4zWHySRnP333+/ztNdD7CCgAUcGehb6PDm1L7GUDpEQ2ArOX7qwc0VWVBgwxPbWSfY7tBZ1P6LL5l7OlsLDT/ryJx7sZ4JWqGNHxbEWkYLb+bNFyHzfwFsp5jiOSfmhsD65yn/5W7kP89VyOMTBdyhgk5pytDHR8CcUUYpl/liFX1RquNGGLlg7GiYy2jDa1KjkMHWT/nXcJPDmQnJwovhKlj/nwg9Vpl7ePueF4tFfiziUVEE3WUGQo5tBaDMzRUUFBQ8+SiC7jKC0RyLUMArX/lKZUFBQUHBk4si6C4jOM/yeh3N8dWUmqh3UC/VzFWDHamIh/91xL5VRYK4hSByIrSqL6/SaIn/nW5vzlnohNGYT8tEjoV8RShxxlJnlssnivvQrsm+JXYbJOoXdvgvEe2ppTyyajL5j0dzAp8/nhKwoVVqRaIMS7R73CA7AzLKn+RSTdRAU0ONVPQ3kSgcSrVCImtacylix9wuf3zlxzKLP+Gb/CM/vCqz1eoKe5GBpfw5qQOWQerAnFLGM9TPS9iSOpHYhu5PEpLTZXoe/yY9JGdy6jxwTW+jLflomdWIVtz5yA7IRO5rihtHu2euI20q86+yk9mXLMjLPKqpE8VRRjsnq/VPU7EshJzzgI6Io9ssuGi89a1v1V9GcszPXU/oSM1NlK46+4tzG9I9VNTGrrYiG39ix87JSLvIBN1YOqJszgwLBswD8k27RFoa309LjO5ZoBIp7VpanbTGRImDFXRs2LWCDvszcWcpkchYtW8lyOYa5N53fJa1y8XEd6JcsxYSc4pVS74/NqfEYUq6DTVSiSAGdQixZEKno7U0/RIkO0VizEkOjCTMxLHkl4+/BVli64PWoZkIs4pBiQBLrOtWoviScSb1IKPUicQgNNGNRHgZ4oclVTAREOfEaMU80Ic5svqhlLgsEXRJPCTa8pC3l8DX9LryPLEjz2pOhDwzlEqdmPZ5WnrR45Pjy5wsspyIH5ZTeWibTJ6aJsXXikcDJV5wGfArv/Ir4Vd/9Vf1+npZgFJQUFBwJaIIusuEpKp89rOfHf7W3/pbel1QUFBQ8OSjCLrLAD7BwzfnwLOe9azwzGc+U6+vJ2RqF/lbBtRz2Zydo52fUzpzwhiNx3PGLQP1nB2w7nFjVYPiPGT76io3Cahicve5ygRVqd2uMJlyBmedfmDDO7rCZTHw0rIBb2GBpSw+QmxY2vkTpclPtgN497Y8uPfI7Dr75Kc158/mX8pDC1seMHMvxElGcZOo6jH5z25tsKpvaFXj3Nv5wDas5p5q2vTkjPOsefxW0cPGH14qfPmuyu+LhY8vXmZ05heLi3VXBN1lgBV01+uWAtsxrmo40rRj51ex2fB955E6l0j85zzLRO2c6Lwq0iKyOR1xI97OyZyH7dj899KIgw0/Lg6poe6toBP3eaeBYKjDg5cK638MI0dmXj2rIek3fyCzL8wEQdX5J2LeLKOcHt7clncsc5M3wix8FzdgyyOWSe0eWvtNWqGdpy3R1gfubf3ROiSB5PFfTgvuPMVSxsXxrnmpyPJXeNz+e/9W8WJxse6KoLsMsGrL63E0V1BQUHAloQi6YwajuY9+9KN6XQRdQUFBwVOPIuiOGR/84Aeve7UlGLdaNeU+X04c1VGWk5bYqTiVWjnrtOZkfXJaVgxZ4t/udOcMra740ZtzMu2G4bg954Tl5brPKrLT6YV+fzAn30sbDadzNvbVCe2+QPEl9DudOcX3MB1P59RPnqBVSRTQ0Gq2QkfyJbEtScodePJ/nf6FlDy0tGD1v41/R551JdzEjrjP44cb8TVRn2Gn4sxRnmHH0vvn0yTBZrRL1dtSR/xydnY8JMoTcRC3ekA+k9Tv9efsdXsh/55bjEECqsTFqk/iFZnFV+45Rs5Sctn8Ef+YD4cxU2MKXQjynzw3lFiZP9zJ/4biSUbn3PnP0n3ameRdRZ5ZroYtTeKQ70u030NUToXSmBMbqCOnjBtdpO1UpJRzSiO0TPs8joi8BhRcMtLeOT6qej2P5mwVpZGNpyJAKurcmTxLHEvVtvvSUmeWSNWO+2wiqba2I2OD8HRSczwSAXfQmnMiws5u6mEvne0Y6VZGByLkKo5F2PH9uUTpZ+nr5kQ49aVzTCQGmaATam9SUdukxNoydhc1Gy3fkL95Xi4inZjkaeKiuQsbf8KzglbfJSSMOZ2QaYt/VrBZv2rizpAwK0aIpTkFzoLdwKylbsInD8lSS1ueCDqEW2JXXmSyfZqkWOtNDT/Pa4VcFHQEkijpFy8SMfd/NjlHYePFxAYnJM41qWH2XiIh/1uSPMtaZETaF4XYvnKuBG+flukwhYoq2Az1JVE8TvTw6Y9/PtaW2c5P8SHxaJBYFhwnkqBDbXnnnXfqdUFBQUHBU4ci6I4RqC3T/Fw517KgoKDgykARdMeIIuhqcKxWon5GZzabcybmds7CU/5TO4nc2/kUv4eq021n3x9jDsMunVZVqS77j0RVYpeK66dcjHtgtytwlqZVs4AsfPEji7/AqhLj8m3UNZEe1mwRF8GGl8I8OvL8hJlfC/yz5p6LkOXXYYmogBfL/MS19Q/m9QnVImmK7HRaWXnCrLyEefqb+dHrdWuKe29uw4Me3ryRPom3ZcPcIKYw//Pw+SP/cmLHcFl4wPvnsdL9CjbcOwve3DNZPSqKoDtGvO1tb9Nf5ueud7Wl34dkO35pOlKTxVJFc6kEvpHZSs6+JSuoOu28UxPjLDy/L4rFIlmnJR2fdQ+Gw9GcbEK3/tHErPsYL+IYSfrSfqyUdpuelCYLb+6ZwQYGnwBsfip5ZrgMBOlpsTL+C0AM7F+Opn+2PHiR8Onxgi2vL1JuYiejEUodIcItMdap3H9Pj4a5o08PPlh6ePse9sUuvlgt56WGJ6nK/jy8e091YrjK3HNu74gogu4Y8Za3vEV/i6ArKCgouHJQBN0xAbXlxz72Mb0u83MFBQUFVw6KoDsmfOADHyjzcwb9fntOVEVhOsuJ2iExoEqpyV4qlrwnaiWN1iKT/qJiSyy0621VDc4Cn+OZzMkWB+sdqsv+oDtnp8c358SsIrbHs+mcLGqetSWmFTv9Tlhb74s79uxNw5DzNmcSTkWeWaC9sqoy7pcB1VC2HUCekSfLmOWfcCaZZOmL42Jgiy6SLSCS9orTFp8ycpQ0JPI9P0l4TY1TfJ5IjiUSPeqEpd1+AKVkhJNI9nPYjYMShK6CN/63pMxrdkIL9aRh21DvxZ5lS+JdU8pE/EflmShBZGxmWpWwiunzO4so/4WuJMKyI3luyY6IjOKtZZbfCziROE+XcCL5aDmWPK45o0SEdQmJp4YSg1gAh9ND0uDZplgdjwpiUXAMSPNzd999d1FbCvrS6Sd26GxEuBxOMTedAPuwXDOxxkrbjJkDydqtF3TiIFtcUi1ISWSOptfvzsnilhmNtyI7d0YSz0T2/tlOs9PtiqAbqLvxdBKGExF08ps4pbPKWq3EWqJuuQyYN+aU5HkizulmEuPHN3ETSf7Y+BKDbE9VjNJS2PzyJHVjEb+Wk1bXMNshp0S4JcZ4SRiG+JlI9OouFNYCDmIrirj4x1Uu6CSe89yJzAQVgsvSCTrm+BBmyxhfWiSoinloEgf7VuHqO5zKC5GlF3YcUpBRMilxoaBzlEiuoMRyCafiieVEBFxNWgglI3YXUswkjS7JGT18HetKnsX9nDmPCklhwXHAzs/dcccdel1QUFBQ8NSjCLpjAGrLMj9XUFBQcGWiCLpjQFmI0oRdyt3t5Mv3UaVly8NVPWNUFZUfCWK9Ug1F6nJtC+tWKDbEXlz6n5b/W7D82qoy2etHmImE0e9xTFgkqiu7byvarkGYpINvlW2sD8Kg32tsL6h9T6wRVa91fD3j+YYx3Yk2P1KeJIqP0eNDsCgm1n30o4YkL8vfRfDuPT0uxdzG/TB6+Pzy8ObZ1gThpcKnxzPmcU0Pm/+e8l9lq8aiMCxxkTP/WwnvwQqssu7rvIdPc0rHUVEE3TEgHfvF/FxRW0bYSqv73NiUXZEKmgmCShgkauN1SBU7snpYQRuPaQT083nHFe0lEMZQBFziojm7TNCJH1n8mGMxQFCzKZ20rq0tEnS134u5qmOqAqrA/SI7lquQhS9/y90auxU9cLaMHivN5eE8Pt6CBO/j4+nh5zgtuPXmtv4yj7fK/1WQEsr+PLz/nrb+LaJHyrbDuCgMy1VY5MbSY5W5r88eq9yvQhF0x4Ai6AoKCgquXBRBd4ko83MFBQUFVzaKoLtEFEG3GJwPmajL69utOdmH1O1152x32BmWA+VEIrolq0qK5FnFTivMejVDV34N45LxmlOxwhaARI74moxHc85mk8C0TCJe9lrTOTtiHsbDOVvTscQD1WXFzkzSJdGoiCZmMpnNGTVNNL1EiecSYp6rdWAN8igusq8oxnafH1uY/HrzfHW5tRvts8TfcjmI5WROlv93yKc5077I1pxEaU4x68p/lnYfYKwdWQolSEuWtzuy5L2ipplADiNzoLpovzdnu2UoZmJJWMdaP0NTcTYWSpyWU+pV0A9SSf0aS5swZAvKir+xBJ++1yhBholEw9Juh4HWLX95frEtQ8rM0EN8yf48rBl/cdMIv4tImOKHCX8mjSAj0weG2LGcSp3RellRXCiPCnFScClIasuCHGM2TVfUOQT6iYp0rB32J1VEWFks0sfbjt6Tj7O2RLgkhq78Gs4QNgi8iuz9ORABlzicjCSeNel4bD/IvrSeYZu9TtirSG/Xbsvzih0EnfSNiQgTrCVO6bXMt71m0nLjPrPFZIO3JDOjBR2NdA9zSm6LG8mXxMpWYvIjkTLJ7AsRlonRfY6sfIQtyZM5JRZtyeOaki/ixrIKVsl9JtiEuV1ioN37nAgLy6m8bBxKMW8kWv5ZRkF3OKWSCSU2FemL55T6HRcq8buM1T45ib8Kt0SJ30SeW4pt92fKWPLTlo+WkeSzpf+TgDLafYhxL2IOW75axg5Nc4g/iyhmkk4b/kzuLafSDi2tXSV7ITWdkeQQPCqoRwWXgCToXv3qV4dP+7RP0+uCgoKCgisHRdAVFBQUFFzTKILuEvCLv/iL4Z3vfKdel/m5HPZsSU9UPZnqo3JjkZlPZ8EupebZIhVmol8e3m3zuRW+K2ZZf4YFN/YzPpNxvTUASnDB7guMqtakriH++Z94l+3B4n7ZPjyNcxXXRbRpS7TgPo9f7maRfx7W/mFultHOmcptA95+jtxsFeW/PD8dY72hDhm6v1XI6p9ymX9o16ibEn5Fnll6+PRcLKx79cPBm18sPRbZsVyFRW6WcRVSuRwVRdAdE4qgy2E3ZLPYw5J9a15wWXBvzfXDqYaYZw1D3GT3Qrsnig9xWsEG8w3szCnWgk4pcUwkvKzTr+J4GEEmeCQAmx6/Dw/4+Hsug9jI4kd4mieGNj+8f96uD9vTg0dHsxMJmnmGQU1rX91kNwiWWqhE1vlbC7vDuRzOP+EiPxIJT1+KxJ6to5YNaJoMLxYr3Nvs0izzDxz9XwM8MrR2+VsF57zBRpwcfH6mcj8qiqC7BJSFKAUFBQVXPoqguwTYhSiveMUr9LqgoKCg4MpCS4aBRx//FWT4c3/uz4Xf/M3fVEH3S7/0S9XTAnDnPZ9SXUXMooJCgXoNlV6GVr1U2Ku/WqET2q16r52q4Ix7/ZRO+/BqLMbB1nJUS6gk59B5uVF1Q/xy/1FvDvrspYpI6pM5iCp7CBIIr7oEk0krjEb1E+YI19cG1V2VXpsfzr3udWI/WAVVFuk8YYTuU2qNq7sKxgMup6zJNsjiz/W0dk9cuhLHBE0vQZh8R/2cwPaImSmfJsR/KR/KIQF1YAKP4waEhKg6TMDcftOP+HA+aQLmU/0/gvyx51Nyr/GurGhOmOyg6tSuYzopc4uYfZUjsUwdSsC9LX7AuacWpjorbHhcj2vvFNYcNHYAOP+mY1f+GYhgdVnBx0dSUf1GsB3CouMSmNUfwLaLJWib/AI+fT7/2FuXoHalvtsqnOrH+/9f/GrMKiyPXUHBE0Q+ByaV1OyZQagMhwdzjkYHYTwazjkZD8N0Mso4YW7vEDLn1ZWGdhjjn3R2FbvSqvrtzpwcOm0Xj9CG7RxjXJAiaahIs2lJx57IHqvppD3nTO7thmNNv3bFi0lTprNMRCC0JE1zzibSUYidih2x3xM/a85C39FucO9JGF3puCx7+JEoQrQvgrLfGkWGYehM92vO5D6M9Lc1PQityb64Gc/Z7bBJPPali4hZj3DDZE4bPzaUq135Dy6CCtM5ESKGPJOXiTmn5lrvxRb5JgUL+Y4ZYjyRd4Z8g7vEVQrCku2ZyT35P78WSgjzunVUSs2ZU++lHrYtpY5a6suQZePP+t7k1P35DeZiKaP1Wf9SvawoSc65ArEN1n8taUeW1BFLFx13J6SiwCMCPwueAP74j/84fPzjH9frV73qVfpbUHA1gtH12tranIPBQEediWuDfjh58kTo9XthLC8Ww2E9+i0ouBpQBN0ThBV0999/v/4WFFyN4Ei29fU14bry1KlT4fZn3D7nHXfeEe6669nhGc94Rrj11lvCqdMnK5cFBVcHyhzdE8Qv/MIvhC/4gi/Q63e84x1lMYrDc1/46dVV1KfbOQ29N3MsUfdh79FK1GqJqOCp54z8HBodNUeJWVj3wFZynXMy1V6PIDJzVMSNLQYJfFqo17PhRxVnwlS8snNgam7ix3wSnwNKwD8+5ZOAaqrXqe89OEaL8yFns+k83oTBPFpUDzPvJyMzVb12NX9Go1HY3z8Ie3t7MgKTsFsdcYvL+C2+4XConxSCGxuDcPb0idCXOA36g7B5YjPcdNNNGg7Az26vF7a2tsP58+fDhfMXwgMPfDKcv3BB09lf2wh7ByjwIogbflHOcQ+k5O94X0zqPMdO3HPXDhN5vHsw0blBnoHmHF28BuRBNkcnZrZ+AVv8XPfFbwvmeS1akscJ1B1b3vJEnuX1y8YPkB4L0pVAUIyME4j/npRNAueLdnr9rI76pfN8yspiLHlqMXOTfHn954TNfBTu24edAwd+Cwwt0IItFRlmefqd9dAz7QM0yqud32ftUziVPHJeKP7ot3+lulqOIuieIIqgW477XvqZ1VWstLZj0I3jpuOPHbhd3JBX9FWCTs/M7NUNlfaQNWS5zu7F77zaS9yYyKmAkLOCCafWPQLGCir6BNsP0fnbxQwIzuGoTp83Z36m3+1Xd83wOPuxx4HU1SPcRhVjXwTKQEZhvXDq5Jp0zj2574tg6qgg29nZEcF0Iezs7sk186FDFXw7O3vh4OAgnD17Jtx445lw9sypcNutN4bNzQ3hCRF8G2FNRngJHLrdlfjti9tt8XN3Zzc8+OCD4UMf+pPw+GOPiwztSw4O5h01cUeYx5tYvq3pUG6iDcx70rFzTznQR+8NJ2qaysWWD1cNQWdeRLDqO067mIJ8WyXoOKM0Icavrm/cd9yLiBcE2WKihajtx/ib+k948rJgkb8Icm/SKxzKi0wGm0GCPH0cKb1c3dxpW8EuLi5S0DEvamEXSwGOyrbw6QtmsZUHIU3EuRV0vByC9/32/9HfVSiC7gmiCLrlKILu+ARdW5p6XwTdoBqBnThxQkZcN+ioCYGxvt4XQbdeCbqe5A1+M3Jj0c8wbG/vhgc++VB4TITSgw8+HC5c2FJheMstNylvvPFsuPXmG1Rtubm5qenDbUK32wvrIvzonHlO2V2Q0dxHPvKR8L73/lF44MFHQm9wSjskQN6SvWtrfY0vK0xPiyAmToCyw0/itr+/Hw7Ev/3hVBgFMf7b9OPqahZ0xNfWd/xbl7xJQEZMpI5bFEFXg5CKoHuKUATdchRBd3yCjrgNxD5zY2dk9HXjjTeGO+54ugo22JUhHwMoOmcEH34jyDSFks79g2F44IEHwyc+8UD44Ac/FB599PFw8uRmePrTn6Y8Lf5uiLDcWGdEt6EjuKGM+BLidoM6fnS6eyKgtre2wgc/8KHwR8LHzx3E8ASEf/rUSRXIp+T39OkT4bZbbhSTaCMKuq4KNdShWzJK/ORDj4ULcv344+fD7t5+lj+4upoFHek9ffJEdRfTY0d0jGV3D+p7UARdDUIqgu4pAotRWG3JgpR/9s/+WXjd615XmRSAF7yonqMDqGcSqOTZPjapyrYaIhRtQ0DQtf0cgIHO66DfqxAFYX3fEkFi9zVhIqIv3ghY4s/nUxLoNLOOVBr91HQkfs6u1WJ5eQ38Jrz0vb3ZREYsu3uSLuYCZ9qJr2+sV7bFvnhNx0DjVQEuUbNzND3x68zpzXDDDWfD2bNnww033hBuvvmmODcpZjo71pqq0OsLOyJEmK/TNEq+Mwo7JwLkscceC3/6px9RtSOqz1tvuzXceuut4YSM4liAHufsogrUgphM8U38gpQV2zoYkT388MPhox/7RPjjP/oTFXyDwVq48aYbw0033xhObp4IJ0XQnTwVR6AJ+EE6cX8gQnhvfzd87JMP6AgRgby7OwoH+4TYlTyRfJa8QQykHNHws45f7o2g496+WCHyBzoHVOcp+QbJQykgCfO8vGzwoiAjYvLU1p+Z5Gdrk6v4QFD7JNGT3Gl3ctXsoMpH8oOR7S233qJmgPij/h2NZEQrQn1P8uGxx7c0TZQVcd+QMknAVzvCxj1qaeYByUd+o9ys42frO+7r1xCBXJJHFg1BbdojsO1F4W+RRBbuNsaihrZ380hKsLqKIA8Tqs0nmaBLeN/vlDm6J4z3vve94X/8j/+h18973vPCX//rf12vPcqG8cPx/Od/anUloBHZhidVbtk5dXrGpBE0banhVtDh1nZkscWYjk0FQG2/Tcevc0IRvO2qQKnA2/+Eb5ZV4G3Vxo9DnkcHJj7i1o442Gc1YKNVBVoUH4NFFbghnAxl9HPu0cpspsLkxMl65SIjWsKn89G2LPGzHcuG2H+adJRnb7hByapI/E7g5bbTp5OOIzrtwG36JK/oKCcicB968CERJp/Q0dQZhObZqLIk+nTMvX4/9LoySjSCnPjIK391w20Udvv7e2F7eydsnT8f/vi97wsf/+jHdBR3+x13yCjujApz7pnz25AR5GGQ1IdHzz+sHzH+6EceEIEpAvShXTEQgTvtyNu8dORZ/ublr4LOlJ8370j+rrURRBHJPK007fGB3vFW6A+Y71yXsmUhjel4RdBNx8S/zgOLtoxGTpwQ+7rBLObPhgh51MAnTshoWdJ/5uwZNUsYDUci4Mm/bRGyuzLKPjdX5Y7kNxPcEt+DkVm8IvfnHn+8Kge5V1G7kb1MoiVIoFbt8+1DY563H83mi4KtX6Cdy6kGpPZVV4thF4MB+6IKWqFuvyBtKH/f7/7/9HcViqBzeM1rXhP+1b/6V9Vdja/5mq/RbQRf/uVfXj0pgm4ZiqCrBV1gw/vB3nyODUG3xvM56Kgn0tEd6CKRqNaqGzpzXE+/5RYVTAg6OlAWnSSsEnR0iGmUxqrJTz7wQHjk0UfCpnTALD4ZiF9soj+6oItpjPN10jnv7oePy0jxozIiYzTJKJERCR08cSWtg/X6JBgPBN32/gVVqX7ygYdFyJ0PD37yfDjYm4W93bF08jIS7tf5EeuPEQSafxcn6EjDqdOnwtkzZ0UYrYUbzjAC6+seQvLPlj9qudEB6U9xqOMCyOqTJzGv3bBKdX1tPWyKoNd6IHlhQZzHI+Y8h8Jx2NqWEV41SqYOfKLaugSw60d0CEjUy6iQUYtPZ+uZoBvKSDmhCDpxL5lWl851jv/5P/9n+LIv+7LqbjHuvffe8IY3vCF8xVd8RRF0S1AEXS3oTmwMpCNlzoo3fOn4ZKSTCSpp0xMZQfBmv7W1pQs9YMK6dL633XRTOK0jsLNhTdzbN/ZVgo784RmCbGdnNzzy8MPhscceVaHWF/vMl3FCzFEFHai7DcmrySw8KiPFD3/4w3I9UYGMMGcBC4KO1aEd65/DRP5G030ZcQYRco+Fj33swfDAxx6TvDgIjz+6HXb2pNNe8/WnLu+LFXSk97bbbg033HhWt1GcOrUZzpwSQSfpplxQXTLKTsCr3e18jsuq1qh7M4m/BXFYE0FHmaPGZHWsxbx+SjZid++Ar9tHQceIbksEmcXIHFGn9mVEHuc4t8L2zl745IPnxasYJ8y3LtTui6AT95IpdQu9zvHCF74wvOc975FO+vnhLW95i76Z/siP/Eh429veFn7iJ36ishXxnOc8Rzsm5ujuuecetc+G2oKI5z73z1RXAifoQN5R5Pc0wmyOboWgo1Oyqib8yubo6PilE0vAjAUhCXSUM7OPigZhm8V0zNt33jHYVtPhCC0RdlHQ9NQtcThz5nQ4LaOGm6VDvf1pN0fBt7kxFy50qBoP+Tee0MnFEd35c+fDJz7xcenI9sPuzo6OuO54+tNVaDBCYOk/nXICgq7di/OGCDp+bUeU0oKwY/TA/M7jjz+mHSpzMwNxMxD/5oKOX+Ec5KXxL4E0QvZ4bZ+/IELqoXAgIwxGMwi6pApEeHTNWaEgy18EXTiQYHqS3mE49/iWjGgeDR/58IPy+0jYH45lRFdZFuA2m0OVv4npKLm39aMt9WMQ9jVPyAMW3LzoxS/SRThnzpyRexl5rbOFot6ekc0BSngH+3aEJOEZc8La3apfTABh4ZeOZkXIMVK00PIhW6XwyIkD0qj1nnlc6nNe3/y+OeZIGeWh6twXIfmBD35cF6gc7B/I/b6MiB8SPySmEndmOydtyUDTxmz8wSpBZ8trEThqz8LbH5v2Bbz5SkE3M/VRkNwXQfcEkATdl37pl4af+qmfqp7W+Pf//t+HN73pTdIJfaJ6UqOsvMxxzz0vq64EjD6k80iIHU7dMFKHmUCVtNVSz8Mzq7owsx0BjZb5p0NB+GYEhHCx4SNo3H7ZDDMZsSDsEhDCrBxNaMlogjMb6TAZrZE+NgizYOTmW24KN91wVoTdGRVAsSONi0WSQCHtY9PQ6bwefeQRVTM+Ir/E9Nabb9aFJjoKE9qOc5Ggo7OukecvHSSjuvPnz+n9+vpGWFd3hws6XhYsrH8Iun0ZKTLC2JGRCCMTFW7iB7/Ee2D25YGs/FTQyYiIMyyZD5u0Jd0Xwvvf9yfhTz/8gIzoDsLOOJ+jylftiuCb5iMuu+qSA4UH7QNVASN4UVm++CUv0lWmjLh0G0S/FUe2El/yjjTUoL7lI6oDeSlJYLHS7tZedReBX9G/gealXXzkQVW3q3Jj+nx68m5aF9FUQPnwyKNb+mLEnOnO7k740Af/JC702d1TITpuS3lmdSBvL3p86BL48L0g7oXcA9JgcamCLkwXawSOKuhMay9Yha/+6q/WEdxrX/va6klBQROMwE6fOaUrDlFV+rd5D0ZVSbhA3Nz2tKeFpwnREtxkhBzmdKBXEhB68/gj4C4xfqx4PHnipB4/9vSn3yaj4MOFxFGAf8yNUh6oKnkBYVTN2Z28GKyOr3TKfB2iJcJHybXlNAp0w8sJ8tuGRf1C+0RduevuZ4fnPfe54b77XhDulutbbr1ZT7q53lEEXYWf/Mmf1NEceOMb36i/h+H7vu/7wvvf//5w++23V08KCmrQ4bMykj1kcY5muaDj7XUuKISp89JFK0Kuk5DD7EoTdMx5ovZL8WfEeilAnXfi5KbOo9162y1xQc8lAMFAHnIwNVsz2IfIxnp9eRBm85ELwWjEktFXTY4Pi2mnjCifXM12OYDq2pL0bMio8czp07q945577g533nmHpPUGfX69owi6Jwjm6D72sY+FH/3RHw3/9b/+16K2dGDOJHE8GYbR+GBO7iesRKw4mw5Dazaasx3GodvmUymRHWE7I4srDLstVd0ltrptPT9wTolPnNeL5JxE3bRecSb3/hM2A3E3Z0cofVcih1qsD1pzDtqT0JsdiL1J2JT7MycG4YbTG2FzrRv4hE5nNlb1Jp/b4TdMJc3joYRbEbUYzw1JM+tdBoOOhCfpknRGDSy/6TqRxTHsp2K5eXN+Rx6rME1Utal0jKyQZJ4obm9g5V5kLLOxXE91NBTVSOTiYkquqvpUV5Wur4ngkEglzRP+yx+qwNq/uP8rkYU1klNC+RWPWNzDlN7JzU644Uw/3HjDWjixOVCBAvvz/KjZ6cS6kogqeU3qxeagG85s9sOtN50OZ0+thxPrnSCPQo85VSjuehL3vgg7PtektUXi2SGf5pTwWuzpqz+91Gn1DTmNRuKhdTOyK2F3xeNuT9wLW2KeUeqFZXQfiZa4QeqRYduQzwrFdjOS67GkZxJObEi6T62F2245He68/cZw0+l+OLEmYY23w8H2o1LP90I/7KtKd60zDN3pQehJOxyI+zXmnMWvxB67GMkWQ+4tZ5SzpeSpZawQhs5B/ORV3BMI7Wex+DST5pME5HlUaBQKnjj+7t/9u+Erv/Irq7uChFzQsQxdhFzFcSXsEtHPR0EQ2Za3ZPttMA41bnYKdN4VRRC1RSokSs+UNbKpNAg6/0Tm9JijSJQIhc5YwqrYnUhHK21oTgmzL51pIh3lugi8xLXuLKy3x+HEoB1Oy4PT0rGeXJO3bDq0yYHIrf152oKkFUE3Jd3j+K29KOzEXkU6LV3J2W+FDRGWfRF2M8mTmpInksxEBD3zSgg0FuXE+Uo6gZqYJSLoGAHwS2cRN7KLOxVyE50vHEm8dBO95rE4cv5ZIsDIV4QnI04EL8It/WE+Jq1iB2GMOQIvkRFch1keESYcXi1J0k67S55utsLNN2+EG86elJGLCEaJSp8XGrUTSR3pS+fc60gnL+y2xa38sqPh9CkRlDfK6PCmM/ICsi7lJ26qlynqWaxrcSFRnLeN+UE4NSWObF43RLglciDyTPIsUQpUhSYn1ijFWz6Oa5mPCAkvF16eXtDFl6aa3ZYIuTCUtB0oB91pOHNyIELupvD85z4z3PfcO8Pz7np6uOeZt4Rn3342nBrIS1l/FDZEyA3aw7AhdUiqmQg2qf9ST7v4aSiFKGmTpB3CqcTJspJfczYeuGpEvThc0IkdJiKtpE08IijZgoKCSwBL59fZL4aaUYgaq+CJQ8WjdGIc7cZCGdTAp4Xs+2ME6E/yb4A+UDpGtjWcOskRZKd1BWgiauBrHbxwbGxshjNnbwg33XyLaqBecN994VP+zJ8Jn/bpnx6efffd4Y47nxluufXWeHDADWdVtcso3x+ndi2gCLqCgksEc2Z0yGuDOJ+mKsGCS4MIum6HfF3XU2Q455NFKayYXdURp1Ekc2XMkSIo6fiVzKVdB+XDCljdeyf5SHrPnDkbbhGBd/vTbw/PfOYzw0tf+lJdZf7c5z1Pt0fFbRabkudsli+CrqDgSECVlshbuIXOk43jpvBFZPl+UjNCNBRRtbGY+I+wSaRhZ5QRlyWbvVFTJbIP6dxjW7pZF79UBSejASbxdeWkvOmyag93aVk0naaezC92OPVifVMEnVynBSSMGkg7tlEHTjRdkTFNcdQCuR+Px3pNeuZ5J3EnPcTR2gfEc06XH9DbR3mWiGqI+CNECMPHR2mexQ30eZlYkkjCpFyJNxuliTcq1PFolPtb0UNilf0RJnmFmpMVmDffdJOO6DQ/eY7KMzGVpeQFpLNmAYu+dPB9PjFLi3ksyTviomlYAqLr42/Tzz17IhPJU+YrUxiLQDosPXx5ZuVdxfswEie2J5D3qb7FeHW0bqN1uPXW28Lttz8jPOtZzxZB95xwxx3PUOrHdm9/etVu4iIXRsaEmfIXeiyKh+XFwqff82JRBF3BZYEVJL5i0vDo2C05/iiRk1F4a0+koeBFogeNECF0GHuOPLPxm4oQomOg82eTNyv97nzmHeFZz36WdAJ3hec85+7w7LueHZ75rGdqZ8DeODYdsxl4TTrTtfW4CAPBwTNVj5mOVA+xrtJJx0P6dGGMjDpQsekzMSNfyCvtVOiYKvJMO1Qh7mJ+mEYPDTDHvqUFbuJ37NZ01MRpJnGeDb9jnNK821GoHZn4yTUdKnmAoNNylXzVtOJ3oti3XNTT85wRCb+8UKBao2zWpNPlmU0/JM8SyfuTMgpMHTSIZrUwIn4ISfwi3nKRkeeWKQ018zyw4UPqEmEQt0Xw/nssSx/33r0loN4kuyD9Yk58uSeO5BMrM++WUd1zn3tveNGL7pPR3kvCc+69R79sQZ1mHjuGTTwiPXx+LIrTxYDoZuSZ4cWiCLqC6x7rG4Nw8203htuefmt4xp23h7vuQsDdLY3/2bov6W65fv7znxde8ILnhxdKR3Dvvc8Jtz3tNu0g2KOkKkt5S9Y5IEYO0sEVHC8YnbH/jaXzCJBloBNHODKqQtjZU2QKFqEVbjh7RvL3Zh3lPVte8F784hfpSx5HzvEyeLWjCLqC6x6DQU9GDGfCLdLQ2aBMh6qfl5G3Xah7k268MdwknSzCjf1J9933fBV4dAo33XKzdsRsFEfQlTm640ZL85a8v1FGdozKl4HRRyyP6sVDRngFKyAvB5xkwxF1zGkyZ3fTTTeHO6SuP+c591SWrl4UQVdwWdDqdOdsCzsd5qxqttuo9iJnoRMms9ac42kIo8nMcBqGhmNUR9L5JXrFCG/0Sc2jREXZNeywQZtvwg2kUW+Gm286HW6/RYTZ6fVwYq0X1nsyIqi2EXBYM8uu1+WXJdhsGzizsRZuOXsqPOOWG8Kzb7813HHbzeH0KU6pH4S4FyvGjKXlg35XF0AQbjtRnoeWxFqXYcfYo92pGdVjYkHiylzJIPBhzOFwrJ93UTto2+YUf1AXJYqFTG0kJJcsids6o9B+FAJe7aRnMMovZyomteqhRM1pKAHonFhLwtAzPEcHgfm6xHguKemLXPRHnOdkG0BnIvHthFMn+5LXCLFJTTHrzEZ67jPld2JNXjhYKi+9W5+yhj1UmkLJf/YcSrUQSv7ySzlIODnJh8gYz5hHqGI5j1Q/p6NqWcyZNxS78hvVohzrFpfJQ4QItiyxa0lxW7LX01Iz1VL9rYkfljko80nGbM+fcDY+0K0wrSlbFEZa98+cXA/PlPr9gufeHW698VRYZ/+iuGWPY89RWlxGnmSs6nvN3HhxnlteGohRQcGxoyUdc2K7w56tmlbIwdDqioCTJlQRQTcczxxFyFUcSU9Q70KKHYcFbUf3PiXSobHXzJBOb32dOYqNcNMNp8ItwpPrIpTak9ANY/mdRoqAYwOuxFAF3oa4Qwj2pmMRfO1wdnM93HSGN+DTOudFBzqTjhxhwmZjNiL3pGdoS5gIXEjfhKhORDjM56+EaQ6IlDCvxGkb/CLkEHZ8LSCfL4r2D6V2HDlZUMD8IvEjrtFuXAhEp8PLAr8IORY16DxeovcfzpjniyR9fRkls0eO/XicC8leyposvIkdWs0kYBZRzOmAW+OwudENN5xdl86WDjdS987ROUu5bIp0OyEST/eCSTmyWZ+y4+O1CDidt9WXERHm7MeUyiJJjWEsISB/+KzOwcG+CjoWL6XFHsy7SlS1nPhahmZConSzuqAno/h3CCfyn1+clb+mVNLBUJwdSuD33eX7VHlREOEndbot5dMSrkkenZAyPHNC2seZk+F2eZk7uSH1kPwUN5bs6yOVWZzkhTWjj5UTfDMJP89vz0tDjF+Bfp7nvvvu0+tVR4AVXFtg4p5VlmmPFffLwChRz0msyOILzqdETQbo+AqOEdIXIvCYm2OFK3ld8CRC3gT4CgdbNXhRQPBebSiCruC6h46aREghqFTNeBRBJ/YS2U7A53OYF9LVbdIpFxwf5H1fBR3lkj7mWvDk4tQpvpi+oS8bV+OLXBF0BZcFVvWE4sLOmbGKKy39T0v9rbnOaxjQ0WVqH2lovFXmzPepWRA+AigRqCiq/mPeSNVQ47iXzcYlxie6ScBZlj4xZ7EEJ1EkYcccl7oVsq+LBSqoUFHLED/SJE4zfxLTtgq5qeKAu9o8qdBIKyB6Pn8aJF8qMo+XMBis6dfArf8xjAV+VFw0D2iJHSLFFobUMaoKtCL5nJdXTIeFTY/8i8/EH/IDYcfLBX5RbpxFyQIKnjMqRyCS30q9lnrWq/dZwvnIXeKpYbi/RcA+6UtfgbfpSXVLKXatX/qn6ajpYf3e293V+T9V8YoZfnqkskj0/nva/NY8l2eWDXP8lD/dgygvc9QT/Wgw2w0kvR7iRfwv8QpDEXQFlwW2kQE7Z5Y29SZGQcd8VKRv1/hhGzVCQL9CXrHRSBc0NLy0tJ3DUDqXnS2+57WnHQx+pHgvAmY+TAQanS+jQq5tx0fnTOfKdUpDCjsxPVfip3QmPI+Cth2fV/MXqYNHQEtsNE6Ze6GPnyXmEqr6zzJ8BER0x7PcH5gEr6WN+yICOkgW0yDImOfjvMtIJ+hQheGmIoLUhq9zNmKEO0A+0+kiHMhTthGcFEHHF80Jk7xWAVcxLhDhOj5XQSf2GMlrfF165D8NJyGmJ5YF13xc1qaFOuhh/YN+TtWakTb8Jp+Y/+N7ckmYatoljdY+xG7OPM+8IENoWnr7mg5DyoV46YHbuiCqqyM6DlFwzVPh43eloQg6gzQ399M//dPhXe96l14XXPvg5BI6FoQHgm7O6l4bfcEVA4SVnn95+rQugy9zdpcfvBgwQtcDEuRF42pDEXQF1z04nisJOkZ3+lsJOR05iXnBlYMk6BI3N4ugu9xg7joeBxZP1LnaUARdwWUCVSuxqezwqj3Ul4lRXVeb4x5tSM1cTYJKL1Otufk7XY4vsiqRb/fwaZXJeBr290dhd38Ydg5GYWt3P5zb2Q0XhNt7B2Frb19+98OucF8EIEchJbWdVQvpvQhDRoDElpNRNNYSV6Vc5yBdUQ02VxWZ+KufYiuRPKBzB6rWRN2HvURJ/yzw+Z6KulTbsPI3cQzxQ2zrHCKLcAZr+uxA8mEoAv4AQS9pmhIBQcrrRA9vLimUUQDzYKguZ/rSoOpL8lDSq+rCisTfUnzAx5ryTBzpEnj2xg2kjvCtubMnNsLpjTXd98geL7Z/sKUgjA+E+3o9EHvrqkKtVZmQOpZIHsRSqihl02p35kTFGb9JF7+cQHmhzptzrgqNZUqZyEVO67+GUXMmzMpTaOs/zL6vKJyK08SZehNV3IlxHyTq3om8rKGdIN+JF9MH1CXbPkkvdaGiVNrsXjht7QepImHzZDesrZMf0lbbUr5t9njGeWlLD8nJpfTxyT/T09yHSC2BRwW+FizAW9/61uqq4ImBymtZg3ZgmebtEuM8Xd5ofEdqSUeaC7d6/i6SZ9iJpOFIc5dOQATdngi5vZEItKEIOBF0F3aEu+H8tnCr+t3eCdvC3d1dEQSM9pibEX8r0jHReY8RdNL2etL5SSBK7n1zJEmkC3djcZfUo3r4M37R2ZGuirinEwWaNgSjpCl1iuzbyygCgW/8Jeo3AeX5nDpPgxATn8Vf/TJ2n8UdExXoB5K+fUkniw50PknCTWFpeMTJMM07JZLHksJ6MYrEdaydbVQHx3154pelxMtSfJqT77u1JkMj6PgOYCecPrEeTm8OwoYIuTMn1sLJ9b48b+t+urh/jo+q8nHV2Llb4WbnjCkLKamM0rvXrNyANH9aC7qOljfpxE7MjzyPSIX8ZCR/asZyTSQ/qCSx7kdzqbI5eVaRjj/3D7cSXzFEGxE1FbxkUD+wi1nyCPsJlY9UWvW1YotFMXsi4EI4cYJj1Ugr7VZ+Z2vi25qEKA+Ib6KDiFJHjcWc4iijF3TUiEU8KmIYBYq/9tf+mn66AhRBd/2AzmV/Xzp44VA6eATa1tZW2FZuh53tijs7yj02C0tnnYjQKHjywIiMLQbKEycjT54KJzi27dRpXZjCPBIrBinb4VBGeAWXhHiUGltw2E5z9X3Prwi6guseY3lD56SL/YN9PcVjb283XLhwQYXd1gURdlbQye8+qzNR7VXkDb/gyQMjJ+bl4In0e0J+ReDx7Tr2NPKpIOxRtoxoCi4NqGb181Uq7AbV06sHRdAVPClIasikjmmqcmqIrcy+Z1Rv1PDqM1SV9rM/ypGhM8MNWhB9+5cRHepJRne7u3sq7B577LHw2KOPhm0RfiwtZ+FKWv6N+k/VQzqHF88+hFxHDqM9E7/IaC+jqvCaqkHSzPmJOkck93GejjmXSo2JG/vn3De3DOTmqIpZZMBcFKNTVIz4rdSwmnFaBt0mIqMu7KHS4+QY9rKRDsInzimveIb60ENKuv6TdDM6A8QH9xILuZO80Dk9VGwtHemxP25tfUNHdRsbJ3QUEufkJBwRfIuoKnOxcyglX1LYxJfRIulKJG3WP+w0KTE01H2WhuQV85f8ckoP5YFwYc5a7Rv/lfIwV7/m/tvyZh40uqvnGxfHr76vHii5p8jlSushcSOO5A11iTal5YGlxAZ4VtNahTZsDf+YUQSdwytf+Ur9fd/73hcefPBBvS64NCyqxKnDhFR8D2zNKf95WuCFbdh0SJlgE1pVYxRAtRnhs08Ib1VwiHvihT1GersyktsSIceITkd+Qvbc6X4q/JQRQ5y/qzcS16s2mc9D0NXxi6zno3RuTgVKTWuXiLEPjLMjuY9zgzEcmOKb6Bd3wNxv7CO8IvFXBZ10qinumf9Cu3hEacLzBHSscqOCgK+v28Ua+JlteMfuCsyFQeU2nvtZrY6Va02HVAwVrCKIEHR8Qol9X2x2JgzCT3scY8d/dFJFCZvKh3+ZoOvEPZKW2JtTa1YOb58yGUq6KF/UhHxeCL/VL0FTsOX0SHO9Ot8rwsinR1xlf6vAi1WqK7QVDkhACBNf2pQtf+jhzT1JguVxowg6hyTo3vve94ZPfvKTel1wfSOuZGtpp4rqcuv8ed1gvp3m7ETopU4XaodYMAejKT1erSJC7zhB2eiCGkvCqcipKAXXN4qgKyhYAX1jFjIfx8juvAg6VJoq7IQc2VQE3eHgRcEKIdRfxwnKh0USGSWcxPLh1YIi6AouE1BfRKKJSPtlFrE1y5cS65xMNZ8wZyenqqCOyNCWeLQnc07DJExmoznH01EYzYZhNBUhJdcT9mJ1pnPOWuJiNhHzcRiOh7pgZWdvJ1zY3hKhdy6cu3AubO/uzLm1I6M++d092A9DPktTqdtQTyEzZYCT5U+YoV6UeOm2gIrpHrLcXMBcEvNmHBPFM1SeUZWJ/3HJPmoo1HwWM4JYQubgxpIu5lxQl8XNfzWlSCQc5hUrymMxMMyBKoo0APxE1WW/9hDZ17ktnGPfZofSICrXpG5IwKhRmUeF3Pe6/bA22JDfwZzddl/rkKWqbMVfVd2x/YM8siQihtYt5lN92ans8byNHx3JG0mD1M+0LSFR7VlWL0tzGpB+VQ1KWSK0KWd+E9U+TpZQSmn+F1XVzJtNJWp8UJV5xJpt1ODM/SVq/PPszyj/sZWCsieOvDjE+UvmNuP8ZpBw+P5gYmxzNamZljPJQ0v5L6P/k1jmFDvwqKDkCgouA+icI2n6VLTDSEW2go4nDUFHB1XRdgJKkRxLqe2BjjdyNmNei71riSLgJgeVoBOBJOYIt8QoGKWjlL+ZRHgqz0Zj9prtiWAToaaCLee2PNsT86F0OEPORFRBx+G/0g3SlqX3SNQFLSIYIpnPQ4AZSth0Nghtzlfc29+TOMf5NmUl6HAPyBPrv4YhndRhVD+kc+wNuqG/1tOOSlzVf+I+n/Nhjo40HMboJ24pL9vJQr5kjaDTBSsSXzpmG1co/+WUOoEgZ+PzwX5cLDSbMAfYC2vs12uJvxU7InxaEyn3ipJ9ukBJfaEu0TFTCIni9ypSg7WTlk5ZxIfUg0hJoJjLtdpZzOjHcqTy0yhVdbYmMV9O/0c9Yk4NtXH86G8UcErmFCXeNSWe4s1hpBXzAqT1RMoewanlCkXQaZskGxBwFfmgsKUVctojSMIsJcoZJQfyP54ZFkF3iUjnXf6Vv/JXwkte8hK9LihYBlZB6tFhFVk9dzWBjoojnlArourTUV1BwTWEIugKCi4RvOmy4TyRt/OrCYwAdZRVsQi6gmsNRdAVXBbofq+KqopyyFSPwrjPKbFWU8J6LqBmZu7ssBSf8yYT03fvEr17FVTMe02Z04jPloH0ZEv3p6gQUYdGojLiOSM7tiBwMoeqfeAYVeRsQdpjmNjhiC7mnyzR56R85F7VfagQUSWSx3pd22GvlKWf38SeJSCv+NQNm69Zos9cGvkhUcziC5cB76xqFP+9e5v/Sp4ZWrvyn/qh9cmkMYG7ef5WjOdq1qxVwVH16pny4TDGUGrY+EGfHm++iPhLWcdFTAf6TOe7vP/y10CKUkWfHgv8YPsIal6dcxTk6VNLGTUe8otf1GM+HcQ8M3U1+iV1SeqVqj7FCfbtp7dWgkAtLzOKoCu4LLCNLnYUNUx7MjQNewF9R5ILxjiBn9gV9qQhWtpGGAVd7RbhxN44OkgNT57lHUEef+6z9C2gzidJB8vCERav0KHpBm/5xY1FSh/+aic9zvfd8TzZSflhzT2xn+dVTnVPGirq3BtpFzM6Mfa98Y23tPfNQ5xoGIkePMvj1LST0nEYM4h/5Alzkfoyob/kJS8O8R5zS/I+EUGH/cQ8bkJeGkx6FtOkWaWLpEEFEJW3mR4Pb57qGHFFyDHniDPqL89XYR6Xiln6hB5xtWvcl+fdQg+tJ/KLf8wL6z5RiSdlGfc0SpokDQg4XpDsiyZchVXhHzeKoCsouMJBp5OW5rMP7XpTLdIRIrDYfK+jHwSY/EZGQVZweYFQY3WuHo+3dSHsyi8HF/R6nDu6Xtm6clEEXUHBFQ5GnYyu4h6x60/QMepUoZZORGHRj6r7EHryTEZFBZcXjOIYKXI4AvtId3YQdGMdzW1uFEF3VeEP//APw0MPPaTXafVlwRND/FyOZa1a4d6qjlR9EVqOLNmObAlZMm7ZbXfn7AjtVgT9jhhLzCvylbJZYCl7ZKvF3JNhdy10OxsydOhKZ8pRTy29nvMozcR8IGw2lZ/JLHIcyVL4RNZr231adCJW9drhuXiZCOSRCrrNkyfCCSFHROk+NHnOnKCdz9M9dvK2zXX0W/KlJblYsQNRO1XkmWRMRtxZ5su7CYdF4uyvkrKQzk7nNi0lHTUpT/eHH4a2PsCW+dN4SxpQm7G1gk6Wo9vSUWh6ZqnUK8uh4Qg/J1WZaP5Uv4mSX4wYk8pvkXqPQptf671cU5BQ7jP/KH+xMqekITlLnIhB3K7BrzwQO5a0E+yR7vhiY8xnLn7iPqdYkaS0Zqjx5eWo2/xeXOZeWKVESfsbkScVeY+YTAbhwoVxePDBrfDII9vipq2ffBpO9sP+cDfWKXGXOOj2wkDaFlwTMp1gaVKjVPeGtDhLiVTGlI6jQv0oiLCCruDS4IVc7JQik7BL5HuQU2m8llboUU3tnxd6fGvMCjYVbtI5W1pBF8S8LR1AYrc3EKGxLh2UCLrhLIxHNH6xmyhhemQdhQq3mtqpinDjQ5dwJlSBJ2lVYSedUdoHBGnWCLdEFTwGMZypCja+7ryxuR76A+JNWsXcdXSEowcEy/VckIo/iaQmv5eeQ8JI1Byv3KmQ44kx13lICQN7XemImaep92QliquK0TlpqJkJNq0H9YuQPsNORWLEPjAEw97evh67Nq4EHPWJ330RVIl7MtKz3JdRYKpzMaycegi4jAyxAxYJgkiE3WLa7x1qOJRDIveSdZYarqRH4yC/mklz8rJFPohF0s7mdKlXc0qdiYI7UexJ/Uqkvmn5iD1eBBedDJPlv5JnkQhePro7GkUOxb/9vXZ4/PFRePRRDjofycvMQNIh5aF7SbfkVVLCMlzrdMOalBkcCLtSDywl0zKml7BEcsHSl8Xc4IhotuCCgoKCpxB0ZPUcnKEIMdSW6QsSmQrT0Lsrc3iXjgtbfKYqzssxYr/aUARdQUHBFQVGGGnFpKWuTkTQVVTBZn8TuTfkFJuCS4C8eFy4sKWfrWKlK+r1qw1F0BVcFlg1AyqYpCZSlc0YGnUmaiXp3BKbapUmLVotqchtVDyLScO02wt0i4E8S9T9dtUJ96oG4yzFYfW9NOygmkOdchgljExVJ4h76ip1nPhj8wMs9KcisFsVZtOJqokwIy7x45f1cnHAL3ZZCo5QmIctxK0FdrM5tFazG7DxhT7/1d/Kf8K1IEaEMaf85epV/EA1VzOLb2VOOtiesbdXfSVCOlo+epv2Js4FnjB9Pil9Qil9HBe/0Mxm8ZEI2vigSyRfMZinTeMQSXx5htDkniOwrLmqJ8kjQ59/nqhedbtJ9Uu9UTVxVR6UC8B/yjQPz1H8S3bjCwH73fBD0qr+xnQto81/SBzZH8piH9TF5y9cCNvbO5Lf5EGzPnh6UFctbfuDF4tUlkdFEXQFlwW2UVPxraCjIVlBl5vVduakI8SPivhpQXX3Ov6M0tjtHp+sk6ehIfyk8Ulsq85VOlDpLAiLxoSqpu4kV5P4pQ6M+CMQ4lxOzA/5Tzv/+i9HyrNE8oN5HqBxZQWmCDsWmdCJ8x/hItCIv843ET55J7/JrYVdDCP/VU8jYjyJbyRnbWblobSCfKJpmlNg8wP49NjvAbJdIAmtxCTkdnd2w/bWdvwe4PZ2ZRbPuoyjN+yLcNvdzVl9OikuMMnrogojEx+es+gDkB4tu5S2Kn3kI+HhHwcc81zn3oSYW/+OQsKYU/yy+QWpl8SbfCYvsvgsILmOv6n+Wr/kv4b9FPd5GqirjuQfLwzpU1QcqqBxcWlZRA//ounb4MWCWuXbzTIUQVdQUPCkAuGpWwUqDqUD3dlhDshQRg+Qw7G3trdU0NHpxk60Vc3Tpa+981X4XFAilPRXOuvIONKho77aziJ9KhDLRvJMyPXVjiLoCgoKnlSg+qoFUBRSjBosEXAq8Pjm34WtcOH8ed2kjKBjkHKwj3pSBB1qTBF4OrozzISdqqJlJFgJPFSBBcuRNuWnl4SrHUXQGbzgBS8It9xyi16/9a1v1d+CJ4q0eD0uz7eqMM8wZZ6nJp+ziaqxiuNc1alzepbqxlH8TdQwDFtxZ9OcID3NKc+lV+WzLCjAMkpnOyf2DHV5tsRrhNqJ37H86hJ3TFEn6YL+OfkPNcxhxIJVC6Fqs1CVnFFD6bwTLtXf6IP1L7L+Y07Izpd0UfHKL/ZQ1U0lz60qjOfzOS4Ju0Wy9KkhUagYw+iKXb6nx/aNaRgPpyKkxmF35yBsb+2Gc+e35nz88fPhoQcfDg8//Gh4TK4fP3chPCaCbntnV7cPjEivxI/fPcnXHbYcoGKruMtcnQi4femk4cHoQFWEcTtCVJcmdSAgTczDEU/Ukj0h94nkqZ7AIvmQ8tar+dJRZFFVLPYkbpa2fKDOi4pX6lbiIpHIaFXL0JY/BPwmVaVuBxjLfUW+l5fym/Q24itxsKRNHYi93X0pj13UlXuBXQtsbSDJFy5si72o4sU/SVJOitxwIg8t2Uphac9e1fNXpY1ZRtFU03+/LrXRowJfCioUQXeMmIqQS5SKPtNvqiVG4ZNRhNNc0Emjsx1H3TlFjke54IsNV+wmJmFXET/lv4xWnPH/WJpCovTD4UA6i6E07BEdhXQEvNOOpGdKRPmVKCFklK5O3EpcE6Uz4q04CTooWVJTnuh/h5DO1Qp2OjjJ0foPc4mv5XzDOr0VPZXxD8ZY1MznNdvK6C/5LanEj4rs0UplM61+pafMiJ1E4qAd7sFYRmHDsLcrI639kQi5fRmt7YTz53fCBRF2iefk2SOPnhMBJyM5uafj3WajuIzK9llsI5nW6vX1JYQN4Qi7A8ehxAHG/WAIhJgOthpQHowGk7BDEE3EbCbX2q1K2idSxxLHQ+It9kUIUNc0/TzHXO55EZhIvCytoIzCUuwZko/kG6Mm5hsRfjr3lX4lThl5Zkgx8otaEUE3Jn+l3EnvmDJvdbReU3cPhnVbWUR1I+6Hks7dPUbXe2Fvfyj5Irkh/gwlnedV0ImPkufkZVyQYkh8DFcJuuzDr8K8Ngqd5PSCbiLP4FFRBN0heN/73hcefPDB6q7gegJvt0y+70mjZ2QwpiO/ikAHGOejIi81/ggCRjSJ/qxJBMYyojbMVJPb22FbqL9bW/pr1Y5j8fc4wYuU+i3+zlVy5M3SuNf5FxnTHfP10lV583DIz3meprCbfLKBQKPecJjzhfMXqqdXL4qgc0hHf733ve8N//2//3e9Lri+wBsu6jCOm2K5+lPR0VwKGInROccFGFHldimIghNBEakCbt4Jy/WiDho7FYcyYkHA7aqg4+vrOyrgtuCFLb222wNY8XqcYETEyfsx/rmwi3lk0wP9fbSj9shPRriXAH1xwF/CJg6ah4SZruvwUtyebCDoKHde+M6dO1c9vXrRkkxnFFxg8OIXvzi8+93v1uuv/dqvDW94wxvCbbfdpvcFR8PT7nh5dYUqaBLaHL5nQEOao90Osw7zeTWsea23j4j74+r7llxy6lcCbjPzihZZ+GGqb/0JCAbUn3qQcrcbNtfa4dQmWxDi0n7c2majx3qh76yAOdsA0raFtX43nNzc1O+8nTh5Ur/1xudwMI9zFMQ3bh3Qe+c/qizmlxIw4207dcDxuC8TvvzhF9+TY7/d2tp6OHnyhOZJDEPy06Qf9d2eCKME/E8dbBRk4zDej9stsAvSJ3zwr8O+KLlPwL2q5yqQn1sXtsMu82cyektL/1X9KfZQZU1M/ieoak/iQFoPJB4WtrzIr0GnX93F/CfdxC3t21rfXAtrHJ+2sal5D3tiJ31olrSk9OCeTj6B660L53UUSvlQjpq/1A/CEfeUFvkav/2HP9FPtrMwx5aW5CfVM2ligQ2njaBeJ0zik/ZHwgTMNtY3qrsIVNb4kcpfGpDWgaSKvfGmmyR86pXER+IxmeTCMsUj/k7CrinfVPd4Ofn4xz8ePvLRj4dHtwixblPEIEM3b2HMfltwHJkFcbLoTPP7oXuZ2J/k96n+/tHv/m/9XYUi6BaA0dyrXvWqTHX5NV/zNeH+++8PX/7lX149KViGp9/5KdUVHVFT0FnMpNLDBCpxqsgAIQcTGuZiZAVd6mDmoIqbau7d02myAOYwDLpTEXazsC4Cam19XTs56x+CbmoEHZ0UHVZCXwTZCelgETabIujWxQ/MIZ0b8UfY0nFyT8dtO1pdKCAdWgJNVudWGAFUHZ3Ok1Ug/eyzi4JOOvW1vnTwG7Fjlud0xLbZI0TpcBOi/1HIMNLgejokPOa/YjzIizkkvpxFmUDcmcdJ4H53Z09VlBeybQIRdKEcvJyg5SO/hLW/ywHOI6kftrxm0iGb9EoGbvQG1V1MPx+QTaAunDh1QtPPSwb5TjnG/YhR0CGsLLSMKyBAtrYu6MhTBZ2UIedHcshAv3phEfGgz/Cbe9LEh07TPR03qz1VwEt5ksJHHnkk7O7uqJ+8GCTBSbxs+OTHuryseHDiSyz/UbByDPtnz57Vs1HxLy4gqV9kEnCHe+aTt7d3JcY1yMPHHnssfPSjHw2ffODhcG5f6kz2smnaF3CCjlG0hbxGVFcRNn1gvVuXH+DQBoudqt4l0EbA+4qguzQwR/emN71pofry3nvvDV/xFV+h1/fcc0/4yq/8Sr0uqHEtCTrppkK/faACCoGhnZHpGK80QQeSsOsP+jp64SDo9D07zGyzp+O1HUv0/3BBR8dPZ5yAV3T0CcTdni+J/ztbuxpXXe4vvza+l1vQ4d9gTYQIeYGgq4R9fBmIgoVNzBYInwTqx5aMvlC10kGfOn1a/Z8LJilv0p/KnZWbtaBDaHVF0MWRaUx7zMuHH35IR00ITISR+sdIU/xpCLrDRnSSn7xU2AEP9jc3N6v4REFuR8AKyUNecIgPAnNLXkQsGL2isnzwkw/qwqC96ZqEWLepIuiuMSDwvv3bvz38xE/8RPXkcHzXd31X+JZv+Zbq7vrGtSToZqMdabkXRMidUEGHGglhlXClCTrcwhQGn/Sh40sdM524bfZ0SviXEP0/XNB5oYrKa+jCpwNOwO/trR0VXgSLqgy/Ei63oCOEVnumQoQRHYKHOJDXAxnxki/6yaM5ouo3AcF+/vw5VTVi78zZG8KZM2dUQOKeZ6ws1BFedU8cU37jl47ohDrHKXnFcWYPPvhJHeUigFEvY5+XEuoPcUwgP9b9N98kHxkhslme3/GwLk+gX4hn1Cnh41+va9qDANtJUA7F/bYIuuQDcf/Exz+hexkfl1Hd+Qs7YdI9Lea1H0XQXcN4//vfrwKP3//23/5b9bTG53/+54df/uVfru6ub9z+7D9bXdFt0EQOF3Q0A6m51XXV0VUVOYKO73BzFXTduqOkEWQNkRruarl1z+Jojrk6DNPJKLQmQ+k0pOOSUQCd0Zp0JAld8cv2I17QDUTonlwf6Fs5HTCd1qYIPjohfeOXjjHO0yGgpQMQ/+J+rQiWb48lDrr0XIQegoRfBIC+kVeLLBJik44fa9X5KOnc+ThmDC92vBbIGDo9C/yIgpSRiISzH+fsYnhxZJaAW0YACVFw5oKPJf/kuXZQ8o9RTQJJHZv0Ak2j+EGYfEbnYIw4jCBumCfgJ98/SyB9zKMlEGRHBB3PEU6UPKMg7sl73T/oBAHzagmEt78vI9L9A6lrIlSlDG+97dZKkEXBRP2Nc3PRP0Zl6ZxURmsUiQo6yVMWmyA0OT+S48qIEJ9fwh7zwLhBtZpAvp2UFyQLVJ3kDS8D+Hsg5ZOAfV5sUn2CXlBiR92z2X4ogncctw5A0vt7v/f7Gk/K+eBA4t3eyJqQbV88bzcEqSTKOCDPLXg5sdiUfLTwgnJX4miR6tf7fvfN+rsKRdBdIv7Df/gPquL82Mc+VgSdwTPu+XPVFZVMK1p114S0LW1gCanBHYaG/Q77cmr/G+4x4jteBtZcBZ38HQY6PTY8J9Bx0JElrPVkxLZeN1wv6HpidKLfjUJHuC6d0CnmeaSjVOGjKkb7zbBm+unYdWGIdE4IOUYZabk7p4Ps7+eqJzpN4gBV0JkRHfHDPCH6XY+wYtgIumoORzo8XX1aCTiIyi0BNSWLNRLoUuKewQrinR2ReVA1xuy8rxBXjdbxYbC8vYdgjHbw3wo64ssm7wTK58TJzepOZVBYI3+rIGL88hcbqwAAjRGJSQ/C8ZZbRdChmpTRGPnapZArEB+EYYKUpsSpp/mUBN25x8/pNXvoeJFIh4oD3J88VQs27k+dOlXdRRB/Onvco3rkNwH7Z86eqe6q+Jyo8wPwDPdaviN5eWpR/2IG4fc73/nbeg04MGFnRCupy4iFLhZt86IB0uHmc7C3bwlODsycr6An7cVid5iXFwdNg/f97tH62yLojgGf9mmfFn7jN36jCDqDIuhqQdeZTcOaxI+3f11xKdTFISrk4gIJq2rjbZnO0+JiBB12YRR0McwNEXRJ8EVBV8eXorHdgAqCajQVl+RHQadhIejkmm0CCcSHBSYJUZA8dYKOTtbmf1sqoAq6CthHWFlcjKDD//mLg7y46AtLr/YP80zQSXhdEXSMInlZIB95UUDgka8q6EzHjv2BiT/3uSqW+LZj+Ut5kFc2utjfsCM4yba+1AEL8hB7ei0WJqEn8RLBKf5R5h/60J+qGSiCrkBRBF0TRdDVHZW8yofOdFSpPNekEce5Hewg7Og07Rs87pmzsbgYQadv+tJhaRhVmJubJzTcRYKOvLBzQsxf6Qiu8p+zItkSwH0MSwSdUVVGwVarluL9UyfogO3WVNCt1R0xad/Y9IKjuqiwTNCl8MlbypR8tYJO/XeCrtftV6pA8pWXiCjw9hmRSVr7rmO31Rf4OTsEWXrxiO5NfRNQxhlc/hN/6h7x7/b6Uvv7esTa+fN8jmdbvz2XUARdgaIIuibuvPfTqiuBVLGWm4OxoFFbwQOW3Tfst6UTEmGXgElmnz+OMzLI3EtHOIsHNs6Rt4p8MQwdmV2l1xchu96vHURBxaKHuI+rhRAY7uk1y9hVfbketylwz/XpM6f1Hr+jijGfs6CZJkGHIEPQcR07S77BVm8PoEPlHj9YlMDcoC6JV3/jqkDbUWmYpqNEkHIiBsKNTd4q9MRPhBkLSwjTCrqIOv3kne9W3DapDFidGAt0wlYVN5ai2TnAvzrOmaAT+jmfXBDOwgBBVDknn+2LBbCCjriTxgTqysAJUgShlidlKI4RAwnkrRV0Ckkf+Zo4lrxkzpWyJF+9XMjqpyCvr3EfI2lkfi4KLSdoXH6Y6qsg7pByb8toc1/eK3Z393X7B1tNGMUnTMWvA4m/FXTZYi/g8scLwoagc7frEheLXJUvdcC137RY5Q9+6+f1dxWKoDsGFEHXxLOe9+nVlQAhZzoeDxqxb9gWGFlzruz9TATdrF2/8XlzhJRd9dUIjyFnu24GtIi8WYhd09D8YpdOaxL67XpEQ+cXR29xNMVi89YovoECzBA8CdyfOn1KOi9GeNW+LvHDgvgg2GDqLFUNhipRiFBKYC6IEV5f3pJV0MnoENWlqkqFKlBNR8jbN2Em4DeLJHTf21bc98b5mQlqbgRrE3n+kpMTIwg8UJ1NjaCL4Zv0zFphT/s1U2Ye7kXKjihYDKVrJapHlN2mHdHJc9tx8xKBcE+gvNfNiIO0WdUiy2QmZtUu5naERdmND8yIV4iAs5AcqK4ibHmArL4KONDAQr9NaOBHVG0zBwg2zGIXBNiFHUabvCDFTx9lIzqpK5M2o77aTw7+tpi68BuC0Ak6u9gKxCVCNdj7adGWtmGRNpT/3jt+Vn9XoQi6Y0ARdE1cz4IOtzR01I+spmN7Qd+s6mTlHwIwgbdzOl46R4QR5tZ/iW0l6NKILgo7Rh3pEzS242RFHuZJ0KnglI5IR3SoquQ+S78DfjEHp6oxGVnxy8ghge0YvqPOcWULOuJmXySIql91ibCz6EgcEnBPviYsch9THUFVGu/n9cPmX/QvH8FcbkFn65cKui0paw51lhcctizY+l8EXYGiCLomrmdBRydGZ40wQy250e+GTbMqD7e2I2NZOqM6BF0Udgg62xEj6KYqcFAhssqOxSJJ0GmnaZIDiGMSdICl8TqiY5VgNx5jloDqCwGawHXcLqAZoeZ0fgmN/GvgyhZ0lC1hJBBV2zETd7Z9JGB/vJevamRBUYKqKk/UIyTsMxeXQFXygs7mN/Xh9JlclXq5BR3agAQE2PlK0KG25DDzjY06fUXQFSiKoGvinhf8+eoqdqQscLCw1Y5GTMecwKVv2L6SZqYiqIwmruFeul39m0PMMv+5lFGXRdYsVMhZ//CivqeJd5knrEAnymIMlozTYa3L74ZppzzLOkqJPxt643wPZC7PdBzi33QSj45CqMVPuUgY43iv80M2vXJJ5zn3R5LCUnb8jvNznL9Y22e+SYVlBcJh0QnqTfaC6QjOjOhwy/MEnx/Al5cXc9b6VATZUBejxIeEz8giASG4N8nLwIL3lKlbbJTVJ4mNia6WrU0PHth+mrRkc15if2IWQ6i5jI4TmAPsmRcZ/E+LJQD3QyMoAZvsE1hBecstZ+epw/9sH51mpms/Lod9ztjyIbOjoKht8YJEPkcNwSxs7crLjtSruG9SXtLkhShBikcEWS8LkTgnYJ5loMALWimg6iLCCzpmwS045CABm3pEW2Yl3vzOr/5/+rsKRdAdA4qga+J5931mdcUbOQf35m+0ttrpCEmYoPemIdER+1VwFt49l77j1YcJcp2Z0yhtx+AhLXnmOlILwu4ucd+T0eKa2dBOI7YbmlnKwOmICcTNqtZms1GYjfKzKO2qxpn0hH4xjUcjPzIwYjTmrny48t2Evcdvm/+Y+fLy4Vv7Y8nbPa0e8VlD0MmLxnCqM53VkxwEZUeEoDGicdmTx0+uddVu/czGD7RneUduy0d8C1M9SzK6J/12BMz93sHhc5oIjafdfEN1J2FJ3PN9c+nAhTp+Pj/5zqOFbT+47g7YR1e7QcChEWDkvC/CbXff1sAFaPsRpqvvRtAvhhd0+T1lbDFwi2s6ZlUrSCPu33zL/9LfVVgVu4KCgmMGQooPec65HxeUHEZ7bmTBtQcEIYK9Jt9CZCVtpF0YU/DEUARdQcGTDEYsdF5zJoFXkQUgVtDZ+ZyCaw8Iup1tvu5Q09YPu9Wi4ImhCLqCywJUJ3O2oqrQ0oKGbgm8fU8L777xmX+eGWoYjt6Pi4V3b8mcWtwkHMk8CGcUJvIVc7YHJHJqxvbWtgo93Selh06LP4YZuF3BRfGylP9qOpDbPv8p08S8NKLdrPwXMAdpIo01ffxSuS3iQvDYchXwxzA5S/RYFQdG7TnjSthF5NBuXVhUkZcbvt83p9QFXnYsrSCE1j3M4id/lJMeMiBm1LELF7aq/XJDne+NdjXpC+nh60OWWQsp/y3z0KFRH+SZ5cJ2sARF0BVcFviGoJ1lxUWwDRPQdmrmfi2CdQ/zhhIbRSIT4bnd3D7PLgbN8HLSmdlOajyOqzLnHZ3c2xEcHRdzJ9gF5J71b1H8UloOZUr3YXT2Pcj1jMvKRO4XCbc5nX2C42XApjHn8vyFHllaFqTHw9r31J7VwYdv7RNfW76ryHaQ3P1U1ZeW1Af7MtQUdPHoLsg2FOsfpIzwF8GGf3Fj+I6+aLGoydv39KAILRe5WcZV8C8K3r1+JFZ4VBRBV1BQUHAlQzp2Nu0nsiK24OJQBF1BQUHBFQxGMLvbu8KdSPM1+IKjoQi6gsuCmfkDXtVlCZJaUanqCX2RVUZgL5KlzZbyn4ayjNY9y9Qt1QJaEEs2uFZU1d6SPzwgGYcxtNu6Dylx0uqG8awz52jKPrIw5/5wGrb3R2H3YKzf4dqXh8NJTT5SOhWPLX2aZjybkxjmfxYaRfnPsvJFiQX2ZR1G/Q4b+wATO5RRTHviMrCcno3yqDVR5aHKtdD4spnMUHKg/ptJgdkKI2Q+KtGqGBNz+/yzKSbCdI2R3LN7YU4xZttfItVlLM/Z6pfIfSL2p8T5MMrfWDgxf6PpyHActkfDsHMwUWq9oH5U3JP7vdEs4zhI3ao4mbXDw+fOh8e2dsLW3r7UqZE8b82JeZAybFFuFU3yI1tSMdnCcgg7jnwPwbLhnafkg6UWiiF7OS2lYCOPCMIsKDh2SHWck452kYBLpK+xnVBzzggf86aRCTq5z5tFTu9W7UukLCWiNRFulqsEnTiXZBxKhM1UhFviJHTDCAGXKL0n35VM3BvOws7eWBg7sX15OOQw5YojidNE4pwo0cuiT8eaCTpNr8S0IlHO4DqZykXGhiR05CSMRAQX6bZcBsqQzfW4Q9AxN5nFl/AhHaBQRcNsMqfkhiRaUm44E38sV835EExWHyTVllawqSCTUBNHGqeY73OKncRxByGGW4npImJPfKrFXC7ohlOEf1vKvaUcjlthb1+EW0WEHS9HlsPxbM49qTMPP74lgm47XNg7CLssiJI0zSlx0PdFw4Zkiik8lBx6YDkXRBUlSzJWGT6nrWvQ+8+BE5ZzgXdEaBIKCgoKCq4d7O3vz8k+zesdRdAdA974xjfq75vf/Obw9re/Xa8LCgoKngowQs32ZpbFK0XQFVweZOrJ6lmCqi+MObCaDJYNs7cokXtrDqz746b8p8qTRA+soGZL5N7GbzVztRnqWqtWExuEomcO7u7wjbCtcOHc+cCnc1Dr6de/hxzwHMnJKbrXrqKdn1KuUvEQnKVgUb4kMpfGEVjLuMhdovwXA5ljFpeLq4pxEV38nX/8rQLKxexP0pmTZ5GLUNuLtCB0Wx8kexqw+w799gqQpadhXsctkSPGEocH8XxKS7tPE2odM/Tw4a8iWZBR/rPM8+Mo5ZPzuFEE3THjrW99a3V1nUMaQ0YHniQC24hplLbRssfKmoNFje/IxP0SAhsefzly/7jP7B+BaT4y0XbsmOMtm8t1z9P5rXD+/Dnd96SCTQRd2hgMEX7eP8vGnOeCrqRhbjMEOnjB1jZkgcrFgDDjAdUwftzVkjyxWBG1hcjSdwR6rDK39SHWiRyXam7DpkytoIMjXn4MfR2w9cvnp4IwDYmBpTe38VnEVYLdw7s/bhRBdwx49atfHV7xilfodRF0BQUFBVcWiqArKCgoKLimUT7Tc0zg8zx/4S/8Bb3+tV/7tfAZn/EZen294vkvub+6Qi2B6rFWl1Dl2C+XkFRUh4GPkPJttYSo96/f0eq9NzWs+kdsy33+TheVMxGz6i9B70yzUHWSDQ/aeQex6puR9R+0dJl0BPsErfpoOhqF8Z7/DE9t3m5NwqA30m+k8fXxfi9+oDWhI1Hr9+v8Ib5Z/kCTP5ijbrSIsy4RZF2mPpO8a7Xrz6bgt/0eW0TtHlVZ9r03gS1vTd+4NuczPbsHs7C/z/FU8QvX2bxOS9LW36humsgVbRHEwcJ/ry5Ln2BmPryLmf/wqdTY6qqJltTvlvkOEGFvbdvynITRPh+SzfPAohPy+u/NJcerq4gsfhLfwfqG8T1Pnz437Qfk6W+FXgf/7bM8/FYrry+EaWG/Twf8vJwtfzBx9+P8tuG+7cojfabn93/95/V3FfLYFRwLivpSQEWuSB/rdfYZVXDVVOfV3ALUBRXM0x1C6RUy/2h0DUpnbWntyz9puBLJinT6nm3pzDJKnBIlghKFmtxLCuZkw6xlmI3FiiX7xpibW0w269JPH7BpeHcnbO/thIPxaM4hXxxnkcqc4zCVF4c5RWja/NQ8lTyrKc8kXjXzPzr5Rn6Y8iL/UrLnlKzMacKT8O18kc7PDVlgMw7D/VEYHYwlDWLHsDWSbBhLWBXbEynDii0yR8tOAp6T+4oSX09bXlpmSyFpnkrZHULxQOqhZR68knZgiFy1zPJHmEPSR7swbHc7NeWlZSKichq6c05mbBSPnArzTX5SgkR7Tilh6siEj/pG+gJdHj+JoXhrqXE2bJrjR03vvyeC0VIeKY+KIuiOCczT8QFWUARdQUFBwZWDIuiOEa961av090Mf+lD4yEc+otcFBQUFBU8tiqA7Rtx/f5yXKoJOKlabo6Ais/ksAfMDVvWlqkV3hJQFKor5OZjK+GyuvrgIFcZhyFQlck8c54xW5sA8fdtu4XfSKjuHUuzYPU344WHDB1btyPyW/SzLcBS3GCSOx/FTQImoB7N9dZU/cy5QTdnwYV6e7dw+6iSrilxB3R+pcYwcSRp2tnf1A6NpLsfuKySOqyDRcDTx01zP4dPn6bHITk1sEEYk86E2v+DFwofR2M7h/K/THXmxyPLrKB5gx9C2h0VtogGeGfo/2z4WMe2xPSqKoDtG3H333eGOO+7Q63RayvWKbA6semZhG/Fc2FXkmQUNxXbMcV5FmkNiZe+Joum/+EgcLA28/UWcx20B6cxtx499D5s/wPqNm+GBCLiKI6jCrqYVJNCfFZiFz1yni6NFLCPTscq9F5rWvwYRto5WMPMNvu2tHT2qCr8IL3Mvzzx8fJezcmRArs4p//n8zlGbHUYfpn2RI78uFtZvbR8NQWf8F/rwLxYX697bz19EYV1foYd372lfdBZx1QI2jyLojhFW0BUUFBQUXBkogu6YkUZyv/IrvxK+4zu+Q68LCgoKCp46FEF3zGBUd+edd+p1WX1ZAdXNErbaLJHu1pR7niViZzZD3RGJJiRTk+jyaHk2Z3pWETsSjYzi0ZzqX039TIuhfrpF3CQ24i+0qtekrk0ETfUMzyKnrXaYdmrOzLXet7piryfsKyeTbhiN2jXHfLql/oyPclJzJPcHw1HNUX5cFMu1WxJGYrvdk3IwbPddecRvtCUyZ8f+PuZiJ1IAo/FIfxPHUOIwHqNyQvUk6Zeuh3hxxNnO7r6USZ4/TbDVYlxxIvFExRlZlcpSSJTnJAmdrpRZYgf1nzw3DGZpPZyhHkyU8rWr9cmDwD6zOanHNg8Hod2V325/TvkvY7stdg5hq9WX/GEnptSHipKNhhInrUvL8m85xJuMfjk/9XgZbdiLwudRRp4ZWlUtbPg3HYdWxkloC48KirTgGHHXXXcV9eUiSOU9jFRshFui7VS1Y5Vqmlf8XP+PIKPznHPsKOZ0pHOK+4mhHoYsrduStjWnxMCzEX9HMZkTT7L4Snh5esRc3CROzHW874idKOTgdNrLBN1w1Ar7ks596fUSD0Y195kHG9YH/Or5mEbQjSeSYOmcLVsq3CJVMlgpIHHyedHp4a6lCwQQdOMJ/ibybCacKscIupnEfTgNuzsHwj3Ng8QmyC+zr1CEHs9yLoN01C1LkiTlZMgzSxue1CApBwklUbIgxQLKe4ZA0p+IoONlIZGXt+6aUARXxcAGfMN2EAG4hHF/HHvlIscSiZrEt86/xXm4HNmLn9Av/sgKfAGz+o19B6K0jLQY++fT05Y61DJkLysb9Y+KIugKCgoKCq5pFEF3zPjf//t/h1//9V/X6+t95WVBQUHBlYAi6AqeElh9PHM8dvm63VOX9tVZ+6g67BydXW4MUbV4VUymWpF78WJO8TQL34enmimHzHwFCcOqgWzcoVfTeBC+9Q9Y+6TJL98fG7JE30Ln1LrdOVmubv1PYVjY8HwMNX0SBqzDNDRxgahOd3d2dA8gamjCy8pHmMVngSqrLr3IpnmNzK+KDeDGcJGbRPmPELM/C3z32wHWBv2ca4Oacu/D8Onx+ePNPXwd8/TuGxQ/LBsPPB0aVpz/eXtriiGfH95+yoejogi6gicddAQN2krdios65os7VPBgJxLYRh87WCPoRPBlDVv33sSOGOLGNjqQ9iMlIZcFmAKtwN3FUALROFna+C/qeHLUeZNo7eKHFSSR9R460mwhPkjni4CL5KzEeWTnkc5h980pTfjcR2FWh+njY/fNsfdvZ2db98/x0oHgtfmBnzatxCcL7wj0UG8MPRruGw4MxTizCx1sp8zL2kCEmaUVeoP+5RB0uX1P7/5S6eHNs/Yo9On18Oa2fcLUlo+KIugKCgoKCq5pFEFXUFBQUHBNowi6gssCtOeJ7Jnii1uJMyV7sWpm9lEfdjpzolqznyVpdcS/tiGqD/0WSqRuH5iOHSdzxnkh1Cc12+3pnLo3qzXJyKxMIimyKZQQNcyMEk5N7nPVjVXryH+BT81YtmftmppHKd9gvvy/FdYkGjVbszVxsT5np7UWuu2eYVeeS17OGY9dO5TyF7sKwxkqvEi2cOxu74eDfT4PJDk06YTxcDbnSLg/ntSczMJQ0pg4EsZl82mfmKSRLRWJkt6R1ImxlLVS4jQyZHl/XRqREvGMNj0esURtCWPHplXyny0RiVJ+eYDYX0bJYYm33UJjVccd5koH/Tk7fGtQntekjHyLyZlSMU+NBGvZljpm2ZI6mSgJklja1Isf8sxyOpN6bEidzyh+ZnV6Bbx9n56OxNnS47CyPAzlw6vHDD64+va3vz18zud8Tvg//+f/VE+vPzz/pfFLDkcBFZD+IoEaaatl/FZWrY9P81wJ+uFLBNIhYCMz80AJXek4+uz7SpD20jIf3vSgOYksPBQ+vqTI3rOPbDisPzSK4GMuMQG/O8Z5sxFzXcffg/R3ZvgfPWHxQ38QP0wJ+r1WOLHOS0ZlLh3rYE2EYgW2yfUGdX7QKecfHpX46B6xGjZ9w+EoPP7Yueoupo/5t4SxCIZ9PsRaJQlzzrVMmE3bYSTCUQWngLT3TPlMpafr9PpV7COI42HAPXO7CWRl19m37vHXFIeCPLTw80GkIYHcQWBZ5AeZi6jWClSngLnJBPKSPEzgfm9/WN0JEDZjyS9TCRvpZxO6gTfv2ga2ANOujW8T3c5y/3lBsfAf5iUJFrwMWmTZJbD5swzvf/evVlfL4XKroKCgoKDg2kIRdAUFBQUF1zSKoCu4LEC1YZnUcYnLgLG16/1CrdTt1uTe27HuUS5ZzOQv39d28US9lIiPFjzK5uNWqI2Ioo3vIi4DxuTBYdQ5TvYjVtdWjZtAnqS/OMeYp9XHxZqjVmYLgWVmLmReK8sTk3/knvWf5ePZXkpXntDDm2fL0RfYz+O2ooAETf9NXTtC/KgTqaZAC+zb+ozaeDDoZbT7HnO18tGQ5TeRWQGNryXPLOVhTp7VbD5YDnVi6NEML/KoKIKu4LLgsHMfm13AYtBXWFr/OtJ5daUDTEybyhN9pyP/MsQPhcZ5PqV0dEtp7QptJxmZNzgaoDVf3SCb8bVcBdxkgkHzYwmdp9q5mM6jEf8F6Uv7mKCeZWn2yamgk2cZjX/qpwlL/nNpbqYnz59mpvDE0tYXb58g8zJdVT7L/Zcq17TgYNOraXawLyYIu0FfBFzFvjAXhPn84VGwKnwPb/9SuQqr7HvzxKOiCLqCgoKCgmsaRdAdI9785jfriktQzrksKCgouDJQBF3B5cGsNWf8q7U6VLq2XCV2hL12u2arHbqt1px6L88Te51ORtSXaf6pno8yFDf2SDFPVT+Z+OgqbtR1FZsqE1QplgvsiBeWqxFzBfIJG/0GXsUI72PNWZgG/ebblF/hbGqzXzltd4TtOWeST4l8Qy3PAaHkeaL8JyHkf+PpeE4+dcTexkR0eTaGQf0gjG7krCsGbCeoGcOMakZPMVGf0h4v2JZCssSGZQYpD3v25lTizF5KS+v3UYi6ck55Qp05nFWspFwPo09zXkelTvfq79m1OrBXsz0Q/8UfQ1t/oPff09tv+DeV55bOfpYfOJc6UlPyS9Jv6fNoFSihRTwqSEVBwfGDxjJnXqlh3oykYYu9OeUZ+8oS1Vw6S8uuNP5EXXAhHcJh1M5CGvOc0hIzyjMbH214RtAtFnY5szkoZ6YZsBQ02Jx5RyKPpFkfRsKIgi4SwSPODKVTkDzIBJ0hPVPjT/K4FnRB/MTfSCvkIBuIdUFGorixMUQ0SC4LxQzipxV0mEscD6XayLs4iblhyrWammkVNX9EwFna781J6tTPZbT5DbMDB9pCCWoZXYE0KP9nzOswL28i5AyjsKuoi1NyH0zylc185VnNvL5FPyylSjnyrKZ/8agsVSR/nY/EyXAVmiUSeVRQRwoKCgoKCq5ZFEFXUFBQUHBNowi6y4C77ror3HnnndXd9YlMlaeqv5Dx4pCrAj2BVcvkap9Iu1Sde2vfM25T8O7NvjTnHqCunFPS65nHWZ3MwbPl9ldnWBYfsT4a8WmcmuPxWM04mskfzySuxWxZnkgeGDJnlPxRsgx+MKi5BtfmXFtfCxsb66HPGY4SFkv6fdp8/lpz2MgbcXMYKYPReJKx8Rkn/DSUf4512NAjN7d1PTI3z7dj6JYMF6eRlM9hRNWaxVX+bH2Gvsw8bP7BfHtFM76e3n3D3NGDJ5arsCo9F4ty1uUx4tM//dPDO97xjvC5n/u5+qXx6xnPe9FnV1d0bUwD1dWMeptXXl+ZY+NJoOOgMR6Gmfg9W3bWpZAFJ4fDN788/KPEb2ziFzuD+h671j7XNj0sVmhNav99/sR7G58cmHWy/M3j2+m2wuaJnn7kc319PbDh2MZP+smwpnuzoh+4ReDMgV8ifBI0/tM6vyfjadjbrc9mxO+DoTmrkQObZ52wv8d36Hb1nEsEbwJzUP219eougpeNBGI1MuUT42ff0bHr4mfyN97XZ0nivter06f3XRZ01Mj9j34cCjGaclangY0/QFhZUEcytA+vv4vg6/OQs0QNbPmCtsnvRZiu2oQ+zdPn9/K1u3l6srNkBa2Qn5XpN+lP3VmzPn0cBL4IH35POeuyoKBAwAhid3c37O3tiZDZ1y98FxRcTyiCrqDgGgejp+3t7bmwK4Ku4HpDEXQFlwWoEhNDeyqczYmqcWr+ZoHvW9X0375aRV0ijmZjCf2+qZxYQlUSOZ21ApqvxKSKrMl9zoBqpWJL7k1ylfopocPI8vZ2TfFAyG9kzBeJp2G0UzOqb+u8ZYtBosRI/vphPGqHvd2xcjwSAVhxMmmHWacvHES2B2Ha6tUMXfntzMk34kKnN2e7O1DVY+JgbSNsbJ4M/cF6aIs5WipUmWMpp3a3LXb6YbA+mLO/1lP1qmUjvRmiKvhwVtYy8BB/In35+zmmvLzFjltOT5pqSgnO2E9YM9uCMZFnbPsw9HU4zZUdzrgHcL4X0Lnnq32W/vtzfvtAHn/JEqlqlv77iFJRl1JCyShRNqRNEU/Jy0SxZbkK/vt0KaSjoszRHSPKHF2Ne1/06dWVVEoWc9g5HmiqndRbZYJ2PNr6IqIwqe89mGOBh4OwlrlnwUk958D5liwQSJCuQewc3kxm0ppn48P9RxDT+SWQPjqvhNXxz4FVaz/eVzcCstbmLwtIuginCv1BP5w+fbK6k/t+L5w8eaK6i37nc3Tyb9krMeG55FNefJNub28/7O3vh+3dvcokYtlBysSdBSQJCGoRkdVdRD4HxnVuri8fFTT/J4xi4zOfvnhff58P5HNE7P4z+SGwCy7o5ifTeg5wEWx8FmFZ/Y6o8wP4OTL/vTlbf4GfovPxabfzOTXarMXUBdA4b7OdL3Dyc2x+ztLDh+fd2/wGKb8+8J5f199VWFZ9C54gXvnKV1ZXBQVXHjhkeU8EjyVzd4lFtVlwraEIumPCL//yL+toDhRBV3Alg9Hk7u5+xn0ZeSWOzNeuCwquBRTV5UXg/e9/f/iJn/iJ6i7HBz/4wfDjP/7jev1rv/Zr4TM+4zP0+nrF3fe9oroKqrbsWlWYIKt2cm3vuc5UQ9w7VYu1j+rJqvKamIr9XPVi7aOY0mOpKqQ5mhqEdbh7JiK86tKar1JdguXxb5o37/P8sZDcCR33TmvzDzXU5ma9vJ/9bmfPnqnupPy6bZ1LS8Dt2OrCxCubvZinvXuQ+bkL2zuVaYQNH9j75D4B1SVzgxa5qou8yNOXlx/zbAjvOow8/xaoLr2qzS2vz91LeZryBcvStwjL6jdoMRdr4OPnVZfe/cRsXwHN+perLv32ikknt99UXS5XfXpVpLtt2F/VHlL5/vEf/Jr+rkIRdBX+8A//MPzkT/5kdRfCv/23/zY8+OCD1d3FoQi6EJ71vE+trqRRSKPxgs6CSjs1DY8Kaasl1/l9bk6bWNYw0qKDhKZ9rvOGZrHSPZ2UEXSYWfOjCLpl8P41QV7Y/Mjtx/UC5t6by3WHGf4KbAA/daqew+v1u+HU6XoOj/I6ODDqTYJmwUIFtjPsHxxUd3G+6MJOLug8rGAif6ygkxiG6dKOlLDz8vOCTmIlrPMoN+eAgHwfXea/OJu6fY7ZHKZYmLo5tNz/1fCCzrtvs6JpCbyg84JwOs3zx8/hSYqq3wgvyMZun9+lCjofP2/f47A5u/e/+2j76K5bQfcHf/AH4ad+6qfCe97znkzAXSruvvvu8Ja3vCXccccd1ZPrE0XQ1eZXm6CjEx8M6g2+HenU1jdzQdAoD9MPIuhYiJJAp3TgNjR72I4dv4ugy90XQefSU9W/IugW4Id/+IfD2972NhVwq/B1X/d14dZbb63uIu69997w5V/+5dVdwTIUQVebX22CzgOtru3H6JQ46msO8X9mBEHcoG5WWYr/bXdShoft2MmfIuhy90XQufRU7b8Iugrvete7wpve9Kbw0z/909WTHPfdd1/4si/7Mr1GuN1yyy16XXBpeNa9n1JdSROiozM6f62ypuIiRNhnk0CNzKvljIpaXUezxpyGawi2I4/+VTcVrHmMUd7QcvNc0IFMUIjnLdcx5eGLoDNHZhF/hEEOG57zX67z+EQ/LGz+NOxr+kmf9bO6EHDtO5LMf5GUfIomgU6JLQk1JDxjn056ODSCSvxuuyO3bMdGWONRnX8xf/L8nLn9DT4/jOb0EOT57QVJR+cAkyfkX3UJJO+i/7V53i+zN83kl6AhqHLjBviGoEXu3yx0Nbz6mQ9vWf2UzKMIBdUzuWYv2xxaN4BNn3EvmEYP5rCCjnco3Vtp4AVXpyEIc/99/fOwc+ggpf/9RzwC7JoVdD/0Qz+kAu7xxx+vntR4zWteE+6///7wV//qX62eFBw37rrrpdUVlRTWFZlrez+Vt8WpmWynQtpq2ZZGCRMQcrYjmYpfU9MQvP9xk2/eUHJg93D3MUZ5R2IRN68ebk4nZAUbacsFHWHV4fnwuczSI9Gx+RNHbNWNoGm/LSNK9wZu0HTPCM/kR3taCbpoyfsf76sbgY8fmJqODbect5lAeY4O8vzzgmIZdB8bhxIYrBohWP+J2eG5A5ojyiZyH3z8/YjLgpwahcNVu8Sv59Ln/R86Qe7RXVr/BW6xzSo0R3z5vc//bjs/6/JiBR2tbBHe/96jCboVqb+68Lu/+7vhS77kS7QhfcM3fEMm5P7+3//7qrKkAf7Lf/kvi5ArKCgouE5wTQi6H/zBH1QB9/KXvzz8zM/8TPU0hJe85CXhjW98Y3jsscd0hPelX/qllUlBQUFBwfWCq1p1+QM/8AMqyLa2tqonEYzmUE0i/AqeGjz72S+prqKqyqq6gL2fobrs1NWQKmlVM6gGO6aaYmbN9bTIi1Rd5vHhepn5TO5zVZE1X626JD3LVJc8q/3z8V8Fr3oE1r3G7iJVl1b1FFWXpC9aWhQ/v48v61bE6sz6J27t4iRUlwf7Pv9y/5YB1eWYc0ENfPy8Ks3WH2wuV9w1VZfNbjP3wZtfiuoS9Fz6/Bz12Kk2Pbzq0qs+Z+4zQy77GsgX44Qw6eT54/fhdVruiDBXHl6V2cRi8z9+7zW8j+77v//7df7NC7hv/MZvDG94wxvC6dOnqycFTxWe9awXV1c0muUd96wzFdbV0AsymhQH1SZ484k0Apjgw/OCrhkfrvOGZ0Enbjty7/4ogo4FKQnc28UWtEDbCr3/0f3h4XtB5RGPvz18jsm7b/i/UtDxfEkEsGvn/OTenn06nczC/n7eka/u+Gog6JbOcRGe65ht/SGk3NSjKeis+4jlPlyqoOs6cy/opiumELtutY5fdTkdX5zgabw4dHNB5ufw2q7+HZeg+8D7rrGzLn/rt34rfNEXfZFW2te+9rVzIZfUlXQEjPCKkCsoKCgosLjiBR0C7gu/8AvDp37qp4af+7mfq56G8Cmf8inhZ3/2Z8Pv/M7vhC/+4i+unhYUFBQUFOS4YlWXv/mbv6nqyV/4hV+onkQwmmP+DeFXcOXimc96YXUVkau63L1+T82o9tg+YLYTtEOuKmuqLoXLNkSzj8i802FmVSUzMUW9Z+FbRRZddW/8k7i07NEgAhu+ps+khybXVF3mAWbuHTCz5qtVl+zzylVJNjxyx4fn448vCZh51ZN+O28O/KsuFe1sHyWw+T+R8t4/yFVzXpXlVXU+v+z2FJDlj1w2/avtY9KZ7yWLyPOjFSZu+bzHqm50lepy7OLv/fOq8Tw/5NpFz7vvmvYBGnPETrXp64NuljPw5T/Rz/TUdhpzdCv20dl9msDnf73XL8cH/+hoqssrTtC9853vVAH3i7/4i9WTiG/6pm/S+bfNzc3qScGVjDuf9fzqqgkqcVaRtdOpT8ynSmbVks2oZkNqQ9CJVZjg/WfDOkygkdmGymKWqRF0BJ03C9zW5t69xt8cckxQWfpUEtXxxe9c0Ln0Ovj0eP9XCjrppOxiFx+e+r/k5Bqs+sUyeUeGX3V6mvH19nNMJIC9Uf7FBNsR+vwCtvyB73ib94e7l9iGjttHloUv9IIu95/FRivm2PLgG3BTZOLfkgIVNNPv05e791N43v1KNPInj/A4+H1yuXljzs4JuuBOXvHuD5uE/ND7315dLYfz7anDb/zGb4S/+Bf/YnjFK16RCblv/uZvDjs7O+F7v/d7i5ArKCgoKLhoPOUjOr7hxgiO77lZvO51r9MR3Pp6/fmQgoKCgoKCi8VTJui++7u/W/fA+a8Z/+N//I/D61//+iLgCgoKCgqOBU+6oPuu7/ouFXAjp5P/lm/5FhVwa2v5BxALCgoKCgouBU+aoPun//SfqoAb2y8TC771W79VBVz22Y+CgoKCgoJjwmUXdN/5nd+pAs4uZ+Xr28y/fd7nfV71pKCgoKCg4PLgsgm67/iO79BFJlbA/fk//+dVwH3u535u9aSgoKCgoODy4tgF3bd/+7ergLP7NIqAKygoKCh4qnBsgg7hBq13n/mZn6kC7nM+53OqJwUFBQUFBU8uLknQ4ZQRHHNwFp/1WZ+lAu6zP/uzqycFBQUFBQVPDZ6QoMNJGsFZcAYlAu5Vr3pV9aSgoKCgoOCpxRMSdP/kn/wTXU2Z8MpXvlIFHL8FBQUFBQVXEp7QWZdJoDFye+tb3xre8pa3FCFXUHCVgL2s586dC9vb29WTgoJrG8e+6rKgoODKxfd8z/foMXsJX/mVXxm+/uu/Xg9TLyi4VlEEXUHBdQIv5BJe/epXh1/6pV+q7goKrj0UQVdQcB0AdWWvx8cxF6N0AwXXMq6Y79EVFBRcPpT5uILrGUXQFRRcB+h2F3+huaDgekARdAUF1wFOnDihC08KCq5HFEFXUHCdgNWVLDzx+LZv+7bqqqDg2kRZjFJQUFBQcE2jjOgKCgoKCq5pFEFXUFBQUHBNowi6goKCgoJrGkXQFRQUFBRc0yiCrqCgoKDgmkYRdAUFBQUF1zSKoCsoKCgouKZRBF1BQUFBwTWNIugKCgoKCq5hhPD/B0SuDvMPWOOOAAAAAElFTkSuQmCC","title":"$:/db/word-part/HS-A-A brn prn bv pvr tk AEvr ST.png","type":"image/png","modified":"20221124081641574"},
{"created":"20221124081916359","text":"iVBORw0KGgoAAAANSUhEUgAAAK8AAAEKCAYAAABkNAWcAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAeZSURBVHhe7dy9ctNYAEDha5iB4T3IFsw+gdMzEx7EoYOGbnuKbZyO8AAUW22zTkFNnoAKp+IpGGbAq5tI/lGubEmWbB0438wdHP9IsnN8Lcsmo0UmSEAP8n8lHOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjHdgvn//Hr59+xZ+/vyZn6MqxjsQX79+DZeXl+Hx48fhyZMn4eHDh+Hjx4/5pUox3oH48OFDePnyZf7TnefPnxvwFqNFJj+tIxqNRvmp+378+BEePHCeKfMRAYj7wbrPeAGcddN8VAbu3bt34dGjR/lPWme8A/b27dtwdnaW/6Qy37AJy5n3t3QTLk5HYTQ6DRc3+Vn7uLkKF+en4XQUl1mM7Ofzi3CVXH6x/vNwlZ/TSpx59XuZTUJ8tV2Mp/P8nPbm08linC0rLq9qJNczm9xdPp4u2m6F8f5uOohmqVhWjXE/4PliOq66rJ5O413fWA3RbDHJfz+TWX5Wa6tl3Y7xZDFbNji/nZGXl92O8eJeo8v4s9vmZzXRWWWbG3o39tXlsvYxlO3Y13w6vrsfHcy6y2XdjnR8m9fpfvYdbLxdL6+tPrajy2XVtyWU+XRjv/XerLx2+d1tV8tKLm+pNDsnpvtV4M1n317jjaON1HLiOIaut6Pr5dW2fIlOvHxnts2kxRu8zRl7vphNp4vJeLxlF2R3vOtPjKa7Mp0+csuNXBttpJYTxzGktiOONlLLieMQlgFWznCboS1n0x3Rb1Wa0dMz9Gq91TN4Wu/xxtFE6vZxHFNX25NaThz9W3uZ37a/u3H0IEa+3z7p6gkTR1X8NbctofNHbrWxq1FX6rZxHFtqm+JoInX7OA5jbVbd+tpc2pfNdgnuTjffH918ImRjy3p3vyqkHeQTtm3fVS3Uuc6xZI9Tfqqdqvu273LbGD87yU+lPA2v/soyz11fX9/+O5ldhkbfsLg6D6cv3uc/RJMwu6xewsmzbOeihcF/PHyMX3BdmCflzZfwOT+509llyGbClfE0vGlQ7s3FaRhl4d5lnxln4S7qxv85fGnwcXXn8baJbUgz06Fg7tv16/B3nS8gxO83nI7Cyetltlm3szD/1HDWbuBgM29VoJRw0U/Kp3+EP/OTO2Uv+Ruv+Jn3L7Z/geYm7iacvAjLbrPZNntzFj5luwpP87N6kT2QvYiLLo+y1HXiGKrUtsaRkrpeHMdR9w3b+mGrWY0PIubZm63148PjxSS7XdPjEm3fsB003jgKqcuK0cQ+t22jvL7UOlPXieN46h2OWkZUXOfeobM15WO4k+nadxuaubfemnp9RFd3fDUKqcvi2CV1m/LoU2p9cRRSlxWjiX1um7LzY9jkhxGbh85Ws3bp/JqjavZeLqvhR2y9/qbLG79rpKSut2v0bds6U5fFsUvqNuWxl60fw27ZrdiYfYuwO4x3KB8Pp5TvQNUopC5rOvqWWue2kZK63q6xn+oZbtc+5+rybNy+tHcX7yC+mFOlfAf6HoeSWndqFFKXNR17W86izUPpx+pJ0Obj594PlWXryE/1J66jGEMTD5dVHTJropP7dvYmZLFk3od/9/rPYx25+S/8c3t4bRL+etXioFr2oPQurqbLMRSpbety9KKYfRu+s+9DsTvSZtaNDlbC+i+lyRiy1PbuMw5l32g60cGT6KB1rP+iqgZN6j7UGcdV7Gu2+I5uJ4qjG/ut/+B/dKS8/3fg1feizj7tr3A/h8a/mNORX/FJOXTGK6zBf59XqmK8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrqBD+B0g5beNJMM4TAAAAAElFTkSuQmCC","title":"$:/db/word-part/MV-q-q z MR.png","type":"image/png","modified":"20221124081917294"},
{"created":"20221124081922985","text":"iVBORw0KGgoAAAANSUhEUgAAAK8AAAEKCAYAAABkNAWcAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAAenSURBVHhe7dy9khJZAEDhO1ql5Xs4G1j7BExu1fggjJkmZpsbbMJkjg9gsNEmi4GxPoGRTORTWAayfZluaJgL9M8F+ljnq7olw093A4dL04xzNi8ECehB+a+EY7zCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jG29KvX7/Cjx8/ws+fP8tzdCrG28KnT5/Cw4cPw5MnT8Ljx4/Dzc1N+P79e3mpjs14G4rhPn/+vPzpzsuXL8OHDx/Kn3RsZ/NCeVpbxF2FOONu40N4Gs68Dbh/O0zG28CDBz5MQ+Sz0sCjR4/Cu3fvyp80FMbb0OXlZXj79m35k4bAD2wdnZ2dLf714TsdZ96OYrSMcG/D9cVZ8WK7CNe35Vl93H4M11cX4aJ48cYX8N0ofr66Dh+Ty6/WfxU+ludkE2de/b6m4xBfYfPRZFae091sMp6PimXF5W0byfVMx3eXjybz/luxYry/s5zRVMtqMO4HPJtPRtsu6854B6geQnfT+bhcxnhantXZalmLMRrPp8sGZ4sZeXnZYozm9xpdxl/ctjyrL3S89QfslHJuR31ZfZY5m4zubp9h1l0uazHS8a1f5ziz71Gf9fqd66u+rFzL7CL3duRZ3o5QZpO1/dZ7s3Lt8rvbrpaVXN7SxuycmO5XgeeZfY/2jC/vVG30kXt5XaW2I44uUsuJo7XlW3Ti7buwayatPuCtz9iz+XQymY9Hox27IPvjrb8w+u/KnDjeOLpILSeOU0htRxxd5FrOMsCtM9x6aMvZdE/0O23M6OkZerXe7TN4c79NvKeU2p442kjdPo72am/zu/Z3144exMj77ZOuXjBxbIu/4bY1dNRnfXXn1kcbqdvHcWqpbYqjqT63XVebVXe+N2/syxa7BHenO+yPbh5G27He/e8KzR31G7ZifeWpddVXrV1tW+4QNLlvfe//NqNn5+WplKfh1V9F5qUvX74s/h1Pb8Ll4lRDH6/CxYv35Q/ROExvti/h/Fmxc5HJYL4ePuWTnMNgXkC338LX8uRelzehmAlXRpPwpkW5t9cX4awI9y77wqgId940/q/hW8+vq48e75Bnyb5yvrOc5HH68jr83eQXEOLvN1ychfPXy2yLbqdh9rnlrN3TSWZe/JO8Q9v7lv3d5Okf4c/y5F7FW/7aO37h/Yvdv0BzG3cTzl+EZbfFbFt8OAufi12Fp+VZR1M82CcTV58aKanrxTFUqW2NY1OT67TT9ANb/bDVtMEXEbPiw1b9+PBoPi5u1/aIQc4PbCd/9lcPxvrY1OQ6ufVZ3+Zt66OSuiyOfpodjlpGVF3n3qGzms1juONJ7Xcb2rm33h6yFLC603ejjc3b1kcldVkch5Ra3+bYJ3WbOCq7Lutj79ewyS8j1g+drWbtjfMbjm2z93JZGb5i6/1obW50auyTuk0clV2XHUpqnftGSup6u0YWO7+G3bFbsTb7VmFnjHdoXw9vbnSTkZK63q5xaKl1th2V1GWpkc/2GW7fPufq8mIs3trzxTu4X8zZ3Oguo5K6LDWOJbXuQ46slrNonlD6W70Iunz9nNL7UFmxjPJUd/FwUfZDRhnE+1aNQ8u+jss3oYil8D78m/0/j3Vw+1/4Z3F4bRz+epXpoFrxoGUVF3nIMRSpbeszDqKafTN8su+r2h3JNetGB6+h/gTlGEOW2t4m45AOEU1rB3oRnaSG+hPXZtCk7sPmOLxqX7PD7+hmUR3dyL/+QfzRkSb7uwPYzN427+fvcJ9OaZB/MccnWU34556ENZjf55XaMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3iFZbzCMl5hGa+wjFdYxiss4xWW8QrLeIVlvMIyXmEZr7CMV1jGKyzjFZbxCst4hWW8wjJeYRmvsIxXWMYrLOMVlvEKy3gFFcL/rUl53a/fk18AAAAASUVORK5CYII=","title":"$:/db/word-part/MV-q-q z ST.png","type":"image/png","modified":"20221124081925765"},
{"created":"20220530231504058","text":"\u003C\u003Cdb_word_entries>>\n","tags":"db_word","title":"$:/db/word/baseball","modified":"20221124082656095","dtitle":"baseball","img_st_e1":"$:/db/word-part/A prn pkqr ST.png","img_st_e2":"$:/db/word-part/A brn bkrqr ST.png","img_st_e4":"$:/db/word-part/A-A brn prn bkrqr pkqr tq Advr FqFk bv pvr ST.png","img_st_e3":"$:/db/word-part/A-A brn prn bkrqr pkqr tq ADvr FqFk bv pvr SV.png","img_st_e5":"$:/db/word-part/A prn pvrkr ST.png","img_st_e6":"$:/db/word-part/A brn bvkr ST.png","img_mr_e1":"$:/db/word-part/A brn bkrqr MR.png","img_mr_e2":"$:/db/word-part/A prn pkqr MR.png","img_mr_e3":"$:/db/word-part/A-A brn prn bkrqr pkqr tq ADvr FqFk bv pvr SV.png","img_mr_e4":"$:/db/word-part/A-A brn prn bkrqr pkqr tq Advr FqFk bv pvr MR.png","img_mr_e5":"$:/db/word-part/A brn bvkr MR.png","img_mr_e6":"$:/db/word-part/A prn pvrkr MR.png","text_st_e1":"Starting with DH HS A","text_st_e1_img":"$:/db/word-part/HS-A prnqk ST.png","text_st_e2":"; palm left, thumb-side in","text_st_e2_img":"$:/db/word-part/HS-A prnkqr ST.png","text_st_e3":"; NDH HS A","text_st_e3_img":"$:/db/word-part/HS-A brnqkr ST.png","text_st_e4":"; palm right, thumb-side in","text_st_e4_img":"$:/db/word-part/HS-A brnkrqr ST.png","text_st_e5":"; keeping both hands together, DH behind and NDH in front","text_st_e5_img":"$:/db/word-part/HS-A-A brn prn bv pvr tk AEvr ST.png","text_st_e6":"; placed at right shoulder","text_st_e6_img":"$:/db/word-part/HS-A-A brn prn bkrqr pkqr tq ADvr ST.png","text_st_e7":"; Move both hands forward and roll wrists, repeating movement twice quickly","text_st_e7_img":"$:/db/word-part/MV-q-q z ST.png","text_st_e8":"; Ending with DH palm up, thumb-side right","text_st_e8_img":"$:/db/word-part/HS-A prn pvrkr ST.png","text_st_e9":"; NDH palm down, thumb-side right"},
{"created":"20220530231052602","text":"[tag[INDEX]sort[]]","title":"$:/DefaultTiddlers","modified":"20220531043750689","tags":"$:/positivesigner/tag/startup"},
{"title":"$:/Import","text":"The following tiddlers were imported:\n\n# [[MV-q-q z MR.png]]\n# [[MV-q-q z ST.png]]","status":"complete"},
{"title":"$:/isEncrypted","text":"no"},
{"created":"20210108075708187","text":"New Card","title":"$:/language/DefaultNewTiddlerTitle","modified":"20220531050042633","tags":"$:/positivesigner/tag/startup"},
{"created":"20220531050609258","title":"$:/palette","text":"$:/palettes/Vanilla","modified":"20220531075213359"},
{"created":"20211003010624951","text":"alert-background: #ffe476\nalert-border: #b99e2f\nalert-highlight: #881122\nalert-muted-foreground: #b99e2f\nbackground: #b8b39c\nblockquote-bar: \u003C\u003Ccolour muted-foreground>>\nbutton-background: \nbutton-foreground: \nbutton-border: \ncode-background: #f7f7f9\ncode-border: #e1e1e8\ncode-foreground: #dd1144\ndiff-delete-background: #ffc9c9\ndiff-delete-foreground: \u003C\u003Ccolour foreground>>\ndiff-equal-background: \ndiff-equal-foreground: \u003C\u003Ccolour foreground>>\ndiff-insert-background: #aaefad\ndiff-insert-foreground: \u003C\u003Ccolour foreground>>\ndiff-invisible-background: \ndiff-invisible-foreground: \u003C\u003Ccolour muted-foreground>>\ndirty-indicator: #ff0000\ndownload-background: #34c734\ndownload-foreground: \u003C\u003Ccolour background>>\ndragger-background: \u003C\u003Ccolour foreground>>\ndragger-foreground: \u003C\u003Ccolour background>>\ndropdown-background: \u003C\u003Ccolour background>>\ndropdown-border: \u003C\u003Ccolour muted-foreground>>\ndropdown-tab-background-selected: #fff\ndropdown-tab-background: #ececec\ndropzone-background: rgba(0,200,0,0.7)\nexternal-link-background-hover: inherit\nexternal-link-background-visited: inherit\nexternal-link-background: inherit\nexternal-link-foreground-hover: inherit\nexternal-link-foreground-visited: #0000aa\nexternal-link-foreground: #0000ee\nforeground: #333333\nmessage-background: #ecf2ff\nmessage-border: #cfd6e6\nmessage-foreground: #547599\nmodal-backdrop: \u003C\u003Ccolour foreground>>\nmodal-background: \u003C\u003Ccolour background>>\nmodal-border: #999999\nmodal-footer-background: #f5f5f5\nmodal-footer-border: #dddddd\nmodal-header-border: #eeeeee\nmuted-foreground: #bbb\nnotification-background: #ffffdd\nnotification-border: #999999\npage-background: #b8b39c\npre-background: #b8b39c\npre-border: #cccccc\nprimary: #5778d8\nselection-background: \nselection-foreground: \nselect-tag-background: \nselect-tag-foreground: \nsidebar-button-foreground: \u003C\u003Ccolour foreground>>\nsidebar-controls-foreground-hover: #000000\nsidebar-controls-foreground: #aaaaaa\nsidebar-foreground-shadow: rgba(255,255,255, 0.8)\nsidebar-foreground: #acacac\nsidebar-muted-foreground-hover: #444444\nsidebar-muted-foreground: #c0c0c0\nsidebar-tab-background-selected: #f4f4f4\nsidebar-tab-background: #e0e0e0\nsidebar-tab-border-selected: \u003C\u003Ccolour tab-border-selected>>\nsidebar-tab-border: \u003C\u003Ccolour tab-border>>\nsidebar-tab-divider: #e4e4e4\nsidebar-tab-foreground-selected: \nsidebar-tab-foreground: \u003C\u003Ccolour tab-foreground>>\nsidebar-tiddler-link-foreground-hover: #444444\nsidebar-tiddler-link-foreground: #999999\nsite-title-foreground: \u003C\u003Ccolour tiddler-title-foreground>>\nstatic-alert-foreground: #aaaaaa\ntab-background-selected: #ffffff\ntab-background: #d8d8d8\ntab-border-selected: #d8d8d8\ntab-border: #cccccc\ntab-divider: #d8d8d8\ntab-foreground-selected: \u003C\u003Ccolour tab-foreground>>\ntab-foreground: #666666\ntable-border: #dddddd\ntable-footer-background: #a8a8a8\ntable-header-background: #f0f0f0\ntag-background: #ec6\ntag-foreground: #ffffff\ntiddler-background: \u003C\u003Ccolour background>>\ntiddler-border: \u003C\u003Ccolour background>>\ntiddler-controls-foreground-hover: #888888\ntiddler-controls-foreground-selected: #444444\ntiddler-controls-foreground: #cccccc\ntiddler-editor-background: #b8b39c\ntiddler-editor-border-image: #ffffff\ntiddler-editor-border: #cccccc\ntiddler-editor-fields-even: #e0e8e0\ntiddler-editor-fields-odd: #f0f4f0\ntiddler-info-background: #f8f8f8\ntiddler-info-border: #dddddd\ntiddler-info-tab-background: #f8f8f8\ntiddler-link-background: \u003C\u003Ccolour background>>\ntiddler-link-foreground: \u003C\u003Ccolour primary>>\ntiddler-subtitle-foreground: #444444\ntiddler-title-foreground: #182955\ntoolbar-new-button: \ntoolbar-options-button: \ntoolbar-save-button: \ntoolbar-info-button: \ntoolbar-edit-button: \ntoolbar-close-button: \ntoolbar-delete-button: \ntoolbar-cancel-button: \ntoolbar-done-button: \nuntagged-background: #999999\nvery-muted-foreground: #888888\nwikilist-background: #e5e5e5\nwikilist-item: #fff\nwikilist-info: #000\nwikilist-title: #666\nwikilist-title-svg: \u003C\u003Ccolour wikilist-title>>\nwikilist-url: #aaa\nwikilist-button-open: #4fb82b\nwikilist-button-open-hover: green\nwikilist-button-reveal: #5778d8\nwikilist-button-reveal-hover: blue\nwikilist-button-remove: #d85778\nwikilist-button-remove-hover: red\nwikilist-toolbar-background: #d3d3d3\nwikilist-toolbar-foreground: #888\nwikilist-droplink-dragover: rgba(255,192,192,0.5)\nwikilist-button-background: #acacac\nwikilist-button-foreground: #000","title":"$:/palettes/Vanilla-dim","type":"application/x-tiddler-dictionary","description":"Pale and unobtrusive","modified":"20220531052750879","name":"Vanilla","tags":"$:/tags/Palette $:/positivesigner/tag/startup"},
{"created":"20220531011221767","text":"\u003C$list variable=root_path filter=\u003C\u003Cpsgr_psgr_root>> >\n\u003C$list variable=ctxt filter=\"[\u003Croot_path>]\" >\n\u003C$list variable=file_count filter=\u003C\u003Cpsgr_path_subcardscount>> >\n\nFiles checked with prefix \u003C\u003Croot_path>>: \u003C\u003Cfile_count>>\n\u003C/$list>\u003C!--file_count-->\n\n\u003C$list variable=sub_card filter=\u003C\u003Cpsgr_path_subcards>> >\n\u003C$list variable=tag_group filter=\"[\u003Csub_card>removeprefix\u003Croot_path>split[/]first[]]\" >\n\u003C$list variable=assign_tag filter=\"[\u003Ctag_group>addprefix[tag/]addprefix\u003Croot_path>]\" >\n\u003C$list variable=missing_tag filter=\"[\u003Csub_card>!tag\u003Cassign_tag>]\" >\n\n\u003C$link to=\u003C\u003Csub_card>> /> assign tag \u003C$button message=\"tm-copy-to-clipboard\" param=\u003C\u003Cassign_tag>> >group:\u003C\u003Cassign_tag>>\n\u003C/$button>\n\u003C/$list>\u003C!--missing_tag-->\n\n\u003C$list variable=missing_card filter=\"[\u003Cassign_tag>!has[title]]\">\n\nCreate tag card: \u003C$link to=\u003C\u003Cassign_tag>> />\n\u003C/$list>\u003C!--missing_card-->\n\n\u003C$list variable=is_tag filter=\"[\u003Ctag_group>match[tag]]\">\n\u003C$list variable=missing_tag filter=\"[\u003Csub_card>!tag\u003Csub_card>]\" >\n\n\u003C$link to=\u003C\u003Csub_card>> /> assign tag \u003C$button message=\"tm-copy-to-clipboard\" param=\u003C\u003Csub_card>> >self: \u003C\u003Csub_card>>\n\u003C/$button>\n\u003C/$list>\u003C!--missing_tag-->\n\u003C/$list>\u003C!--is_tag-->\n\u003C/$list>\u003C!--assign_tag-->\n\u003C/$list>\u003C!--tag_group-->\n\u003C/$list>\u003C!--sub_card-->\n\u003C/$list>\u003C!--ctxt-->\n\u003C/$list>\u003C!--root_path-->\n","tags":"$:/positivesigner/tag/audit","title":"$:/positivesigner/audit/tags","modified":"20220531024155923"},
{"created":"20220531022641686","text":"Button that copies text to the clipboard. Used in \u003C\u003Cpsgr_link_root \"startup/mcr save\">> wiki\n\n```\n\u003C$button message=\"tm-copy-to-clipboard\" param=UrText >\nUrText\n\u003C/$button>\n```\n\nKeyboard shortcut that saves the wiki file. Used in \u003C\u003Cpsgr_link_root \"startup/mcr save\">> wiki\n\n```\n$:/config/ShortcutInfo/save-all-changes must exist\n\n$:/config/shortcuts/save-all-changes must have text that specifies a shortcut key combination\n\n$:/positivesigner/startup/keyboard save-changes-all must have $:/tags/KeyboardShortcut and have field \"key\" = ((save-all-changes))\n\n\u003C$action-sendmessage $message=\"tm-save-wiki\" filename=UrFilename />\n\nNote: If it calls the action from a macro, you must first use \\imports to specify the macro card\n```\n\nStylesheet available for entire wiki. Used in \u003C\u003Cpsgr_link_root \"startup/stylesheet MediaPrint\">> noprint\n\n```\n$:/tags/Stylesheet\n```\n","tags":"$:/positivesigner/tag/design","title":"$:/positivesigner/design/features","modified":"20220531204607277"},
{"created":"20220531022007289","text":"\nI use the WikiMove program to move downloaded files with WikiMove prefix to overwrite locally-opened Wiki files. \u003C\u003Cpsgr_design_text \"startup/mcr\">>\n\n\u003C\u003Cpsgr_design_text \"startup/filter\">>\n\n\u003C\u003Cpsgr_design_text \"startup/keyboard\">>\n\n\u003C\u003Cpsgr_design_text \"startup/stylesheet\">>\n\n\u003C\u003Cpsgr_design_text \"startup/template\">>\n\n[[INDEX]] tag is used to tag the cards that are shown on start-up.\n\n$:/config/AutoSave enables or disables the auto-save feature on platforms that support it. $:/DefaultTiddlers specifies which cards to show when the Wiki is opened. $:/language/DefaultNewTiddlerTitle specifies the title given to new cords. $:/config/MissingLinks and $:/config/WikiParserRules/Inline/wikilink turn off the default card-linking behavior for camel-case text. $:/config/Navigation/openLinkFromOutsideRiver specifies whether links open above or below the current card. $:/config/TextEditor/EnableToolbar shows or hides the toolbar within the card text editor. $:/palettes/Vanilla-dim specifies a dark background color scheme. $:/themes/tiddlywiki/vanilla/options/sidebarlayout keeps the sidebar layout at a fixed size.\n\n$:/core/save/all and $:/config/SaverFilter have \"$:/positivesignertemp/\" sub-cards excluded.","tags":"$:/positivesigner/tag/design","title":"$:/positivesigner/design/startup","modified":"20220531070850465"},
{"created":"20220531010817809","text":"Tags mark each positivesigner card\n\nEach tag must be marked by the \"tag/tag\" and itself\n\nUse \u003C\u003Cpsgr_link_root \"audit/tags\">> to verify all cards are tagged\n","tags":"$:/positivesigner/tag/design","title":"$:/positivesigner/design/tags","modified":"20220531021427244"},
{"created":"20220531055628783","text":"\u003C\u003Cpsgr_design_text \"text/mcr\">>\n","tags":"$:/positivesigner/tag/design","title":"$:/positivesigner/design/text","modified":"20220531060321467"},
{"created":"20200418064445680","text":"\u003C!--2021m04d24-->\n\u003C$list variable=cur_card filter=\"[all[current]]\">\n\u003C$button class=\u003C\u003Ctv-config-toolbar-class>> >\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"yes\"/>\n\u003C$action-setfield $tiddler=\"$:/state/popup/DivPopTitle\" text=\u003C\u003Ccur_card>>/>\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\"pop_right\"/>\n\u003C$list filter=\"[\u003Ctv-config-toolbar-icons>match[yes]]\">\n{{$:/positivesigner/div-pop/DivPop.svg}}\n\u003C/$list>\n\u003C$list filter=\"[\u003Ctv-config-toolbar-text>match[yes]]\">\n\u003Cspan class=\"tc-btn-text\">\u003C$text text=\"Popup over Sidebar\"/>\u003C/span>\n\u003C/$list>\n\u003C/$button>\n\u003C/$list>","title":"$:/positivesigner/div-pop/DivPop btn","modified":"20220531061730802","tags":"$:/tags/ViewToolbar $:/positivesigner/tag/div-pop"},
{"created":"20200418110049404","text":"\u003C!--2021m10d02-->\n\u003C$list variable=cur_divpop_card filter=\"[{$:/state/popup/DivPopTitle}is[tiddler]]\">\n\u003C$list variable=cur_palette filter=\"[[$:/palette]get[text]match[$:/palettes/Vanilla-dim]]\">\n\u003Cdiv style=\"\nposition: fixed;\ntop: 0px;\nright: 0px;\nwidth: 350px;\nborder: 3px solid;\nbackground: #b8b39c;\nbottom: 0%;\n\">\n\u003Cdiv style=\"overflow-y: scroll; height: 100%;\">\n\u003C$button>\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n\u003C$action-setfield $tiddler=\"$:/state/popup/DivPopTitle\" text=\"\"/>\nclose\n\u003C/$button>\n&nbsp;&nbsp;&nbsp;\u003C$reveal type=\"match\" state=\"$:/state/popup/$ur_pk$\" text=\"show\">\u003C$button set=\"$:/state/popup/$ur_pk$\" setTo=\"hide\">show\u003C/$button>&nbsp;&nbsp;&nbsp;\u003C$link to=\u003C\u003Ccur_divpop_card>> >\u003C\u003Ccur_divpop_card>>\n\u003C/$link>\n\u003C$list variable=cur_text filter=\"[\u003Ccur_divpop_card>get[text]]\">\n\u003C$codeblock code=\u003C\u003Ccur_text>> />\u003C/$list>\n\u003C/$reveal>\n\u003C$reveal type=\"nomatch\" state=\"$:/state/popup/$ur_pk$\" text=\"show\">\u003C$button set=\"$:/state/popup/$ur_pk$\" setTo=\"show\">code\u003C/$button>&nbsp;&nbsp;&nbsp;\u003C$link to=\u003C\u003Ccur_divpop_card>> >\u003C\u003Ccur_divpop_card>>\n\u003C/$link>\n\u003C$tiddler tiddler=\u003C\u003Ccur_divpop_card>> >\n\u003C$transclude mode=\"block\" />\n\u003C/$tiddler>\n\u003C/$reveal>\n\u003C/div>\n\u003C/div>\n\u003C/$list>\n\u003C$list variable=cur_palette filter=\"[[$:/palette]get[text]!match[$:/palettes/Vanilla-dim]]\">\n\u003Cdiv style=\"\nposition: fixed;\ntop: 0px;\nright: 0px;\nwidth: 350px;\nborder: 3px solid;\nbackground: white;\nbottom: 0%;\n\">\n\u003Cdiv style=\"overflow-y: scroll; height: 100%;\">\n\u003C$button>\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n\u003C$action-setfield $tiddler=\"$:/state/popup/DivPopTitle\" text=\"\"/>\nclose\n\u003C/$button>\n&nbsp;&nbsp;&nbsp;\u003C$reveal type=\"match\" state=\"$:/state/popup/$ur_pk$\" text=\"show\">\u003C$button set=\"$:/state/popup/$ur_pk$\" setTo=\"hide\">show\u003C/$button>&nbsp;&nbsp;&nbsp;\u003C$link to=\u003C\u003Ccur_divpop_card>> >\u003C\u003Ccur_divpop_card>>\n\u003C/$link>\n\u003C$list variable=cur_text filter=\"[\u003Ccur_divpop_card>get[text]]\">\n\u003C$codeblock code=\u003C\u003Ccur_text>> />\u003C/$list>\n\u003C/$reveal>\n\u003C$reveal type=\"nomatch\" state=\"$:/state/popup/$ur_pk$\" text=\"show\">\u003C$button set=\"$:/state/popup/$ur_pk$\" setTo=\"show\">code\u003C/$button>&nbsp;&nbsp;&nbsp;\u003C$link to=\u003C\u003Ccur_divpop_card>> >\u003C\u003Ccur_divpop_card>>\n\u003C/$link>\n\u003C$tiddler tiddler=\u003C\u003Ccur_divpop_card>> >\n\u003C$transclude mode=\"block\" />\n\u003C/$tiddler>\n\u003C/$reveal>\n\u003C/div>\n\u003C/div>\n\u003C/$list>\n\u003C/$list>\n","title":"$:/positivesigner/div-pop/DivPop glbl","modified":"20220531061942804","tags":"$:/tags/BelowStory $:/positivesigner/tag/div-pop"},
{"created":"20200604201919605","text":"\u003C?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\u003Csvg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   inkscape:version=\"1.0 (4035a4fb49, 2020-05-01)\"\n   sodipodi:docname=\"PopupSidebar.svg\"\n   id=\"svg52\"\n   version=\"1.1\"\n   height=\"22pt\"\n   width=\"22pt\"\n   viewBox=\"0 0 128 128\"\n   class=\"tc-image-close-button tc-image-button\">\n  \u003Cmetadata\n     id=\"metadata58\">\n    \u003Crdf:RDF>\n      \u003Ccc:Work\n         rdf:about=\"\">\n        \u003Cdc:format>image/svg+xml\u003C/dc:format>\n        \u003Cdc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        \u003Cdc:title>\u003C/dc:title>\n      \u003C/cc:Work>\n    \u003C/rdf:RDF>\n  \u003C/metadata>\n  \u003Cdefs\n     id=\"defs56\">\n    \u003Cinkscape:perspective\n       id=\"perspective60\"\n       inkscape:persp3d-origin=\"64 : 36.371105 : 1\"\n       inkscape:vp_z=\"128 : 43.054765 : 1\"\n       inkscape:vp_y=\"0 : 313.29655 : 0\"\n       inkscape:vp_x=\"0 : 43.054765 : 1\"\n       sodipodi:type=\"inkscape:persp3d\" />\n  \u003C/defs>\n  \u003Csodipodi:namedview\n     inkscape:current-layer=\"svg52\"\n     inkscape:window-maximized=\"0\"\n     inkscape:window-y=\"27\"\n     inkscape:window-x=\"61\"\n     inkscape:cy=\"12.415296\"\n     inkscape:cx=\"21.019608\"\n     inkscape:zoom=\"8\"\n     showgrid=\"false\"\n     id=\"namedview54\"\n     inkscape:window-height=\"480\"\n     inkscape:window-width=\"820\"\n     inkscape:pageshadow=\"2\"\n     inkscape:pageopacity=\"0\"\n     guidetolerance=\"10\"\n     gridtolerance=\"10\"\n     objecttolerance=\"10\"\n     borderopacity=\"1\"\n     bordercolor=\"#666666\"\n     pagecolor=\"#ffffff\" />\n  \u003Cg\n     id=\"g50\"\n     fill-rule=\"evenodd\" />\n  \u003Crect\n     y=\"13.090909\"\n     x=\"10.909091\"\n     height=\"104.72727\"\n     width=\"111.27273\"\n     id=\"rect85\"\n     style=\"fill:#cccccc;stroke-width:4.36364\" />\n  \u003Crect\n     y=\"19.636366\"\n     x=\"19.09091\"\n     height=\"89.454567\"\n     width=\"95.454552\"\n     id=\"rect92\"\n     style=\"fill:#ffffff;stroke-width:4.36364\" />\n  \u003Crect\n     y=\"58.909092\"\n     x=\"50.727272\"\n     height=\"10.909091\"\n     width=\"42.545452\"\n     id=\"rect94\"\n     style=\"fill:#cccccc;stroke-width:4.36364\" />\n  \u003Cpath\n     id=\"path96\"\n     d=\"m 61.090909,34.363636 c 32.181818,24.545458 32.181818,24.545458 32.181818,24.545458 v 0\"\n     style=\"fill:#cccccc;stroke:#cccccc;stroke-width:4.36364px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n  \u003Cpath\n     id=\"path98\"\n     d=\"M 64.909091,95.999999 C 93.272727,69.818185 93.272727,69.818185 93.272727,69.818185\"\n     style=\"fill:#b3b3b3;stroke:#cccccc;stroke-width:4.36364px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n  \u003Crect\n     y=\"16.90909\"\n     x=\"86.727272\"\n     height=\"94.909088\"\n     width=\"8.181818\"\n     id=\"rect100\"\n     style=\"fill:#cccccc;stroke-width:4.36364\" />\n\u003C/svg>\n","title":"$:/positivesigner/div-pop/DivPop.svg","type":"image/svg+xml","modified":"20220531061656054","tags":"$:/positivesigner/tag/div-pop"},
{"created":"20210215053242107","text":"\u003C!--2021m04d24-->\n\u003C\u003Cgcmpr_btn_cmp_current>> \n","title":"$:/positivesigner/gcmpr/btn gcmpr card","modified":"20220531065726358","tags":"$:/tags/ViewToolbar $:/positivesigner/tag/gcmpr"},
{"created":"20210215032519812","text":"\\define gcmpr_compare_card(ur_ttb_card)\n\u003C!--2021m04d24-->\n\u003C$list variable=ttb_card filter=\"[[$ur_ttb_card$]!match[]]\">\n\u003C$list variable=compare_card filter=\"[\u003Cttb_card>addprefix[$:/positivesignertemp/compare-card/]]\">\n\u003C$link to=\u003C\u003Cttb_card>> />\n\u003C\u003Cgcmpr_ref_edit_source_text>>\n\u003C\u003Cgcmpr_ref_copy_over_ttb_card>>\n\u003Cbr>\n\u003C$link to=\u003C\u003Ccompare_card>> />\n\u003C\u003Cgcmpr_ref_replace_comment_endings>>\n\u003C\u003Cgcmpr_ref_disp_diff_text>>\n\u003C$edit-text autoHeight=no class=\"cls_full_width\" tiddler=\u003C\u003Ccompare_card>> tag=textarea default=\"\" />\n\u003C\u003Cgcmpr_ref_disp_textedit_link>>\n\u003C/$list>\u003C!--compare_card-->\n\u003C/$list>\u003C!--ttb_card-->\n\u003C!--gcmpr_compare_card-->\n\\end\n\n\\define gcmpr_ref_edit_source_text(ttb_card, compare_card)\n\u003C$vars enr_text=\"text\" >\n\u003C$list variable=source_text filter=\"[\u003Cttb_card>get\u003Cenr_text>else[]]\">\n\u003C$button>\n\u003C$action-setfield $tiddler=\u003C\u003Ccompare_card>> text=\u003C\u003Csource_text>> />\nCopy Source\n\u003C/$button>\n\u003C/$list>\u003C!--source_text-->\n\u003C/$vars>\u003C!--enr_text-->\n\u003C!--gcmpr_ref_edit_source_text-->\n\\end\n\n\\define gcmpr_ref_copy_over_ttb_card(ttb_card, compare_card)\n\u003C$vars enr_text=\"text\" >\n\u003C$list variable=compare_text filter=\"[\u003Ccompare_card>get\u003Cenr_text>else[]]\">\n\u003C$button>\n\u003C$action-setfield $tiddler=\u003C\u003Cttb_card>> text=\u003C\u003Ccompare_text>> />\nOverwrite Source\n\u003C/$button>\n\u003C/$list>\u003C!--compare_text-->\n\u003C/$vars>\u003C!--enr_text-->\n\u003C!--gcmpr_ref_copy_over_ttb_card-->\n\\end\n\n\\define gcmpr_ref_replace_comment_endings(ttb_card, compare_card)\n\u003C$button>\n\u003C$vars comment_flag=\"--\" lit_exclm=\"!\" lit_lt=\"\u003C\" lit_gt=\">\" enr_text=\"text\" >\n\u003C$wikify name=lit_lf text=\"&#10;\">\n\u003C$list variable=comment_open_text filter=\"[\u003Clit_lt>addsuffix\u003Clit_exclm>addsuffix\u003Ccomment_flag>]\">\n\u003C$list variable=comment_close_text filter=\"[\u003Ccomment_flag>addsuffix\u003Clit_gt>]\">\n\u003C$list variable=comment_close_replace filter=\"[\u003Ccomment_flag>addsuffix\u003Clit_exclm>addsuffix\u003Clit_gt>]\">\n\u003C$list variable=replace_text filter=\"[\u003Ccompare_card>get\u003Cenr_text>split\u003Ccomment_close_text>join\u003Ccomment_close_replace>addprefix\u003Clit_lf>addprefix\u003Ccomment_open_text>addsuffix\u003Clit_lf>addsuffix\u003Ccomment_close_text>]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccompare_card>> text=\u003C\u003Creplace_text>> />\n\u003C/$list>\u003C!--replace_text-->\n\u003C/$list>\u003C!--comment_close_replace-->\n\u003C/$list>\u003C!--comment_close_text-->\n\u003C/$list>\u003C!--comment_open_text-->\n\u003C/$wikify>\n\u003C/$vars>\u003C!--comment_flag, lit_exclm, lit_lt, lit_gt-->\nReplace comment endings\n\u003C/$button>\u003Cbr>\n\u003C!--gcmpr_ref_replace_comment_endings-->\n\\end\n\n\\define gcmpr_ref_disp_diff_text()\n\u003C$list variable=val_ttb_card filter=\"[\u003Cttb_card>get[text]!match[]]\">\n\u003C$list variable=val_compare_card filter=\"[\u003Ccompare_card>get[text]!match[]]\">\n\u003C$diff-text source=\u003C\u003Cval_ttb_card>> dest=\u003C\u003Cval_compare_card>> />\n\u003C/$list>\u003C!--val_compare_card-->\n\u003C/$list>\u003C!--val_ttb_card-->\n\u003C!--gcmpr_ref_disp_diff_text-->\n\\end\n\n\\define gcmpr_ref_disp_textedit_link()\n\u003C$list variable=cur_url filter=\"[{$:/info/url/full}]\">\n\u003C$list variable=new_link filter=\"[\u003Ccur_url>addsuffix[#]addsuffix[$:/positivesigner/gcmpr/textarea]split[$:]join[%24%3A]]\">\n\u003Ca href=\u003C\u003Cnew_link>> target=\"_blank\" >text editor\u003C/a>\n\u003C/$list>\n\u003C/$list>\n\u003C!--gcmpr_ref_disp_textedit_link-->\n\\end\n\n\\define gcmpr_btn_cmp_current()\n\u003C$list variable=cur_card filter=\"[all[current]]\">\n\u003C$list variable=dest_card filter=\"[\u003Ccur_card>addprefix[$:/positivesignertemp/gcmpr/]]\">\n\u003C$vars lit_lt=\"\u003C\" lit_gt=\">\" lit_s=\" \" lit_qs='\"' macro_name=\"gcmpr_compare_card\" enr_text=\"text\" >\n\u003C$list variable=macro_call_text filter=\"[\u003Clit_lt>addsuffix\u003Clit_lt>addsuffix\u003Cmacro_name>addsuffix\u003Clit_s>addsuffix\u003Clit_qs>addsuffix\u003Ccur_card>addsuffix\u003Clit_qs>addsuffix\u003Clit_gt>addsuffix\u003Clit_gt>]\">\n\u003C$button class=\u003C\u003Ctv-config-toolbar-class>> >\n\u003C$action-setfield $tiddler=\u003C\u003Cdest_card>> text=\u003C\u003Cmacro_call_text>> />\n\u003C$action-navigate $to=\u003C\u003Cdest_card>> />\nCompare to Textbox\n\u003C/$button>\n\u003C/$list>\u003C!--macro_call_text-->\n\u003C/$vars>\u003C!--lit_lt-->\n\u003C/$list>\u003C!--dest_card-->\n\u003C/$list>\u003C!--cur_card-->\n\u003C!--gcmpr_btn_cmp_current-->\n\\end\n\n\\define gcmpr_textarea_new()\n\u003C$vars enr_text=\"text\" enr_new_filename=\"new_filename\" lit_state_popup_prefix=\"$:/positivesignertemp/gcmpr_textarea/\" cur_card=\u003C\u003CcurrentTiddler>> >\n\u003C$list variable=temp_card filter=\"[\u003Ccur_card>addprefix\u003Clit_state_popup_prefix>]\">\n\u003C$list variable=temp_data_card filter=\"[\u003Ctemp_card>addsuffix[/data]]\">\nNew file name:\n@@margin-left:5px;\n\u003C$edit-text tiddler=\u003C\u003Ctemp_card>> field=new_filename placeholder=\"\" autoHeight=yes tag=input/>\n@@\n\u003C$list variable=val_new_filename filter=\"[\u003Ctemp_card>get\u003Cenr_new_filename>!match[]]\">\n\u003C$list variable=new_card filter=\"[\u003Cval_new_filename>addprefix\u003Clit_state_popup_prefix>]\">\n\u003C$list variable=new_temp_card filter=\"[\u003Cnew_card>addprefix\u003Clit_state_popup_prefix>]\">\n\u003C$list variable=filter_newcard_not_exists filter=\"[\u003Cnew_card>!is[tiddler]]\">\n\u003C$button>\n\u003C$list variable=cur_card_text filter=\"[\u003Ccur_card>get\u003Cenr_text>]\">\n\u003C$action-setfield $tiddler=\u003C\u003Cnew_card>> $field=\u003C\u003Cenr_text>> $value=\u003C\u003Ccur_card_text>> />\n\u003C/$list>\u003C!--cur_card_text-->\n\u003C$action-setfield $tiddler=\u003C\u003Cnew_temp_card>> $field=\u003C\u003Cenr_new_filename>> $value=\u003C\u003Cval_new_filename>> />\n\u003C$action-navigate $to=\u003C\u003Cnew_card>> />\nNew card\n\u003C/$button>\n\u003C/$list>\u003C!--filter_newcard_not_exists-->\n\u003C$list variable=filter_newcard_does_exists filter=\"[\u003Cnew_card>is[tiddler]]\">\n\u003C$link to=\u003C\u003Cnew_card>> />\n\u003C/$list>\u003C!--filter_newcard_does_exists-->\n\u003C/$list>\u003C!--new_temp_card-->\n\u003C/$list>\u003C!--new_card-->\n\u003C/$list>\u003C!--val_new_filename-->\n\n\u003Cbr>\n\u003C$list variable=only_statecard filter=\"[\u003Ccur_card>prefix[$:/positivesignertemp/]]\">\n\u003C$edit-text autoHeight=no class=\"cls_full_width\" tag=textarea default=\"\" tiddler=\u003C\u003Ctemp_data_card>> field=\"user_text\" />\n\u003C/$list>\u003C!--only_statecard-->\n\n\u003C/$list>\u003C!--temp_data_card-->\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$vars>\u003C!--enr_new_filename-->\n\\end\n\n\\define glbl_chk(ur_field)\n\u003Cbr>\u003C$checkbox tiddler=\u003C\u003CcurrentTiddler>> field=\"$ur_field$\" unchecked=\"no\" checked=\"yes\">\u003C/$checkbox>\u003Cspan style=\"margin-right:5px;\" />\n\\end\n","title":"$:/positivesigner/gcmpr/mcr gcmpr_compare_card","modified":"20220531065532884","tags":"$:/tags/Macro $:/positivesigner/tag/gcmpr"},
{"created":"20210802001706195","text":"\u003C$list variable=data_card_rename_count filter=\"[!prefix[temp-]!prefix[$]!match[temp]count[]!match[0]]\">\n\u003C$button>\n\u003C$list variable=temp_card filter=\"[prefix[temp-]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Ctemp_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Ctemp_card>> />\n\u003C/$list>\u003C!--temp_card-->\n\n\u003C$list variable=data_card filter=\"[!prefix[temp-]!prefix[$]]\">\n\u003C$list variable=data_text filter=\"[\u003Cdata_card>get[text]else[]]\">\n\u003C$list variable=temp_card filter=\"[\u003Cdata_card>addprefix[temp-]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Cdata_card>> />\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Ctemp_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Ctemp_card>> />\n\u003C$action-setfield $tiddler=\u003C\u003Ctemp_card>> text=\u003C\u003Cdata_text>> tags=\"$:/positivesigner/gcmpr/temp-compare\" />\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$list>\u003C!--data_text-->\n\u003C/$list>\u003C!--data_card-->\nCreate all temp cards ( \u003C\u003Cdata_card_rename_count>> )\n\u003C/$button>\n\u003C/$list>\u003C!--data_card_rename_count-->\n\n\u003C$list variable=temp_card_rename filter=\"[prefix[temp-]] +[count[]!match[0]]\">\n\u003C$button>\n\u003C$list variable=state_card filter=\"[prefix[$:/positivesignertemp/compare-card/]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Cstate_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cstate_card>> />\n\u003C/$list>\u003C!--state_card-->\n\n\u003C$list variable=temp_card filter=\"[prefix[temp-]]\">\n\u003C$list variable=state_card filter=\"[\u003Ctemp_card>removeprefix[temp-]addprefix[$:/positivesignertemp/compare-card/]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Ctemp_card>> />\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Cstate_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cstate_card>> />\n\u003C$action-sendmessage $message=\"tm-rename-tiddler\" from=\u003C\u003Ctemp_card>> to=\u003C\u003Cstate_card>> renameInTags=\"no\" renameInLists=\"no\"/>\n\u003C/$list>\u003C!--state_card-->\n\u003C/$list>\u003C!--temp_card-->\nRename all temp cards ( \u003C\u003Ctemp_card_rename>> )\n\u003C/$button>\n\u003C/$list>\u003C!--temp_card_rename-->\n\n\n\u003C$list variable=temp_card_count filter=\"[prefix[$:/positivesignertemp/compare-card/]removeprefix[$:/positivesignertemp/compare-card/]count[]]\">\n\ntemp_card_count: \u003C\u003Ctemp_card_count>>\n\n\u003C$list variable=orig_card filter=\"[!prefix[temp-]!prefix[$]sort[]]\">\n\u003C$list variable=temp_card filter=\"[\u003Corig_card>addprefix[$:/positivesignertemp/compare-card/]is[tiddler]]\">\n\u003C$list variable=temp_text filter=\"[\u003Ctemp_card>get[text]else[]]\">\n\u003C$list variable=has_diff filter=\"[\u003Corig_card>get[text]else[]!match\u003Ctemp_text>]\">\n\u003C$macrocall $name=gcmpr_compare_card ur_ttb_card=\u003C\u003Corig_card>> />\n\u003C/$list>\u003C!--has_diff-->\n\u003C/$list>\u003C!--temp_text-->\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$list>\u003C!--orig_card-->\n\n\u003C$list variable=orig_card filter=\"[!prefix[temp-]!prefix[$]sort[]]\">\n\u003C$list variable=missing_temp_card filter=\"[\u003Corig_card>addprefix[$:/positivesignertemp/compare-card/]!is[tiddler]]\">\n\n@@background-color:pink;No comparison card@@ \u003C$link to=\u003C\u003Corig_card>> />\n\u003C/$list>\u003C!--missing_temp_card-->\n\u003C/$list>\u003C!--orig_card-->\n\n\u003C$list variable=temp_card filter=\"[prefix[$:/positivesignertemp/compare-card/]sort[]]\">\n\u003C$list variable=missing_orig_card filter=\"[\u003Ctemp_card>removeprefix[$:/positivesignertemp/compare-card/]!is[tiddler]]\">\n\n@@background-color:lightgreen;New comparison card@@ \u003C$link to=\u003C\u003Ctemp_card>> />\n\u003C/$list>\u003C!--missing_orig_card-->\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$list>\u003C!--temp_card_count-->\n","title":"$:/positivesigner/gcmpr/temp","modified":"20220531070950165","tags":"$:/positivesigner/gcmpr/temp-compare $:/positivesigner/tag/gcmpr"},
{"created":"20210802001901245","text":"\u003C$list variable=data_card_rename_count filter=\"[is[system]prefix[$:/positivesigner/]count[]!match[0]]\">\n\u003C$button>\n\u003C$list variable=temp_card filter=\"[prefix[temp-]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Ctemp_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Ctemp_card>> />\n\u003C/$list>\u003C!--temp_card-->\n\n\u003C$list variable=data_card filter=\"[is[system]prefix[$:/positivesigner/]]\">\n\u003C$list variable=data_text filter=\"[\u003Cdata_card>get[text]else[]]\">\n\u003C$list variable=temp_card filter=\"[\u003Cdata_card>addprefix[temp-]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Cdata_card>> />\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Ctemp_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Ctemp_card>> />\n\u003C$action-setfield $tiddler=\u003C\u003Ctemp_card>> text=\u003C\u003Cdata_text>> tags=\"$:/positivesigner/gcmpr/temp-compare\" />\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$list>\u003C!--data_text-->\n\u003C/$list>\u003C!--data_card-->\n\n\u003C$list variable=macro_card filter=\"[[$:/positivesigner/gcmpr/temp$]]\">\n\u003C$action-navigate $to=\u003C\u003Cnew_pk>>/>\n\u003C/$list>\u003C!--macro_card-->\nCreate all temp cards ( \u003C\u003Cdata_card_rename_count>> )\n\u003C/$button>\n\u003C/$list>\u003C!--data_card_rename_count-->\n\n\u003C$list variable=temp_card_rename filter=\"[prefix[temp-]] +[count[]!match[0]]\">\n\u003C$button>\n\u003C$list variable=state_card filter=\"[prefix[$:/positivesignertemp/compare-card/]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Cstate_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cstate_card>> />\n\u003C/$list>\u003C!--state_card-->\n\n\u003C$list variable=temp_card filter=\"[prefix[temp-]]\">\n\u003C$list variable=state_card filter=\"[\u003Ctemp_card>removeprefix[temp-]addprefix[$:/positivesignertemp/compare-card/]]\">\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Ctemp_card>> />\n\u003C$action-sendmessage $message=\"tm-close-tiddler\" $param=\u003C\u003Cstate_card>> />\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cstate_card>> />\n\u003C$action-sendmessage $message=\"tm-rename-tiddler\" from=\u003C\u003Ctemp_card>> to=\u003C\u003Cstate_card>> renameInTags=\"no\" renameInLists=\"no\"/>\n\u003C/$list>\u003C!--state_card-->\n\u003C/$list>\u003C!--temp_card-->\nRename all temp cards ( \u003C\u003Ctemp_card_rename>> )\n\u003C/$button>\n\u003C/$list>\u003C!--temp_card_rename-->\n\n\n\u003C$list variable=temp_card_count filter=\"[prefix[$:/positivesignertemp/compare-card/]removeprefix[$:/positivesignertemp/compare-card/]count[]]\">\n\ntemp_card_count: \u003C\u003Ctemp_card_count>>\n\n\u003C$list variable=orig_card filter=\"[prefix[$:/positivesigner/]sort[]]\">\n\u003C$list variable=temp_card filter=\"[\u003Corig_card>addprefix[$:/positivesignertemp/compare-card/]is[tiddler]]\">\n\u003C$list variable=temp_text filter=\"[\u003Ctemp_card>get[text]else[]]\">\n\u003C$list variable=has_diff filter=\"[\u003Corig_card>get[text]else[]!match\u003Ctemp_text>]\">\n\u003C$macrocall $name=gcmpr_compare_card ur_ttb_card=\u003C\u003Corig_card>> />\n\u003C/$list>\u003C!--has_diff-->\n\u003C/$list>\u003C!--temp_text-->\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$list>\u003C!--orig_card-->\n\n\u003C$list variable=orig_card filter=\"[prefix[$:/positivesigner/]sort[]]\">\n\u003C$list variable=missing_temp_card filter=\"[\u003Corig_card>addprefix[$:/positivesignertemp/compare-card/]!is[tiddler]]\">\n\n@@background-color:pink;No comparison card@@ \u003C$link to=\u003C\u003Corig_card>> />\n\u003C/$list>\u003C!--missing_temp_card-->\n\u003C/$list>\u003C!--orig_card-->\n\n\u003C$list variable=temp_card filter=\"[prefix[$:/positivesignertemp/compare-card/]sort[]]\">\n\u003C$list variable=missing_orig_card filter=\"[\u003Ctemp_card>removeprefix[$:/positivesignertemp/compare-card/]!is[tiddler]]\">\n\n@@background-color:lightgreen;New comparison card@@ \u003C$link to=\u003C\u003Ctemp_card>> />\n\u003C/$list>\u003C!--missing_orig_card-->\n\u003C/$list>\u003C!--temp_card-->\n\u003C/$list>\u003C!--temp_card_count-->\n","title":"$:/positivesigner/gcmpr/temp$","modified":"20220531071032424","tags":"$:/positivesigner/gcmpr/temp-compare $:/positivesigner/tag/gcmpr"},
{"created":"20210215125903946","text":"\u003C!--2021m04d24-->\n\u003C\u003Cgcmpr_textarea_new>>","title":"$:/positivesigner/gcmpr/textarea","modified":"20220531065629117","tags":"$:/positivesigner/tag/gcmpr"},
{"created":"20210601160817596","text":".cls_full_width { width:100%; }","title":"$:/positivesigner/gcmpr/textarea-stylesheet","modified":"20220531065506156","tags":"$:/tags/Stylesheet $:/positivesigner/tag/gcmpr"},
{"created":"20220530235504818","text":"\\define psgr_browser_url()\n[{$:/info/url/full}removeprefix[file:///]]\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/filter browser","modified":"20220531034338245","design_url":"url gets the current browser tab's URL without the `file:///` prefix or the \"#bookmark\" text."},
{"created":"20220531010538880","text":"\\define psgr_file_group(ur_ctxt)\n[[$(ctxt)$]split[.]butlast[1]join[.]]\n\\end\n\\define psgr_file_extension(ur_ctxt)\n[[$(ctxt)$]split[.]last[]addprefix[.]]\n\\end\n\\define psgr_file_timestamp(ur_sample)\n\u003C\u003Cnow format:\"YYYYm0MMd0DDam0hhm0mms0ss\">>\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/filter file","modified":"20220531034540629","design_group":"group returns part of a filename up to the extension.","design_extension":"extension returns the extension part of a filename.","design_timestamp":"timestamp gives sample code on how to use the Now macro to get a timestamp value."},
{"created":"20220531010446312","text":"\\define psgr_path_file(ur_ctxt)\n[[$(ctxt)$]split[/]last[]]\n\\end\n\\define psgr_path_subcards(ur_ctxt)\n[all[]prefix[$(ctxt)$]]\n\\end\n\\define psgr_path_subcardscount(ur_ctxt)\n[all[]prefix[$(ctxt)$]count[]]\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/filter path","modified":"20220531034812289","design_file":"file returns the last directory entry part of a path.","design_subcards":"subcards returns the list of ctxt subcard titles.","design_subcardscount":"subcardscount returns the count of ctxt subcard titles."},
{"created":"20220531011316579","text":"\\define psgr_psgr_root()\n[[$:/positivesigner/]]\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/filter psgr","modified":"20220531034847364","design_root":"root returns the root positivsigner path."},
{"created":"20220531010559750","text":"\\define psgr_wikimove_path(ur_ctxt)\n[[$(ctxt)$]search-replace:g[:],[-colon-]search-replace:g[%20],[ ]search-replace:g[/],[-fslash-]search-replace:g[%],[-percent-]]\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/filter wikimove","modified":"20220531035949888","design_path":"path returns a modified path compatible with the WikiMove program."},
{"created":"20210904203008879","text":"\u003C$list variable=cur_card filter=\"[[$:/config/Tiddlers/TitleLinks]]\">\n\u003C$list variable=cur_card2 filter=\"[[$:/themes/tiddlywiki/vanilla/options/stickytitles]]\">\n\u003C$list variable=cur_val filter=\"[\u003Ccur_card>get[text]match[yes]]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card>> text=\"no\"/>\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card2>> text=\"no\"/>\n\u003C/$list>\u003C!--cur_val-->\n\u003C$list variable=cur_val filter=\"[\u003Ccur_card>get[text]!match[yes]]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card>> text=\"yes\"/>\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card2>> text=\"yes\"/>\n\u003C/$list>\u003C!--cur_val-->\n\u003C/$list>\u003C!--cur_card2-->\n\u003C/$list>\u003C!--cur_card-->\n","title":"$:/positivesigner/startup/keyboard card-titles","key":"((card-titles))","modified":"20220531051853293","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut Alt-T changes card titles to draggable links."},
{"created":"20200411063250301","text":"\u003C!--2021m04d24-->\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\" text=\"24px\"/>\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\" text=\"30px\"/>\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\" text=\"25px\"/>\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\" text=\"34px\"/>\n","title":"$:/positivesigner/startup/keyboard font-large","key":"((font-large))","modified":"20220531062441916","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut ctrl-shift-Quote uses a larger font size."},
{"created":"20200411063342013","text":"\u003C!--2021m04d24-->\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\" text=\"14px\"/>\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\" text=\"20px\"/>\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\" text=\"15px\"/>\n\u003C$action-setfield $tiddler=\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\" text=\"24px\"/>\n","title":"$:/positivesigner/startup/keyboard font-normal","key":"((font-normal))","modified":"20220531062401926","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut ctrl-shift-Comma restores the standard font size."},
{"created":"20200314150100178","text":"\u003C!--2021m04d24-->\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n\u003C$action-setfield $tiddler=\"$:/state/popup/DivPopTitle\" text=\"\"/>\n\u003C$action-setfield $tiddler=\"$:/state/tab/sidebar--595412856\" text=\"$:/core/ui/SideBar/More\"/>\n\u003C$action-sendmessage $message=\"tm-home\"/>\n","title":"$:/positivesigner/startup/keyboard home-view","key":"((home-view))","modified":"20220531205639426","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut Alt-H closes all cards and opens the default home view cards."},
{"created":"20211003015614969","text":"\u003C$list variable=cur_card filter=\"[[$:/palette]]\">\n\u003C$list variable=cur_val filter=\"[\u003Ccur_card>get[text]match[$:/palettes/Vanilla-dim]]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card>> text=\"$:/palettes/Vanilla\"/>\n\u003C/$list>\u003C!--cur_val-->\n\u003C$list variable=cur_val filter=\"[\u003Ccur_card>get[text]!match[$:/palettes/Vanilla-dim]]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card>> text=\"$:/palettes/Vanilla-dim\"/>\n\u003C/$list>\u003C!--cur_val-->\n\u003C/$list>\u003C!--cur_card-->\n","title":"$:/positivesigner/startup/keyboard palette-dim","key":"((palette-dim))","modified":"20220531052645829","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut Alt-C dims the background color to dark brown."},
{"created":"20210411090014261","text":"\u003C!--2021m04d24-->\n\u003C$list variable=cur_card filter=\"[[$:/state/showeditpreview]]\">\n\u003C$list variable=cur_val filter=\"[\u003Ccur_card>get[text]match[yes]]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card>> text=\"no\"/>\n\u003C/$list>\n\u003C$list variable=cur_val filter=\"[\u003Ccur_card>get[text]!match[yes]]\">\n\u003C$action-setfield $tiddler=\u003C\u003Ccur_card>> text=\"yes\"/>\n\u003C/$list>\n\u003C/$list>\n","title":"$:/positivesigner/startup/keyboard preview-card","key":"((preview-card))","modified":"20220531052228279","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut Alt-V displays the Wiki card preview next to the card text editor."},
{"created":"20201114070625406","text":"\\import \"$:/positivesigner/startup/mcr save\"\n\n\u003C\u003Cpsgr_save_wiki 0>>\n","title":"$:/positivesigner/startup/keyboard save-all-changes","key":"((save-all-changes))","modified":"20220531045906057","tags":"$:/tags/KeyboardShortcut $:/positivesigner/tag/startup","design_shortcut":"shortcut Alt-S calls psgr_save_wiki.."},
{"created":"20220531025351809","text":"\\define psgr_design_text(ur_prefix)\n\u003C$list variable=root_folder filter=\u003C\u003Cpsgr_psgr_root>> >\n\u003C$list variable=subcard_search filter=\"[\u003Croot_folder>addsuffix[$ur_prefix$]addsuffix[ ]]\" >\n\u003C$list variable=wrong_filter filter=\"[all[]prefix\u003Csubcard_search>count[]match[0]]\" >\nNo subcards found under \u003C\u003Csubcard_search>>\n\u003C/$list>\u003C!--wrong_filter-->\n\u003C$list variable=sub_card filter=\"[all[]prefix\u003Csubcard_search>]\" >\n\u003C$list variable=sub_card_suffix filter=\"[\u003Csub_card>removeprefix\u003Croot_folder>]\" >\n\u003C$list variable=design_field_count filter=\"[\u003Csub_card>fields[]prefix[design_]count[]]\" >\n\u003C$list variable=missing_design filter=\"[\u003Cdesign_field_count>match[0]]\">\n\u003C$link to=\u003C\u003Csub_card>> >\u003C\u003Csub_card_suffix>>\u003C/$link> - Add designs.\n\u003C/$list>\u003C!--design_text-->\n\u003C$list variable=has_design filter=\"[\u003Cdesign_field_count>!match[0]]\">\n\u003C$link to=\u003C\u003Csub_card>> >\u003C\u003Csub_card_suffix>>\u003C/$link>\n\u003C$list variable=design_field filter=\"[\u003Csub_card>fields[]prefix[design_]]\" >\n\u003C$list variable=design_suffix filter=\"[\u003Cdesign_field>removeprefix[design_]]\" >\n\u003C$list variable=design_text filter=\"[\u003Csub_card>get\u003Cdesign_field>else[]]\" >\n\u003C$list variable=missing_prefix filter=\"[\u003Cdesign_text>!prefix\u003Cdesign_suffix>]\" >\n\u003C\u003Cdesign_field>> - Add design text prefix\n\u003C/$list>\u003C!--missing_prefix-->\n\u003C$list variable=has_prefix filter=\"[\u003Cdesign_text>prefix\u003Cdesign_suffix>]\" >\n\u003C\u003Cdesign_text>>\n\u003C/$list>\u003C!--has_prefix-->\n\u003C/$list>\u003C!--design_text-->\n\u003C/$list>\u003C!--design_suffix-->\n\u003C/$list>\u003C!--design_field-->\n\u003C/$list>\u003C!--has_design-->\n\u003C/$list>\u003C!--design_field_count-->\n\u003C/$list>\u003C!--sub_card_suffix-->\n\u003C/$list>\u003C!--sub_card-->\n\u003C/$list>\u003C!--subcard_search-->\n\u003C/$list>\u003C!--root_folder-->\n\u003C!--psgr_design_wiki-->\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/mcr design","modified":"20220531060309869","design_text":"text lists design descriptions for each function in the card."},
{"created":"20220531062917816","text":"\\define psgn_disp_sidebar_icon(ur_flag_onlyhide)\n\u003C!--2022m02d17-->\n\u003C$list variable=state_card filter=\"[[$:/state/popup/hide_sidebar_icon]]\">\n\u003C$list variable=is_visible filter=\"[\u003Cstate_card>get[text]else[]match[]]\">\n\u003Cdiv style=\"float:right\">\u003C$button>\n\u003C$action-setfield $tiddler=\u003C\u003Cstate_card>> text=\".tc-show-sidebar-btn {visibility: hidden;}\" tags=\"$:/tags/Stylesheet\"/>\nHide menu\n\u003C/$button>\u003C/div>\n\u003C/$list>\u003C!--is_visible-->\n\u003C$list variable=is_hidden filter=\"[\u003Cstate_card>get[text]else[]!match[]]\">\n\u003C$list variable=allow_show filter=\"[[$ur_flag_onlyhide$]!match[1]]\">\n\u003Cdiv style=\"float:right\">\u003C$button>\n\u003C$action-setfield $tiddler=\u003C\u003Cstate_card>> text=\"\"/>\nShow menu\n\u003C/$button>\u003C/div>\n\u003C/$list>\u003C!--allow_show-->\n\u003C/$list>\u003C!--is_hidden-->\n\u003C/$list>\u003C!--state_card-->\n\\end\n","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/mcr disp","modified":"20220531063049147","design_sidebar_icon":"sidebar_icon hides the sidebar's double-left arrow."},
{"created":"20220531021120510","text":"\\define psgr_link_root(ur_sub_path)\n\u003C$list variable=root_path filter=\u003C\u003Cpsgr_psgr_root>> >\n\u003C$list variable=link_path filter=\"[\u003Croot_path>addsuffix[$ur_sub_path$]]\">\n\u003C$link to=\u003C\u003Clink_path>> >$ur_sub_path$\u003C/$link>\n\u003C/$list>\u003C!--link_path-->\n\u003C/$list>\u003C!--root_path-->\n\\end\n\\define psgr_link_recent(ur_sub_path)\n\u003C\u003Ctimeline limit:30 format:\"YYYY-0MM-0DD\">>\n\\end\n\u003C\u003Cpsgr_link_recent>>","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/mcr link","modified":"20220531063340203","design_root":"root creates shortcuts to positivesigner sub-cards.","design_recent":"recent shows the latest 30 days of modified cards."},
{"created":"20220531010337421","text":"\\define psgr_save_wiki(ur_flag_button)\n\u003C$list variable=ext_eq_htm filter=\"[{$:/info/url/full}split[.]last[]match[htm]]\">\n\u003C$list variable=file_timestamp filter=\u003C\u003Cnow format:\"YYYYm0MMd0DDam0hhm0mms0ss\">> >\n\u003C$list variable=wikimove_command filter=\"[[WikiMove_]] [{$:/info/url/full}removeprefix[file:///]removesuffix[.htm]search-replace:g[:],[-colon-]search-replace:g[/],[-fslash-]search-replace:g[%20],[ ]search-replace:g[%],[-percent-]] [[-stamp-]] [\u003Cfile_timestamp>] [[.htm]] +[join[]]\" >\n\u003C$list variable=flag_button filter=\"[[$ur_flag_button$]match[1]]\">\n\u003C$button>\n\u003C$list filter=\"[[$:/palette]get[text]!match[$:/palettes/Vanilla]]\">\n\u003C$action-setfield $tiddler=\"$:/palette\" text=\"$:/palettes/Vanilla\"/>\n\u003C/$list>\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n\u003C$action-setfield $tiddler=\"$:/positivesignertemp/DivPopTitle\" text=\"\"/>\n\u003C$action-setfield $tiddler=\"$:/state/tab/sidebar--595412856\" text=\"$:/core/ui/SideBar/More\"/>\n\u003C$action-sendmessage $message=\"tm-save-wiki\" filename=\u003C\u003Cwikimove_command>>\n/>\nSave button\n\u003C/$button>\n\u003C/$list>\u003C!--flag_button-->\n\n\u003C$list variable=flag_button filter=\"[[$ur_flag_button$]match[0]]\">\n\u003C$list filter=\"[[$:/palette]get[text]!match[$:/palettes/Vanilla]]\">\n\u003C$action-setfield $tiddler=\"$:/palette\" text=\"$:/palettes/Vanilla\"/>\n\u003C/$list>\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n\u003C$action-setfield $tiddler=\"$:/positivesignertemp/DivPopTitle\" text=\"\"/>\n\u003C$action-setfield $tiddler=\"$:/state/tab/sidebar--595412856\" text=\"$:/core/ui/SideBar/More\"/>\n\u003C$action-sendmessage $message=\"tm-save-wiki\" filename=\u003C\u003Cwikimove_command>> />\n\u003C/$list>\u003C!--flag_button-->\n\u003C/$list>\n\u003C/$list>\n\u003C/$list>\n\u003C!--psgr_save_wiki-->\n\\end\n\\define psgr_save_wikiE1(ur_flag_button)\n\u003C$list variable=cur_url filter=\u003C\u003Cpsgr_browser_url>> >\n\u003C$list variable=ctxt filter=\"[\u003Ccur_url>]\" >\n\u003C$list variable=cur_file_ext filter=\u003C\u003Cpsgr_file_extension>> >\n\u003C$list variable=ext_eq_htm filter=\"[\u003Ccur_file_ext>match[.htm]]\" >\n\u003C$list variable=cur_path_filegroup filter=\u003C\u003Cpsgr_file_group>> >\n\u003C$list variable=ctxt filter=\"[\u003Ccur_path_filegroup>]\" >\n\u003C$list variable=wikimove_path_filegroup filter=\u003C\u003Cpsgr_wikimove_path>> >\n\u003C$list variable=file_timestamp filter=\u003C\u003Cnow format:\"YYYYm0MMd0DDam0hhm0mms0ss\">> >\n\u003C$list variable=wikimove_command filter=\"[[WikiMove_]] [\u003Cwikimove_path_filegroup>] [[-stamp-]] [\u003Cfile_timestamp>] [\u003Ccur_file_ext>] +[join[]]\" >\n\n\u003C$list variable=flag_button filter=\"[[$ur_flag_button$]match[1]]\">\n\u003C$button>\n\u003C$action-sendmessage $message=\"tm-save-wiki\" filename=\u003C\u003Cwikimove_command>>\n/>\nSave button\n\u003C/$button>\n\u003C/$list>\u003C!--flag_button-->\n\n\u003C$list variable=flag_button filter=\"[[$ur_flag_button$]match[0]]\">\na:\u003C$action-sendmessage $message=\"tm-save-wiki\" filename=\u003C\u003Cwikimove_command>>\n/>\n\u003C/$list>\u003C!--flag_button-->\n\n\u003C/$list>\u003C!--wikimove_command-->\n\u003C/$list>\u003C!--file_timestamp-->\n\u003C/$list>\u003C!--wikimove_path_filegrou-->\n\u003C/$list>\u003C!--ctxt-->\n\u003C/$list>\u003C!--cur_path_filegroup-->\n\u003C/$list>\u003C!--ext_eq_htm-->\n\u003C/$list>\u003C!--cur_file_ext-->\n\u003C/$list>\u003C!--ctxt-->\n\u003C/$list>\u003C!--cur_url-->\n\u003C!--psgr_save_wikiE1-->\n\\end\n\\define psgr_save_github()\n\u003Cdiv style='float:right'>\n\u003C$list variable=\"flg_show_button\" filter=\"[[$:/positivesignertemp/save_wait]get[text]else[0]!match[1]]\">\n\u003C$button>\n\u003C$action-setfield $tiddler=\"$:/positivesignertemp/save_wait\" text=\"1\"/>\n\u003C$action-setfield $tiddler=\"$:/state/sidebar\" text=\"no\"/>\n\u003C$action-setfield $tiddler=\"$:/positivesignertemp/DivPopTitle\" text=\"\"/>\n\u003C$action-setfield $tiddler=\"$:/state/tab/sidebar--595412856\" text=\"$:/core/ui/SideBar/More\"/>\n\u003C$action-sendmessage $message=\"tm-save-wiki\" />\nSave Wiki\n\u003C/$button>\n\u003C/$list>\u003C!--flg_show_button-->\n\u003C$list variable=\"flg_hide_button\" filter=\"[[$:/positivesignertemp/save_wait]get[text]else[0]match[1]]\">\n\u003C$button>\n\u003C$action-setfield $tiddler=\"$:/positivesignertemp/save_wait\" text=\"0\"/>\nPressed\n\u003C/$button>\n\u003C/$list>\u003C!--flg_show_button-->\n\u003C/div>\n\\end\nWikiMove: \u003C\u003Cpsgr_save_wiki 1>>\n\nGitHub: \u003C\u003Cpsgr_save_github>>","tags":"$:/tags/Macro $:/positivesigner/tag/startup","title":"$:/positivesigner/startup/mcr save","modified":"20220703075756305","design_wiki":"wiki allows you to show a button or execute a keyboard action."},
{"created":"20220626120320928","text":"/*\\\n\nPassword Set\n\n$:/core/ui/ControlPanel/Saving/GitHub\n- $password name=\"github\" calls $:/core/modules/widgets/password.js\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MyWidget = function(parseTreeNode,options) {\n    this.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMyWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMyWidget.prototype.render = function(parent,nextSibling) {\n    this.computeAttributes();\n\tvar pw = this.getAttribute(\"pw\", \"\");\n\tvar wd = this.getAttribute(\"wd\", \"\");\n\t$tw.utils.savePassword(\"github\",pw+wd);\n};\n\nexports.ptest = MyWidget;\n\n})();","type":"application/javascript","title":"$:/positivesigner/startup/ptest","tags":"$:/positivesigner/tag/startup","module-type":"widget","modified":"20220703022901483"},
{"created":"20210923145622278","text":"@media print {\n    .no-print {\n        display: none;\n        }\n    }\n","title":"$:/positivesigner/startup/stylesheet MediaPrint","modified":"20220531045123777","tags":"$:/tags/Stylesheet $:/positivesigner/tag/startup","design_no-print":"no-print hides CSS section when printing."},
{"created":"20200115095609017","text":"\u003C!--2021m09d23 from 2021m09d21-->\n\u003C$list variable=on_twcard filter=\"[\u003Ctv-config-toolbar-icons>!match[no]]\">\n@@.no-print\n\u003Cdiv style=\"float:right;padding-left:30px;\">\n{{$:/core/ui/TopBar/menu}}\n\u003C/div>\n\n\u003Cdiv style=\"float:right;padding-left:30px;\"\n>\u003C$button set=\"$:/state/sidebar\" setTo=\"no\" tooltip={{$:/language/Buttons/Home/Hint}} aria-label={{$:/language/Buttons/Home/Caption}} class=\u003C\u003Ctv-config-toolbar-class>> >\n\u003Cspan class=\"tc-dirty-indicator\">\n\u003C$list filter=\"[\u003Ctv-config-toolbar-icons>match[yes]]\">\n{{$:/core/images/home-button}}\n\u003C/$list>\n\u003C$list filter=\"[\u003Ctv-config-toolbar-text>match[yes]]\">\n\u003Cspan class=\"tc-btn-text\">\u003C$text text={{$:/language/Buttons/Home/Caption}}/>\u003C/span>\n\u003C/$list>\n\u003C/span>\n\u003C$action-sendmessage $message=\"tm-home\"/>\n\u003C/$button>\u003C/div>\n\n\u003Cdiv style=\"float:right\">\n\u003C$list variable=cur_card filter=\"[all[current]]\">\n\u003C$link to=\u003C\u003Ccur_card>> >^\u003C/$link>\n\u003C/$list>\u003C!--cur_card-->\n\u003C/div>\n@@\n\u003C/$list>\u003C!--on_twcard-->","title":"$:/positivesigner/startup/template card-footer","modified":"20220531070825820","tags":"$:/tags/ViewTemplate $:/positivesigner/tag/startup","design_up_arrow":"up_arrow icon scrolls to the top of the current card.","design_home_button":"home_button icon closes all cards and opens the default home view.","design_side_bar":"side_bar double-arrow icon opens or closes the sidebar."},
{"created":"20220531015125748","text":"","title":"$:/positivesigner/tag/audit","modified":"20220531021016819","tags":"$:/positivesigner/tag/audit $:/positivesigner/tag/tag"},
{"created":"20220531020454742","text":"","title":"$:/positivesigner/tag/design","modified":"20220531020749113","tags":"$:/positivesigner/tag/tag $:/positivesigner/tag/design"},
{"created":"20220531062002300","text":"","title":"$:/positivesigner/tag/div-pop","modified":"20220531062012779","tags":"$:/positivesigner/tag/tag $:/positivesigner/tag/div-pop"},
{"created":"20220531071701278","text":"","tags":"$:/positivesigner/tag/gcmpr $:/positivesigner/tag/tag","title":"$:/positivesigner/tag/gcmpr","modified":"20220531071725565"},
{"created":"20220531011051849","text":"","title":"$:/positivesigner/tag/startup","modified":"20220531013930188","tags":"$:/positivesigner/tag/startup $:/positivesigner/tag/tag"},
{"created":"20220531015735414","text":"","title":"$:/positivesigner/tag/tag","modified":"20220531020324326","tags":"$:/positivesigner/tag/tag"},
{"created":"20220531055543706","text":"","title":"$:/positivesigner/tag/text","modified":"20220531055606661","tags":"$:/positivesigner/tag/tag $:/positivesigner/tag/text"},
{"created":"20201226094244599","text":"\\define psgr_search_form()\n\u003C!--2022m05d30-->\n\u003C$vars search_text_pk=\"$:/state/popup/SearchAllFields\" filter_card=\"$:/state/popup/SearchUserForms\">\n\u003C$list variable=only_in_jsapp filter=\"[\u003Ctv-config-toolbar-icons>!match[no]]\">\n\u003C$list variable=show_code_pk filter=\"[\u003Csearch_text_pk>addsuffix[-checkShowCode]]\">\n\u003C$list variable=skip_system_pk filter=\"[\u003Csearch_text_pk>addsuffix[-checkSkipSystem]]\">\n\u003C$edit-text tiddler=\u003C\u003Csearch_text_pk>> field=text default=\"\" placeholder=\"[no text yet]\" autoHeight=yes tag=input/>\n\u003C$checkbox default=\"no\" unchecked=\"no\" checked=\"yes\" field=\"text\" tiddler=\u003C\u003Cshow_code_pk>>> Show Code\u003C/$checkbox>\n\u003C$checkbox default=\"no\" unchecked=\"no\" checked=\"yes\" field=\"text\" tiddler=\u003C\u003Cskip_system_pk>>> Include System \u003C/$checkbox>\u003Cbr>\n\u003Cbr>\n\n\u003C$list variable=cur_search_text filter=\"[\u003Csearch_text_pk>get[text]]\">\n\u003C$list variable=cur_showcode_text filter=\"[\u003Cshow_code_pk>get[text]else[no]]\">\n\u003C$list variable=cur_skipsystem_text filter=\"[\u003Cskip_system_pk>get[text]else[no]match[yes]count[]]\">\n\n\u003C!--Card titles-->\n\u003C$list variable=cur_pk filter=\"[!prefix[$:/boot]!prefix[$:/core]!prefix[$:/library]!prefix[$:/themes]!prefix\u003Csearch_text_pk>search:-created,modified:words\u003Ccur_search_text>sort[]]\">\n\u003C$list variable=found_skipsystem filter=\"[\u003Ccur_pk>!prefix[$]count[]] [\u003Ccur_pk>prefix[$]count[]multiply\u003Ccur_skipsystem_text>] +[sum[]!match[0]]\">\n\n\u003C$list variable=cur_field filter=\"[\u003Ccur_pk>fields[]!match[created]!match[modified]]\">\n\u003C$list variable=field_text filter=\"[\u003Ccur_pk>get\u003Ccur_field>]\">\n\u003C$list variable=found_field filter=\"[\u003Cfield_text>search:title:words\u003Ccur_search_text>]\">\n\n\u003C$link to=\u003C\u003Ccur_pk>> />: \u003C\u003Ccur_field>>\n\u003C$list variable=disp_code filter=\"[\u003Ccur_showcode_text>match[yes]]\">\n\u003C$codeblock code=\u003C\u003Cfield_text>> />\n\u003C/$list>\u003C!--disp_code-->\n\u003C/$list>\u003C!--found_field-->\n\u003C/$list>\u003C!--field_text-->\n\u003C/$list>\u003C!--cur_field-->\n\u003C/$list>\u003C!--found_skipsystem-->\n\u003C/$list>\u003C!--cur_pk-->\n\n\u003C/$list>\u003C!--cur_skipsystem_text-->\n\u003C/$list>\u003C!--cur_showcode_text-->\n\u003C/$list>\u003C!--cur_search_text-->\n\u003C/$list>\u003C!--skip_system_pk-->\n\u003C/$list>\u003C!--show_code_pk-->\n\u003C/$list>\u003C!--only_in_jsapp-->\n\\end\n\u003C\u003Cpsgr_search_form>>\n","title":"$:/positivesigner/text/mcr search","modified":"20220531061452448","tags":"$:/positivesigner/tag/text $:/tags/Macro","design_form":"form shows a text box that searches all card text fields."},
{"created":"20220530231039517","title":"$:/SiteSubtitle","text":"Lookup Words","modified":"20221107073626282"},
{"created":"20220530231022910","title":"$:/SiteTitle","text":"ASLSJ Dictionary","modified":"20221107073609454"},
{"created":"20221107093514825","title":"$:/state/showeditpreview","text":"no","modified":"20221124082718122"},
{"created":"20220703074823480","title":"$:/state/sidebar","text":"no","modified":"20221124084036308"},
{"created":"20220703074834057","title":"$:/state/tab/sidebar--595412856","text":"$:/core/ui/SideBar/More","modified":"20221124084036309"},
{"title":"$:/status/RequireReloadDueToPluginChange","text":"no"},
{"title":"$:/StoryList","created":"20221117023056865","text":"","list":"$:/Import [[ASLSJ Dictionary]] $:/db/index/tables $:/db/index/word-part [[$:/db/word-part/A brn bkrqr MR.png]] [[Word Gloss]] $:/db/word/baseball $:/db/setting/mirror_image","modified":"20221124082901485"},
{"title":"$:/themes/tiddlywiki/snowwhite","name":"Snow White","author":"JeremyRuston","core-version":">=5.0.0","plugin-type":"theme","description":"Emphasises individual tiddlers","dependents":"$:/themes/tiddlywiki/vanilla","plugin-priority":"0","version":"5.2.2","type":"application/json","text":"{\"tiddlers\":{\"$:/themes/tiddlywiki/snowwhite/base\":{\"title\":\"$:/themes/tiddlywiki/snowwhite/base\",\"tags\":\"[[$:/tags/Stylesheet]]\",\"text\":\"\\\\define sidebarbreakpoint-minus-one()\\n\u003C$text text={{{ [{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}removesuffix[px]subtract[1]addsuffix[px]] ~[{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}] }}}/>\\n\\\\end\\n\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline\\n\\n.tc-sidebar-header {\\n\\ttext-shadow: 0 1px 0 \u003C\u003Ccolour sidebar-foreground-shadow>>;\\n}\\n\\n.tc-tiddler-info {\\n\\t\u003C\u003Cbox-shadow \\\"inset 1px 2px 3px rgba(0,0,0,0.1)\\\">>\\n}\\n\\n@media screen {\\n\\t.tc-tiddler-frame {\\n\\t\\t\u003C\u003Cbox-shadow \\\"1px 1px 5px rgba(0, 0, 0, 0.3)\\\">>\\n\\t}\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\t.tc-tiddler-frame {\\n\\t\\t\u003C\u003Cbox-shadow none>>\\n\\t}\\n}\\n\\n.tc-page-controls button svg, .tc-tiddler-controls button svg, .tc-topbar button svg {\\n\\t\u003C\u003Ctransition \\\"fill 150ms ease-in-out\\\">>\\n}\\n\\n.tc-tiddler-controls button.tc-selected,\\n.tc-page-controls button.tc-selected {\\n\\t\u003C\u003Cfilter \\\"drop-shadow(0px -1px 2px rgba(0,0,0,0.25))\\\">>\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame select.tc-edit-texteditor {\\n\\t\u003C\u003Cbox-shadow \\\"inset 0 1px 8px rgba(0, 0, 0, 0.15)\\\">>\\n}\\n\\n.tc-edit-tags {\\n\\t\u003C\u003Cbox-shadow \\\"inset 0 1px 8px rgba(0, 0, 0, 0.15)\\\">>\\n}\\n\\n.tc-tiddler-frame .tc-edit-tags input.tc-edit-texteditor {\\n\\t\u003C\u003Cbox-shadow \\\"none\\\">>\\n\\tborder: none;\\n\\toutline: none;\\n}\\n\\ntextarea.tc-edit-texteditor {\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/editorfontfamily}};\\n}\\n\\ncanvas.tc-edit-bitmapeditor  {\\n\\t\u003C\u003Cbox-shadow \\\"2px 2px 5px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\n.tc-drop-down {\\n\\tborder-radius: 4px;\\n\\t\u003C\u003Cbox-shadow \\\"2px 2px 10px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\n.tc-block-dropdown {\\n\\tborder-radius: 4px;\\n\\t\u003C\u003Cbox-shadow \\\"2px 2px 10px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\n.tc-modal {\\n\\tborder-radius: 6px;\\n\\t\u003C\u003Cbox-shadow \\\"0 3px 7px rgba(0,0,0,0.3)\\\">>\\n}\\n\\n.tc-modal-footer {\\n\\tborder-radius: 0 0 6px 6px;\\n\\t\u003C\u003Cbox-shadow \\\"inset 0 1px 0 #fff\\\">>;\\n}\\n\\n\\n.tc-alert {\\n\\tborder-radius: 6px;\\n\\t\u003C\u003Cbox-shadow \\\"0 3px 7px rgba(0,0,0,0.6)\\\">>\\n}\\n\\n.tc-notification {\\n\\tborder-radius: 6px;\\n\\t\u003C\u003Cbox-shadow \\\"0 3px 7px rgba(0,0,0,0.3)\\\">>\\n\\ttext-shadow: 0 1px 0 rgba(255,255,255, 0.8);\\n}\\n\\n.tc-sidebar-lists .tc-tab-set .tc-tab-divider {\\n\\tborder-top: none;\\n\\theight: 1px;\\n\\t\u003C\u003Cbackground-linear-gradient \\\"left, rgba(0,0,0,0.15) 0%, rgba(0,0,0,0.0) 100%\\\">>\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button {\\n\\t\u003C\u003Cbackground-linear-gradient \\\"left, rgba(0,0,0,0.01) 0%, rgba(0,0,0,0.1) 100%\\\">>\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button.tc-tab-selected {\\n\\t\u003C\u003Cbackground-linear-gradient \\\"left, rgba(0,0,0,0.05) 0%, rgba(255,255,255,0.05) 100%\\\">>\\n}\\n\\n.tc-message-box img {\\n\\t\u003C\u003Cbox-shadow \\\"1px 1px 3px rgba(0,0,0,0.5)\\\">>\\n}\\n\\n.tc-plugin-info {\\n\\t\u003C\u003Cbox-shadow \\\"1px 1px 3px rgba(0,0,0,0.5)\\\">>\\n}\\n\"}}}"},
{"title":"$:/themes/tiddlywiki/vanilla","name":"Vanilla","author":"JeremyRuston","core-version":">=5.0.0","plugin-type":"theme","description":"Basic theme","plugin-priority":"0","version":"5.2.2","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/themes/tiddlywiki/vanilla/themetweaks\":{\"title\":\"$:/themes/tiddlywiki/vanilla/themetweaks\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ThemeTweaks/ThemeTweaks}}\",\"text\":\"\\\\define lingo-base() $:/language/ThemeTweaks/\\n\\n\\\\define replacement-text()\\n[img[$(imageTitle)$]]\\n\\\\end\\n\\n\\\\define backgroundimage-dropdown()\\n\u003Cdiv class=\\\"tc-drop-down-wrapper\\\">\\n\u003C$set name=\\\"state\\\" value=\u003C\u003Cqualify \\\"$:/state/popup/themetweaks/backgroundimage\\\">>>\\n\u003C$button popup=\u003C\u003Cstate>> class=\\\"tc-btn-invisible tc-btn-dropdown\\\">{{$:/core/images/down-arrow}}\u003C/$button>\\n\u003C$reveal state=\u003C\u003Cstate>> type=\\\"popup\\\" position=\\\"belowleft\\\" text=\\\"\\\" default=\\\"\\\" class=\\\"tc-popup-keep\\\">\\n\u003Cdiv class=\\\"tc-drop-down\\\" style=\\\"text-align:center;\\\">\\n\u003C$macrocall $name=\\\"image-picker\\\" actions=\\\"\\\"\\\"\\n\\n\u003C$action-setfield\\n\\t$tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\"\\n\\t$value=\u003C\u003CimageTitle>>\\n/>\\n\\n\u003C$action-deletetiddler $tiddler=\u003C\u003Cstate>>/>\\n\\n\\\"\\\"\\\"/>\\n\u003C/div>\\n\u003C/$reveal>\\n\u003C/$set>\\n\u003C/div>\\n\\\\end\\n\\n\\\\define backgroundimageattachment-dropdown()\\n\u003C$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\\\" default=\\\"scroll\\\">\\n\u003Coption value=\\\"scroll\\\">\u003C\u003Clingo Settings/BackgroundImageAttachment/Scroll>>\u003C/option>\\n\u003Coption value=\\\"fixed\\\">\u003C\u003Clingo Settings/BackgroundImageAttachment/Fixed>>\u003C/option>\\n\u003C/$select>\\n\\\\end\\n\\n\\\\define backgroundimagesize-dropdown()\\n\u003C$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\\\" default=\\\"scroll\\\">\\n\u003Coption value=\\\"auto\\\">\u003C\u003Clingo Settings/BackgroundImageSize/Auto>>\u003C/option>\\n\u003Coption value=\\\"cover\\\">\u003C\u003Clingo Settings/BackgroundImageSize/Cover>>\u003C/option>\\n\u003Coption value=\\\"contain\\\">\u003C\u003Clingo Settings/BackgroundImageSize/Contain>>\u003C/option>\\n\u003C/$select>\\n\\\\end\\n\\n\u003C\u003Clingo ThemeTweaks/Hint>>\\n\\n! \u003C\u003Clingo Options>>\\n\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\">\u003C\u003Clingo Options/SidebarLayout>>\u003C/$link> |\u003C$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\">\u003Coption value=\\\"fixed-fluid\\\">\u003C\u003Clingo Options/SidebarLayout/Fixed-Fluid>>\u003C/option>\u003Coption value=\\\"fluid-fixed\\\">\u003C\u003Clingo Options/SidebarLayout/Fluid-Fixed>>\u003C/option>\u003C/$select> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\\">\u003C\u003Clingo Options/StickyTitles>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Options/StickyTitles/Hint>>// |\u003C$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\\">\u003Coption value=\\\"no\\\">{{$:/language/No}}\u003C/option>\u003Coption value=\\\"yes\\\">{{$:/language/Yes}}\u003C/option>\u003C/$select> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/options/codewrapping\\\">\u003C\u003Clingo Options/CodeWrapping>>\u003C/$link> |\u003C$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/codewrapping\\\">\u003Coption value=\\\"pre\\\">{{$:/language/No}}\u003C/option>\u003Coption value=\\\"pre-wrap\\\">{{$:/language/Yes}}\u003C/option>\u003C/$select> |\\n\\n! \u003C\u003Clingo Settings>>\\n\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\\\">\u003C\u003Clingo Settings/FontFamily>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\\\" default=\\\"\\\" tag=\\\"input\\\"/> | |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\\\">\u003C\u003Clingo Settings/CodeFontFamily>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\\\" default=\\\"\\\" tag=\\\"input\\\"/> | |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/editorfontfamily\\\">\u003C\u003Clingo Settings/EditorFontFamily>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/editorfontfamily\\\" default=\\\"\\\" tag=\\\"input\\\"/> | |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\">\u003C\u003Clingo Settings/BackgroundImage>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\u003C\u003Cbackgroundimage-dropdown>> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\\\">\u003C\u003Clingo Settings/BackgroundImageAttachment>>\u003C/$link> |\u003C\u003Cbackgroundimageattachment-dropdown>> | |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\\\">\u003C\u003Clingo Settings/BackgroundImageSize>>\u003C/$link> |\u003C\u003Cbackgroundimagesize-dropdown>> | |\\n\\n! \u003C\u003Clingo Metrics>>\\n\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\\\">\u003C\u003Clingo Metrics/FontSize>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\\\">\u003C\u003Clingo Metrics/LineHeight>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\\\">\u003C\u003Clingo Metrics/BodyFontSize>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\\\">\u003C\u003Clingo Metrics/BodyLineHeight>>\u003C/$link> |\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\\\">\u003C\u003Clingo Metrics/StoryLeft>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/StoryLeft/Hint>>// |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storytop\\\">\u003C\u003Clingo Metrics/StoryTop>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/StoryTop/Hint>>// |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storytop\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright\\\">\u003C\u003Clingo Metrics/StoryRight>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/StoryRight/Hint>>// |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\\\">\u003C\u003Clingo Metrics/StoryWidth>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/StoryWidth/Hint>>// |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\">\u003C\u003Clingo Metrics/TiddlerWidth>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/TiddlerWidth/Hint>>//\u003Cbr> |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\\\">\u003C\u003Clingo Metrics/SidebarBreakpoint>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/SidebarBreakpoint/Hint>>// |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|\u003C$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\">\u003C\u003Clingo Metrics/SidebarWidth>>\u003C/$link>\u003Cbr>//\u003C\u003Clingo Metrics/SidebarWidth/Hint>>// |^\u003C$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n\"},\"$:/themes/tiddlywiki/vanilla/base\":{\"title\":\"$:/themes/tiddlywiki/vanilla/base\",\"tags\":\"[[$:/tags/Stylesheet]]\",\"code-body\":\"yes\",\"text\":\"\\\\define custom-background-datauri()\\n\u003C$set name=\\\"background\\\" value={{$:/themes/tiddlywiki/vanilla/settings/backgroundimage}}>\\n\u003C$list filter=\\\"[\u003Cbackground>is[image]]\\\">\\n`background: url(`\\n\u003C$list filter=\\\"[\u003Cbackground>!has[_canonical_uri]]\\\">\\n`\\\"`\u003C$macrocall $name=\\\"datauri\\\" title={{$:/themes/tiddlywiki/vanilla/settings/backgroundimage}}/>`\\\"`\\n\u003C/$list>\\n\u003C$list filter=\\\"[\u003Cbackground>has[_canonical_uri]]\\\">\\n`\\\"`\u003C$view tiddler={{$:/themes/tiddlywiki/vanilla/settings/backgroundimage}} field=\\\"_canonical_uri\\\"/>`\\\"`\\n\u003C/$list>\\n`) center center;`\\n`background-attachment: `{{$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment}}`;\\n-webkit-background-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;\\n-moz-background-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;\\n-o-background-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;\\nbackground-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;`\\n\u003C/$list>\\n\u003C/$set>\\n\\\\end\\n\\n\\\\define sidebarbreakpoint()\\n\u003C$text text={{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}/>\\n\\\\end\\n\\n\\\\define sidebarbreakpoint-minus-one()\\n\u003C$text text={{{ [{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}removesuffix[px]subtract[1]addsuffix[px]] ~[{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}] }}}/>\\n\\\\end\\n\\n\\\\define if-fluid-fixed(text,hiddenSidebarText)\\n\u003C$reveal state=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\" type=\\\"match\\\" text=\\\"fluid-fixed\\\">\\n$text$\\n\u003C$reveal state=\\\"$:/state/sidebar\\\" type=\\\"nomatch\\\" text=\\\"yes\\\" default=\\\"yes\\\">\\n$hiddenSidebarText$\\n\u003C/$reveal>\\n\u003C/$reveal>\\n\\\\end\\n\\n\\\\define if-editor-height-fixed(then,else)\\n\u003C$reveal state=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" type=\\\"match\\\" text=\\\"fixed\\\">\\n$then$\\n\u003C/$reveal>\\n\u003C$reveal state=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" type=\\\"match\\\" text=\\\"auto\\\">\\n$else$\\n\u003C/$reveal>\\n\\\\end\\n\\n\\\\define set-type-selector-min-width()\\n\u003C$set name=\\\"typeLength\\\" value={{{ [all[shadows+tiddlers]prefix[$:/language/Docs/Types/]get[name]length[]maxall[]] }}}>\\n\\n\\t.tc-type-selector-dropdown-wrapper {\\n\\t\\tmin-width: calc(\u003C\u003CtypeLength>>ch + 4em);\\n\\t}\\n\\n\\t.tc-type-selector-dropdown-wrapper input.tc-edit-typeeditor {\\n\\t\\tmin-width: \u003C\u003CtypeLength>>ch;\\n\\t}\\n\\n\u003C/$set>\\n\\\\end\\n\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\\n\\n/*\\n** Start with the normalize CSS reset, and then belay some of its effects\\n*/\\n\\n{{$:/themes/tiddlywiki/vanilla/reset}}\\n\\n*, input[type=\\\"search\\\"] {\\n\\tbox-sizing: border-box;\\n\\t-moz-box-sizing: border-box;\\n\\t-webkit-box-sizing: border-box;\\n}\\n\\ninput[type=\\\"search\\\"] {\\n\\toutline-offset: initial;\\n}\\n\\nhtml button {\\n\\tline-height: 1.2;\\n\\tcolor: \u003C\u003Ccolour button-foreground>>;\\n\\tfill: \u003C\u003Ccolour button-foreground>>;\\n\\tbackground: \u003C\u003Ccolour button-background>>;\\n\\tborder-color: \u003C\u003Ccolour button-border>>;\\n}\\n\\nbutton:disabled svg {\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n/*\\n** Basic element styles\\n*/\\n\\nhtml, body {\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/fontfamily}};\\n\\ttext-rendering: optimizeLegibility; /* Enables kerning and ligatures etc. */\\n\\t-webkit-font-smoothing: antialiased;\\n\\t-moz-osx-font-smoothing: grayscale;\\n}\\n\\nhtml:-webkit-full-screen {\\n\\tbackground-color: \u003C\u003Ccolour page-background>>;\\n}\\n\\nbody.tc-body {\\n\\tfont-size: {{$:/themes/tiddlywiki/vanilla/metrics/fontsize}};\\n\\tline-height: {{$:/themes/tiddlywiki/vanilla/metrics/lineheight}};\\n\\tword-wrap: break-word;\\n\\t\u003C\u003Ccustom-background-datauri>>\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n\\tbackground-color: \u003C\u003Ccolour page-background>>;\\n\\tfill: \u003C\u003Ccolour foreground>>;\\n}\\n\\n\u003C\u003Cif-background-attachment \\\"\\\"\\\"\\n\\nbody.tc-body {\\n\\tbackground-color: transparent;\\n}\\n\\n\\\"\\\"\\\">>\\n\\n/**\\n * Correct the font size and margin on `h1` elements within `section` and\\n * `article` contexts in Chrome, Firefox, and Safari.\\n */\\n\\nh1 {\\n\\tfont-size: 2em;\\n}\\n\\nh1, h2, h3, h4, h5, h6 {\\n\\tline-height: 1.2;\\n\\tfont-weight: normal;\\n}\\n\\npre {\\n\\tdisplay: block;\\n\\tmargin-top: 1em;\\n\\tmargin-bottom: 1em;\\n\\tword-break: normal;\\n\\tword-wrap: break-word;\\n\\twhite-space: {{$:/themes/tiddlywiki/vanilla/options/codewrapping}};\\n\\tbackground-color: \u003C\u003Ccolour pre-background>>;\\n\\tborder: 1px solid \u003C\u003Ccolour pre-border>>;\\n\\tpadding: 0 3px 2px;\\n\\tborder-radius: 3px;\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/codefontfamily}};\\n}\\n\\ncode {\\n\\tcolor: \u003C\u003Ccolour code-foreground>>;\\n\\tbackground-color: \u003C\u003Ccolour code-background>>;\\n\\tborder: 1px solid \u003C\u003Ccolour code-border>>;\\n\\twhite-space: {{$:/themes/tiddlywiki/vanilla/options/codewrapping}};\\n\\tpadding: 0 3px 2px;\\n\\tborder-radius: 3px;\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/codefontfamily}};\\n}\\n\\nblockquote {\\n\\tborder-left: 5px solid \u003C\u003Ccolour blockquote-bar>>;\\n\\tmargin-left: 25px;\\n\\tpadding-left: 10px;\\n\\tquotes: \\\"\\\\201C\\\"\\\"\\\\201D\\\"\\\"\\\\2018\\\"\\\"\\\\2019\\\";\\n}\\n\\nblockquote > div {\\n\\tmargin-top: 1em;\\n\\tmargin-bottom: 1em;\\n}\\n\\nblockquote.tc-big-quote {\\n\\tfont-family: Georgia, serif;\\n\\tposition: relative;\\n\\tbackground: \u003C\u003Ccolour pre-background>>;\\n\\tborder-left: none;\\n\\tmargin-left: 50px;\\n\\tmargin-right: 50px;\\n\\tpadding: 10px;\\n\\tborder-radius: 8px;\\n}\\n\\nblockquote.tc-big-quote cite:before {\\n\\tcontent: \\\"\\\\2014 \\\\2009\\\";\\n}\\n\\nblockquote.tc-big-quote:before {\\n\\tfont-family: Georgia, serif;\\n\\tcolor: \u003C\u003Ccolour blockquote-bar>>;\\n\\tcontent: open-quote;\\n\\tfont-size: 8em;\\n\\tline-height: 0.1em;\\n\\tmargin-right: 0.25em;\\n\\tvertical-align: -0.4em;\\n\\tposition: absolute;\\n\\tleft: -50px;\\n\\ttop: 42px;\\n}\\n\\nblockquote.tc-big-quote:after {\\n\\tfont-family: Georgia, serif;\\n\\tcolor: \u003C\u003Ccolour blockquote-bar>>;\\n\\tcontent: close-quote;\\n\\tfont-size: 8em;\\n\\tline-height: 0.1em;\\n\\tmargin-right: 0.25em;\\n\\tvertical-align: -0.4em;\\n\\tposition: absolute;\\n\\tright: -80px;\\n\\tbottom: -20px;\\n}\\n\\ndl dt {\\n\\tfont-weight: bold;\\n\\tmargin-top: 6px;\\n}\\n\\nbutton, textarea, input, select {\\n\\toutline-color: \u003C\u003Ccolour primary>>;\\n}\\n\\ntextarea,\\ninput[type=text],\\ninput[type=search],\\ninput[type=\\\"\\\"],\\ninput:not([type]) {\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n}\\n\\ninput[type=\\\"checkbox\\\"] {\\n\\tvertical-align: middle;\\n}\\n\\ninput[type=\\\"search\\\"]::-webkit-search-decoration,\\ninput[type=\\\"search\\\"]::-webkit-search-cancel-button,\\ninput[type=\\\"search\\\"]::-webkit-search-results-button,\\ninput[type=\\\"search\\\"]::-webkit-search-results-decoration {\\n\\t-webkit-appearance:none;\\n}\\n\\n.tc-muted {\\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\nsvg.tc-image-button {\\n\\tpadding: 0px 1px 1px 0px;\\n}\\n\\n.tc-icon-wrapper > svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\nkbd {\\n\\tdisplay: inline-block;\\n\\tpadding: 3px 5px;\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n\\tvertical-align: middle;\\n\\tbackground-color: \u003C\u003Ccolour background>>;\\n\\tborder: solid 1px \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-bottom-color: \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-radius: 3px;\\n\\tbox-shadow: inset 0 -1px 0 \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n::selection {\\n\\tbackground-color: Highlight;\\n\\tcolor: HighlightText;\\n\\tbackground-color: \u003C\u003Ccolour selection-background>>;\\n\\tcolor: \u003C\u003Ccolour selection-foreground>>;\\n}\\n\\n/*\\nMarkdown likes putting code elements inside pre elements\\n*/\\npre > code {\\n\\tpadding: 0;\\n\\tborder: none;\\n\\tbackground-color: inherit;\\n\\tcolor: inherit;\\n}\\n\\ntable {\\n\\tborder: 1px solid \u003C\u003Ccolour table-border>>;\\n\\twidth: auto;\\n\\tmax-width: 100%;\\n\\tcaption-side: bottom;\\n\\tmargin-top: 1em;\\n\\tmargin-bottom: 1em;\\n\\t/* next 2 elements needed, since normalize 8.0.1 */\\n\\tborder-collapse: collapse;\\n\\tborder-spacing: 0;\\n}\\n\\ntable th, table td {\\n\\tpadding: 0 7px 0 7px;\\n\\tborder-top: 1px solid \u003C\u003Ccolour table-border>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour table-border>>;\\n}\\n\\ntable thead tr td, table th {\\n\\tbackground-color: \u003C\u003Ccolour table-header-background>>;\\n\\tfont-weight: bold;\\n}\\n\\ntable tfoot tr td {\\n\\tbackground-color: \u003C\u003Ccolour table-footer-background>>;\\n}\\n\\n.tc-csv-table {\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-tiddler-frame img,\\n.tc-tiddler-frame svg,\\n.tc-tiddler-frame canvas,\\n.tc-tiddler-frame embed,\\n.tc-tiddler-frame iframe {\\n\\tmax-width: 100%;\\n}\\n\\n.tc-tiddler-body > embed,\\n.tc-tiddler-body > iframe {\\n\\twidth: 100%;\\n\\theight: 600px;\\n}\\n\\n/*\\n** Links\\n*/\\n\\nbutton.tc-tiddlylink,\\na.tc-tiddlylink {\\n\\ttext-decoration: none;\\n\\tfont-weight: 500;\\n\\tcolor: \u003C\u003Ccolour tiddler-link-foreground>>;\\n\\t-webkit-user-select: inherit; /* Otherwise the draggable attribute makes links impossible to select */\\n}\\n\\n.tc-sidebar-lists a.tc-tiddlylink {\\n\\tcolor: \u003C\u003Ccolour sidebar-tiddler-link-foreground>>;\\n}\\n\\n.tc-sidebar-lists a.tc-tiddlylink:hover {\\n\\tcolor: \u003C\u003Ccolour sidebar-tiddler-link-foreground-hover>>;\\n}\\n\\nbutton.tc-tiddlylink:hover,\\na.tc-tiddlylink:hover {\\n\\ttext-decoration: underline;\\n}\\n\\na.tc-tiddlylink-resolves {\\n}\\n\\na.tc-tiddlylink-shadow {\\n\\tfont-weight: bold;\\n}\\n\\na.tc-tiddlylink-shadow.tc-tiddlylink-resolves {\\n\\tfont-weight: normal;\\n}\\n\\na.tc-tiddlylink-missing {\\n\\tfont-style: italic;\\n}\\n\\na.tc-tiddlylink-external {\\n\\ttext-decoration: underline;\\n\\tcolor: \u003C\u003Ccolour external-link-foreground>>;\\n\\tbackground-color: \u003C\u003Ccolour external-link-background>>;\\n}\\n\\na.tc-tiddlylink-external:visited {\\n\\tcolor: \u003C\u003Ccolour external-link-foreground-visited>>;\\n\\tbackground-color: \u003C\u003Ccolour external-link-background-visited>>;\\n}\\n\\na.tc-tiddlylink-external:hover {\\n\\tcolor: \u003C\u003Ccolour external-link-foreground-hover>>;\\n\\tbackground-color: \u003C\u003Ccolour external-link-background-hover>>;\\n}\\n\\n.tc-drop-down a.tc-tiddlylink:hover {\\n\\tcolor: \u003C\u003Ccolour tiddler-link-background>>;\\n}\\n\\n/*\\n** Drag and drop styles\\n*/\\n\\n.tc-tiddler-dragger {\\n\\tposition: relative;\\n\\tz-index: -10000;\\n}\\n\\n.tc-tiddler-dragger-inner {\\n\\tposition: absolute;\\n\\ttop: -1000px;\\n\\tleft: -1000px;\\n\\tdisplay: inline-block;\\n\\tpadding: 8px 20px;\\n\\tfont-size: 16.9px;\\n\\tfont-weight: bold;\\n\\tline-height: 20px;\\n\\tcolor: \u003C\u003Ccolour dragger-foreground>>;\\n\\ttext-shadow: 0 1px 0 rgba(0, 0, 0, 1);\\n\\twhite-space: nowrap;\\n\\tvertical-align: baseline;\\n\\tbackground-color: \u003C\u003Ccolour dragger-background>>;\\n\\tborder-radius: 20px;\\n}\\n\\n.tc-tiddler-dragger-cover {\\n\\tposition: absolute;\\n\\tbackground-color: \u003C\u003Ccolour page-background>>;\\n}\\n\\n.tc-page-container > .tc-dropzone {\\n\\tmin-height: 100vh;\\n}\\n\\n.tc-dropzone {\\n\\tposition: relative;\\n}\\n\\n.tc-dropzone.tc-dragover:before {\\n\\tz-index: 10000;\\n\\tdisplay: block;\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbackground: \u003C\u003Ccolour dropzone-background>>;\\n\\ttext-align: center;\\n\\tcontent: \\\"\u003C\u003Clingo DropMessage>>\\\";\\n}\\n\\n.tc-droppable > .tc-droppable-placeholder {\\n\\tdisplay: none;\\n}\\n\\n.tc-droppable.tc-dragover > .tc-droppable-placeholder {\\n\\tdisplay: block;\\n\\tborder: 2px dashed \u003C\u003Ccolour dropzone-background>>;\\n}\\n\\n.tc-draggable {\\n\\tcursor: move;\\n}\\n\\n.tc-sidebar-tab-open .tc-droppable-placeholder, .tc-tagged-draggable-list .tc-droppable-placeholder,\\n.tc-links-draggable-list .tc-droppable-placeholder {\\n\\tline-height: 2em;\\n\\theight: 2em;\\n}\\n\\n.tc-sidebar-tab-open-item {\\n\\tposition: relative;\\n}\\n\\n.tc-sidebar-tab-open .tc-btn-invisible.tc-btn-mini svg {\\n\\tfont-size: 0.7em;\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n/*\\n** Plugin reload warning\\n*/\\n\\n.tc-plugin-reload-warning {\\n\\tz-index: 1000;\\n\\tdisplay: block;\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbackground: \u003C\u003Ccolour alert-background>>;\\n\\ttext-align: center;\\n}\\n\\n/*\\n** Buttons\\n*/\\n\\nbutton svg, button img, label svg, label img {\\n\\tvertical-align: middle;\\n}\\n\\n.tc-btn-invisible {\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tbackground: none;\\n\\tborder: none;\\n\\tcursor: pointer;\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n\\tfill: \u003C\u003Ccolour foreground>>;\\n}\\n\\nbutton:disabled.tc-btn-invisible  {\\n\\tcursor: default; \\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-btn-boxed {\\n\\tfont-size: 0.6em;\\n\\tpadding: 0.2em;\\n\\tmargin: 1px;\\n\\tbackground: none;\\n\\tborder: 1px solid \u003C\u003Ccolour tiddler-controls-foreground>>;\\n\\tborder-radius: 0.25em;\\n}\\n\\nhtml body.tc-body .tc-btn-boxed svg {\\n\\tfont-size: 1.6666em;\\n}\\n\\n.tc-btn-boxed:hover {\\n\\tbackground: \u003C\u003Ccolour muted-foreground>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n}\\n\\nhtml body.tc-body .tc-btn-boxed:hover svg {\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-btn-rounded {\\n\\tfont-size: 0.5em;\\n\\tline-height: 2;\\n\\tpadding: 0em 0.3em 0.2em 0.4em;\\n\\tmargin: 1px;\\n\\tborder: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tbackground: \u003C\u003Ccolour muted-foreground>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n\\tborder-radius: 2em;\\n}\\n\\nhtml body.tc-body .tc-btn-rounded svg {\\n\\tfont-size: 1.6666em;\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-btn-rounded:hover {\\n\\tborder: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\nhtml body.tc-body .tc-btn-rounded:hover svg {\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-btn-icon svg {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n\\n.tc-btn-text {\\n\\tmargin-left: 7px;\\n}\\n\\n/* used for documentation \\\"fake\\\" buttons */\\n.tc-btn-standard {\\n\\tline-height: 1.8;\\n\\tcolor: #667;\\n\\tbackground-color: #e0e0e0;\\n\\tborder: 1px solid #888;\\n\\tpadding: 2px 1px 2px 1px;\\n\\tmargin: 1px 4px 1px 4px;\\n}\\n\\n.tc-btn-big-green {\\n\\tdisplay: inline-block;\\n\\tpadding: 8px;\\n\\tmargin: 4px 8px 4px 8px;\\n\\tbackground: \u003C\u003Ccolour download-background>>;\\n\\tcolor: \u003C\u003Ccolour download-foreground>>;\\n\\tfill: \u003C\u003Ccolour download-foreground>>;\\n\\tborder: none;\\n\\tborder-radius: 2px;\\n\\tfont-size: 1.2em;\\n\\tline-height: 1.4em;\\n\\ttext-decoration: none;\\n}\\n\\n.tc-btn-big-green svg,\\n.tc-btn-big-green img {\\n\\theight: 2em;\\n\\twidth: 2em;\\n\\tvertical-align: middle;\\n\\tfill: \u003C\u003Ccolour download-foreground>>;\\n}\\n\\n.tc-primary-btn {\\n\\tbackground: \u003C\u003Ccolour primary>>;\\n}\\n\\n.tc-sidebar-lists input {\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n}\\n\\n.tc-sidebar-lists button {\\n\\tcolor: \u003C\u003Ccolour sidebar-button-foreground>>;\\n\\tfill: \u003C\u003Ccolour sidebar-button-foreground>>;\\n}\\n\\n.tc-sidebar-lists button.tc-btn-mini {\\n\\tcolor: \u003C\u003Ccolour sidebar-muted-foreground>>;\\n}\\n\\n.tc-sidebar-lists button.tc-btn-mini:hover {\\n\\tcolor: \u003C\u003Ccolour sidebar-muted-foreground-hover>>;\\n}\\n\\n.tc-sidebar-lists button small {\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n}\\n\\nbutton svg.tc-image-button, button .tc-image-button img {\\n\\theight: 1em;\\n\\twidth: 1em;\\n}\\n\\n.tc-unfold-banner {\\n\\tposition: absolute;\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tbackground: none;\\n\\tborder: none;\\n\\twidth: 100%;\\n\\twidth: calc(100% + 2px);\\n\\tmargin-left: -43px;\\n\\ttext-align: center;\\n\\tborder-top: 2px solid \u003C\u003Ccolour tiddler-info-background>>;\\n\\tmargin-top: 4px;\\n}\\n\\n.tc-unfold-banner:hover {\\n\\tbackground: \u003C\u003Ccolour tiddler-info-background>>;\\n\\tborder-top: 2px solid \u003C\u003Ccolour tiddler-info-border>>;\\n}\\n\\n.tc-unfold-banner svg, .tc-fold-banner svg {\\n\\theight: 0.75em;\\n\\tfill: \u003C\u003Ccolour tiddler-controls-foreground>>;\\n}\\n\\n.tc-unfold-banner:hover svg, .tc-fold-banner:hover svg {\\n\\tfill: \u003C\u003Ccolour tiddler-controls-foreground-hover>>;\\n}\\n\\n.tc-fold-banner {\\n\\tposition: absolute;\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tbackground: none;\\n\\tborder: none;\\n\\twidth: 23px;\\n\\ttext-align: center;\\n\\tmargin-left: -35px;\\n\\ttop: 6px;\\n\\tbottom: 6px;\\n}\\n\\n.tc-fold-banner:hover {\\n\\tbackground: \u003C\u003Ccolour tiddler-info-background>>;\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-unfold-banner {\\n\\t\\tposition: static;\\n\\t\\twidth: calc(100% + 59px);\\n\\t}\\n\\n\\t.tc-fold-banner {\\n\\t\\twidth: 16px;\\n\\t\\tmargin-left: -16px;\\n\\t\\tfont-size: 0.75em;\\n\\t}\\n\\n}\\n\\n/*\\n** Tags and missing tiddlers\\n*/\\n\\n.tc-tag-list-item {\\n\\tposition: relative;\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-tags-wrapper {\\n\\tmargin: 4px 0 14px 0;\\n}\\n\\n.tc-tags-wrapper .tc-tag-list-item {\\n\\tmargin-right: 7px;\\n}\\n\\n.tc-missing-tiddler-label {\\n\\tfont-style: italic;\\n\\tfont-weight: normal;\\n\\tdisplay: inline-block;\\n\\tfont-size: 11.844px;\\n\\tline-height: 14px;\\n\\twhite-space: nowrap;\\n\\tvertical-align: baseline;\\n}\\n\\n.tc-block-tags-dropdown > .tc-btn-invisible:hover {\\n\\tbackground-color: \u003C\u003Ccolour primary>>;\\n}\\n\\nbutton.tc-tag-label, span.tc-tag-label {\\n\\tdisplay: inline-block;\\n\\tpadding: 0.16em 0.7em;\\n\\tfont-size: 0.9em;\\n\\tfont-weight: normal;\\n\\tline-height: 1.2em;\\n\\tcolor: \u003C\u003Ccolour tag-foreground>>;\\n\\twhite-space: nowrap;\\n\\tvertical-align: baseline;\\n\\tbackground-color: \u003C\u003Ccolour tag-background>>;\\n\\tborder-radius: 1em;\\n}\\n\\n.tc-sidebar-scrollable .tc-tag-label {\\n\\ttext-shadow: none;\\n}\\n\\n.tc-untagged-separator {\\n\\twidth: 10em;\\n\\tleft: 0;\\n\\tmargin-left: 0;\\n\\tborder: 0;\\n\\theight: 1px;\\n\\tbackground: \u003C\u003Ccolour tab-divider>>;\\n}\\n\\nbutton.tc-untagged-label {\\n\\tbackground-color: \u003C\u003Ccolour untagged-background>>;\\n}\\n\\n.tc-tag-label svg, .tc-tag-label img {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tmargin-right: 3px;\\n\\tmargin-bottom: 1px;\\n\\tvertical-align: bottom;\\n}\\n\\n.tc-edit-tags button.tc-remove-tag-button svg {\\n\\tfont-size: 0.7em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-tag-manager-table .tc-tag-label {\\n\\twhite-space: normal;\\n}\\n\\n.tc-tag-manager-tag {\\n\\twidth: 100%;\\n}\\n\\nbutton.tc-btn-invisible.tc-remove-tag-button {\\n\\toutline: none;\\n}\\n\\n.tc-tag-button-selected,\\n.tc-list-item-selected a.tc-tiddlylink, a.tc-list-item-selected {\\n\\tbackground-color: \u003C\u003Ccolour primary>>;\\n\\tcolor: \u003C\u003Ccolour tiddler-background>>;\\n}\\n\\n/*\\n** Page layout\\n*/\\n\\n.tc-topbar {\\n\\tposition: fixed;\\n\\tz-index: 1200;\\n}\\n\\n.tc-topbar-left {\\n\\tleft: 29px;\\n\\ttop: 5px;\\n}\\n\\n.tc-topbar-right {\\n\\ttop: 5px;\\n\\tright: 29px;\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-topbar-right {\\n\\t\\tright: 10px;\\n\\t}\\n\\n}\\n\\n.tc-topbar button {\\n\\tpadding: 8px;\\n}\\n\\n.tc-topbar svg {\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-topbar button:hover svg {\\n\\tfill: \u003C\u003Ccolour foreground>>;\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-show-sidebar-btn svg.tc-image-chevron-left, .tc-hide-sidebar-btn svg.tc-image-chevron-right {\\n\\t\\ttransform: rotate(-90deg);\\n\\t}\\n\\n}\\n\\n.tc-sidebar-header {\\n\\tcolor: \u003C\u003Ccolour sidebar-foreground>>;\\n\\tfill: \u003C\u003Ccolour sidebar-foreground>>;\\n}\\n\\n.tc-sidebar-header .tc-title a.tc-tiddlylink-resolves {\\n\\tfont-weight: normal;\\n}\\n\\n.tc-sidebar-header .tc-sidebar-lists p {\\n\\tmargin-top: 3px;\\n\\tmargin-bottom: 3px;\\n}\\n\\n.tc-sidebar-header .tc-missing-tiddler-label {\\n\\tcolor: \u003C\u003Ccolour sidebar-foreground>>;\\n}\\n\\n.tc-advanced-search input {\\n\\twidth: 60%;\\n}\\n\\n.tc-search a svg {\\n\\twidth: 1.2em;\\n\\theight: 1.2em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-page-controls {\\n\\tmargin-top: 14px;\\n\\tfont-size: 1.5em;\\n}\\n\\n.tc-page-controls .tc-drop-down {\\n\\tfont-size: 1rem;\\n}\\n\\n.tc-page-controls button {\\n\\tmargin-right: 0.5em;\\n}\\n\\n.tc-page-controls a.tc-tiddlylink:hover {\\n\\ttext-decoration: none;\\n}\\n\\n.tc-page-controls img {\\n\\twidth: 1em;\\n}\\n\\n.tc-page-controls svg {\\n\\tfill: \u003C\u003Ccolour sidebar-controls-foreground>>;\\n}\\n\\n.tc-page-controls button:hover svg, .tc-page-controls a:hover svg {\\n\\tfill: \u003C\u003Ccolour sidebar-controls-foreground-hover>>;\\n}\\n\\n.tc-sidebar-lists .tc-menu-list-item {\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-menu-list-count {\\n\\tfont-weight: bold;\\n}\\n\\n.tc-menu-list-subitem {\\n\\tpadding-left: 7px;\\n}\\n\\n.tc-story-river {\\n\\tposition: relative;\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-sidebar-header {\\n\\t\\tpadding: 14px;\\n\\t\\tmin-height: 32px;\\n\\t\\tmargin-top: {{$:/themes/tiddlywiki/vanilla/metrics/storytop}};\\n\\t\\ttransition:  min-height {{$:/config/AnimationDuration}}ms ease-in-out, padding-top {{$:/config/AnimationDuration}}ms ease-in-out, padding-bottom {{$:/config/AnimationDuration}}ms ease-in-out;\\n\\t}\\n\\t\\n\\t\u003C\u003Cif-no-sidebar \\\"\\\"\\\"\\n\\n\\t\\t.tc-sidebar-header {\\n\\t\\t\\tmin-height: 0;\\n\\t\\t\\tpadding-top: 0;\\n\\t\\t\\tpadding-bottom: 0;\\n\\t\\t}\\n\\n\\t\\\"\\\"\\\">>\\n\\n\\t.tc-story-river {\\n\\t\\tposition: relative;\\n\\t\\tpadding: 0;\\n\\t}\\n}\\n\\n@media (min-width: \u003C\u003Csidebarbreakpoint>>) {\\n\\n\\t.tc-message-box {\\n\\t\\tmargin: 21px -21px 21px -21px;\\n\\t}\\n\\n\\t.tc-sidebar-scrollable {\\n\\t\\tposition: fixed;\\n\\t\\ttop: {{$:/themes/tiddlywiki/vanilla/metrics/storytop}};\\n\\t\\tleft: {{$:/themes/tiddlywiki/vanilla/metrics/storyright}};\\n\\t\\tbottom: 0;\\n\\t\\tright: 0;\\n\\t\\toverflow-y: auto;\\n\\t\\toverflow-x: auto;\\n\\t\\t-webkit-overflow-scrolling: touch;\\n\\t\\tmargin: 0 0 0 -42px;\\n\\t\\tpadding: 71px 0 28px 42px;\\n\\t}\\n\\n\\thtml[dir=\\\"rtl\\\"] .tc-sidebar-scrollable {\\n\\t\\tleft: auto;\\n\\t\\tright: {{$:/themes/tiddlywiki/vanilla/metrics/storyright}};\\n\\t}\\n\\n\\t.tc-story-river {\\n\\t\\tposition: relative;\\n\\t\\tleft: {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}};\\n\\t\\ttop: {{$:/themes/tiddlywiki/vanilla/metrics/storytop}};\\n\\t\\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/storywidth}};\\n\\t\\tpadding: 42px 42px 42px 42px;\\n\\t}\\n\\n\u003C\u003Cif-no-sidebar \\\"\\n\\n\\t.tc-story-river {\\n\\t\\twidth: calc(100% - {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}});\\n\\t}\\n\\n\\\">>\\n\\n\\t.tc-story-river.tc-static-story-river {\\n\\t\\tmargin-right: 0;\\n\\t\\tpadding-right: 42px;\\n\\t}\\n\\n}\\n\\n@media print {\\n\\n\\tbody.tc-body {\\n\\t\\tbackground-color: transparent;\\n\\t}\\n\\n\\t.tc-sidebar-header, .tc-topbar {\\n\\t\\tdisplay: none;\\n\\t}\\n\\n\\t.tc-story-river {\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t}\\n\\n\\t.tc-story-river .tc-tiddler-frame {\\n\\t\\tmargin: 0;\\n\\t\\tborder: none;\\n\\t\\tpadding: 0;\\n\\t}\\n}\\n\\n/*\\n** Tiddler styles\\n*/\\n\\n.tc-tiddler-frame {\\n\\tposition: relative;\\n\\tmargin-bottom: 28px;\\n\\tbackground-color: \u003C\u003Ccolour tiddler-background>>;\\n\\tborder: 1px solid \u003C\u003Ccolour tiddler-border>>;\\n}\\n\\n{{$:/themes/tiddlywiki/vanilla/sticky}}\\n\\n.tc-tiddler-info {\\n\\toverflow: hidden;\\n\\tpadding: 14px 42px 14px 42px;\\n\\tbackground-color: \u003C\u003Ccolour tiddler-info-background>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour tiddler-info-border>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tiddler-info-border>>;\\n}\\n\\n.tc-tiddler-info p {\\n\\tmargin-top: 3px;\\n\\tmargin-bottom: 3px;\\n}\\n\\n.tc-tiddler-info .tc-tab-buttons button.tc-tab-selected {\\n\\tbackground-color: \u003C\u003Ccolour tiddler-info-tab-background>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tiddler-info-tab-background>>;\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-tiddler-info {\\n\\t\\tpadding: 14px 14px 14px 14px;\\n\\t}\\n\\n}\\n\\n.tc-view-field-table {\\n\\twidth: 100%;\\n}\\n\\n.tc-view-field-name {\\n\\twidth: 1%; /* Makes this column be as narrow as possible */\\n\\twhite-space: nowrap;\\n\\tvertical-align: top;\\n\\ttext-align: right;\\n\\tfont-style: italic;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-view-field-value {\\n\\tword-break: break-all;\\n}\\n\\n@media (max-width: \u003C\u003Csidebarbreakpoint-minus-one>>) {\\n\\t.tc-tiddler-frame {\\n\\t\\tpadding: 14px 14px 14px 14px;\\n\\t\\tmargin-bottom: .5em;\\n\\t}\\n\\n\\t.tc-tiddler-info {\\n\\t\\tmargin: 0 -14px 0 -14px;\\n\\t}\\n}\\n\\n@media (min-width: \u003C\u003Csidebarbreakpoint>>) {\\n\\t.tc-tiddler-frame {\\n\\t\\tpadding: 28px 42px 42px 42px;\\n\\t\\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth}};\\n\\t\\tborder-radius: 2px;\\n\\t}\\n\\n\u003C\u003Cif-no-sidebar \\\"\\n\\n\\t.tc-tiddler-frame {\\n\\t\\twidth: 100%;\\n\\t}\\n\\n\\\">>\\n\\n\\t.tc-tiddler-info {\\n\\t\\tmargin: 0 -42px 0 -42px;\\n\\t}\\n}\\n\\n.tc-site-title,\\n.tc-titlebar {\\n\\tfont-weight: normal;\\n\\tfont-size: 2.35em;\\n\\tline-height: 1.35em;\\n\\tcolor: \u003C\u003Ccolour tiddler-title-foreground>>;\\n\\tmargin: 0;\\n}\\n\\n.tc-site-title {\\n\\tcolor: \u003C\u003Ccolour site-title-foreground>>;\\n}\\n\\n.tc-tiddler-title-icon {\\n\\tvertical-align: middle;\\n\\tmargin-right: .1em;\\n}\\n\\n.tc-system-title-prefix {\\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-titlebar h2 {\\n\\tfont-size: 1em;\\n\\tdisplay: inline;\\n}\\n\\n.tc-titlebar img {\\n\\theight: 1em;\\n}\\n\\n.tc-subtitle {\\n\\tfont-size: 0.9em;\\n\\tcolor: \u003C\u003Ccolour tiddler-subtitle-foreground>>;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-subtitle .tc-tiddlylink {\\n\\tmargin-right: .3em;\\n}\\n\\n.tc-tiddler-missing .tc-title {\\n\\tfont-style: italic;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-controls {\\n\\tfloat: right;\\n}\\n\\n.tc-tiddler-controls .tc-drop-down {\\n\\tfont-size: 0.6em;\\n}\\n\\n.tc-tiddler-controls .tc-drop-down .tc-drop-down {\\n\\tfont-size: 1em;\\n}\\n\\n.tc-tiddler-controls > span > button,\\n.tc-tiddler-controls > span > span > button,\\n.tc-tiddler-controls > span > span > span > button {\\n\\tvertical-align: baseline;\\n\\tmargin-left:5px;\\n}\\n\\n.tc-tiddler-controls button svg, .tc-tiddler-controls button img,\\n.tc-search button svg, .tc-search a svg {\\n\\tfill: \u003C\u003Ccolour tiddler-controls-foreground>>;\\n}\\n\\n.tc-tiddler-controls button svg, .tc-tiddler-controls button img {\\n\\theight: 0.75em;\\n}\\n\\n.tc-search button svg, .tc-search a svg {\\n\\theight: 1.2em;\\n\\twidth: 1.2em;\\n\\tmargin: 0 0.25em;\\n}\\n\\n.tc-tiddler-controls button.tc-selected svg,\\n.tc-page-controls button.tc-selected svg  {\\n\\tfill: \u003C\u003Ccolour tiddler-controls-foreground-selected>>;\\n}\\n\\n.tc-tiddler-controls button.tc-btn-invisible:hover svg,\\n.tc-search button:hover svg, .tc-search a:hover svg {\\n\\tfill: \u003C\u003Ccolour tiddler-controls-foreground-hover>>;\\n}\\n\\n@media print {\\n\\t.tc-tiddler-controls {\\n\\t\\tdisplay: none;\\n\\t}\\n}\\n\\n.tc-tiddler-help { /* Help prompts within tiddler template */\\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n\\tmargin-top: 14px;\\n}\\n\\n.tc-tiddler-help a.tc-tiddlylink {\\n\\tcolor: \u003C\u003Ccolour very-muted-foreground>>;\\n}\\n\\n.tc-tiddler-frame .tc-edit-texteditor {\\n\\twidth: 100%;\\n\\tmargin: 4px 0 4px 0;\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame textarea.tc-edit-texteditor,\\n.tc-tiddler-frame iframe.tc-edit-texteditor,\\n.tc-tiddler-frame select.tc-edit-texteditor {\\n\\tpadding: 3px 3px 3px 3px;\\n\\tborder: 1px solid \u003C\u003Ccolour tiddler-editor-border>>;\\n\\tline-height: 1.3em;\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/editorfontfamily}};\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame textarea.tc-edit-texteditor,\\n.tc-tiddler-frame iframe.tc-edit-texteditor {\\n\\t-webkit-appearance: none;\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame select.tc-edit-texteditor,\\n.tc-tiddler-frame textarea.tc-edit-texteditor {\\n\\tbackground-color: \u003C\u003Ccolour tiddler-editor-background>>;\\n}\\n\\n.tc-tiddler-frame iframe.tc-edit-texteditor {\\n\\tbackground-color: \u003C\u003Ccolour tiddler-background>>;\\n}\\n\\n.tc-tiddler-frame .tc-binary-warning {\\n\\twidth: 100%;\\n\\theight: 5em;\\n\\ttext-align: center;\\n\\tpadding: 3em 3em 6em 3em;\\n\\tbackground: \u003C\u003Ccolour alert-background>>;\\n\\tborder: 1px solid \u003C\u003Ccolour alert-border>>;\\n}\\n\\ncanvas.tc-edit-bitmapeditor  {\\n\\tborder: 6px solid \u003C\u003Ccolour tiddler-editor-border-image>>;\\n\\tcursor: crosshair;\\n\\t-moz-user-select: none;\\n\\t-webkit-user-select: none;\\n\\t-ms-user-select: none;\\n\\tmargin-top: 6px;\\n\\tmargin-bottom: 6px;\\n}\\n\\n.tc-edit-bitmapeditor-width {\\n\\tdisplay: block;\\n}\\n\\n.tc-edit-bitmapeditor-height {\\n\\tdisplay: block;\\n}\\n\\n.tc-tiddler-body {\\n\\tclear: both;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-body {\\n\\tfont-size: {{$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize}};\\n\\tline-height: {{$:/themes/tiddlywiki/vanilla/metrics/bodylineheight}};\\n}\\n\\n.tc-titlebar, .tc-tiddler-edit-title {\\n\\toverflow: hidden; /* https://github.com/Jermolene/TiddlyWiki5/issues/282 */\\n}\\n\\nhtml body.tc-body.tc-single-tiddler-window {\\n\\tmargin: 1em;\\n\\tbackground: \u003C\u003Ccolour tiddler-background>>;\\n}\\n\\n.tc-single-tiddler-window img,\\n.tc-single-tiddler-window svg,\\n.tc-single-tiddler-window canvas,\\n.tc-single-tiddler-window embed,\\n.tc-single-tiddler-window iframe {\\n\\tmax-width: 100%;\\n}\\n\\n/*\\n** Editor\\n*/\\n\\n.tc-editor-toolbar {\\n\\tmargin-top: 8px;\\n}\\n\\n.tc-editor-toolbar button {\\n\\tvertical-align: middle;\\n\\tbackground-color: \u003C\u003Ccolour tiddler-controls-foreground>>;\\n\\tcolor: \u003C\u003Ccolour tiddler-controls-foreground-selected>>;\\n\\tfill: \u003C\u003Ccolour tiddler-controls-foreground-selected>>;\\n\\tborder-radius: 4px;\\n\\tpadding: 3px;\\n\\tmargin: 2px 0 2px 4px;\\n}\\n\\n.tc-editor-toolbar button.tc-text-editor-toolbar-item-adjunct {\\n\\tmargin-left: 1px;\\n\\twidth: 1em;\\n\\tborder-radius: 8px;\\n}\\n\\n.tc-editor-toolbar button.tc-text-editor-toolbar-item-start-group {\\n\\tmargin-left: 11px;\\n}\\n\\n.tc-editor-toolbar button.tc-selected {\\n\\tbackground-color: \u003C\u003Ccolour primary>>;\\n}\\n\\n.tc-editor-toolbar button svg {\\n\\twidth: 1.6em;\\n\\theight: 1.2em;\\n}\\n\\n.tc-editor-toolbar button:hover {\\n\\tbackground-color: \u003C\u003Ccolour tiddler-controls-foreground-selected>>;\\n\\tfill: \u003C\u003Ccolour background>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-editor-toolbar .tc-text-editor-toolbar-more {\\n\\twhite-space: normal;\\n}\\n\\n.tc-editor-toolbar .tc-text-editor-toolbar-more button {\\n\\tdisplay: inline-block;\\n\\tpadding: 3px;\\n\\twidth: auto;\\n}\\n\\n.tc-editor-toolbar .tc-search-results {\\n\\tpadding: 0;\\n}\\n\\n.tc-editor-toolbar button.tc-editortoolbar-stamp-button + .tc-popup .tc-drop-down > p {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n}\\n\\n.tc-editor-toolbar button.tc-editortoolbar-stamp-button + .tc-popup .tc-drop-down a.tc-tiddlylink {\\n\\tfont-weight: normal;\\n}\\n\\n/*\\n** Adjustments for fluid-fixed mode\\n*/\\n\\n@media (min-width: \u003C\u003Csidebarbreakpoint>>) {\\n\\n\u003C\u003Cif-fluid-fixed text:\\\"\\\"\\\"\\n\\n\\t.tc-story-river {\\n\\t\\tpadding-right: 0;\\n\\t\\tposition: relative;\\n\\t\\twidth: auto;\\n\\t\\tleft: 0;\\n\\t\\tmargin-left: {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}};\\n\\t\\tmargin-right: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}};\\n\\t}\\n\\n\\t.tc-tiddler-frame {\\n\\t\\twidth: 100%;\\n\\t}\\n\\n\\t.tc-sidebar-scrollable {\\n\\t\\tleft: auto;\\n\\t\\tbottom: 0;\\n\\t\\tright: 0;\\n\\t\\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}};\\n\\t}\\n\\n\\tbody.tc-body .tc-storyview-zoomin-tiddler {\\n\\t\\twidth: 100%;\\n\\t\\twidth: calc(100% - 42px);\\n\\t}\\n\\n\\\"\\\"\\\" hiddenSidebarText:\\\"\\\"\\\"\\n\\n\\t.tc-story-river {\\n\\t\\tpadding-right: 3em;\\n\\t\\tmargin-right: 0;\\n\\t}\\n\\n\\tbody.tc-body .tc-storyview-zoomin-tiddler {\\n\\t\\twidth: 100%;\\n\\t\\twidth: calc(100% - 84px);\\n\\t}\\n\\n\\\"\\\"\\\">>\\n\\n}\\n\\n/*\\n** Toolbar buttons\\n*/\\n\\n.tc-page-controls svg.tc-image-new-button {\\n\\tfill: \u003C\u003Ccolour toolbar-new-button>>;\\n}\\n\\n.tc-page-controls svg.tc-image-options-button {\\n\\tfill: \u003C\u003Ccolour toolbar-options-button>>;\\n}\\n\\n.tc-page-controls svg.tc-image-save-button {\\n\\tfill: \u003C\u003Ccolour toolbar-save-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-info-button {\\n\\tfill: \u003C\u003Ccolour toolbar-info-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-edit-button {\\n\\tfill: \u003C\u003Ccolour toolbar-edit-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-close-button {\\n\\tfill: \u003C\u003Ccolour toolbar-close-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-delete-button {\\n\\tfill: \u003C\u003Ccolour toolbar-delete-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-cancel-button {\\n\\tfill: \u003C\u003Ccolour toolbar-cancel-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-done-button {\\n\\tfill: \u003C\u003Ccolour toolbar-done-button>>;\\n}\\n\\n/*\\n** Tiddler edit mode\\n*/\\n\\n.tc-tiddler-edit-frame em.tc-edit {\\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n\\tfont-style: normal;\\n}\\n\\n.tc-edit-type-dropdown a.tc-tiddlylink-missing {\\n\\tfont-style: normal;\\n}\\n\\n.tc-type-selector .tc-edit-typeeditor {\\n\\twidth: auto;\\n}\\n\\n.tc-type-selector-dropdown-wrapper {\\n\\tdisplay: inline-block;\\n}\\n\\n\u003C\u003Cset-type-selector-min-width>>\\n\\n.tc-edit-tags {\\n\\tborder: 1px solid \u003C\u003Ccolour tiddler-editor-border>>;\\n\\tpadding: 4px 8px 4px 8px;\\n}\\n\\n.tc-edit-add-tag {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-edit-add-tag .tc-add-tag-name input {\\n\\twidth: 50%;\\n}\\n\\n.tc-edit-add-tag .tc-keyboard {\\n\\tdisplay:inline;\\n}\\n\\n.tc-edit-tags .tc-tag-label {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-edit-tags-list {\\n\\tmargin: 14px 0 14px 0;\\n}\\n\\n.tc-remove-tag-button {\\n\\tpadding-left: 4px;\\n}\\n\\n.tc-tiddler-preview {\\n\\toverflow: auto;\\n}\\n\\n.tc-tiddler-preview-preview {\\n\\tfloat: right;\\n\\twidth: 49%;\\n\\tborder: 1px solid \u003C\u003Ccolour tiddler-editor-border>>;\\n\\tmargin: 4px 0 3px 3px;\\n\\tpadding: 3px 3px 3px 3px;\\n}\\n\\n\u003C\u003Cif-editor-height-fixed then:\\\"\\\"\\\"\\n\\n.tc-tiddler-preview-preview {\\n\\toverflow-y: scroll;\\n\\theight: {{$:/config/TextEditor/EditorHeight/Height}};\\n}\\n\\n\\\"\\\"\\\">>\\n\\n.tc-tiddler-frame .tc-tiddler-preview .tc-edit-texteditor {\\n\\twidth: 49%;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-preview canvas.tc-edit-bitmapeditor {\\n\\tmax-width: 49%;\\n}\\n\\n.tc-edit-fields {\\n\\twidth: 100%;\\n}\\n\\n.tc-edit-fields.tc-edit-fields-small {\\n\\tmargin-top: 0;\\n\\tmargin-bottom: 0;\\n}\\n\\n.tc-edit-fields table, .tc-edit-fields tr, .tc-edit-fields td {\\n\\tborder: none;\\n\\tpadding: 4px;\\n}\\n\\n.tc-edit-fields > tbody > .tc-edit-field:nth-child(odd) {\\n\\tbackground-color: \u003C\u003Ccolour tiddler-editor-fields-odd>>;\\n}\\n\\n.tc-edit-fields > tbody > .tc-edit-field:nth-child(even) {\\n\\tbackground-color: \u003C\u003Ccolour tiddler-editor-fields-even>>;\\n}\\n\\n.tc-edit-field-name {\\n\\ttext-align: right;\\n}\\n\\n.tc-edit-field-value input {\\n\\twidth: 100%;\\n}\\n\\n.tc-edit-field-remove {\\n}\\n\\n.tc-edit-field-remove svg {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-edit-field-add-name-wrapper input.tc-edit-texteditor {\\n\\twidth: auto;\\n}\\n\\n.tc-edit-field-add-name-wrapper {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-edit-field-add-value {\\n\\tdisplay: inline-block;\\n}\\n\\n@media (min-width: \u003C\u003Csidebarbreakpoint>>) {\\n\\n\\t.tc-edit-field-add-value {\\n\\t\\twidth: 35%;\\n\\t}\\n\\n}\\n\\n.tc-edit-field-add-button {\\n\\tdisplay: inline-block;\\n\\twidth: 10%;\\n}\\n\\n\\n/*\\n** Tiddler editor dropzone\\n*/\\n\\n.tc-dropzone-editor {\\n\\tposition:relative;\\n}\\n\\n.tc-dropzone-editor.tc-dragover .tc-editor-toolbar::after{\\n\\tz-index: 10000;\\n\\ttop:0;\\n\\tleft:0;\\n\\tright:0;\\n\\theight: 100%;\\n\\tbackground: \u003C\u003Ccolour dropzone-background>>;\\n\\tcontent: \\\"\u003C\u003Clingo DropMessage>>\\\";\\n\\tpointer-events: none;\\n\\tposition: absolute;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n\\tbackground-color: \u003C\u003Ccolor background>>;\\n\\tborder: 4px dashed \u003C\u003Ccolor modal-border>>;\\n\\tfont-weight: bold;\\n\\tfont-size: 150%;\\n\\topacity: 0.8;\\n\\tcolor: \u003C\u003Ccolor foreground>>;\\n}\\n\\n.tc-editor-importpopup {\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.tc-editor-import {\\n\\tposition: absolute;\\n\\ttop: 50%;\\n\\tleft: 50%;\\n\\ttransform: translate(-50%, -50%);\\n\\tbackground: \u003C\u003Ccolor pre-background>>;\\n\\tbox-shadow: 2px 2px 10px \u003C\u003Ccolour foreground>>;\\n\\tpadding: 10px;\\n\\twidth: 96%;\\n\\tborder: 1px solid \u003C\u003Ccolor tiddler-controls-foreground>>;\\n\\ttext-align:center;\\n}\\n\\n.tc-editor-import img {\\n\\tmax-height: 500px;\\n}\\n\\n/*\\n** Storyview Classes\\n*/\\n\\n.tc-viewswitcher .tc-image-button {\\n\\tmargin-right: .3em;\\n}\\n\\n.tc-storyview-zoomin-tiddler {\\n\\tposition: absolute;\\n\\tdisplay: block;\\n\\twidth: 100%;\\n}\\n\\n@media (min-width: \u003C\u003Csidebarbreakpoint>>) {\\n\\n\\t.tc-storyview-zoomin-tiddler {\\n\\t\\twidth: calc(100% - 84px);\\n\\t}\\n\\n}\\n\\n/*\\n** Dropdowns\\n*/\\n\\n.tc-btn-dropdown {\\n\\ttext-align: left;\\n}\\n\\n.tc-btn-dropdown svg, .tc-btn-dropdown img {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-drop-down-wrapper {\\n\\tposition: relative;\\n}\\n\\n.tc-drop-down {\\n\\tmin-width: 380px;\\n\\tborder: 1px solid \u003C\u003Ccolour dropdown-border>>;\\n\\tbackground-color: \u003C\u003Ccolour dropdown-background>>;\\n\\tpadding: 7px 0 7px 0;\\n\\tmargin: 4px 0 0 0;\\n\\twhite-space: nowrap;\\n\\ttext-shadow: none;\\n\\tline-height: 1.4;\\n}\\n\\n.tc-drop-down .tc-drop-down {\\n\\tmargin-left: 14px;\\n}\\n\\n.tc-drop-down button svg, .tc-drop-down a svg  {\\n\\tfill: \u003C\u003Ccolour foreground>>;\\n}\\n\\n.tc-drop-down button:disabled svg {\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-drop-down button.tc-btn-invisible:hover svg {\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-drop-down .tc-drop-down-info {\\n\\tpadding-left: 14px;\\n}\\n\\n.tc-drop-down p {\\n\\tpadding: 0 14px 0 14px;\\n}\\n\\n.tc-drop-down svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\n.tc-drop-down img {\\n\\twidth: 1em;\\n}\\n\\n.tc-drop-down a, .tc-drop-down button {\\n\\tdisplay: block;\\n\\tpadding: 0 14px 0 14px;\\n\\twidth: 100%;\\n\\ttext-align: left;\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n\\tline-height: 1.4;\\n}\\n\\n.tc-drop-down .tc-tab-set .tc-tab-buttons button {\\n\\tdisplay: inline-block;\\n\\twidth: auto;\\n\\tmargin-bottom: 0px;\\n\\tborder-bottom-left-radius: 0;\\n\\tborder-bottom-right-radius: 0;\\n}\\n\\n.tc-drop-down .tc-prompt {\\n\\tpadding: 0 14px;\\n}\\n\\n.tc-drop-down .tc-chooser {\\n\\tborder: none;\\n}\\n\\n.tc-drop-down .tc-chooser .tc-swatches-horiz {\\n\\tfont-size: 0.4em;\\n\\tpadding-left: 1.2em;\\n}\\n\\n.tc-drop-down .tc-file-input-wrapper {\\n\\twidth: 100%;\\n}\\n\\n.tc-drop-down .tc-file-input-wrapper button {\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n}\\n\\n.tc-drop-down a:hover, .tc-drop-down button:hover, .tc-drop-down .tc-file-input-wrapper:hover button {\\n\\tcolor: \u003C\u003Ccolour tiddler-link-background>>;\\n\\tbackground-color: \u003C\u003Ccolour tiddler-link-foreground>>;\\n\\ttext-decoration: none;\\n}\\n\\n.tc-drop-down .tc-tab-buttons button {\\n\\tbackground-color: \u003C\u003Ccolour dropdown-tab-background>>;\\n}\\n\\n.tc-drop-down .tc-tab-buttons button.tc-tab-selected {\\n\\tbackground-color: \u003C\u003Ccolour dropdown-tab-background-selected>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour dropdown-tab-background-selected>>;\\n}\\n\\n.tc-drop-down-bullet {\\n\\tdisplay: inline-block;\\n\\twidth: 0.5em;\\n}\\n\\n.tc-drop-down .tc-tab-contents a {\\n\\tpadding: 0 0.5em 0 0.5em;\\n}\\n\\n.tc-block-dropdown-wrapper {\\n\\tposition: relative;\\n}\\n\\n.tc-block-dropdown {\\n\\tposition: absolute;\\n\\tmin-width: 220px;\\n\\tborder: 1px solid \u003C\u003Ccolour dropdown-border>>;\\n\\tbackground-color: \u003C\u003Ccolour dropdown-background>>;\\n\\tpadding: 7px 0;\\n\\tmargin: 4px 0 0 0;\\n\\twhite-space: nowrap;\\n\\tz-index: 1000;\\n\\ttext-shadow: none;\\n}\\n\\n.tc-block-dropdown.tc-search-drop-down {\\n\\tmargin-left: -12px;\\n}\\n\\n.tc-block-dropdown a {\\n\\tdisplay: block;\\n\\tpadding: 4px 14px 4px 14px;\\n}\\n\\n.tc-block-dropdown.tc-search-drop-down a {\\n\\tdisplay: block;\\n\\tpadding: 0px 10px 0px 10px;\\n}\\n\\n.tc-drop-down .tc-dropdown-item-plain,\\n.tc-block-dropdown .tc-dropdown-item-plain {\\n\\tpadding: 4px 14px 4px 7px;\\n}\\n\\n.tc-drop-down .tc-dropdown-item,\\n.tc-block-dropdown .tc-dropdown-item {\\n\\tpadding: 4px 14px 4px 7px;\\n\\tcolor: \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-block-dropdown a.tc-tiddlylink:hover {\\n\\tcolor: \u003C\u003Ccolour tiddler-link-background>>;\\n\\tbackground-color: \u003C\u003Ccolour tiddler-link-foreground>>;\\n\\ttext-decoration: none;\\n}\\n\\n.tc-search-results {\\n\\tpadding: 0 7px 0 7px;\\n}\\n\\n.tc-image-chooser, .tc-colour-chooser {\\n\\twhite-space: normal;\\n}\\n\\n.tc-image-chooser a,\\n.tc-colour-chooser a {\\n\\tdisplay: inline-block;\\n\\tvertical-align: top;\\n\\ttext-align: center;\\n\\tposition: relative;\\n}\\n\\n.tc-image-chooser a {\\n\\tborder: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tpadding: 2px;\\n\\tmargin: 2px;\\n\\twidth: 4em;\\n\\theight: 4em;\\n}\\n\\n.tc-colour-chooser a {\\n\\tpadding: 3px;\\n\\twidth: 2em;\\n\\theight: 2em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-image-chooser a:hover,\\n.tc-colour-chooser a:hover {\\n\\tbackground: \u003C\u003Ccolour primary>>;\\n\\tpadding: 0px;\\n\\tborder: 3px solid \u003C\u003Ccolour primary>>;\\n}\\n\\n.tc-image-chooser a svg,\\n.tc-image-chooser a img {\\n\\tdisplay: inline-block;\\n\\twidth: auto;\\n\\theight: auto;\\n\\tmax-width: 3.5em;\\n\\tmax-height: 3.5em;\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tmargin: auto;\\n}\\n\\n/*\\n** Modals\\n*/\\n\\n.tc-modal-wrapper {\\n\\tposition: fixed;\\n\\toverflow: auto;\\n\\toverflow-y: scroll;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tz-index: 900;\\n}\\n\\n.tc-modal-backdrop {\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tz-index: 1000;\\n\\tbackground-color: \u003C\u003Ccolour modal-backdrop>>;\\n}\\n\\n.tc-modal {\\n\\tz-index: 1100;\\n\\tbackground-color: \u003C\u003Ccolour modal-background>>;\\n\\tborder: 1px solid \u003C\u003Ccolour modal-border>>;\\n}\\n\\n@media (max-width: 55em) {\\n\\t.tc-modal {\\n\\t\\tposition: fixed;\\n\\t\\ttop: 1em;\\n\\t\\tleft: 1em;\\n\\t\\tright: 1em;\\n\\t}\\n\\n\\t.tc-modal-body {\\n\\t\\toverflow-y: auto;\\n\\t\\tmax-height: 400px;\\n\\t\\tmax-height: 60vh;\\n\\t}\\n}\\n\\n@media (min-width: 55em) {\\n\\t.tc-modal {\\n\\t\\tposition: fixed;\\n\\t\\ttop: 2em;\\n\\t\\tleft: 25%;\\n\\t\\twidth: 50%;\\n\\t}\\n\\n\\t.tc-modal-body {\\n\\t\\toverflow-y: auto;\\n\\t\\tmax-height: 400px;\\n\\t\\tmax-height: 60vh;\\n\\t}\\n}\\n\\n.tc-modal-header {\\n\\tpadding: 9px 15px;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour modal-header-border>>;\\n}\\n\\n.tc-modal-header h3 {\\n\\tmargin: 0;\\n\\tline-height: 30px;\\n}\\n\\n.tc-modal-header img, .tc-modal-header svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\n.tc-modal-body {\\n\\tpadding: 15px;\\n}\\n\\n.tc-modal-footer {\\n\\tpadding: 14px 15px 15px;\\n\\tmargin-bottom: 0;\\n\\ttext-align: right;\\n\\tbackground-color: \u003C\u003Ccolour modal-footer-background>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour modal-footer-border>>;\\n}\\n\\n.tc-modal-prevent-scroll {\\n\\toverflow: hidden;\\n}\\n\\n/*\\n** Centered modals\\n*/\\n.tc-modal-centered .tc-modal {\\n\\twidth: auto;\\n\\ttop: 50%;\\n\\tleft: 50%;\\n\\ttransform: translate(-50%, -50%) !important;\\n}\\n\\n/*\\n** Notifications\\n*/\\n\\n.tc-notification {\\n\\tposition: fixed;\\n\\ttop: 14px;\\n\\tright: 42px;\\n\\tz-index: 1300;\\n\\tmax-width: 280px;\\n\\tpadding: 0 14px 0 14px;\\n\\tbackground-color: \u003C\u003Ccolour notification-background>>;\\n\\tborder: 1px solid \u003C\u003Ccolour notification-border>>;\\n}\\n\\n/*\\n** Tabs\\n*/\\n\\n.tc-tab-set.tc-vertical {\\n\\tdisplay: -webkit-flex;\\n\\tdisplay: flex;\\n}\\n\\n.tc-tab-buttons {\\n\\tfont-size: 0.85em;\\n\\tpadding-top: 1em;\\n\\tmargin-bottom: -2px;\\n}\\n\\n.tc-tab-buttons.tc-vertical  {\\n\\tz-index: 100;\\n\\tdisplay: block;\\n\\tpadding-top: 14px;\\n\\tvertical-align: top;\\n\\ttext-align: right;\\n\\tmargin-bottom: inherit;\\n\\tmargin-right: -1px;\\n\\tmax-width: 33%;\\n\\t-webkit-flex: 0 0 auto;\\n\\tflex: 0 0 auto;\\n}\\n\\n.tc-tab-buttons button.tc-tab-selected {\\n\\tcolor: \u003C\u003Ccolour tab-foreground-selected>>;\\n\\tbackground-color: \u003C\u003Ccolour tab-background-selected>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border-selected>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-border-selected>>;\\n\\tborder-right: 1px solid \u003C\u003Ccolour tab-border-selected>>;\\n}\\n\\n.tc-tab-buttons button {\\n\\tcolor: \u003C\u003Ccolour tab-foreground>>;\\n\\tpadding: 3px 5px 3px 5px;\\n\\tmargin-right: 0.3em;\\n\\tfont-weight: normal;\\n\\tborder: none;\\n\\tbackground: inherit;\\n\\tbackground-color: \u003C\u003Ccolour tab-background>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-right: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-top-left-radius: 2px;\\n\\tborder-top-right-radius: 2px;\\n\\tborder-bottom-left-radius: 0;\\n\\tborder-bottom-right-radius: 0;\\n}\\n\\n.tc-tab-buttons.tc-vertical button {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\tmargin-top: 3px;\\n\\tmargin-right: 0;\\n\\ttext-align: right;\\n\\tbackground-color: \u003C\u003Ccolour tab-background>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-right: none;\\n\\tborder-top-left-radius: 2px;\\n\\tborder-bottom-left-radius: 2px;\\n\\tborder-top-right-radius: 0;\\n\\tborder-bottom-right-radius: 0;\\n}\\n\\n.tc-tab-buttons.tc-vertical button.tc-tab-selected {\\n\\tbackground-color: \u003C\u003Ccolour tab-background-selected>>;\\n\\tborder-right: 1px solid \u003C\u003Ccolour tab-background-selected>>;\\n}\\n\\n.tc-tab-divider {\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-divider>>;\\n}\\n\\n.tc-tab-divider.tc-vertical  {\\n\\tdisplay: none;\\n}\\n\\n.tc-tab-content {\\n\\tmargin-top: 14px;\\n}\\n\\n.tc-tab-content.tc-vertical  {\\n\\tdisplay: inline-block;\\n\\tvertical-align: top;\\n\\tpadding-top: 0;\\n\\tpadding-left: 14px;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\t-webkit-flex: 1 0 70%;\\n\\tflex: 1 0 70%;\\n\\toverflow: auto;\\n}\\n\\n.tc-sidebar-lists .tc-tab-buttons {\\n\\tmargin-bottom: -1px;\\n}\\n\\n.tc-sidebar-lists .tc-tab-buttons button.tc-tab-selected {\\n\\tbackground-color: \u003C\u003Ccolour sidebar-tab-background-selected>>;\\n\\tcolor: \u003C\u003Ccolour sidebar-tab-foreground-selected>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour sidebar-tab-border-selected>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour sidebar-tab-border-selected>>;\\n\\tborder-right: 1px solid \u003C\u003Ccolour sidebar-tab-border-selected>>;\\n}\\n\\n.tc-sidebar-lists .tc-tab-buttons button {\\n\\tbackground-color: \u003C\u003Ccolour sidebar-tab-background>>;\\n\\tcolor: \u003C\u003Ccolour sidebar-tab-foreground>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour sidebar-tab-border>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour sidebar-tab-border>>;\\n\\tborder-right: 1px solid \u003C\u003Ccolour sidebar-tab-border>>;\\n}\\n\\n.tc-sidebar-lists .tc-tab-divider {\\n\\tborder-top: 1px solid \u003C\u003Ccolour sidebar-tab-divider>>;\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\tbackground-color: \u003C\u003Ccolour sidebar-tab-background>>;\\n\\tborder-top: none;\\n\\tborder-left: none;\\n\\tborder-bottom: none;\\n\\tborder-right: 1px solid #ccc;\\n\\tmargin-bottom: inherit;\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button.tc-tab-selected {\\n\\tbackground-color: \u003C\u003Ccolour sidebar-tab-background-selected>>;\\n\\tborder: none;\\n}\\n\\n/*\\n** Manager\\n*/\\n\\n.tc-manager-wrapper {\\n\\t\\n}\\n\\n.tc-manager-controls {\\n\\t\\n}\\n\\n.tc-manager-control {\\n\\tmargin: 0.5em 0;\\n}\\n\\n.tc-manager-list {\\n\\twidth: 100%;\\n\\tborder-top: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-right: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-manager-list-item {\\n\\n}\\n\\n.tc-manager-list-item-heading {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\ttext-align: left;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tpadding: 3px;\\n}\\n\\n.tc-manager-list-item-heading-selected {\\n\\tfont-weight: bold;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n\\tfill: \u003C\u003Ccolour background>>;\\n\\tbackground-color: \u003C\u003Ccolour foreground>>;\\n}\\n\\n.tc-manager-list-item-heading:hover {\\n\\tbackground: \u003C\u003Ccolour primary>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-manager-list-item-content {\\n\\tdisplay: flex;\\n}\\n\\n.tc-manager-list-item-content-sidebar {\\n\\tflex: 1 0;\\n\\tbackground: \u003C\u003Ccolour tiddler-editor-background>>;\\n\\tborder-right: 0.5em solid \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-bottom: 0.5em solid \u003C\u003Ccolour muted-foreground>>;\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-manager-list-item-content-item-heading {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\ttext-align: left;\\n\\tbackground: \u003C\u003Ccolour muted-foreground>>;\\n\\ttext-transform: uppercase;\\n\\tfont-size: 0.6em;\\n\\tfont-weight: bold;\\n\\tpadding: 0.5em 0 0.5em 0;\\n}\\n\\n.tc-manager-list-item-content-item-body {\\n\\tpadding: 0 0.5em 0 0.5em;\\n}\\n\\n.tc-manager-list-item-content-item-body > pre {\\n\\tmargin: 0.5em 0 0.5em 0;\\n\\tborder: none;\\n\\tbackground: inherit;\\n}\\n\\n.tc-manager-list-item-content-tiddler {\\n\\tflex: 3 1;\\n\\tborder-left: 0.5em solid \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-right: 0.5em solid \u003C\u003Ccolour muted-foreground>>;\\n\\tborder-bottom: 0.5em solid \u003C\u003Ccolour muted-foreground>>;\\n}\\n\\n.tc-manager-list-item-content-item-body > table {\\n\\tborder: none;\\n\\tpadding: 0;\\n\\tmargin: 0;\\n}\\n\\n.tc-manager-list-item-content-item-body > table td {\\n\\tborder: none;\\n}\\n\\n.tc-manager-icon-editor > button {\\n\\twidth: 100%;\\n}\\n\\n.tc-manager-icon-editor > button > svg,\\n.tc-manager-icon-editor > button > button {\\n\\twidth: 100%;\\n\\theight: auto;\\n}\\n\\n/*\\n** Import table\\n*/\\n\\n.tc-import-table {\\n\\twidth: 100%;\\n}\\n\\n.tc-import-table svg.tc-image-edit-button {\\n\\tmax-width: unset;\\n}\\n\\n.tc-import-table th:first-of-type {\\n\\twidth: 10%;\\n}\\n\\n.tc-import-table th:last-of-type {\\n\\twidth: 30%;\\n}\\n\\n.tc-import-table .tc-row-disabled {\\n\\tbackground: \u003C\u003Ccolour very-muted-foreground>>10;\\n\\topacity: 0.8;\\n}\\n\\n.tc-import-table .tc-row-warning {\\n\\tbackground: \u003C\u003Ccolour diff-delete-background>>50;\\n}\\n\\n/*\\n** Alerts\\n*/\\n\\n.tc-alerts {\\n\\tposition: fixed;\\n\\ttop: 28px;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tmax-width: 50%;\\n\\tz-index: 20000;\\n}\\n\\n.tc-alert {\\n\\tposition: relative;\\n\\tmargin: 14px;\\n\\tpadding: 7px;\\n\\tborder: 1px solid \u003C\u003Ccolour alert-border>>;\\n\\tbackground-color: \u003C\u003Ccolour alert-background>>;\\n}\\n\\n.tc-alert-toolbar {\\n\\tposition: absolute;\\n\\ttop: 7px;\\n\\tright: 7px;\\n\\tline-height: 0;\\n}\\n\\n.tc-alert-toolbar svg {\\n\\tfill: \u003C\u003Ccolour alert-muted-foreground>>;\\n}\\n\\n.tc-alert-subtitle {\\n\\tcolor: \u003C\u003Ccolour alert-muted-foreground>>;\\n\\tfont-weight: bold;\\n\\tfont-size: 0.8em;\\n\\tmargin-bottom: 0.5em;\\n}\\n\\n.tc-alert-body > p {\\n\\tmargin: 0;\\n}\\n\\n.tc-alert-highlight {\\n\\tcolor: \u003C\u003Ccolour alert-highlight>>;\\n}\\n\\n@media (min-width: \u003C\u003Csidebarbreakpoint>>) {\\n\\n\\t.tc-static-alert {\\n\\t\\tposition: relative;\\n\\t}\\n\\n\\t.tc-static-alert-inner {\\n\\t\\tposition: absolute;\\n\\t\\tz-index: 100;\\n\\t}\\n\\n}\\n\\n.tc-static-alert-inner {\\n\\tpadding: 0 2px 2px 42px;\\n\\tcolor: \u003C\u003Ccolour static-alert-foreground>>;\\n}\\n\\n/*\\n** Floating drafts list\\n*/\\n\\n.tc-drafts-list {\\n\\tz-index: 2000;\\n\\tposition: fixed;\\n\\tfont-size: 0.8em;\\n\\tleft: 0;\\n\\tbottom: 0;\\n}\\n\\n.tc-drafts-list a {\\n\\tmargin: 0 0.5em;\\n\\tpadding: 4px 4px;\\n\\tborder-top-left-radius: 4px;\\n\\tborder-top-right-radius: 4px;\\n\\tborder: 1px solid \u003C\u003Ccolour background>>;\\n\\tborder-bottom: none;\\n\\tbackground: \u003C\u003Ccolour dirty-indicator>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-drafts-list a:hover {\\n\\ttext-decoration: none;\\n\\tbackground: \u003C\u003Ccolour foreground>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-drafts-list a svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: text-bottom;\\n}\\n\\n/*\\n** Control panel\\n*/\\n\\n.tc-control-panel td {\\n\\tpadding: 4px;\\n}\\n\\n.tc-control-panel table, .tc-control-panel table input, .tc-control-panel table textarea {\\n\\twidth: 100%;\\n}\\n\\n.tc-plugin-info {\\n\\tdisplay: flex;\\n\\ttext-shadow: none;\\n\\tborder: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tfill: \u003C\u003Ccolour muted-foreground>>;\\n\\tbackground-color: \u003C\u003Ccolour background>>;\\n\\tmargin: 0.5em 0 0.5em 0;\\n\\tpadding: 4px;\\n\\talign-items: center;\\n}\\n\\n.tc-sidebar-lists a.tc-tiddlylink.tc-plugin-info {\\n\\tcolor: \u003C\u003Ccolour tiddler-link-foreground>>;\\n}\\n\\n\\n.tc-plugin-info-sub-plugins .tc-plugin-info {\\n\\tmargin: 0.5em;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-plugin-info-sub-plugin-indicator {\\n\\tmargin: -16px 1em 0 2em;\\n}\\n\\n.tc-plugin-info-sub-plugin-indicator button {\\n\\tcolor: \u003C\u003Ccolour background>>;\\n\\tbackground: \u003C\u003Ccolour foreground>>;\\n\\tborder-radius: 8px;\\n\\tpadding: 2px 7px;\\n\\tfont-size: 0.75em;\\n}\\n\\n.tc-plugin-info-sub-plugins .tc-plugin-info-dropdown {\\n\\tmargin-left: 1em;\\n\\tmargin-right: 1em;\\n}\\n\\n.tc-plugin-info-disabled {\\n\\tbackground: -webkit-repeating-linear-gradient(45deg, #ff0, #ff0 10px, #eee 10px, #eee 20px);\\n\\tbackground: repeating-linear-gradient(45deg, #ff0, #ff0 10px, #eee 10px, #eee 20px);\\n}\\n\\n.tc-plugin-info-disabled:hover {\\n\\tbackground: -webkit-repeating-linear-gradient(45deg, #aa0, #aa0 10px, #888 10px, #888 20px);\\n\\tbackground: repeating-linear-gradient(45deg, #aa0, #aa0 10px, #888 10px, #888 20px);\\n}\\n\\na.tc-tiddlylink.tc-plugin-info:hover {\\n\\ttext-decoration: none;\\n\\tbackground-color: \u003C\u003Ccolour primary>>;\\n\\tcolor: \u003C\u003Ccolour background>>;\\n\\tfill: \u003C\u003Ccolour foreground>>;\\n}\\n\\na.tc-tiddlylink.tc-plugin-info:hover > .tc-plugin-info-chunk > svg {\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-plugin-info-chunk {\\n\\tmargin: 2px;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-toggle {\\n\\tflex-grow: 0;\\n\\tflex-shrink: 0;\\n\\tline-height: 1;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-icon {\\n\\tflex-grow: 0;\\n\\tflex-shrink: 0;\\n\\tline-height: 1;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description {\\n\\tflex-grow: 1;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-buttons {\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tflex-grow: 0;\\n\\tflex-shrink: 0;\\n\\ttext-align: right;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description h1 {\\n\\tfont-size: 1em;\\n\\tline-height: 1.2;\\n\\tmargin: 2px 0 2px 0;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description h2 {\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tmargin: 2px 0 2px 0;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description div {\\n\\tfont-size: 0.7em;\\n\\tline-height: 1.2;\\n\\tmargin: 2px 0 2px 0;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-toggle img, .tc-plugin-info-chunk.tc-plugin-info-toggle svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-icon img, .tc-plugin-info-chunk.tc-plugin-info-icon svg {\\n\\twidth: 2em;\\n\\theight: 2em;\\n}\\n\\n.tc-plugin-info-dropdown {\\n\\tborder: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n\\tmargin-top: -8px;\\n}\\n\\n.tc-plugin-info-dropdown-message {\\n\\tbackground: \u003C\u003Ccolour message-background>>;\\n\\tpadding: 0.5em 1em 0.5em 1em;\\n\\tfont-weight: bold;\\n\\tfont-size: 0.8em;\\n}\\n\\n.tc-plugin-info-dropdown-body {\\n\\tpadding: 1em 1em 0 1em;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n}\\n\\n.tc-plugin-info-sub-plugins {\\n\\tpadding: 0.5em;\\n\\tmargin: 0 1em 1em 1em;\\n\\tbackground: \u003C\u003Ccolour notification-background>>;\\n}\\n\\n.tc-install-plugin {\\n\\tfont-weight: bold;\\n\\tbackground: green;\\n\\tcolor: white;\\n\\tfill: white;\\n\\tborder-radius: 4px;\\n\\tpadding: 3px;\\n}\\n\\n.tc-install-plugin.tc-reinstall-downgrade {\\n\\tbackground: red;\\n}\\n\\n.tc-install-plugin.tc-reinstall {\\n\\tbackground: blue;\\n}\\n\\n.tc-install-plugin.tc-reinstall-upgrade {\\n\\tbackground: orange;\\n}\\n\\n.tc-check-list {\\n\\tline-height: 2em;\\n}\\n\\n.tc-check-list .tc-image-button {\\n\\theight: 1.5em;\\n}\\n\\n/*\\n** Message boxes\\n*/\\n\\n.tc-message-box {\\n\\tborder: 1px solid \u003C\u003Ccolour message-border>>;\\n\\tbackground: \u003C\u003Ccolour message-background>>;\\n\\tpadding: 0px 21px 0px 21px;\\n\\tfont-size: 12px;\\n\\tline-height: 18px;\\n\\tcolor: \u003C\u003Ccolour message-foreground>>;\\n}\\n\\n.tc-message-box svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: text-bottom;\\n}\\n\\n/*\\n** Pictures\\n*/\\n\\n.tc-bordered-image {\\n\\tborder: 1px solid \u003C\u003Ccolour muted-foreground>>;\\n\\tpadding: 5px;\\n\\tmargin: 5px;\\n}\\n\\n/*\\n** Floats\\n*/\\n\\n.tc-float-right {\\n\\tfloat: right;\\n}\\n\\n/*\\n** Chooser\\n*/\\n\\n.tc-chooser {\\n\\tborder-right: 1px solid \u003C\u003Ccolour table-header-background>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour table-header-background>>;\\n}\\n\\n\\n.tc-chooser-item {\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour table-header-background>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour table-header-background>>;\\n\\tpadding: 2px 4px 2px 14px;\\n}\\n\\n.tc-drop-down .tc-chooser-item {\\n\\tpadding: 2px;\\n}\\n\\n.tc-chosen,\\n.tc-chooser-item:hover {\\n\\tbackground-color: \u003C\u003Ccolour table-header-background>>;\\n\\tborder-color: \u003C\u003Ccolour table-footer-background>>;\\n}\\n\\n.tc-chosen .tc-tiddlylink {\\n\\tcursor:default;\\n}\\n\\n.tc-chooser-item .tc-tiddlylink {\\n\\tdisplay: block;\\n\\ttext-decoration: none;\\n\\tbackground-color: transparent;\\n}\\n\\n.tc-chooser-item:hover .tc-tiddlylink:hover {\\n\\ttext-decoration: none;\\n}\\n\\n.tc-drop-down .tc-chosen .tc-tiddlylink,\\n.tc-drop-down .tc-chooser-item .tc-tiddlylink:hover {\\n\\tcolor: \u003C\u003Ccolour foreground>>;\\n}\\n\\n.tc-chosen > .tc-tiddlylink:before {\\n\\tmargin-left: -10px;\\n\\tposition: relative;\\n\\tcontent: \\\"» \\\";\\n}\\n\\n.tc-chooser-item svg,\\n.tc-chooser-item img{\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-language-chooser .tc-image-button img {\\n\\twidth: 2em;\\n\\tvertical-align: -0.15em;\\n}\\n\\n/*\\n** Palette swatches\\n*/\\n\\n.tc-swatches-horiz {\\n}\\n\\n.tc-swatches-horiz .tc-swatch {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-swatch {\\n\\twidth: 2em;\\n\\theight: 2em;\\n\\tmargin: 0.4em;\\n\\tborder: 1px solid #888;\\n}\\n\\ninput.tc-palette-manager-colour-input {\\n\\twidth: 100%;\\n\\tpadding: 0;\\n}\\n\\n/*\\n** Table of contents\\n*/\\n\\n.tc-sidebar-lists .tc-table-of-contents {\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-table-of-contents button {\\n\\tcolor: \u003C\u003Ccolour sidebar-foreground>>;\\n}\\n\\n.tc-table-of-contents svg {\\n\\twidth: 0.7em;\\n\\theight: 0.7em;\\n\\tvertical-align: middle;\\n\\tfill: \u003C\u003Ccolour sidebar-foreground>>;\\n}\\n\\n.tc-table-of-contents ol {\\n\\tlist-style-type: none;\\n\\tpadding-left: 0;\\n}\\n\\n.tc-table-of-contents ol ol {\\n\\tpadding-left: 1em;\\n}\\n\\n.tc-table-of-contents li {\\n\\tfont-size: 1.0em;\\n\\tfont-weight: bold;\\n}\\n\\n.tc-table-of-contents li a {\\n\\tfont-weight: bold;\\n}\\n\\n.tc-table-of-contents li li {\\n\\tfont-size: 0.95em;\\n\\tfont-weight: normal;\\n\\tline-height: 1.4;\\n}\\n\\n.tc-table-of-contents li li a {\\n\\tfont-weight: normal;\\n}\\n\\n.tc-table-of-contents li li li {\\n\\tfont-size: 0.95em;\\n\\tfont-weight: normal;\\n\\tline-height: 1.5;\\n}\\n\\n.tc-table-of-contents li li li li {\\n\\tfont-size: 0.95em;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-tabbed-table-of-contents {\\n\\tdisplay: -webkit-flex;\\n\\tdisplay: flex;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents {\\n\\tz-index: 100;\\n\\tdisplay: inline-block;\\n\\tpadding-left: 1em;\\n\\tmax-width: 50%;\\n\\t-webkit-flex: 0 0 auto;\\n\\tflex: 0 0 auto;\\n\\tbackground: \u003C\u003Ccolour tab-background>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tab-border>>;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item > a,\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item-selected > a {\\n\\tdisplay: block;\\n\\tpadding: 0.12em 1em 0.12em 0.25em;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item > a {\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-background>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-background>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tab-background>>;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item > a:hover {\\n\\ttext-decoration: none;\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tbackground: \u003C\u003Ccolour tab-border>>;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item-selected > a {\\n\\tborder-top: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-left: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tborder-bottom: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n\\tmargin-right: -1px;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item-selected > a:hover {\\n\\ttext-decoration: none;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-tabbed-table-of-contents-content {\\n\\tdisplay: inline-block;\\n\\tvertical-align: top;\\n\\tpadding-left: 1.5em;\\n\\tpadding-right: 1.5em;\\n\\tborder: 1px solid \u003C\u003Ccolour tab-border>>;\\n\\t-webkit-flex: 1 0 50%;\\n\\tflex: 1 0 50%;\\n}\\n\\n/*\\n** Dirty indicator\\n*/\\n\\nbody.tc-dirty span.tc-dirty-indicator, body.tc-dirty span.tc-dirty-indicator svg {\\n\\tfill: \u003C\u003Ccolour dirty-indicator>>;\\n\\tcolor: \u003C\u003Ccolour dirty-indicator>>;\\n}\\n\\n/*\\n** File inputs\\n*/\\n\\n.tc-file-input-wrapper {\\n\\tposition: relative;\\n\\toverflow: hidden;\\n\\tdisplay: inline-block;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-file-input-wrapper input[type=file] {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tfont-size: 999px;\\n\\tmax-width: 100%;\\n\\tmax-height: 100%;\\n\\tfilter: alpha(opacity=0);\\n\\topacity: 0;\\n\\toutline: none;\\n\\tbackground: white;\\n\\tcursor: pointer;\\n\\tdisplay: inline-block;\\n}\\n\\n::-webkit-file-upload-button {\\n\\tcursor:pointer;\\n}\\n\\n/*\\n** Thumbnail macros\\n*/\\n\\n.tc-thumbnail-wrapper {\\n\\tposition: relative;\\n\\tdisplay: inline-block;\\n\\tmargin: 6px;\\n\\tvertical-align: top;\\n}\\n\\n.tc-thumbnail-right-wrapper {\\n\\tfloat:right;\\n\\tmargin: 0.5em 0 0.5em 0.5em;\\n}\\n\\n.tc-thumbnail-image {\\n\\ttext-align: center;\\n\\toverflow: hidden;\\n\\tborder-radius: 3px;\\n}\\n\\n.tc-thumbnail-image svg,\\n.tc-thumbnail-image img {\\n\\tfilter: alpha(opacity=1);\\n\\topacity: 1;\\n\\tmin-width: 100%;\\n\\tmin-height: 100%;\\n\\tmax-width: 100%;\\n}\\n\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-image svg,\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-image img {\\n\\tfilter: alpha(opacity=0.8);\\n\\topacity: 0.8;\\n}\\n\\n.tc-thumbnail-background {\\n\\tposition: absolute;\\n\\tborder-radius: 3px;\\n}\\n\\n.tc-thumbnail-icon svg,\\n.tc-thumbnail-icon img {\\n\\twidth: 3em;\\n\\theight: 3em;\\n\\t\u003C\u003Cfilter \\\"drop-shadow(2px 2px 4px rgba(0,0,0,0.3))\\\">>\\n}\\n\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-icon svg,\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-icon img {\\n\\tfill: #fff;\\n\\t\u003C\u003Cfilter \\\"drop-shadow(3px 3px 4px rgba(0,0,0,0.6))\\\">>\\n}\\n\\n.tc-thumbnail-icon {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tdisplay: -webkit-flex;\\n\\t-webkit-align-items: center;\\n\\t-webkit-justify-content: center;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n}\\n\\n.tc-thumbnail-caption {\\n\\tposition: absolute;\\n\\tbackground-color: #777;\\n\\tcolor: #fff;\\n\\ttext-align: center;\\n\\tbottom: 0;\\n\\twidth: 100%;\\n\\tfilter: alpha(opacity=0.9);\\n\\topacity: 0.9;\\n\\tline-height: 1.4;\\n\\tborder-bottom-left-radius: 3px;\\n\\tborder-bottom-right-radius: 3px;\\n}\\n\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-caption {\\n\\tfilter: alpha(opacity=1);\\n\\topacity: 1;\\n}\\n\\n/*\\n** Diffs\\n*/\\n\\n.tc-diff-equal {\\n\\tbackground-color: \u003C\u003Ccolour diff-equal-background>>;\\n\\tcolor: \u003C\u003Ccolour diff-equal-foreground>>;\\n}\\n\\n.tc-diff-insert {\\n\\tbackground-color: \u003C\u003Ccolour diff-insert-background>>;\\n\\tcolor: \u003C\u003Ccolour diff-insert-foreground>>;\\n}\\n\\n.tc-diff-delete {\\n\\tbackground-color: \u003C\u003Ccolour diff-delete-background>>;\\n\\tcolor: \u003C\u003Ccolour diff-delete-foreground>>;\\n}\\n\\n.tc-diff-invisible {\\n\\tbackground-color: \u003C\u003Ccolour diff-invisible-background>>;\\n\\tcolor: \u003C\u003Ccolour diff-invisible-foreground>>;\\n}\\n\\n.tc-diff-tiddlers th {\\n\\ttext-align: right;\\n\\tbackground: \u003C\u003Ccolour background>>;\\n\\tfont-weight: normal;\\n\\tfont-style: italic;\\n}\\n\\n.tc-diff-tiddlers pre {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tborder: none;\\n\\tbackground: none;\\n}\\n\\n/*\\n** Errors\\n*/\\n\\n.tc-error {\\n\\tbackground: #f00;\\n\\tcolor: #fff;\\n}\\n\\n/*\\n** Tree macro\\n*/\\n\\n.tc-tree div {\\n\\tpadding-left: 14px;\\n}\\n\\n.tc-tree ol {\\n\\tlist-style-type: none;\\n\\tpadding-left: 0;\\n\\tmargin-top: 0;\\n}\\n\\n.tc-tree ol ol {\\n\\tpadding-left: 1em;\\n}\\n\\n.tc-tree button {\\n\\tcolor: #acacac;\\n}\\n\\n.tc-tree svg {\\n\\tfill: #acacac;\\n}\\n\\n.tc-tree span svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: baseline;\\n}\\n\\n.tc-tree li span {\\n\\tcolor: lightgray;\\n}\\n\\nselect {\\n\\tcolor: \u003C\u003Ccolour select-tag-foreground>>;\\n\\tbackground: \u003C\u003Ccolour select-tag-background>>;\\n}\\n\\n/*\\n** Utility classes for SVG icons\\n*/\\n\\n.tc-fill-background {\\n\\tfill: \u003C\u003Ccolour background>>;\\n}\\n\\n/*\\n** Flexbox utility classes\\n*/\\n\\n.tc-flex {\\n\\tdisplay: -webkit-flex;\\n\\tdisplay: flex;\\n}\\n\\n.tc-flex-column {\\n\\tflex-direction: column;\\n}\\n\\n.tc-flex-row {\\n\\tflex-direction: row;\\n}\\n\\n.tc-flex-grow-1 {\\n\\tflex-grow: 1;\\n}\\n\\n.tc-flex-grow-2 {\\n\\tflex-grow: 2;\\n}\\n\\n/*\\n** Other utility classes\\n*/\\n\\n.tc-tiny-gap {\\n\\tmargin-left: .25em;\\n\\tmargin-right: .25em;\\n}\\n\\n.tc-tiny-gap-left {\\n\\tmargin-left: .25em;\\n}\\n\\n.tc-tiny-gap-right {\\n\\tmargin-right: .25em;\\n}\\n\\n.tc-small-gap {\\n\\tmargin-left: .5em;\\n\\tmargin-right: .5em;\\n}\\n\\n.tc-small-gap-left {\\n\\tmargin-left: .5em;\\n}\\n\\n.tc-small-gap-right {\\n\\tmargin-right: .5em;\\n}\\n\\n.tc-big-gap {\\n\\tmargin-left: 1em;\\n\\tmargin-right: 1em;\\n}\\n\\n.tc-big-gap-left {\\n\\tmargin-left: 1em;\\n}\\n\\n.tc-big-gap-right {\\n\\tmargin-right: 1em;\\n}\\n\\n.tc-word-break {\\n\\tword-break: break-all;\\n}\\n\"},\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\",\"text\":\"15px\"},\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\",\"text\":\"22px\"},\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\",\"text\":\"14px\"},\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\",\"text\":\"20px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\",\"text\":\"0px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storytop\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storytop\",\"text\":\"0px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storyright\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storyright\",\"text\":\"770px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\",\"text\":\"770px\"},\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\",\"text\":\"686px\"},\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\",\"text\":\"960px\"},\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\",\"text\":\"350px\"},\"$:/themes/tiddlywiki/vanilla/options/stickytitles\":{\"title\":\"$:/themes/tiddlywiki/vanilla/options/stickytitles\",\"text\":\"no\"},\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\":{\"title\":\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\",\"text\":\"fixed-fluid\"},\"$:/themes/tiddlywiki/vanilla/options/codewrapping\":{\"title\":\"$:/themes/tiddlywiki/vanilla/options/codewrapping\",\"text\":\"pre-wrap\"},\"$:/themes/tiddlywiki/vanilla/reset\":{\"title\":\"$:/themes/tiddlywiki/vanilla/reset\",\"type\":\"text/css\",\"text\":\"/*! modern-normalize v1.0.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\\n\\n/*\\nDocument\\n========\\n*/\\n\\n/**\\nUse a better box model (opinionated).\\n*/\\n\\n*,\\n*::before,\\n*::after {\\n  box-sizing: border-box;\\n}\\n\\n/**\\nUse a more readable tab size (opinionated).\\n*/\\n\\n:root {\\n  -moz-tab-size: 4;\\n  tab-size: 4;\\n}\\n\\n/**\\n1. Correct the line height in all browsers.\\n2. Prevent adjustments of font size after orientation changes in iOS.\\n*/\\n\\nhtml {\\n  line-height: 1.15; /* 1 */\\n  -webkit-text-size-adjust: 100%; /* 2 */\\n}\\n\\n/*\\nSections\\n========\\n*/\\n\\n/**\\nRemove the margin in all browsers.\\n*/\\n\\nbody {\\n  margin: 0;\\n}\\n\\n/**\\nImprove consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n*/\\n\\nbody {\\n  font-family:\\n    system-ui,\\n    -apple-system, /* Firefox supports this but not yet `system-ui` */\\n    'Segoe UI',\\n    Roboto,\\n    Helvetica,\\n    Arial,\\n    sans-serif,\\n    'Apple Color Emoji',\\n    'Segoe UI Emoji';\\n}\\n\\n/*\\nGrouping content\\n================\\n*/\\n\\n/**\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n*/\\n\\nhr {\\n  height: 0; /* 1 */\\n  color: inherit; /* 2 */\\n}\\n\\n/*\\nText-level semantics\\n====================\\n*/\\n\\n/**\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr[title] {\\n  text-decoration: underline dotted;\\n}\\n\\n/**\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n  font-weight: bolder;\\n}\\n\\n/**\\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n2. Correct the odd 'em' font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n  font-family:\\n    ui-monospace,\\n    SFMono-Regular,\\n    Consolas,\\n    'Liberation Mono',\\n    Menlo,\\n    monospace; /* 1 */\\n  font-size: 1em; /* 2 */\\n}\\n\\n/**\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n  font-size: 80%;\\n}\\n\\n/**\\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n\\nsub {\\n  bottom: -0.25em;\\n}\\n\\nsup {\\n  top: -0.5em;\\n}\\n\\n/*\\nTabular data\\n============\\n*/\\n\\n/**\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n*/\\n\\ntable {\\n  text-indent: 0; /* 1 */\\n  border-color: inherit; /* 2 */\\n}\\n\\n/*\\nForms\\n=====\\n*/\\n\\n/**\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n  font-family: inherit; /* 1 */\\n  font-size: 100%; /* 1 */\\n  line-height: 1.15; /* 1 */\\n  margin: 0; /* 2 */\\n}\\n\\n/**\\nRemove the inheritance of text transform in Edge and Firefox.\\n1. Remove the inheritance of text transform in Firefox.\\n*/\\n\\nbutton,\\nselect { /* 1 */\\n  text-transform: none;\\n}\\n\\n/**\\nCorrect the inability to style clickable types in iOS and Safari.\\n*/\\n\\nbutton,\\n[type='button'],\\n[type='reset'],\\n[type='submit'] {\\n  -webkit-appearance: button;\\n}\\n\\n/**\\nRemove the inner border and padding in Firefox.\\n*/\\n\\n::-moz-focus-inner {\\n  border-style: none;\\n  padding: 0;\\n}\\n\\n/**\\nRestore the focus styles unset by the previous rule.\\n*/\\n\\n:-moz-focusring {\\n  outline: 1px dotted ButtonText;\\n}\\n\\n/**\\nRemove the additional ':invalid' styles in Firefox.\\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\\n*/\\n\\n:-moz-ui-invalid {\\n  box-shadow: none;\\n}\\n\\n/**\\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\\n*/\\n\\nlegend {\\n  padding: 0;\\n}\\n\\n/**\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n  vertical-align: baseline;\\n}\\n\\n/**\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n\\n/**\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type='search'] {\\n  -webkit-appearance: textfield; /* 1 */\\n  outline-offset: -2px; /* 2 */\\n}\\n\\n/**\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n\\n/**\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to 'inherit' in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n  -webkit-appearance: button; /* 1 */\\n  font: inherit; /* 2 */\\n}\\n\\n/*\\nInteractive\\n===========\\n*/\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n  display: list-item;\\n}\\n\"},\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\",\"text\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;\"},\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\",\"text\":\"\\\"SFMono-Regular\\\",Consolas,\\\"Liberation Mono\\\",Menlo,Courier,monospace\"},\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\",\"text\":\"fixed\"},\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\",\"text\":\"auto\"},\"$:/themes/tiddlywiki/vanilla/sticky\":{\"title\":\"$:/themes/tiddlywiki/vanilla/sticky\",\"code-body\":\"yes\",\"text\":\"\u003C$reveal state=\\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n``\\n.tc-tiddler-title {\\n\\tposition: -webkit-sticky;\\n\\tposition: -moz-sticky;\\n\\tposition: -o-sticky;\\n\\tposition: -ms-sticky;\\n\\tposition: sticky;\\n\\ttop: 0px;\\n\\tbackground: ``\u003C\u003Ccolour tiddler-background>>``;\\n\\tz-index: 500;\\n}\\n\\n``\\n\u003C$list filter=\\\"[range[100]]\\\">\\n`.tc-story-river .tc-tiddler-frame:nth-child(100n+`\u003C$text text=\u003C\u003CcurrentTiddler>>/>`) {\\nz-index: `\u003C$text text={{{ [[200]subtract\u003CcurrentTiddler>] }}}/>`;\\n}\\n`\\n\u003C/$list>\\n\u003C/$reveal>\\n\"}}}"},
{"created":"20201114120802874","text":"fluid-fixed","title":"$:/themes/tiddlywiki/vanilla/options/sidebarlayout","modified":"20220531053017892","tags":"$:/positivesigner/tag/startup"},
{"created":"20220703022907537","title":"$:/themes/tiddlywiki/vanilla/options/stickytitles","text":"no","modified":"20220703173221611"},
{"created":"20220530231158446","text":"\u003Cspan style=\"float:right\">\n\u003C$list variable=recent_card filter=\"[prefix[$:/db/]] [!prefix[$]] +[!sort[modified]first[1]]\">\n\n\u003C$view tiddler=\u003C\u003Crecent_card>> field=modified format=date template=\"YYYYm0MMd0DD 0hhm0mms0ss\" />\n\u003C/$list>\n\u003C/span>\n\n\u003C$list variable=cur_card filter=\"[tag[DOC]]\">\n\n\u003C$link to=\u003C\u003Ccur_card>> />\n\u003C/$list>\n\n[[_____ |$:/db/index/tables]]","tags":"INDEX","title":"ASLSJ Dictionary","modified":"20221120210658373"},
{"created":"20220531011029053","text":"","title":"INDEX","modified":"20220531011132629","tags":"$:/positivesigner/tag/startup"},
{"created":"20221107073942324","text":"\u003C\u003Cdb_ask_img_suffix>>\n\n\u003C$list variable=cur_word filter=\"[prefix[$:/db/word/]]\">\n\n\u003C$macrocall $name=db_word_image ur_word=\u003C\u003Ccur_word>> />\n\u003C/$list>\n\n","tags":"DOC","title":"Word Gloss","modified":"20221124082924066"}
]</script><div id="storeArea" style="display:none;"></div>
<!--~~ Library modules ~~-->
<div id="libraryModules" style="display:none;">
<script data-tiddler-library="yes" data-tiddler-title="$:/library/sjcl.js" data-tiddler-type="application/javascript" type="text/javascript">"use strict";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};
sjcl.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl.exception.invalid("invalid aes key size");this.b=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d[a]=d[a-b]^c}for(b=0;a;b++,a--)c=d[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&
255]]};
sjcl.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d=b[4],e,f,g,h=[],k=[],l,n,m,p;for(e=0;0x100>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d[m]=f,n=h[e=h[l=h[f]]],p=0x1010101*n^0x10001*e^0x101*l^0x1010100*f,n=0x101*h[m]^0x1010100*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8;for(e=
0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};
function t(a,b,c){if(4!==b.length)throw new sjcl.exception.invalid("invalid aes block size");var d=a.b[c],e=b[0]^d[0],f=b[c?3:1]^d[1],g=b[2]^d[2];b=b[c?1:3]^d[3];var h,k,l,n=d.length/4-2,m,p=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v=h[2],w=h[3],x=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v[g>>8&255]^w[b&255]^d[p],k=a[f>>>24]^q[g>>16&255]^v[b>>8&255]^w[e&255]^d[p+1],l=a[g>>>24]^q[b>>16&255]^v[e>>8&255]^w[f&255]^d[p+2],b=a[b>>>24]^q[e>>16&255]^v[f>>8&255]^w[g&255]^d[p+3],p+=4,e=h,f=k,g=l;for(m=
0;4>m;m++)r[c?3&-m:m]=x[e>>>24]<<24^x[f>>16&255]<<16^x[g>>8&255]<<8^x[b&255]^d[p++],h=e,e=f,f=g,g=b,b=h;return r}
sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return 32===d?a.concat(b):sjcl.bitArray.$(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===
b?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+0x10000000000*a},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return!1;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return 0===
c},$:function(a,b,c,d){var e;e=0;for(void 0===d&&(d=[]);32<=b;b-=32)d.push(c),c=0;if(0===b)return d.concat(a);for(e=0;e<a.length;e++)d.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d.pop(),1));return d},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&0xff00|(c&0xff00)<<8|c<<24;return a}};
sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++)0===(d&3)&&(e=a[d/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++)d=d<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d),d=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};
sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\s|0x/g,"");d=a.length;a=a+"00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d)}};
sjcl.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f="",g=0,h=sjcl.codec.base32.B,k=0,l=sjcl.bitArray.bitLength(a);c&&(h=sjcl.codec.base32.X);for(c=0;f.length*d<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d?(k=a[c]<<d-g,g+=e,c++):(k<<=d,g-=d);for(;f.length&7&&!b;)f+="=";return f},toBits:function(a,b){a=a.replace(/\s|=/g,"").toUpperCase();var c=sjcl.codec.base32.BITS,
d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=[],g,h=0,k=sjcl.codec.base32.B,l=0,n,m="base32";b&&(k=sjcl.codec.base32.X,m="base32hex");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl.codec.base32hex.toBits(a)}catch(p){}throw new sjcl.exception.invalid("this isn't "+m+"!");}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d,l^=n<<c-h)}h&56&&f.push(sjcl.bitArray.partial(h&56,l,1));return f}};
sjcl.codec.base32hex={fromBits:function(a,b){return sjcl.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl.codec.base32.toBits(a,1)}};
sjcl.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d="",e=0,f=sjcl.codec.base64.B,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d.length<h;)d+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d.length&3&&!b;)d+="=";return d},toBits:function(a,b){a=a.replace(/\s|=/g,"");var c=[],d,e=0,f=sjcl.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d=0;d<a.length;d++){h=f.indexOf(a.charAt(d));
if(0>h)throw new sjcl.exception.invalid("this isn't base64!");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize()};
sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.A=sjcl.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl.bitArray.bitLength(a);if(0x1fffffffffffff<a)throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!==typeof Uint32Array){var d=new Uint32Array(c),e=0;for(b=512+b-(512+b&0x1ff);b<=a;b+=512)u(this,d.subarray(16*e,
16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&0x1ff);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/0x100000000));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a){return 0x100000000*(a-Math.floor(a))|0}for(var b=0,c=2,d,e;64>b;c++){e=!0;for(d=2;d*d<=c;d++)if(0===c%d){e=
!1;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};
function u(a,b){var c,d,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d=b[c]:(d=b[c+1&15],e=b[c+14&15],d=b[c&15]=(d>>>7^d>>>18^d>>>3^d<<25^d<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d=d+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p^r))+g[c],q=r,r=p,p=m,m=n+d|0,n=l,l=k,k=h,h=d+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p|0;f[6]=f[6]+r|0;f[7]=
f[7]+q|0}
sjcl.mode.ccm={name:"ccm",G:[],listenProgress:function(a){sjcl.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl.mode.ccm.G.indexOf(a);-1<a&&sjcl.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d=d||[];if(7>k)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,
8*(15-f));b=sjcl.mode.ccm.V(a,b,c,d,e,f);g=sjcl.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl.mode.ccm.C(a,k,c,l,e,b);a=sjcl.mode.ccm.V(a,k.data,c,d,e,b);if(!f.equal(k.tag,a))throw new sjcl.exception.corrupt("ccm: tag doesn't match");
return k.data},na:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,k=h.i;d=[h.partial(8,(b.length?64:0)|d-2<<2|f-1)];d=h.concat(d,c);d[3]|=e;d=a.encrypt(d);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:0xffffffff>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d=a.encrypt(k(d,g.slice(b,b+4).concat([0,0,0])));return d},V:function(a,b,c,d,e,f){var g=sjcl.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl.exception.invalid("ccm: invalid tag length");
if(0xffffffff<d.length||0xffffffff<b.length)throw new sjcl.exception.bug("ccm: can't deal with 4GiB or more data");c=sjcl.mode.ccm.na(a,d,c,e,g.bitLength(b)/8,f);for(d=0;d<b.length;d+=4)c=a.encrypt(h(c,b.slice(d,d+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!k)return{tag:d,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl.mode.ccm.fa(g/
k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d,data:h.clamp(b,l)}}};
sjcl.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");var g,h=sjcl.mode.ocb2.S,k=sjcl.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p=p.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));
d.length&&(n=l(n,f?d:sjcl.mode.ocb2.pmac(a,d)));return p.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");e=e||64;var g=sjcl.mode.ocb2.S,h=sjcl.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p,r=sjcl.bitArray.bitLength(b)-e,q=[];d=d||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p=r-32*c;m=a.encrypt(k(n,[0,0,0,p]));m=k(m,h.clamp(b.slice(c),p).concat([0,
0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d.length&&(l=k(l,f?d:sjcl.mode.ocb2.pmac(a,d)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl.exception.corrupt("ocb: tag doesn't match");return q.concat(h.clamp(m,p))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.S,e=sjcl.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4)h=d(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);
return a.encrypt(f(d(f(h,d(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};
sjcl.mode.gcm={name:"gcm",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;d=d||[];a=sjcl.mode.gcm.C(!0,a,f,d,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.C(!1,a,f,d,c,e);if(!g.equal(a.tag,b))throw new sjcl.exception.corrupt("gcm: tag doesn't match");return a.data},ka:function(a,b){var c,d,e,f,g,h=sjcl.bitArray.i;e=[0,0,
0,0];f=b.slice(0);for(c=0;128>c;c++){(d=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d=3;0<d;d--)f[d]=f[d]>>>1|(f[d-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-0x1f000000)}return e},j:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4)b[0]^=0xffffffff&c[d],b[1]^=0xffffffff&c[d+1],b[2]^=0xffffffff&c[d+2],b[3]^=0xffffffff&c[d+3],b=sjcl.mode.gcm.ka(b,a);return b},C:function(a,b,c,d,e,f){var g,h,k,l,n,m,p,r,q=sjcl.bitArray;m=c.length;p=q.bitLength(c);r=q.bitLength(d);h=q.bitLength(e);
g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl.mode.gcm.j(g,[0,0,0,0],e),e=sjcl.mode.gcm.j(g,e,[0,0,Math.floor(h/0x100000000),h&0xffffffff]));h=sjcl.mode.gcm.j(g,[0,0,0,0],d);n=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p);a&&(d=sjcl.mode.gcm.j(g,h,c));a=[Math.floor(r/0x100000000),r&0xffffffff,Math.floor(p/0x100000000),p&0xffffffff];d=sjcl.mode.gcm.j(g,d,a);k=b.encrypt(e);
d[0]^=k[0];d[1]^=k[1];d[2]^=k[2];d[3]^=k[3];return{tag:q.bitSlice(d,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.W=b=b||sjcl.hash.sha256;var c=[[],[]],d,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d=0;d<e;d++)c[0][d]=a[d]^909522486,c[1][d]=a[d]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};
sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl.exception.invalid("encrypt on already updated hmac called!");this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=!1};sjcl.misc.hmac.prototype.update=function(a){this.aa=!0;this.R.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=(new this.W(this.w[1])).update(a).finalize();this.reset();return a};
sjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1E4;if(0>d||0>c)throw new sjcl.exception.invalid("invalid params to pbkdf2");"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl.bitArray;for(k=1;32*l.length<(d||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d&&(l=n.clamp(l,d));return l};
sjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=!1;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=0x10000;this.T=[0,48,64,96,128,192,0x100,384,512,768,1024];this.da=3E4;this.ba=80};
sjcl.prng.prototype={randomWords:function(a,b){var c=[],d;d=this.isReady(b);var e;if(d===this.u)throw new sjcl.exception.notReady("generator isn't seeded");if(d&this.J){d=!(d&this.I);e=[];var f=0,g;this.Z=e[0]=(new Date).valueOf()+this.da;for(g=0;16>g;g++)e.push(0x100000000*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=
f);this.P++;this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.L=new sjcl.cipher.aes(this.b);for(d=0;4>d&&(this.h[d]=this.h[d]+1|0,!this.h[d]);d++);}for(d=0;d<a;d+=4)0===(d+1)%this.ca&&y(this),e=z(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b)throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=a},addEntropy:function(a,
b,c){c=c||"user";var d,e,f=(new Date).valueOf(),g=this.H[c],h=this.isReady(),k=0;d=this.U[c];void 0===d&&(d=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case "number":void 0===b&&(b=1);this.c[g].update([d,this.N++,1,b,f,1,a|0]);break;case "object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for("[object Array]"!==c&&(k=1),c=0;c<a.length&&!k;c++)"number"!==typeof a[c]&&
(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d,this.N++,2,b,f,a.length].concat(a))}break;case "string":void 0===b&&(b=a.length);this.c[g].update([d,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A("seeded",Math.max(this.o,this.f)),A("progress",this.getProgress()))},
isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&(new Date).valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener("load",
this.a.loadTimeCollector,!1),window.addEventListener("mousemove",this.a.mouseCollector,!1),window.addEventListener("keypress",this.a.keyboardCollector,!1),window.addEventListener("devicemotion",this.a.accelerometerCollector,!1),window.addEventListener("touchmove",this.a.touchCollector,!1);else if(document.attachEvent)document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector);else throw new sjcl.exception.bug("can't attach event");
this.D=!0}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,!1),window.removeEventListener("mousemove",this.a.mouseCollector,!1),window.removeEventListener("keypress",this.a.keyboardCollector,!1),window.removeEventListener("devicemotion",this.a.accelerometerCollector,!1),window.removeEventListener("touchmove",this.a.touchCollector,!1)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",
this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=!1)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d,e=this.K[a],f=[];for(d in e)e.hasOwnProperty(d)&&e[d]===b&&f.push(d);for(c=0;c<f.length;c++)d=f[c],delete e[d]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,"mouse");C(this,0)},qa:function(a){a=
a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,"touch");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&this.addEntropy(b,1,"accelerometer")}a&&this.addEntropy(a,2,"accelerometer");C(this,0)}};
function A(a,b){var c,d=sjcl.random.K[a],e=[];for(c in d)d.hasOwnProperty(c)&&e.push(d[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,"loadtime"):a.addEntropy((new Date).valueOf(),b,"loadtime")}function y(a){a.b=z(a).concat(z(a));a.L=new sjcl.cipher.aes(a.b)}function z(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}
function B(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);
a:try{var D,E,F,G;if(G="undefined"!==typeof module&&module.exports){var H;try{H=require("crypto")}catch(a){H=null}G=E=H}if(G&&E.randomBytes)D=E.randomBytes(128),D=new Uint32Array((new Uint8Array(D)).buffer),sjcl.random.addEntropy(D,1024,"crypto['randomBytes']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){F=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F);
else break a;sjcl.random.addEntropy(F,1024,"crypto['getRandomValues']")}}catch(a){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(a))}
sjcl.json={defaults:{v:1,iter:1E4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.g({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&0x100!==f.ks||2>f.iv.length||
4<f.iv.length)throw new sjcl.exception.invalid("json encrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.g(d,f);d.key=a;f.ct="ccm"===f.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&
b instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d){var e=sjcl.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.g(e.g(e.g({},e.defaults),b),c,!0);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||"string"===
typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&0x100!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl.exception.invalid("json decrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f="ccm"===
b.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d,b);d.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d){var e=sjcl.json;return e.ia(a,e.decode(b),c,d)},encode:function(a){var b,c="{",d="";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid("json encode: invalid property name");c+=d+'"'+
b+'":';d=",";switch(typeof a[b]){case "number":case "boolean":c+=a[b];break;case "string":c+='"'+escape(a[b])+'"';break;case "object":c+='"'+sjcl.codec.base64.fromBits(a[b],0)+'"';break;default:throw new sjcl.exception.bug("json encode: unsupported type");}}return c+"}"},decode:function(a){a=a.replace(/\s/g,"");if(!a.match(/^\{.*\}$/))throw new sjcl.exception.invalid("json decode: this isn't json!");a=a.replace(/^\{|\}$/g,"").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i)))throw new sjcl.exception.invalid("json decode: this isn't json!");
null!=d[3]?b[d[2]]=parseInt(d[3],10):null!=d[4]?b[d[2]]=d[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]):null!=d[5]&&(b[d[2]]="true"===d[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d in b)if(b.hasOwnProperty(d)){if(c&&void 0!==a[d]&&a[d]!==b[d])throw new sjcl.exception.invalid("required parameter overridden");a[d]=b[d]}return a},sa:function(a,b){var c={},d;for(d in a)a.hasOwnProperty(d)&&a[d]!==b[d]&&(c[d]=a[d]);return c},ra:function(a,
b){var c={},d;for(d=0;d<b.length;d++)void 0!==a[b[d]]&&(c[b[d]]=a[b[d]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.pa={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.pa,d;b=b||{};d=b.iter||1E3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=void 0===b.salt?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};
"undefined"!==typeof module&&module.exports&&(module.exports=sjcl);"function"===typeof define&&define([],function(){return sjcl});
</script>
</div>
<!--~~ Boot kernel prologue ~~-->
<div id="bootKernelPrefix" style="display:none;">
<script data-tiddler-title="$:/boot/bootprefix.js" data-tiddler-type="application/javascript" type="text/javascript">/*\
title: $:/boot/bootprefix.js
type: application/javascript

This file sets up the globals that need to be available when JavaScript modules are executed in the browser. The overall sequence is:

# BootPrefix.js
# <module definitions>
# Boot.js

See Boot.js for further details of the boot process.

\*/

var _bootprefix = (function($tw) {

"use strict";

$tw = $tw || Object.create(null);
$tw.boot = $tw.boot || Object.create(null);

// Detect platforms
if(!("browser" in $tw)) {
	$tw.browser = typeof(window) !== "undefined" ? {} : null;
}
if(!("node" in $tw)) {
	$tw.node = typeof(process) === "object" ? {} : null;
}
if(!("nodeWebKit" in $tw)) {
	$tw.nodeWebKit = $tw.node && global.window && global.window.nwDispatcher ? {} : null;
}

// Set default boot tasks
$tw.boot.tasks = {
	trapErrors: !!($tw.browser && !$tw.node),
	readBrowserTiddlers: !!($tw.browser && !$tw.node)
};

/*
Information about each module is kept in an object with these members:
	moduleType: type of module
	definition: object, function or string defining the module; see below
	exports: exports of the module, filled in after execution

The `definition` can be of several types:

* An object can be used to directly specify the exports of the module
* A function with the arguments `module,require,exports` that returns `exports`
* A string function body with the same arguments

Each moduleInfo object is stored in two hashmaps: $tw.modules.titles and $tw.modules.types. The first is indexed by title and the second is indexed by type and then title
*/
$tw.modules = {
	titles: {}, // hashmap by module name of moduleInfo
	types: {} // hashmap by module type and then name of moduleInfo
};

/*
Define a JavaScript tiddler module for later execution
	moduleName: name of module being defined
	moduleType: type of module
	definition: module definition; see discussion above
*/
$tw.modules.define = function(moduleName,moduleType,definition) {
	// Create the moduleInfo
	var moduleInfo = {
		moduleType: moduleType,
		definition: definition,
		exports: undefined
	};
	// If the definition is already an object we can use it as the exports
	if(typeof moduleInfo.definition === "object") {
		moduleInfo.exports = definition;
	}
	// Store the module in the titles hashmap
	if(Object.prototype.hasOwnProperty.call($tw.modules.titles,moduleName)) {
		console.log("Warning: Redefined module - " + moduleName);
	}
	$tw.modules.titles[moduleName] = moduleInfo;
	// Store the module in the types hashmap
	if(!Object.prototype.hasOwnProperty.call($tw.modules.types,moduleType)) {
		$tw.modules.types[moduleType] = {};
	}
	if(Object.prototype.hasOwnProperty.call($tw.modules.types[moduleType],moduleName)) {
		console.log("Warning: Redefined module - " + moduleName);
	}
	$tw.modules.types[moduleType][moduleName] = moduleInfo;
};

/*
External JavaScript can populate this array before calling boot.js in order to preload tiddlers
*/
$tw.preloadTiddlers = $tw.preloadTiddlers || [];

/*
Convenience function for pushing a tiddler onto the preloading array
*/
$tw.preloadTiddler = function(fields) {
	$tw.preloadTiddlers.push(fields);
};

/*
Convenience function for pushing an array of tiddlers onto the preloading array
*/
$tw.preloadTiddlerArray = function(fieldsArray) {
	$tw.preloadTiddlers.push.apply($tw.preloadTiddlers,fieldsArray);
};

return $tw;

});

if(typeof(exports) === "undefined") {
	// Set up $tw global for the browser
	window.$tw = _bootprefix(window.$tw);
} else {
	// Export functionality as a module
	exports.bootprefix = _bootprefix;
}
//# sourceURL=$:/boot/bootprefix.js
</script>
</div>
<!--~~ Boot kernel ~~-->
<div id="bootKernel" style="display:none;">
<script data-tiddler-title="$:/boot/boot.js" data-tiddler-type="application/javascript" type="text/javascript">/*\
title: $:/boot/boot.js
type: application/javascript

The main boot kernel for TiddlyWiki. This single file creates a barebones TW environment that is just sufficient to bootstrap the modules containing the main logic of the application.

On the server this file is executed directly to boot TiddlyWiki. In the browser, this file is packed into a single HTML file.

\*/

var _boot = (function($tw) {

/*jslint node: true, browser: true */
/*global modules: false, $tw: false */
"use strict";

// Include bootprefix if we're not given module data
if(!$tw) {
	$tw = require("./bootprefix.js").bootprefix();
}

$tw.utils = $tw.utils || Object.create(null);

/////////////////////////// Standard node.js libraries

var fs, path, vm;
if($tw.node) {
	fs = require("fs");
	path = require("path");
	vm = require("vm");
}

/////////////////////////// Utility functions

$tw.boot.log = function(str) {
	$tw.boot.logMessages = $tw.boot.logMessages || [];
	$tw.boot.logMessages.push(str);
}

/*
Check if an object has a property
*/
$tw.utils.hop = function(object,property) {
	return object ? Object.prototype.hasOwnProperty.call(object,property) : false;
};

/*
Determine if a value is an array
*/
$tw.utils.isArray = function(value) {
	return Object.prototype.toString.call(value) == "[object Array]";
};

/*
Check if an array is equal by value and by reference.
*/
$tw.utils.isArrayEqual = function(array1,array2) {
	if(array1 === array2) {
		return true;
	}
	array1 = array1 || [];
	array2 = array2 || [];
	if(array1.length !== array2.length) {
		return false;
	}
	return array1.every(function(value,index) {
		return value === array2[index];
	});
};

/*
Add an entry to a sorted array if it doesn't already exist, while maintaining the sort order
*/
$tw.utils.insertSortedArray = function(array,value) {
	var low = 0, high = array.length - 1, mid, cmp;
	while(low <= high) {
		mid = (low + high) >> 1;
		cmp = value.localeCompare(array[mid]);
		if(cmp > 0) {
			low = mid + 1;
		} else if(cmp < 0) {
			high = mid - 1;
		} else {
			return array;
		}
	}
	array.splice(low,0,value);
	return array;
};

/*
Push entries onto an array, removing them first if they already exist in the array
	array: array to modify (assumed to be free of duplicates)
	value: a single value to push or an array of values to push
*/
$tw.utils.pushTop = function(array,value) {
	var t,p;
	if($tw.utils.isArray(value)) {
		// Remove any array entries that are duplicated in the new values
		if(value.length !== 0) {
			if(array.length !== 0) {
				if(value.length < array.length) {
					for(t=0; t<value.length; t++) {
						p = array.indexOf(value[t]);
						if(p !== -1) {
							array.splice(p,1);
						}
					}
				} else {
					for(t=array.length-1; t>=0; t--) {
						p = value.indexOf(array[t]);
						if(p !== -1) {
							array.splice(t,1);
						}
					}
				}
			}
			// Push the values on top of the main array
			array.push.apply(array,value);
		}
	} else {
		p = array.indexOf(value);
		if(p !== -1) {
			array.splice(p,1);
		}
		array.push(value);
	}
	return array;
};

/*
Determine if a value is a date
*/
$tw.utils.isDate = function(value) {
	return Object.prototype.toString.call(value) === "[object Date]";
};

/*
Iterate through all the own properties of an object or array. Callback is invoked with (element,title,object)
*/
$tw.utils.each = function(object,callback) {
	var next,f,length;
	if(object) {
		if(Object.prototype.toString.call(object) == "[object Array]") {
			for (f=0, length=object.length; f<length; f++) {
				next = callback(object[f],f,object);
				if(next === false) {
					break;
				}
		    }
		} else {
			var keys = Object.keys(object);
			for (f=0, length=keys.length; f<length; f++) {
				var key = keys[f];
				next = callback(object[key],key,object);
				if(next === false) {
					break;
				}
			}
		}
	}
};

/*
Helper for making DOM elements
tag: tag name
options: see below
Options include:
namespace: defaults to http://www.w3.org/1999/xhtml
attributes: hashmap of attribute values
style: hashmap of styles
text: text to add as a child node
children: array of further child nodes
innerHTML: optional HTML for element
class: class name(s)
document: defaults to current document
eventListeners: array of event listeners (this option won't work until $tw.utils.addEventListeners() has been loaded)
*/
$tw.utils.domMaker = function(tag,options) {
	var doc = options.document || document;
	var element = doc.createElementNS(options.namespace || "http://www.w3.org/1999/xhtml",tag);
	if(options["class"]) {
		element.className = options["class"];
	}
	if(options.text) {
		element.appendChild(doc.createTextNode(options.text));
	}
	$tw.utils.each(options.children,function(child) {
		element.appendChild(child);
	});
	if(options.innerHTML) {
		element.innerHTML = options.innerHTML;
	}
	$tw.utils.each(options.attributes,function(attribute,name) {
		element.setAttribute(name,attribute);
	});
	$tw.utils.each(options.style,function(value,name) {
		element.style[name] = value;
	});
	if(options.eventListeners) {
		$tw.utils.addEventListeners(element,options.eventListeners);
	}
	return element;
};

/*
Display an error and exit
*/
$tw.utils.error = function(err) {
	// Prepare the error message
	var errHeading = ( $tw.language == undefined ? "Internal JavaScript Error" : $tw.language.getString("InternalJavaScriptError/Title") ),
		promptMsg = ( $tw.language == undefined ? "Well, this is embarrassing. It is recommended that you restart TiddlyWiki by refreshing your browser" : $tw.language.getString("InternalJavaScriptError/Hint") );
	// Log the error to the console
	console.error($tw.node ? "\x1b[1;31m" + err + "\x1b[0m" : err);
	if($tw.browser && !$tw.node) {
		// Display an error message to the user
		var dm = $tw.utils.domMaker,
			heading = dm("h1",{text: errHeading}),
			prompt = dm("div",{text: promptMsg, "class": "tc-error-prompt"}),
			message = dm("div",{text: err, "class":"tc-error-message"}),
			button = dm("div",{children: [dm("button",{text: ( $tw.language == undefined ? "close" : $tw.language.getString("Buttons/Close/Caption") )})], "class": "tc-error-prompt"}),
			form = dm("form",{children: [heading,prompt,message,button], "class": "tc-error-form"});
		document.body.insertBefore(form,document.body.firstChild);
		form.addEventListener("submit",function(event) {
			document.body.removeChild(form);
			event.preventDefault();
			return false;
		},true);
		return null;
	} else if(!$tw.browser) {
		// Exit if we're under node.js
		process.exit(1);
	}
};

/*
Use our custom error handler if we're in the browser
*/
if($tw.boot.tasks.trapErrors) {
	window.onerror = function(errorMsg,url,lineNumber) {
		$tw.utils.error(errorMsg);
		return false;
	};
}

/*
Extend an object with the properties from a list of source objects
*/
$tw.utils.extend = function(object /*, sourceObjectList */) {
	$tw.utils.each(Array.prototype.slice.call(arguments,1),function(source) {
		if(source) {
			for (var p in source) {
				object[p] = source[p];
			}
		}
	});
	return object;
};

/*
Fill in any null or undefined properties of an object with the properties from a list of source objects. Each property that is an object is called recursively
*/
$tw.utils.deepDefaults = function(object /*, sourceObjectList */) {
	$tw.utils.each(Array.prototype.slice.call(arguments,1),function(source) {
		if(source) {
			for (var p in source) {
				if(object[p] === null || object[p] === undefined) {
					object[p] = source[p];
				}
				if(typeof object[p] === "object" && typeof source[p] === "object") {
					$tw.utils.deepDefaults(object[p],source[p]);
				}
			}
		}
	});
	return object;
};

/*
Convert a URIComponent encoded string to a string safely
*/
$tw.utils.decodeURIComponentSafe = function(s) {
	var v = s;
	try {
		v = decodeURIComponent(s);
	} catch(e) {}
	return v;
};

/*
Convert a URI encoded string to a string safely
*/
$tw.utils.decodeURISafe = function(s) {
	var v = s;
	try {
		v = decodeURI(s);
	} catch(e) {}
	return v;
};

/*
Convert "&amp;" to &, "&nbsp;" to nbsp, "&lt;" to <, "&gt;" to > and "&quot;" to "
*/
$tw.utils.htmlDecode = function(s) {
	return s.toString().replace(/&lt;/mg,"<").replace(/&nbsp;/mg,"\xA0").replace(/&gt;/mg,">").replace(/&quot;/mg,"\"").replace(/&amp;/mg,"&");
};

/*
Get the browser location.hash. We don't use location.hash because of the way that Firefox auto-urldecodes it (see http://stackoverflow.com/questions/1703552/encoding-of-window-location-hash)
*/
$tw.utils.getLocationHash = function() {
	var href = window.location.href;
	var idx = href.indexOf('#');
	if(idx === -1) {
		return "#";
	} else if(idx < href.length-1 && href[idx+1] === '#') {
		// Special case: ignore location hash if it itself starts with a #
		return "#";
	} else {
		return href.substring(idx);
	}
};

/*
Pad a string to a given length with "0"s. Length defaults to 2
*/
$tw.utils.pad = function(value,length) {
	length = length || 2;
	var s = value.toString();
	if(s.length < length) {
		s = "000000000000000000000000000".substr(0,length - s.length) + s;
	}
	return s;
};

// Convert a date into UTC YYYYMMDDHHMMSSmmm format
$tw.utils.stringifyDate = function(value) {
	return value.getUTCFullYear() +
			$tw.utils.pad(value.getUTCMonth() + 1) +
			$tw.utils.pad(value.getUTCDate()) +
			$tw.utils.pad(value.getUTCHours()) +
			$tw.utils.pad(value.getUTCMinutes()) +
			$tw.utils.pad(value.getUTCSeconds()) +
			$tw.utils.pad(value.getUTCMilliseconds(),3);
};

// Parse a date from a UTC YYYYMMDDHHMMSSmmm format string
$tw.utils.parseDate = function(value) {
	if(typeof value === "string") {
		var negative = 1;
		if(value.charAt(0) === "-") {
			negative = -1;
			value = value.substr(1);
		}
		var year = parseInt(value.substr(0,4),10) * negative,
			d = new Date(Date.UTC(year,
				parseInt(value.substr(4,2),10)-1,
				parseInt(value.substr(6,2),10),
				parseInt(value.substr(8,2)||"00",10),
				parseInt(value.substr(10,2)||"00",10),
				parseInt(value.substr(12,2)||"00",10),
				parseInt(value.substr(14,3)||"000",10)));
		  d.setUTCFullYear(year); // See https://stackoverflow.com/a/5870822
		  return d;
	} else if($tw.utils.isDate(value)) {
		return value;
	} else {
		return null;
	}
};

// Stringify an array of tiddler titles into a list string
$tw.utils.stringifyList = function(value) {
	if($tw.utils.isArray(value)) {
		var result = new Array(value.length);
		for(var t=0, l=value.length; t<l; t++) {
			var entry = value[t] || "";
			if(entry.indexOf(" ") !== -1) {
				result[t] = "[[" + entry + "]]";
			} else {
				result[t] = entry;
			}
		}
		return result.join(" ");
	} else {
		return value || "";
	}
};

// Parse a string array from a bracketted list. For example "OneTiddler [[Another Tiddler]] LastOne"
$tw.utils.parseStringArray = function(value, allowDuplicate) {
	if(typeof value === "string") {
		var memberRegExp = /(?:^|[^\S\xA0])(?:\[\[(.*?)\]\])(?=[^\S\xA0]|$)|([\S\xA0]+)/mg,
			results = [], names = {},
			match;
		do {
			match = memberRegExp.exec(value);
			if(match) {
				var item = match[1] || match[2];
				if(item !== undefined && (!$tw.utils.hop(names,item) || allowDuplicate)) {
					results.push(item);
					names[item] = true;
				}
			}
		} while(match);
		return results;
	} else if($tw.utils.isArray(value)) {
		return value;
	} else {
		return null;
	}
};

// Parse a block of name:value fields. The `fields` object is used as the basis for the return value
$tw.utils.parseFields = function(text,fields) {
	fields = fields || Object.create(null);
	text.split(/\r?\n/mg).forEach(function(line) {
		if(line.charAt(0) !== "#") {
			var p = line.indexOf(":");
			if(p !== -1) {
				var field = line.substr(0, p).trim(),
					value = line.substr(p+1).trim();
				if(field) {
					fields[field] = value;
				}
			}
		}
	});
	return fields;
};

// Safely parse a string as JSON
$tw.utils.parseJSONSafe = function(text,defaultJSON) {
	try {
		return JSON.parse(text);
	} catch(e) {
		if(typeof defaultJSON === "function") {
			return defaultJSON(e);
		} else {
			return defaultJSON || {};
		}
	}
};

/*
Resolves a source filepath delimited with `/` relative to a specified absolute root filepath.
In relative paths, the special folder name `..` refers to immediate parent directory, and the
name `.` refers to the current directory
*/
$tw.utils.resolvePath = function(sourcepath,rootpath) {
	// If the source path starts with ./ or ../ then it is relative to the root
	if(sourcepath.substr(0,2) === "./" || sourcepath.substr(0,3) === "../" ) {
		var src = sourcepath.split("/"),
			root = rootpath.split("/");
		// Remove the filename part of the root
		root.splice(root.length-1,1);
		// Process the source path bit by bit onto the end of the root path
		while(src.length > 0) {
			var c = src.shift();
			if(c === "..") { // Slice off the last root entry for a double dot
				if(root.length > 0) {
					root.splice(root.length-1,1);
				}
			} else if(c !== ".") { // Ignore dots
				root.push(c); // Copy other elements across
			}
		}
		return root.join("/");
	} else {
		// If it isn't relative, just return the path
		if(rootpath) {
			var root = rootpath.split("/");
			// Remove the filename part of the root
			root.splice(root.length - 1, 1);
			return root.join("/") + "/" + sourcepath;
		} else {
			return sourcepath;
		}
	}
};

/*
Parse a semantic version string into its constituent parts -- see https://semver.org
*/
$tw.utils.parseVersion = function(version) {
	var match = /^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$/.exec(version);
	if(match) {
		return {
			version: match[1],
			major: parseInt(match[2],10),
			minor: parseInt(match[3],10),
			patch: parseInt(match[4],10),
			prerelease: match[5],
			build: match[6]
		};
	} else {
		return null;
	}
};

/*
Returns +1 if the version string A is greater than the version string B, 0 if they are the same, and +1 if B is greater than A.
Missing or malformed version strings are parsed as 0.0.0
*/
$tw.utils.compareVersions = function(versionStringA,versionStringB) {
	var defaultVersion = {
			major: 0,
			minor: 0,
			patch: 0
		},
		versionA = $tw.utils.parseVersion(versionStringA) || defaultVersion,
		versionB = $tw.utils.parseVersion(versionStringB) || defaultVersion,
		diff = [
			versionA.major - versionB.major,
			versionA.minor - versionB.minor,
			versionA.patch - versionB.patch
		];
	if((diff[0] > 0) || (diff[0] === 0 && diff[1] > 0) || (diff[0] === 0 & diff[1] === 0 & diff[2] > 0)) {
		return +1;
	} else if((diff[0] < 0) || (diff[0] === 0 && diff[1] < 0) || (diff[0] === 0 & diff[1] === 0 & diff[2] < 0)) {
		return -1;
	} else {
		return 0;
	}
};

/*
Returns true if the version string A is greater than the version string B. Returns true if the versions are the same
*/
$tw.utils.checkVersions = function(versionStringA,versionStringB) {
	return $tw.utils.compareVersions(versionStringA,versionStringB) !== -1;
};

/*
Register file type information
options: {flags: flags,deserializerType: deserializerType}
	flags:"image" for image types
	deserializerType: defaults to type if not specified
*/
$tw.utils.registerFileType = function(type,encoding,extension,options) {
	options = options || {};
	if($tw.utils.isArray(extension)) {
		$tw.utils.each(extension,function(extension) {
			$tw.config.fileExtensionInfo[extension] = {type: type};
		});
		extension = extension[0];
	} else {
		$tw.config.fileExtensionInfo[extension] = {type: type};
	}
	$tw.config.contentTypeInfo[type] = {encoding: encoding, extension: extension, flags: options.flags || [], deserializerType: options.deserializerType || type};
};

/*
Given an extension, always access the $tw.config.fileExtensionInfo
using a lowercase extension only.
*/
$tw.utils.getFileExtensionInfo = function(ext) {
	return ext ? $tw.config.fileExtensionInfo[ext.toLowerCase()] : null;
}

/*
Given an extension, get the correct encoding for that file.
defaults to utf8
*/
$tw.utils.getTypeEncoding = function(ext) {
	var extensionInfo = $tw.utils.getFileExtensionInfo(ext),
		type = extensionInfo ? extensionInfo.type : null,
		typeInfo = type ? $tw.config.contentTypeInfo[type] : null;
	return typeInfo ? typeInfo.encoding : "utf8";
};

/*
Run code globally with specified context variables in scope
*/
$tw.utils.evalGlobal = function(code,context,filename) {
	var contextCopy = $tw.utils.extend(Object.create(null),context);
	// Get the context variables as a pair of arrays of names and values
	var contextNames = [], contextValues = [];
	$tw.utils.each(contextCopy,function(value,name) {
		contextNames.push(name);
		contextValues.push(value);
	});
	// Add the code prologue and epilogue
	code = "(function(" + contextNames.join(",") + ") {(function(){\n" + code + "\n;})();\nreturn exports;\n})\n";
	// Compile the code into a function
	var fn;
	if($tw.browser) {
		fn = window["eval"](code + "\n\n//# sourceURL=" + filename);
	} else {
		fn = vm.runInThisContext(code,filename);
	}
	// Call the function and return the exports
	return fn.apply(null,contextValues);
};

/*
Run code in a sandbox with only the specified context variables in scope
*/
$tw.utils.evalSandboxed = $tw.browser ? $tw.utils.evalGlobal : function(code,context,filename) {
	var sandbox = $tw.utils.extend(Object.create(null),context);
	vm.runInNewContext(code,sandbox,filename);
	return sandbox.exports;
};

/*
Creates a PasswordPrompt object
*/
$tw.utils.PasswordPrompt = function() {
	// Store of pending password prompts
	this.passwordPrompts = [];
	// Create the wrapper
	this.promptWrapper = $tw.utils.domMaker("div",{"class":"tc-password-wrapper"});
	document.body.appendChild(this.promptWrapper);
	// Hide the empty wrapper
	this.setWrapperDisplay();
};

/*
Hides or shows the wrapper depending on whether there are any outstanding prompts
*/
$tw.utils.PasswordPrompt.prototype.setWrapperDisplay = function() {
	if(this.passwordPrompts.length) {
		this.promptWrapper.style.display = "block";
	} else {
		this.promptWrapper.style.display = "none";
	}
};

/*
Adds a new password prompt. Options are:
submitText: text to use for submit button (defaults to "Login")
serviceName: text of the human readable service name
noUserName: set true to disable username prompt
canCancel: set true to enable a cancel button (callback called with null)
repeatPassword: set true to prompt for the password twice
callback: function to be called on submission with parameter of object {username:,password:}. Callback must return `true` to remove the password prompt
*/
$tw.utils.PasswordPrompt.prototype.createPrompt = function(options) {
	// Create and add the prompt to the DOM
	var self = this,
		submitText = options.submitText || "Login",
		dm = $tw.utils.domMaker,
		children = [dm("h1",{text: options.serviceName})];
	if(!options.noUserName) {
		children.push(dm("input",{
			attributes: {type: "text", name: "username", placeholder: $tw.language.getString("Encryption/Username")}
		}));
	}
	children.push(dm("input",{
		attributes: {
			type: "password",
			name: "password",
			placeholder: ( $tw.language == undefined ? "Password" : $tw.language.getString("Encryption/Password") )
		}
	}));
	if(options.repeatPassword) {
		children.push(dm("input",{
			attributes: {
				type: "password",
				name: "password2",
				placeholder: $tw.language.getString("Encryption/RepeatPassword")
			}
		}));
	}
	if(options.canCancel) {
		children.push(dm("button",{
			text: $tw.language.getString("Encryption/Cancel"),
			attributes: {
				type: "button"
			},
			eventListeners: [{
					name: "click",
					handlerFunction: function(event) {
						self.removePrompt(promptInfo);
						options.callback(null);
					}
				}]
		}));
	}
	children.push(dm("button",{
		attributes: {type: "submit"},
		text: submitText
	}));
	var form = dm("form",{
		attributes: {autocomplete: "off"},
		children: children
	});
	this.promptWrapper.appendChild(form);
	window.setTimeout(function() {
		form.elements[0].focus();
	},10);
	// Add a submit event handler
	var self = this;
	form.addEventListener("submit",function(event) {
		// Collect the form data
		var data = {},t;
		$tw.utils.each(form.elements,function(element) {
			if(element.name && element.value) {
				data[element.name] = element.value;
			}
		});
		// Check that the passwords match
		if(options.repeatPassword && data.password !== data.password2) {
			alert($tw.language.getString("Encryption/PasswordNoMatch"));
		} else {
			// Call the callback
			if(options.callback(data)) {
				// Remove the prompt if the callback returned true
				self.removePrompt(promptInfo);
			} else {
				// Clear the password if the callback returned false
				$tw.utils.each(form.elements,function(element) {
					if(element.name === "password" || element.name === "password2") {
						element.value = "";
					}
				});
			}
		}
		event.preventDefault();
		return false;
	},true);
	// Add the prompt to the list
	var promptInfo = {
		serviceName: options.serviceName,
		callback: options.callback,
		form: form,
		owner: this
	};
	this.passwordPrompts.push(promptInfo);
	// Make sure the wrapper is displayed
	this.setWrapperDisplay();
	return promptInfo;
};

$tw.utils.PasswordPrompt.prototype.removePrompt = function(promptInfo) {
	var i = this.passwordPrompts.indexOf(promptInfo);
	if(i !== -1) {
		this.passwordPrompts.splice(i,1);
		promptInfo.form.parentNode.removeChild(promptInfo.form);
		this.setWrapperDisplay();
	}
}

/*
Crypto helper object for encrypted content. It maintains the password text in a closure, and provides methods to change
the password, and to encrypt/decrypt a block of text
*/
$tw.utils.Crypto = function() {
	var sjcl = $tw.node ? (global.sjcl || require("./sjcl.js")) : window.sjcl,
		currentPassword = null,
		callSjcl = function(method,inputText,password) {
			password = password || currentPassword;
			var outputText;
			try {
				if(password) {
					outputText = sjcl[method](password,inputText);
				}
			} catch(ex) {
				console.log("Crypto error:" + ex);
				outputText = null;
			}
			return outputText;
		};
	this.setPassword = function(newPassword) {
		currentPassword = newPassword;
		this.updateCryptoStateTiddler();
	};
	this.updateCryptoStateTiddler = function() {
		if($tw.wiki) {
			var state = currentPassword ? "yes" : "no",
				tiddler = $tw.wiki.getTiddler("$:/isEncrypted");
			if(!tiddler || tiddler.fields.text !== state) {
				$tw.wiki.addTiddler(new $tw.Tiddler({title: "$:/isEncrypted", text: state}));
			}
		}
	};
	this.hasPassword = function() {
		return !!currentPassword;
	}
	this.encrypt = function(text,password) {
		return callSjcl("encrypt",text,password);
	};
	this.decrypt = function(text,password) {
		return callSjcl("decrypt",text,password);
	};
};

/////////////////////////// Module mechanism

/*
Execute the module named 'moduleName'. The name can optionally be relative to the module named 'moduleRoot'
*/
$tw.modules.execute = function(moduleName,moduleRoot) {
	var name = moduleName;
	if(moduleName.charAt(0) === ".") {
		name = $tw.utils.resolvePath(moduleName,moduleRoot)
	}
	if(!$tw.modules.titles[name]) {
		if($tw.modules.titles[name + ".js"]) {
			name = name + ".js";
		} else if($tw.modules.titles[name + "/index.js"]) {
			name = name + "/index.js";
		} else if($tw.modules.titles[moduleName]) {
			name = moduleName;
		} else if($tw.modules.titles[moduleName + ".js"]) {
			name = moduleName + ".js";
		} else if($tw.modules.titles[moduleName + "/index.js"]) {
			name = moduleName + "/index.js";
		}
	}
	var moduleInfo = $tw.modules.titles[name],
		tiddler = $tw.wiki.getTiddler(name),
		_exports = {},
		sandbox = {
			module: {exports: _exports},
			//moduleInfo: moduleInfo,
			exports: _exports,
			console: console,
			setInterval: setInterval,
			clearInterval: clearInterval,
			setTimeout: setTimeout,
			clearTimeout: clearTimeout,
			Buffer: $tw.browser ? undefined : Buffer,
			$tw: $tw,
			require: function(title) {
				return $tw.modules.execute(title, name);
			}
		};

	Object.defineProperty(sandbox.module, "id", {
		value: name,
		writable: false,
		enumerable: true,
		configurable: false
	});

	if(!$tw.browser) {
		$tw.utils.extend(sandbox,{
			process: process
		});
	} else {
		/*
		CommonJS optional require.main property:
		 In a browser we offer a fake main module which points back to the boot function
		 (Theoretically, this may allow TW to eventually load itself as a module in the browser)
		*/
		Object.defineProperty(sandbox.require, "main", {
			value: (typeof(require) !== "undefined") ? require.main : {TiddlyWiki: _boot},
			writable: false,
			enumerable: true,
			configurable: false
		});
	}
	if(!moduleInfo) {
		// We could not find the module on this path
		// Try to defer to browserify etc, or node
		var deferredModule;
		if($tw.browser) {
			if(window.require) {
				try {
					return window.require(moduleName);
				} catch(e) {}
			}
			throw "Cannot find module named '" + moduleName + "' required by module '" + moduleRoot + "', resolved to " + name;
		} else {
			// If we don't have a module with that name, let node.js try to find it
			return require(moduleName);
		}
	}
	// Execute the module if we haven't already done so
	if(!moduleInfo.exports) {
		try {
			// Check the type of the definition
			if(typeof moduleInfo.definition === "function") { // Function
				moduleInfo.exports = _exports;
				moduleInfo.definition(moduleInfo,moduleInfo.exports,sandbox.require);
			} else if(typeof moduleInfo.definition === "string") { // String
				moduleInfo.exports = _exports;
				$tw.utils.evalSandboxed(moduleInfo.definition,sandbox,tiddler.fields.title);
				if(sandbox.module.exports) {
					moduleInfo.exports = sandbox.module.exports; //more codemirror workaround
				}
			} else { // Object
				moduleInfo.exports = moduleInfo.definition;
			}
		} catch(e) {
			if (e instanceof SyntaxError) {
				var line = e.lineNumber || e.line; // Firefox || Safari
				if (typeof(line) != "undefined" && line !== null) {
					$tw.utils.error("Syntax error in boot module " + name + ":" + line + ":\n" + e.stack);
				} else if(!$tw.browser) {
					// this is the only way to get node.js to display the line at which the syntax error appeared,
					// and $tw.utils.error would exit anyway
					// cf. https://bugs.chromium.org/p/v8/issues/detail?id=2589
					throw e;
				} else {
					// Opera: line number is included in e.message
					// Chrome/IE: there's currently no way to get the line number
					$tw.utils.error("Syntax error in boot module " + name + ": " + e.message + "\n" + e.stack);
				}
			} else {
				// line number should be included in e.stack for runtime errors
				$tw.utils.error("Error executing boot module " + name + ": " + JSON.stringify(e) + "\n\n" + e.stack);
			}
		}
	}
	// Return the exports of the module
	return moduleInfo.exports;
};

/*
Apply a callback to each module of a particular type
	moduleType: type of modules to enumerate
	callback: function called as callback(title,moduleExports) for each module
*/
$tw.modules.forEachModuleOfType = function(moduleType,callback) {
	var modules = $tw.modules.types[moduleType];
	$tw.utils.each(modules,function(element,title) {
		callback(title,$tw.modules.execute(title));
	});
};

/*
Get all the modules of a particular type in a hashmap by their `name` field
*/
$tw.modules.getModulesByTypeAsHashmap = function(moduleType,nameField) {
	nameField = nameField || "name";
	var results = Object.create(null);
	$tw.modules.forEachModuleOfType(moduleType,function(title,module) {
		results[module[nameField]] = module;
	});
	return results;
};

/*
Apply the exports of the modules of a particular type to a target object
*/
$tw.modules.applyMethods = function(moduleType,targetObject) {
	if(!targetObject) {
		targetObject = Object.create(null);
	}
	$tw.modules.forEachModuleOfType(moduleType,function(title,module) {
		$tw.utils.each(module,function(element,title,object) {
			targetObject[title] = module[title];
		});
	});
	return targetObject;
};

/*
Return a class created from a modules. The module should export the properties to be added to those of the optional base class
*/
$tw.modules.createClassFromModule = function(moduleExports,baseClass) {
	var newClass = function() {};
	if(baseClass) {
		newClass.prototype = new baseClass();
		newClass.prototype.constructor = baseClass;
	}
	$tw.utils.extend(newClass.prototype,moduleExports);
	return newClass;
};

/*
Return an array of classes created from the modules of a specified type. Each module should export the properties to be added to those of the optional base class
*/
$tw.modules.createClassesFromModules = function(moduleType,subType,baseClass) {
	var classes = Object.create(null);
	$tw.modules.forEachModuleOfType(moduleType,function(title,moduleExports) {
		if(!subType || moduleExports.types[subType]) {
			classes[moduleExports.name] = $tw.modules.createClassFromModule(moduleExports,baseClass);
		}
	});
	return classes;
};

/////////////////////////// Barebones tiddler object

/*
Construct a tiddler object from a hashmap of tiddler fields. If multiple hasmaps are provided they are merged,
taking precedence to the right
*/
$tw.Tiddler = function(/* [fields,] fields */) {
	this.fields = Object.create(null);
	this.cache = Object.create(null);
	for(var c=0; c<arguments.length; c++) {
		var arg = arguments[c],
			src = (arg instanceof $tw.Tiddler) ? arg.fields : arg;
		for(var t in src) {
			if(src[t] === undefined || src[t] === null) {
				if(t in this.fields) {
					delete this.fields[t]; // If we get a field that's undefined, delete any previous field value
				}
			} else {
				// Parse the field with the associated field module (if any)
				var fieldModule = $tw.Tiddler.fieldModules[t],
					value;
				if(fieldModule && fieldModule.parse) {
					value = fieldModule.parse.call(this,src[t]);
				} else {
					value = src[t];
				}
				// Freeze the field to keep it immutable
				if(value != null && typeof value === "object") {
					Object.freeze(value);
				}
				this.fields[t] = value;
			}
		}
	}
	// Freeze the tiddler against modification
	Object.freeze(this.fields);
	Object.freeze(this);
};

$tw.Tiddler.prototype.hasField = function(field) {
	return $tw.utils.hop(this.fields,field);
};

/*
Compare two tiddlers for equality
tiddler: the tiddler to compare
excludeFields: array of field names to exclude from the comparison
*/
$tw.Tiddler.prototype.isEqual = function(tiddler,excludeFields) {
	if(!(tiddler instanceof $tw.Tiddler)) {
		return false;
	}
	excludeFields = excludeFields || [];
	var self = this,
		differences = []; // Fields that have differences
	// Add to the differences array
	function addDifference(fieldName) {
		// Check for this field being excluded
		if(excludeFields.indexOf(fieldName) === -1) {
			// Save the field as a difference
			$tw.utils.pushTop(differences,fieldName);
		}
	}
	// Returns true if the two values of this field are equal
	function isFieldValueEqual(fieldName) {
		var valueA = self.fields[fieldName],
			valueB = tiddler.fields[fieldName];
		// Check for identical string values
		if(typeof(valueA) === "string" && typeof(valueB) === "string" && valueA === valueB) {
			return true;
		}
		// Check for identical array values
		if($tw.utils.isArray(valueA) && $tw.utils.isArray(valueB) && $tw.utils.isArrayEqual(valueA,valueB)) {
			return true;
		}
		// Check for identical date values
		if($tw.utils.isDate(valueA) && $tw.utils.isDate(valueB) && valueA.getTime() === valueB.getTime()) {
			return true;
		}
		// Otherwise the fields must be different
		return false;
	}
	// Compare our fields
	for(var fieldName in this.fields) {
		if(!isFieldValueEqual(fieldName)) {
			addDifference(fieldName);
		}
	}
	// There's a difference for every field in the other tiddler that we don't have
	for(fieldName in tiddler.fields) {
		if(!(fieldName in this.fields)) {
			addDifference(fieldName);
		}
	}
	// Return whether there were any differences
	return differences.length === 0;
};

/*
Register and install the built in tiddler field modules
*/
$tw.modules.define("$:/boot/tiddlerfields/modified","tiddlerfield",{
	name: "modified",
	parse: $tw.utils.parseDate,
	stringify: $tw.utils.stringifyDate
});
$tw.modules.define("$:/boot/tiddlerfields/created","tiddlerfield",{
	name: "created",
	parse: $tw.utils.parseDate,
	stringify: $tw.utils.stringifyDate
});
$tw.modules.define("$:/boot/tiddlerfields/color","tiddlerfield",{
	name: "color",
	editTag: "input",
	editType: "color"
});
$tw.modules.define("$:/boot/tiddlerfields/tags","tiddlerfield",{
	name: "tags",
	parse: $tw.utils.parseStringArray,
	stringify: $tw.utils.stringifyList
});
$tw.modules.define("$:/boot/tiddlerfields/list","tiddlerfield",{
	name: "list",
	parse: $tw.utils.parseStringArray,
	stringify: $tw.utils.stringifyList
});

/////////////////////////// Barebones wiki store

/*
Wiki constructor. State is stored in private members that only a small number of privileged accessor methods have direct access. Methods added via the prototype have to use these accessors and cannot access the state data directly.
options include:
enableIndexers - Array of indexer names to enable, or null to use all available indexers
*/
$tw.Wiki = function(options) {
	options = options || {};
	var self = this,
		tiddlers = Object.create(null), // Hashmap of tiddlers
		tiddlerTitles = null, // Array of tiddler titles
		getTiddlerTitles = function() {
			if(!tiddlerTitles) {
				tiddlerTitles = Object.keys(tiddlers).sort(function(a,b) {return a.localeCompare(b);});
			}
			return tiddlerTitles;
		},
		pluginTiddlers = [], // Array of tiddlers containing registered plugins, ordered by priority
		pluginInfo = Object.create(null), // Hashmap of parsed plugin content
		shadowTiddlers = Object.create(null), // Hashmap by title of {source:, tiddler:}
		shadowTiddlerTitles = null,
		getShadowTiddlerTitles = function() {
			if(!shadowTiddlerTitles) {
				shadowTiddlerTitles = Object.keys(shadowTiddlers);
			}
			return shadowTiddlerTitles;
		},
		enableIndexers = options.enableIndexers || null,
		indexers = [],
		indexersByName = Object.create(null);

	this.addIndexer = function(indexer,name) {
		// Bail if this indexer is not enabled
		if(enableIndexers && enableIndexers.indexOf(name) === -1) {
			return;
		}
		indexers.push(indexer);
		indexersByName[name] = indexer;
		indexer.init();
	};

	this.getIndexer = function(name) {
		return indexersByName[name] || null;
	};

	// Add a tiddler to the store
	this.addTiddler = function(tiddler) {
		if(!(tiddler instanceof $tw.Tiddler)) {
			tiddler = new $tw.Tiddler(tiddler);
		}
		// Save the tiddler
		if(tiddler) {
			var title = tiddler.fields.title;
			if(title) {
// Uncomment the following line for detailed logs of all tiddler writes
// console.log("Adding",title,tiddler)
				// Record the old tiddler state
				var updateDescriptor = {
					old: {
						tiddler: this.getTiddler(title),
						shadow: this.isShadowTiddler(title),
						exists: this.tiddlerExists(title)
					}
				}
				// Save the new tiddler
				tiddlers[title] = tiddler;
				// Check we've got the title
				tiddlerTitles = $tw.utils.insertSortedArray(tiddlerTitles || [],title);
				// Record the new tiddler state
				updateDescriptor["new"] = {
					tiddler: tiddler,
					shadow: this.isShadowTiddler(title),
					exists: this.tiddlerExists(title)
				}
				// Update indexes
				this.clearCache(title);
				this.clearGlobalCache();
				$tw.utils.each(indexers,function(indexer) {
					indexer.update(updateDescriptor);
				});
				// Queue a change event
				this.enqueueTiddlerEvent(title);
			}
		}
	};

	// Delete a tiddler
	this.deleteTiddler = function(title) {
// Uncomment the following line for detailed logs of all tiddler deletions
// console.log("Deleting",title)
		if($tw.utils.hop(tiddlers,title)) {
			// Record the old tiddler state
			var updateDescriptor = {
				old: {
					tiddler: this.getTiddler(title),
					shadow: this.isShadowTiddler(title),
					exists: this.tiddlerExists(title)
				}
			}
			// Delete the tiddler
			delete tiddlers[title];
			// Delete it from the list of titles
			if(tiddlerTitles) {
				var index = tiddlerTitles.indexOf(title);
				if(index !== -1) {
					tiddlerTitles.splice(index,1);
				}
			}
			// Record the new tiddler state
			updateDescriptor["new"] = {
				tiddler: this.getTiddler(title),
				shadow: this.isShadowTiddler(title),
				exists: this.tiddlerExists(title)
			}
			// Update indexes
			this.clearCache(title);
			this.clearGlobalCache();
			$tw.utils.each(indexers,function(indexer) {
				indexer.update(updateDescriptor);
			});
			// Queue a change event
			this.enqueueTiddlerEvent(title,true);
		}
	};

	// Get a tiddler from the store
	this.getTiddler = function(title) {
		if(title) {
			var t = tiddlers[title];
			if(t instanceof $tw.Tiddler) {
				return t;
			} else if(title !== undefined && shadowTiddlers[title]) {
				return shadowTiddlers[title].tiddler;
			}
			return undefined;
		}
	};

	// Get an array of all tiddler titles
	this.allTitles = function() {
		return getTiddlerTitles().slice(0);
	};

	// Iterate through all tiddler titles
	this.each = function(callback) {
		var titles = getTiddlerTitles(),
			index,titlesLength,title;
		for(index = 0, titlesLength = titles.length; index < titlesLength; index++) {
			title = titles[index];
			callback(tiddlers[title],title);
		}
	};

	// Get an array of all shadow tiddler titles
	this.allShadowTitles = function() {
		return getShadowTiddlerTitles().slice(0);
	};

	// Iterate through all shadow tiddler titles
	this.eachShadow = function(callback) {
		var titles = getShadowTiddlerTitles(),
			index,titlesLength,title;
		for(index = 0, titlesLength = titles.length; index < titlesLength; index++) {
			title = titles[index];
			if(tiddlers[title]) {
				callback(tiddlers[title],title);
			} else {
				var shadowInfo = shadowTiddlers[title];
				callback(shadowInfo.tiddler,title);
			}
		}
	};

	// Iterate through all tiddlers and then the shadows
	this.eachTiddlerPlusShadows = function(callback) {
		var index,titlesLength,title,
			titles = getTiddlerTitles();
		for(index = 0, titlesLength = titles.length; index < titlesLength; index++) {
			title = titles[index];
			callback(tiddlers[title],title);
		}
		titles = getShadowTiddlerTitles();
		for(index = 0, titlesLength = titles.length; index < titlesLength; index++) {
			title = titles[index];
			if(!tiddlers[title]) {
				var shadowInfo = shadowTiddlers[title];
				callback(shadowInfo.tiddler,title);
			}
		}
	};

	// Iterate through all the shadows and then the tiddlers
	this.eachShadowPlusTiddlers = function(callback) {
		var index,titlesLength,title,
			titles = getShadowTiddlerTitles();
		for(index = 0, titlesLength = titles.length; index < titlesLength; index++) {
			title = titles[index];
			if(tiddlers[title]) {
				callback(tiddlers[title],title);
			} else {
				var shadowInfo = shadowTiddlers[title];
				callback(shadowInfo.tiddler,title);
			}
		}
		titles = getTiddlerTitles();
		for(index = 0, titlesLength = titles.length; index < titlesLength; index++) {
			title = titles[index];
			if(!shadowTiddlers[title]) {
				callback(tiddlers[title],title);
			}
		}
	};

	// Test for the existence of a tiddler (excludes shadow tiddlers)
	this.tiddlerExists = function(title) {
		return !!$tw.utils.hop(tiddlers,title);
	};

	// Determines if a tiddler is a shadow tiddler, regardless of whether it has been overridden by a real tiddler
	this.isShadowTiddler = function(title) {
		return $tw.utils.hop(shadowTiddlers,title);
	};

	this.getShadowSource = function(title) {
		if($tw.utils.hop(shadowTiddlers,title)) {
			return shadowTiddlers[title].source;
		}
		return null;
	};

	// Get an array of all the currently recognised plugin types
	this.getPluginTypes = function() {
		var types = [];
		$tw.utils.each(pluginTiddlers,function(pluginTiddler) {
			var pluginType = pluginTiddler.fields["plugin-type"];
			if(pluginType && types.indexOf(pluginType) === -1) {
				types.push(pluginType);
			}
		});
		return types;
	};

	// Read plugin info for all plugins, or just an array of titles. Returns the number of plugins updated or deleted
	this.readPluginInfo = function(titles) {
		var results = {
			modifiedPlugins: [],
			deletedPlugins: []
		};
		$tw.utils.each(titles || getTiddlerTitles(),function(title) {
			var tiddler = tiddlers[title];
			if(tiddler) {
				if(tiddler.fields.type === "application/json" && tiddler.hasField("plugin-type") && tiddler.fields.text) {
					pluginInfo[tiddler.fields.title] = $tw.utils.parseJSONSafe(tiddler.fields.text);
					results.modifiedPlugins.push(tiddler.fields.title);
				}
			} else {
				if(pluginInfo[title]) {
					delete pluginInfo[title];
					results.deletedPlugins.push(title);
				}
			}
		});
		return results;
	};

	// Get plugin info for a plugin
	this.getPluginInfo = function(title) {
		return pluginInfo[title];
	};

	// Register the plugin tiddlers of a particular type, or null/undefined for any type, optionally restricting registration to an array of tiddler titles. Return the array of titles affected
	this.registerPluginTiddlers = function(pluginType,titles) {
		var self = this,
			registeredTitles = [],
			checkTiddler = function(tiddler,title) {
				if(tiddler && tiddler.fields.type === "application/json" && tiddler.fields["plugin-type"] && (!pluginType || tiddler.fields["plugin-type"] === pluginType)) {
					var disablingTiddler = self.getTiddler("$:/config/Plugins/Disabled/" + title);
					if(title === "$:/core" || !disablingTiddler || (disablingTiddler.fields.text || "").trim() !== "yes") {
						self.unregisterPluginTiddlers(null,[title]); // Unregister the plugin if it's already registered
						pluginTiddlers.push(tiddler);
						registeredTitles.push(tiddler.fields.title);
					}
				}
			};
		if(titles) {
			$tw.utils.each(titles,function(title) {
				checkTiddler(self.getTiddler(title),title);
			});
		} else {
			this.each(function(tiddler,title) {
				checkTiddler(tiddler,title);
			});
		}
		return registeredTitles;
	};

	// Unregister the plugin tiddlers of a particular type, or null/undefined for any type, optionally restricting unregistering to an array of tiddler titles. Returns an array of the titles affected
	this.unregisterPluginTiddlers = function(pluginType,titles) {
		var self = this,
			unregisteredTitles = [];
		// Remove any previous registered plugins of this type
		for(var t=pluginTiddlers.length-1; t>=0; t--) {
			var tiddler = pluginTiddlers[t];
			if(tiddler.fields["plugin-type"] && (!pluginType || tiddler.fields["plugin-type"] === pluginType) && (!titles || titles.indexOf(tiddler.fields.title) !== -1)) {
				unregisteredTitles.push(tiddler.fields.title);
				pluginTiddlers.splice(t,1);
			}
		}
		return unregisteredTitles;
	};

	// Unpack the currently registered plugins, creating shadow tiddlers for their constituent tiddlers
	this.unpackPluginTiddlers = function() {
		var self = this;
		// Sort the plugin titles by the `plugin-priority` field
		pluginTiddlers.sort(function(a,b) {
			if("plugin-priority" in a.fields && "plugin-priority" in b.fields) {
				return a.fields["plugin-priority"] - b.fields["plugin-priority"];
			} else if("plugin-priority" in a.fields) {
				return -1;
			} else if("plugin-priority" in b.fields) {
				return +1;
			} else if(a.fields.title < b.fields.title) {
				return -1;
			} else if(a.fields.title === b.fields.title) {
				return 0;
			} else {
				return +1;
			}
		});
		// Now go through the plugins in ascending order and assign the shadows
		shadowTiddlers = Object.create(null);
		$tw.utils.each(pluginTiddlers,function(tiddler) {
			// Extract the constituent tiddlers
			if($tw.utils.hop(pluginInfo,tiddler.fields.title)) {
				$tw.utils.each(pluginInfo[tiddler.fields.title].tiddlers,function(constituentTiddler,constituentTitle) {
					// Save the tiddler object
					if(constituentTitle) {
						shadowTiddlers[constituentTitle] = {
							source: tiddler.fields.title,
							tiddler: new $tw.Tiddler(constituentTiddler,{title: constituentTitle})
						};
					}
				});
			}
		});
		shadowTiddlerTitles = null;
		this.clearCache(null);
		this.clearGlobalCache();
		$tw.utils.each(indexers,function(indexer) {
			indexer.rebuild();
		});
	};

	if(this.addIndexersToWiki) {
		this.addIndexersToWiki();
	}
};

// Dummy methods that will be filled in after boot
$tw.Wiki.prototype.clearCache =
$tw.Wiki.prototype.clearGlobalCache =
$tw.Wiki.prototype.enqueueTiddlerEvent = function() {};

// Add an array of tiddlers
$tw.Wiki.prototype.addTiddlers = function(tiddlers) {
	for(var t=0; t<tiddlers.length; t++) {
		this.addTiddler(tiddlers[t]);
	}
};

/*
Define all modules stored in ordinary tiddlers
*/
$tw.Wiki.prototype.defineTiddlerModules = function() {
	this.each(function(tiddler,title) {
		if(tiddler.hasField("module-type")) {
			switch (tiddler.fields.type) {
				case "application/javascript":
					// We only define modules that haven't already been defined, because in the browser modules in system tiddlers are defined in inline script
					if(!$tw.utils.hop($tw.modules.titles,tiddler.fields.title)) {
						$tw.modules.define(tiddler.fields.title,tiddler.fields["module-type"],tiddler.fields.text);
					}
					break;
				case "application/json":
					$tw.modules.define(tiddler.fields.title,tiddler.fields["module-type"],$tw.utils.parseJSONSafe(tiddler.fields.text));
					break;
				case "application/x-tiddler-dictionary":
					$tw.modules.define(tiddler.fields.title,tiddler.fields["module-type"],$tw.utils.parseFields(tiddler.fields.text));
					break;
			}
		}
	});
};

/*
Register all the module tiddlers that have a module type
*/
$tw.Wiki.prototype.defineShadowModules = function() {
	var self = this;
	this.eachShadow(function(tiddler,title) {
		// Don't define the module if it is overidden by an ordinary tiddler
		if(!self.tiddlerExists(title) && tiddler.hasField("module-type")) {
			// Define the module
			$tw.modules.define(tiddler.fields.title,tiddler.fields["module-type"],tiddler.fields.text);
		}
	});
};

/*
Enable safe mode by deleting any tiddlers that override a shadow tiddler
*/
$tw.Wiki.prototype.processSafeMode = function() {
	var self = this,
		overrides = [];
	// Find the overriding tiddlers
	this.each(function(tiddler,title) {
		if(self.isShadowTiddler(title)) {
			console.log(title);
			overrides.push(title);
		}
	});
	// Assemble a report tiddler
	var titleReportTiddler = "TiddlyWiki Safe Mode",
		report = [];
	report.push("TiddlyWiki has been started in [[safe mode|https://tiddlywiki.com/static/SafeMode.html]]. All plugins are temporarily disabled. Most customisations have been disabled by renaming the following tiddlers:")
	// Delete the overrides
	overrides.forEach(function(title) {
		var tiddler = self.getTiddler(title),
			newTitle = "SAFE: " + title;
		self.deleteTiddler(title);
		self.addTiddler(new $tw.Tiddler(tiddler, {title: newTitle}));
		report.push("* [[" + title + "|" + newTitle + "]]");
	});
	report.push()
	this.addTiddler(new $tw.Tiddler({title: titleReportTiddler, text: report.join("\n\n")}));
	// Set $:/DefaultTiddlers to point to our report
	this.addTiddler(new $tw.Tiddler({title: "$:/DefaultTiddlers", text: "[[" + titleReportTiddler + "]]"}));
};

/*
Extracts tiddlers from a typed block of text, specifying default field values
*/
$tw.Wiki.prototype.deserializeTiddlers = function(type,text,srcFields,options) {
	srcFields = srcFields || Object.create(null);
	options = options || {};
	var deserializer = $tw.Wiki.tiddlerDeserializerModules[options.deserializer],
		fields = Object.create(null);
	if(!deserializer) {
		deserializer = $tw.Wiki.tiddlerDeserializerModules[type];
	}
	if(!deserializer && $tw.utils.getFileExtensionInfo(type)) {
		// If we didn't find the serializer, try converting it from an extension to a content type
		type = $tw.utils.getFileExtensionInfo(type).type;
		deserializer = $tw.Wiki.tiddlerDeserializerModules[type];
	}
	if(!deserializer && $tw.config.contentTypeInfo[type]) {
		// see if this type has a different deserializer registered with it
		type = $tw.config.contentTypeInfo[type].deserializerType;
		deserializer = $tw.Wiki.tiddlerDeserializerModules[type];
	}
	if(!deserializer) {
		// If we still don't have a deserializer, treat it as plain text
		deserializer = $tw.Wiki.tiddlerDeserializerModules["text/plain"];
	}
	for(var f in srcFields) {
		fields[f] = srcFields[f];
	}
	if(deserializer) {
		return deserializer.call(this,text,fields,type);
	} else {
		// Return a raw tiddler for unknown types
		fields.text = text;
		return [fields];
	}
};

/*
Register the built in tiddler deserializer modules
*/
var deserializeHeaderComment = function(text,fields) {
		var headerCommentRegExp = new RegExp($tw.config.jsModuleHeaderRegExpString,"mg"),
			match = headerCommentRegExp.exec(text);
		fields.text = text;
		if(match) {
			fields = $tw.utils.parseFields(match[1].split(/\r?\n\r?\n/mg)[0],fields);
		}
		return [fields];
	};
$tw.modules.define("$:/boot/tiddlerdeserializer/js","tiddlerdeserializer",{
	"application/javascript": deserializeHeaderComment
});
$tw.modules.define("$:/boot/tiddlerdeserializer/css","tiddlerdeserializer",{
	"text/css": deserializeHeaderComment
});
$tw.modules.define("$:/boot/tiddlerdeserializer/tid","tiddlerdeserializer",{
	"application/x-tiddler": function(text,fields) {
		var split = text.split(/\r?\n\r?\n/mg);
		if(split.length >= 1) {
			fields = $tw.utils.parseFields(split[0],fields);
		}
		if(split.length >= 2) {
			fields.text = split.slice(1).join("\n\n");
		}
		return [fields];
	}
});
$tw.modules.define("$:/boot/tiddlerdeserializer/tids","tiddlerdeserializer",{
	"application/x-tiddlers": function(text,fields) {
		var titles = [],
			tiddlers = [],
			match = /\r?\n\r?\n/mg.exec(text);
		if(match) {
			fields = $tw.utils.parseFields(text.substr(0,match.index),fields);
			var lines = text.substr(match.index + match[0].length).split(/\r?\n/mg);
			for(var t=0; t<lines.length; t++) {
				var line = lines[t];
				if(line.charAt(0) !== "#") {
					var colonPos= line.indexOf(":");
					if(colonPos !== -1) {
						var tiddler = $tw.utils.extend(Object.create(null),fields);
						tiddler.title = (tiddler.title || "") + line.substr(0,colonPos).trim();
						if(titles.indexOf(tiddler.title) !== -1) {
							console.log("Warning: .multids file contains multiple definitions for " + tiddler.title);
						}
						titles.push(tiddler.title);
						tiddler.text = line.substr(colonPos + 2).trim();
						tiddlers.push(tiddler);
					}
				}
			}
		}
		return tiddlers;
	}
});
$tw.modules.define("$:/boot/tiddlerdeserializer/txt","tiddlerdeserializer",{
	"text/plain": function(text,fields,type) {
		fields.text = text;
		fields.type = type || "text/plain";
		return [fields];
	}
});
$tw.modules.define("$:/boot/tiddlerdeserializer/html","tiddlerdeserializer",{
	"text/html": function(text,fields) {
		fields.text = text;
		fields.type = "text/html";
		return [fields];
	}
});
$tw.modules.define("$:/boot/tiddlerdeserializer/json","tiddlerdeserializer",{
	"application/json": function(text,fields) {
		var isTiddlerValid = function(data) {
				// Not valid if it's not an object with a title property
				if(typeof(data) !== "object" || !$tw.utils.hop(data,"title")) {
					return false;
				}
				for(var f in data) {
					if($tw.utils.hop(data,f)) {
						// Check field name doesn't contain control characters
						if(typeof(data[f]) !== "string" || /[\x00-\x1F]/.test(f)) {
							return false;
						}
					}
				}
				return true;
			},
			isTiddlerArrayValid = function(data) {
				for(var t=0; t<data.length; t++) {
					if(!isTiddlerValid(data[t])) {
						return false;
					}
				}
				return true;
			},
			data = $tw.utils.parseJSONSafe(text);
		if($tw.utils.isArray(data) && isTiddlerArrayValid(data)) {
			return data;
		} else if(isTiddlerValid(data)) {
			return [data];
		} else {
			// Plain JSON file
			fields.text = text;
			fields.type = "application/json";
			return [fields];
		}
	}
});

/////////////////////////// Browser definitions

if($tw.browser && !$tw.node) {

/*
Decrypt any tiddlers stored within the element with the ID "encryptedArea". The function is asynchronous to allow the user to be prompted for a password
	callback: function to be called the decryption is complete
*/
$tw.boot.decryptEncryptedTiddlers = function(callback) {
	var encryptedArea = document.getElementById("encryptedStoreArea");
	if(encryptedArea) {
		var encryptedText = encryptedArea.innerHTML,
			prompt = "Enter a password to decrypt this TiddlyWiki";
		// Prompt for the password
		if($tw.utils.hop($tw.boot,"encryptionPrompts")) {
			prompt = $tw.boot.encryptionPrompts.decrypt;
		}
		$tw.passwordPrompt.createPrompt({
			serviceName: prompt,
			noUserName: true,
			submitText: "Decrypt",
			callback: function(data) {
				// Attempt to decrypt the tiddlers
				$tw.crypto.setPassword(data.password);
				var decryptedText = $tw.crypto.decrypt(encryptedText);
				if(decryptedText) {
					var json = $tw.utils.parseJSONSafe(decryptedText);
					for(var title in json) {
						$tw.preloadTiddler(json[title]);
					}
					// Call the callback
					callback();
					// Exit and remove the password prompt
					return true;
				} else {
					// We didn't decrypt everything, so continue to prompt for password
					return false;
				}
			}
		});
	} else {
		// Just invoke the callback straight away if there weren't any encrypted tiddlers
		callback();
	}
};

/*
Register a deserializer that can extract tiddlers from the DOM
*/
$tw.modules.define("$:/boot/tiddlerdeserializer/dom","tiddlerdeserializer",{
	"(DOM)": function(node) {
		var extractTextTiddlers = function(node) {
				var e = node.firstChild;
				while(e && e.nodeName.toLowerCase() !== "pre") {
					e = e.nextSibling;
				}
				var title = node.getAttribute ? node.getAttribute("title") : null;
				if(e && title) {
					var attrs = node.attributes,
						tiddler = {
							text: $tw.utils.htmlDecode(e.innerHTML)
						};
					for(var i=attrs.length-1; i >= 0; i--) {
						tiddler[attrs[i].name] = attrs[i].value;
					}
					return [tiddler];
				} else {
					return null;
				}
			},
			extractModuleTiddlers = function(node) {
				if(node.hasAttribute && node.hasAttribute("data-tiddler-title")) {
					var text = node.innerHTML,
						s = text.indexOf("{"),
						e = text.lastIndexOf("}");
					if(node.hasAttribute("data-module") && s !== -1 && e !== -1) {
						text = text.substring(s+1,e);
					}
					var fields = {text: text},
						attributes = node.attributes;
					for(var a=0; a<attributes.length; a++) {
						if(attributes[a].nodeName.substr(0,13) === "data-tiddler-") {
							fields[attributes[a].nodeName.substr(13)] = attributes[a].value;
						}
					}
					return [fields];
				} else {
					return null;
				}
			},
			t,result = [];
		if(node) {
			var type = (node.getAttribute && node.getAttribute("type")) || null;
			if(type) {
				// A new-style container with an explicit deserialization type
				result = $tw.wiki.deserializeTiddlers(type,node.textContent);
			} else {
				// An old-style container of classic DIV-based tiddlers
				for(t = 0; t < node.childNodes.length; t++) {
					var childNode = node.childNodes[t],
						tiddlers = extractTextTiddlers(childNode);
					tiddlers = tiddlers || extractModuleTiddlers(childNode);
					if(tiddlers) {
						result.push.apply(result,tiddlers);
					}
				}
			}
		}
		return result;
	}
});

$tw.loadTiddlersBrowser = function() {
	// In the browser, we load tiddlers from certain elements
	var containerSelectors = [
		// IDs for old-style v5.1.x tiddler stores
		"#libraryModules",
		"#modules",
		"#bootKernelPrefix",
		"#bootKernel",
		"#styleArea",
		"#storeArea",
		"#systemArea",
		// Classes for new-style v5.2.x JSON tiddler stores
		"script.tiddlywiki-tiddler-store"
	];
	for(var t=0; t<containerSelectors.length; t++) {
		var nodes = document.querySelectorAll(containerSelectors[t]);
		for(var n=0; n<nodes.length; n++) {
			$tw.wiki.addTiddlers($tw.wiki.deserializeTiddlers("(DOM)",nodes[n]));
		}
	}
};

} else {

/////////////////////////// Server definitions

/*
Get any encrypted tiddlers
*/
$tw.boot.decryptEncryptedTiddlers = function(callback) {
	// Storing encrypted tiddlers on the server isn't supported yet
	callback();
};

} // End of if($tw.browser && !$tw.node)

/////////////////////////// Node definitions

if($tw.node) {

/*
Load the tiddlers contained in a particular file (and optionally extract fields from the accompanying .meta file) returned as {filepath:,type:,tiddlers:[],hasMetaFile:}
*/
$tw.loadTiddlersFromFile = function(filepath,fields) {
	var ext = path.extname(filepath),
		extensionInfo = $tw.utils.getFileExtensionInfo(ext),
		type = extensionInfo ? extensionInfo.type : null,
		typeInfo = type ? $tw.config.contentTypeInfo[type] : null,
		data = fs.readFileSync(filepath,typeInfo ? typeInfo.encoding : "utf8"),
		tiddlers = $tw.wiki.deserializeTiddlers(ext,data,fields),
		metadata = $tw.loadMetadataForFile(filepath);
	if(metadata) {
		if(type === "application/json") {
			tiddlers = [{text: data, type: "application/json"}];
		}
		tiddlers = [$tw.utils.extend({},tiddlers[0],metadata)];
	}
	return {filepath: filepath, type: type, tiddlers: tiddlers, hasMetaFile: !!metadata};
};

/*
Load the metadata fields in the .meta file corresponding to a particular file
*/
$tw.loadMetadataForFile = function(filepath) {
	var metafilename = filepath + ".meta";
	if(fs.existsSync(metafilename)) {
		return $tw.utils.parseFields(fs.readFileSync(metafilename,"utf8") || "");
	} else {
		return null;
	}
};

/*
A default set of files for TiddlyWiki to ignore during load.
This matches what NPM ignores, and adds "*.meta" to ignore tiddler
metadata files.
*/
$tw.boot.excludeRegExp = /^\.DS_Store$|^.*\.meta$|^\..*\.swp$|^\._.*$|^\.git$|^\.hg$|^\.lock-wscript$|^\.svn$|^\.wafpickle-.*$|^CVS$|^npm-debug\.log$/;

/*
Load all the tiddlers recursively from a directory, including honouring `tiddlywiki.files` files for drawing in external files. Returns an array of {filepath:,type:,tiddlers: [{..fields...}],hasMetaFile:}. Note that no file information is returned for externally loaded tiddlers, just the `tiddlers` property.
*/
$tw.loadTiddlersFromPath = function(filepath,excludeRegExp) {
	excludeRegExp = excludeRegExp || $tw.boot.excludeRegExp;
	var tiddlers = [];
	if(fs.existsSync(filepath)) {
		var stat = fs.statSync(filepath);
		if(stat.isDirectory()) {
			var files = fs.readdirSync(filepath);
			// Look for a tiddlywiki.files file
			if(files.indexOf("tiddlywiki.files") !== -1) {
				Array.prototype.push.apply(tiddlers,$tw.loadTiddlersFromSpecification(filepath,excludeRegExp));
			} else {
				// If not, read all the files in the directory
				$tw.utils.each(files,function(file) {
					if(!excludeRegExp.test(file) && file !== "plugin.info") {
						tiddlers.push.apply(tiddlers,$tw.loadTiddlersFromPath(filepath + path.sep + file,excludeRegExp));
					}
				});
			}
		} else if(stat.isFile()) {
			tiddlers.push($tw.loadTiddlersFromFile(filepath,{title: filepath}));
		}
	}
	return tiddlers;
};

/*
Load all the tiddlers defined by a `tiddlywiki.files` specification file
filepath: pathname of the directory containing the specification file
*/
$tw.loadTiddlersFromSpecification = function(filepath,excludeRegExp) {
	var tiddlers = [];
	// Read the specification
	var filesInfo = $tw.utils.parseJSONSafe(fs.readFileSync(filepath + path.sep + "tiddlywiki.files","utf8"));
	// Helper to process a file
	var processFile = function(filename,isTiddlerFile,fields,isEditableFile) {
		var extInfo = $tw.config.fileExtensionInfo[path.extname(filename)],
			type = (extInfo || {}).type || fields.type || "text/plain",
			typeInfo = $tw.config.contentTypeInfo[type] || {},
			pathname = path.resolve(filepath,filename),
			text = fs.readFileSync(pathname,typeInfo.encoding || "utf8"),
			metadata = $tw.loadMetadataForFile(pathname) || {},
			fileTiddlers;
		if(isTiddlerFile) {
			fileTiddlers = $tw.wiki.deserializeTiddlers(path.extname(pathname),text,metadata) || [];
		} else {
			fileTiddlers =  [$tw.utils.extend({text: text},metadata)];
		}
		var combinedFields = $tw.utils.extend({},fields,metadata);
		$tw.utils.each(fileTiddlers,function(tiddler) {
			$tw.utils.each(combinedFields,function(fieldInfo,name) {
				if(typeof fieldInfo === "string" || $tw.utils.isArray(fieldInfo)) {
					tiddler[name] = fieldInfo;
				} else {
					var value = tiddler[name];
					switch(fieldInfo.source) {
						case "filename":
							value = path.basename(filename);
							break;
						case "filename-uri-decoded":
							value = $tw.utils.decodeURIComponentSafe(path.basename(filename));
							break;
						case "basename":
							value = path.basename(filename,path.extname(filename));
							break;
						case "basename-uri-decoded":
							value = $tw.utils.decodeURIComponentSafe(path.basename(filename,path.extname(filename)));
							break;
						case "extname":
							value = path.extname(filename);
							break;
						case "created":
							value = new Date(fs.statSync(pathname).birthtime);
							break;
						case "modified":
							value = new Date(fs.statSync(pathname).mtime);
							break;
					}
					if(fieldInfo.prefix) {
						value = fieldInfo.prefix + value;
					}
					if(fieldInfo.suffix) {
						value = value + fieldInfo.suffix;
					}
					tiddler[name] = value;
				}
			});
		});
		if(isEditableFile) {
			tiddlers.push({filepath: pathname, hasMetaFile: !!metadata && !isTiddlerFile, isEditableFile: true, tiddlers: fileTiddlers});
		} else {
			tiddlers.push({tiddlers: fileTiddlers});
		}
	};
	// Helper to recursively search subdirectories
	var getAllFiles = function(dirPath, recurse, arrayOfFiles) {
		recurse = recurse || false;
		arrayOfFiles = arrayOfFiles || [];
		var files = fs.readdirSync(dirPath);
		files.forEach(function(file) {
			if (recurse && fs.statSync(dirPath + path.sep + file).isDirectory()) {
				arrayOfFiles = getAllFiles(dirPath + path.sep + file, recurse, arrayOfFiles);
			} else if(fs.statSync(dirPath + path.sep + file).isFile()){
				arrayOfFiles.push(path.join(dirPath, path.sep, file));
			}
		});
		return arrayOfFiles;
	}
	// Process the listed tiddlers
	$tw.utils.each(filesInfo.tiddlers,function(tidInfo) {
		if(tidInfo.prefix && tidInfo.suffix) {
			tidInfo.fields.text = {prefix: tidInfo.prefix,suffix: tidInfo.suffix};
		} else if(tidInfo.prefix) {
			tidInfo.fields.text = {prefix: tidInfo.prefix};
		} else if(tidInfo.suffix) {
			tidInfo.fields.text = {suffix: tidInfo.suffix};
		}
		processFile(tidInfo.file,tidInfo.isTiddlerFile,tidInfo.fields);
	});
	// Process any listed directories
	$tw.utils.each(filesInfo.directories,function(dirSpec) {
		// Read literal directories directly
		if(typeof dirSpec === "string") {
			var pathname = path.resolve(filepath,dirSpec);
			if(fs.existsSync(pathname) && fs.statSync(pathname).isDirectory()) {
				tiddlers.push.apply(tiddlers,$tw.loadTiddlersFromPath(pathname,excludeRegExp));
			}
		} else {
			// Process directory specifier
			var dirPath = path.resolve(filepath,dirSpec.path);
			if(fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory()) {
				var	files = getAllFiles(dirPath, dirSpec.searchSubdirectories),
					fileRegExp = new RegExp(dirSpec.filesRegExp || "^.*$"),
					metaRegExp = /^.*\.meta$/;
				for(var t=0; t<files.length; t++) {
					var thisPath = path.relative(filepath, files[t]),
					filename = path.basename(thisPath);
					if(filename !== "tiddlywiki.files" && !metaRegExp.test(filename) && fileRegExp.test(filename)) {
						processFile(thisPath,dirSpec.isTiddlerFile,dirSpec.fields,dirSpec.isEditableFile);
					}
				}
			} else {
				console.log("Warning: a directory in a tiddlywiki.files file does not exist.");
				console.log("dirPath: " + dirPath);
				console.log("tiddlywiki.files location: " + filepath);
			}
		}
	});
	return tiddlers;
};

/*
Load the tiddlers from a plugin folder, and package them up into a proper JSON plugin tiddler
*/
$tw.loadPluginFolder = function(filepath,excludeRegExp) {
	excludeRegExp = excludeRegExp || $tw.boot.excludeRegExp;
	var infoPath = filepath + path.sep + "plugin.info";
	if(fs.existsSync(filepath) && fs.statSync(filepath).isDirectory()) {
		// Read the plugin information
		if(!fs.existsSync(infoPath) || !fs.statSync(infoPath).isFile()) {
			console.log("Warning: missing plugin.info file in " + filepath);
			return null;
		}
		var pluginInfo = $tw.utils.parseJSONSafe(fs.readFileSync(infoPath,"utf8"));
		// Read the plugin files
		var pluginFiles = $tw.loadTiddlersFromPath(filepath,excludeRegExp);
		// Save the plugin tiddlers into the plugin info
		pluginInfo.tiddlers = pluginInfo.tiddlers || Object.create(null);
		for(var f=0; f<pluginFiles.length; f++) {
			var tiddlers = pluginFiles[f].tiddlers;
			for(var t=0; t<tiddlers.length; t++) {
				var tiddler= tiddlers[t];
				if(tiddler.title) {
					pluginInfo.tiddlers[tiddler.title] = tiddler;
				}
			}
		}
		// Give the plugin the same version number as the core if it doesn't have one
		if(!("version" in pluginInfo)) {
			pluginInfo.version = $tw.packageInfo.version;
		}
		// Use "plugin" as the plugin-type if we don't have one
		if(!("plugin-type" in pluginInfo)) {
			pluginInfo["plugin-type"] = "plugin";
		}
		pluginInfo.dependents = pluginInfo.dependents || [];
		pluginInfo.type = "application/json";
		// Set plugin text
		pluginInfo.text = JSON.stringify({tiddlers: pluginInfo.tiddlers});
		delete pluginInfo.tiddlers;
		// Deserialise array fields (currently required for the dependents field)
		for(var field in pluginInfo) {
			if($tw.utils.isArray(pluginInfo[field])) {
				pluginInfo[field] = $tw.utils.stringifyList(pluginInfo[field]);
			}
		}
		return pluginInfo;
	} else {
			return null;
	}
};

/*
name: Name of the plugin to find
paths: array of file paths to search for it
Returns the path of the plugin folder
*/
$tw.findLibraryItem = function(name,paths) {
	var pathIndex = 0;
	do {
		var pluginPath = path.resolve(paths[pathIndex],"./" + name)
		if(fs.existsSync(pluginPath) && fs.statSync(pluginPath).isDirectory()) {
			return pluginPath;
		}
	} while(++pathIndex < paths.length);
	return null;
};

/*
name: Name of the plugin to load
paths: array of file paths to search for it
*/
$tw.loadPlugin = function(name,paths) {
	var pluginPath = $tw.findLibraryItem(name,paths);
	if(pluginPath) {
		var pluginFields = $tw.loadPluginFolder(pluginPath);
		if(pluginFields) {
			$tw.wiki.addTiddler(pluginFields);
			return;
		}
	}
	console.log("Warning: Cannot find plugin '" + name + "'");
};

/*
libraryPath: Path of library folder for these plugins (relative to core path)
envVar: Environment variable name for these plugins
Returns an array of search paths
*/
$tw.getLibraryItemSearchPaths = function(libraryPath,envVar) {
	var pluginPaths = [path.resolve($tw.boot.corePath,libraryPath)],
		env = process.env[envVar];
	if(env) {
		env.split(path.delimiter).map(function(item) {
			if(item) {
				pluginPaths.push(item);
			}
		});
	}
	return pluginPaths;
};

/*
plugins: Array of names of plugins (eg, "tiddlywiki/filesystemadaptor")
libraryPath: Path of library folder for these plugins (relative to core path)
envVar: Environment variable name for these plugins
*/
$tw.loadPlugins = function(plugins,libraryPath,envVar) {
	if(plugins) {
		var pluginPaths = $tw.getLibraryItemSearchPaths(libraryPath,envVar);
		for(var t=0; t<plugins.length; t++) {
			$tw.loadPlugin(plugins[t],pluginPaths);
		}
	}
};

/*
path: path of wiki directory
options:
	parentPaths: array of parent paths that we mustn't recurse into
	readOnly: true if the tiddler file paths should not be retained
*/
$tw.loadWikiTiddlers = function(wikiPath,options) {
	options = options || {};
	var parentPaths = options.parentPaths || [],
		wikiInfoPath = path.resolve(wikiPath,$tw.config.wikiInfo),
		wikiInfo,
		pluginFields;
	// Bail if we don't have a wiki info file
	if(fs.existsSync(wikiInfoPath)) {
		wikiInfo = $tw.utils.parseJSONSafe(fs.readFileSync(wikiInfoPath,"utf8"));
	} else {
		return null;
	}
	// Save the path to the tiddlers folder for the filesystemadaptor
	var config = wikiInfo.config || {};
	if($tw.boot.wikiPath == wikiPath) {
		$tw.boot.wikiTiddlersPath = path.resolve($tw.boot.wikiPath,config["default-tiddler-location"] || $tw.config.wikiTiddlersSubDir);
	}
	// Load any parent wikis
	if(wikiInfo.includeWikis) {
		parentPaths = parentPaths.slice(0);
		parentPaths.push(wikiPath);
		$tw.utils.each(wikiInfo.includeWikis,function(info) {
			if(typeof info === "string") {
				info = {path: info};
			}
			var resolvedIncludedWikiPath = path.resolve(wikiPath,info.path);
			if(parentPaths.indexOf(resolvedIncludedWikiPath) === -1) {
				var subWikiInfo = $tw.loadWikiTiddlers(resolvedIncludedWikiPath,{
					parentPaths: parentPaths,
					readOnly: info["read-only"]
				});
				// Merge the build targets
				wikiInfo.build = $tw.utils.extend([],subWikiInfo.build,wikiInfo.build);
			} else {
				$tw.utils.error("Cannot recursively include wiki " + resolvedIncludedWikiPath);
			}
		});
	}
	// Load any plugins, themes and languages listed in the wiki info file
	$tw.loadPlugins(wikiInfo.plugins,$tw.config.pluginsPath,$tw.config.pluginsEnvVar);
	$tw.loadPlugins(wikiInfo.themes,$tw.config.themesPath,$tw.config.themesEnvVar);
	$tw.loadPlugins(wikiInfo.languages,$tw.config.languagesPath,$tw.config.languagesEnvVar);
	// Load the wiki files, registering them as writable
	var resolvedWikiPath = path.resolve(wikiPath,$tw.config.wikiTiddlersSubDir);
	$tw.utils.each($tw.loadTiddlersFromPath(resolvedWikiPath),function(tiddlerFile) {
		if(!options.readOnly && tiddlerFile.filepath) {
			$tw.utils.each(tiddlerFile.tiddlers,function(tiddler) {
				$tw.boot.files[tiddler.title] = {
					filepath: tiddlerFile.filepath,
					type: tiddlerFile.type,
					hasMetaFile: tiddlerFile.hasMetaFile,
					isEditableFile: config["retain-original-tiddler-path"] || tiddlerFile.isEditableFile || tiddlerFile.filepath.indexOf($tw.boot.wikiTiddlersPath) !== 0
				};
			});
		}
		$tw.wiki.addTiddlers(tiddlerFile.tiddlers);
	});
	if ($tw.boot.wikiPath == wikiPath) {
		// Save the original tiddler file locations if requested
		var output = {}, relativePath, fileInfo;
		for(var title in $tw.boot.files) {
			fileInfo = $tw.boot.files[title];
			if(fileInfo.isEditableFile) {
				relativePath = path.relative($tw.boot.wikiTiddlersPath,fileInfo.filepath);
				fileInfo.originalpath = relativePath;
				output[title] =
					path.sep === "/" ?
					relativePath :
					relativePath.split(path.sep).join("/");
			}
		}
		if(Object.keys(output).length > 0){
			$tw.wiki.addTiddler({title: "$:/config/OriginalTiddlerPaths", type: "application/json", text: JSON.stringify(output)});
		}
	}
	// Load any plugins within the wiki folder
	var wikiPluginsPath = path.resolve(wikiPath,$tw.config.wikiPluginsSubDir);
	if(fs.existsSync(wikiPluginsPath)) {
		var pluginFolders = fs.readdirSync(wikiPluginsPath);
		for(var t=0; t<pluginFolders.length; t++) {
			pluginFields = $tw.loadPluginFolder(path.resolve(wikiPluginsPath,"./" + pluginFolders[t]));
			if(pluginFields) {
				$tw.wiki.addTiddler(pluginFields);
			}
		}
	}
	// Load any themes within the wiki folder
	var wikiThemesPath = path.resolve(wikiPath,$tw.config.wikiThemesSubDir);
	if(fs.existsSync(wikiThemesPath)) {
		var themeFolders = fs.readdirSync(wikiThemesPath);
		for(var t=0; t<themeFolders.length; t++) {
			pluginFields = $tw.loadPluginFolder(path.resolve(wikiThemesPath,"./" + themeFolders[t]));
			if(pluginFields) {
				$tw.wiki.addTiddler(pluginFields);
			}
		}
	}
	// Load any languages within the wiki folder
	var wikiLanguagesPath = path.resolve(wikiPath,$tw.config.wikiLanguagesSubDir);
	if(fs.existsSync(wikiLanguagesPath)) {
		var languageFolders = fs.readdirSync(wikiLanguagesPath);
		for(var t=0; t<languageFolders.length; t++) {
			pluginFields = $tw.loadPluginFolder(path.resolve(wikiLanguagesPath,"./" + languageFolders[t]));
			if(pluginFields) {
				$tw.wiki.addTiddler(pluginFields);
			}
		}
	}
	return wikiInfo;
};

$tw.loadTiddlersNode = function() {
	// Load the boot tiddlers
	$tw.utils.each($tw.loadTiddlersFromPath($tw.boot.bootPath),function(tiddlerFile) {
		$tw.wiki.addTiddlers(tiddlerFile.tiddlers);
	});
	// Load the core tiddlers
	$tw.wiki.addTiddler($tw.loadPluginFolder($tw.boot.corePath));
	// Load any extra plugins
	$tw.utils.each($tw.boot.extraPlugins,function(name) {
		if(name.charAt(0) === "+") { // Relative path to plugin
			var pluginFields = $tw.loadPluginFolder(name.substring(1));
			if(pluginFields) {
				$tw.wiki.addTiddler(pluginFields);
			}
		} else {
			var parts = name.split("/"),
				type = parts[0];
			if(parts.length  === 3 && ["plugins","themes","languages"].indexOf(type) !== -1) {
				$tw.loadPlugins([parts[1] + "/" + parts[2]],$tw.config[type + "Path"],$tw.config[type + "EnvVar"]);
			}
		}
	});
	// Load the tiddlers from the wiki directory
	if($tw.boot.wikiPath) {
		$tw.boot.wikiInfo = $tw.loadWikiTiddlers($tw.boot.wikiPath);
	}
};

// End of if($tw.node)
}

/////////////////////////// Main startup function called once tiddlers have been decrypted

/*
Startup TiddlyWiki
*/
$tw.boot.initStartup = function(options) {
	// Get the URL hash and check for safe mode
	$tw.locationHash = "#";
	if($tw.browser && !$tw.node) {
		if(location.hash === "#:safe") {
			$tw.safeMode = true;
		} else {
			$tw.locationHash = $tw.utils.getLocationHash();
		}
	}
	// Initialise some more $tw properties
	$tw.utils.deepDefaults($tw,{
		modules: { // Information about each module
			titles: Object.create(null), // hashmap by module title of {fn:, exports:, moduleType:}
			types: {} // hashmap by module type of hashmap of exports
		},
		config: { // Configuration overridables
			pluginsPath: "../plugins/",
			themesPath: "../themes/",
			languagesPath: "../languages/",
			editionsPath: "../editions/",
			wikiInfo: "./tiddlywiki.info",
			wikiPluginsSubDir: "./plugins",
			wikiThemesSubDir: "./themes",
			wikiLanguagesSubDir: "./languages",
			wikiTiddlersSubDir: "./tiddlers",
			wikiOutputSubDir: "./output",
			jsModuleHeaderRegExpString: "^\\/\\*\\\\(?:\\r?\\n)((?:^[^\\r\\n]*(?:\\r?\\n))+?)(^\\\\\\*\\/$(?:\\r?\\n)?)",
			fileExtensionInfo: Object.create(null), // Map file extension to {type:}
			contentTypeInfo: Object.create(null), // Map type to {encoding:,extension:}
			pluginsEnvVar: "TIDDLYWIKI_PLUGIN_PATH",
			themesEnvVar: "TIDDLYWIKI_THEME_PATH",
			languagesEnvVar: "TIDDLYWIKI_LANGUAGE_PATH",
			editionsEnvVar: "TIDDLYWIKI_EDITION_PATH"
		},
		log: {}, // Log flags
		unloadTasks: []
	});
	if(!$tw.boot.tasks.readBrowserTiddlers) {
		// For writable tiddler files, a hashmap of title to {filepath:,type:,hasMetaFile:}
		$tw.boot.files = Object.create(null);
		// System paths and filenames
		$tw.boot.bootPath = options.bootPath || path.dirname(module.filename);
		$tw.boot.corePath = path.resolve($tw.boot.bootPath,"../core");
		// If there's no arguments then default to `--help`
		if($tw.boot.argv.length === 0) {
			$tw.boot.argv = ["--help"];
		}
		// Parse any extra plugin references
		$tw.boot.extraPlugins = $tw.boot.extraPlugins || [];
		while($tw.boot.argv[0] && $tw.boot.argv[0].indexOf("+") === 0) {
			$tw.boot.extraPlugins.push($tw.boot.argv[0].substring(1));
			$tw.boot.argv.splice(0,1);
		}
		// If the first command line argument doesn't start with `--` then we
		// interpret it as the path to the wiki folder, which will otherwise default
		// to the current folder
		if($tw.boot.argv[0] && $tw.boot.argv[0].indexOf("--") !== 0) {
			$tw.boot.wikiPath = $tw.boot.argv[0];
			$tw.boot.argv = $tw.boot.argv.slice(1);
		} else {
			$tw.boot.wikiPath = process.cwd();
		}
		// Read package info
		$tw.packageInfo = $tw.packageInfo || require("../package.json");
		// Check node version number
		if(!$tw.utils.checkVersions(process.version.substr(1),$tw.packageInfo.engines.node.substr(2))) {
			$tw.utils.error("TiddlyWiki5 requires node.js version " + $tw.packageInfo.engines.node);
		}
	}
	// Add file extension information
	$tw.utils.registerFileType("text/vnd.tiddlywiki","utf8",".tid");
	$tw.utils.registerFileType("application/x-tiddler","utf8",".tid");
	$tw.utils.registerFileType("application/x-tiddlers","utf8",".multids");
	$tw.utils.registerFileType("application/x-tiddler-html-div","utf8",".tiddler");
	$tw.utils.registerFileType("text/vnd.tiddlywiki2-recipe","utf8",".recipe");
	$tw.utils.registerFileType("text/plain","utf8",".txt");
	$tw.utils.registerFileType("text/css","utf8",".css");
	$tw.utils.registerFileType("text/html","utf8",[".html",".htm"]);
	$tw.utils.registerFileType("application/hta","utf16le",".hta",{deserializerType:"text/html"});
	$tw.utils.registerFileType("application/javascript","utf8",".js");
	$tw.utils.registerFileType("application/json","utf8",".json");
	$tw.utils.registerFileType("application/pdf","base64",".pdf",{flags:["image"]});
	$tw.utils.registerFileType("application/zip","base64",".zip");
	$tw.utils.registerFileType("application/x-zip-compressed","base64",".zip");
	$tw.utils.registerFileType("image/jpeg","base64",[".jpg",".jpeg"],{flags:["image"]});
	$tw.utils.registerFileType("image/jpg","base64",[".jpg",".jpeg"],{flags:["image"]});
	$tw.utils.registerFileType("image/png","base64",".png",{flags:["image"]});
	$tw.utils.registerFileType("image/gif","base64",".gif",{flags:["image"]});
	$tw.utils.registerFileType("image/webp","base64",".webp",{flags:["image"]});
	$tw.utils.registerFileType("image/heic","base64",".heic",{flags:["image"]});
	$tw.utils.registerFileType("image/heif","base64",".heif",{flags:["image"]});
	$tw.utils.registerFileType("image/svg+xml","utf8",".svg",{flags:["image"]});
	$tw.utils.registerFileType("image/vnd.microsoft.icon","base64",".ico",{flags:["image"]});
	$tw.utils.registerFileType("image/x-icon","base64",".ico",{flags:["image"]});
	$tw.utils.registerFileType("application/font-woff","base64",".woff");
	$tw.utils.registerFileType("application/x-font-ttf","base64",".woff");
	$tw.utils.registerFileType("application/font-woff2","base64",".woff2");
	$tw.utils.registerFileType("audio/ogg","base64",".ogg");
	$tw.utils.registerFileType("video/ogg","base64",[".ogm",".ogv",".ogg"]);
	$tw.utils.registerFileType("video/webm","base64",".webm");
	$tw.utils.registerFileType("video/mp4","base64",".mp4");
	$tw.utils.registerFileType("audio/mp3","base64",".mp3");
	$tw.utils.registerFileType("audio/mp4","base64",[".mp4",".m4a"]);
	$tw.utils.registerFileType("text/markdown","utf8",[".md",".markdown"],{deserializerType:"text/x-markdown"});
	$tw.utils.registerFileType("text/x-markdown","utf8",[".md",".markdown"]);
	$tw.utils.registerFileType("application/enex+xml","utf8",".enex");
	$tw.utils.registerFileType("application/vnd.openxmlformats-officedocument.wordprocessingml.document","base64",".docx");
	$tw.utils.registerFileType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","base64",".xlsx");
	$tw.utils.registerFileType("application/vnd.openxmlformats-officedocument.presentationml.presentation","base64",".pptx");
	$tw.utils.registerFileType("text/x-bibtex","utf8",".bib",{deserializerType:"application/x-bibtex"});
	$tw.utils.registerFileType("application/x-bibtex","utf8",".bib");
	$tw.utils.registerFileType("application/epub+zip","base64",".epub");
	$tw.utils.registerFileType("application/octet-stream","base64",".octet-stream");
	// Create the wiki store for the app
	$tw.wiki = new $tw.Wiki();
	// Install built in tiddler fields modules
	$tw.Tiddler.fieldModules = $tw.modules.getModulesByTypeAsHashmap("tiddlerfield");
	// Install the tiddler deserializer modules
	$tw.Wiki.tiddlerDeserializerModules = Object.create(null);
	$tw.modules.applyMethods("tiddlerdeserializer",$tw.Wiki.tiddlerDeserializerModules);
	// Call unload handlers in the browser
	if($tw.browser) {
		window.onbeforeunload = function(event) {
			event = event || {};
			var result;
			$tw.utils.each($tw.unloadTasks,function(task) {
				var r = task(event);
				if(r) {
					result = r;
				}
			});
			return result;
		}
	}
};
$tw.boot.loadStartup = function(options){

	// Load tiddlers
	if($tw.boot.tasks.readBrowserTiddlers) {
		$tw.loadTiddlersBrowser();
	} else {
		$tw.loadTiddlersNode();
	}
	// Load any preloaded tiddlers
	if($tw.preloadTiddlers) {
		$tw.wiki.addTiddlers($tw.preloadTiddlers);
	}
	// Give hooks a chance to modify the store
	$tw.hooks.invokeHook("th-boot-tiddlers-loaded");
}
$tw.boot.execStartup = function(options){
	// Unpack plugin tiddlers
	$tw.wiki.readPluginInfo();
	$tw.wiki.registerPluginTiddlers("plugin",$tw.safeMode ? ["$:/core"] : undefined);
	$tw.wiki.unpackPluginTiddlers();
	// Process "safe mode"
	if($tw.safeMode) {
		$tw.wiki.processSafeMode();
	}
	// Register typed modules from the tiddlers we've just loaded
	$tw.wiki.defineTiddlerModules();
	// And any modules within plugins
	$tw.wiki.defineShadowModules();
	// Make sure the crypto state tiddler is up to date
	if($tw.crypto) {
		$tw.crypto.updateCryptoStateTiddler();
	}
	// Gather up any startup modules
	$tw.boot.remainingStartupModules = []; // Array of startup modules
	$tw.modules.forEachModuleOfType("startup",function(title,module) {
		if(module.startup) {
			$tw.boot.remainingStartupModules.push(module);
		}
	});
	// Keep track of the startup tasks that have been executed
	$tw.boot.executedStartupModules = Object.create(null);
	$tw.boot.disabledStartupModules = $tw.boot.disabledStartupModules || [];
	// Repeatedly execute the next eligible task
	$tw.boot.executeNextStartupTask(options.callback);
}
/*
Startup TiddlyWiki
*/
$tw.boot.startup = function(options) {
	options = options || {};
	// Get the URL hash and check for safe mode
	$tw.boot.initStartup(options);
	$tw.boot.loadStartup(options);
	$tw.boot.execStartup(options);
};

/*
Add another unload task
*/
$tw.addUnloadTask = function(task) {
	if($tw.unloadTasks.indexOf(task) === -1) {
		$tw.unloadTasks.push(task);
	}
}

/*
Execute the remaining eligible startup tasks
*/
$tw.boot.executeNextStartupTask = function(callback) {
	// Find the next eligible task
	var taskIndex = 0, task,
		asyncTaskCallback = function() {
			if(task.name) {
				$tw.boot.executedStartupModules[task.name] = true;
			}
			return $tw.boot.executeNextStartupTask(callback);
		};
	while(taskIndex < $tw.boot.remainingStartupModules.length) {
		task = $tw.boot.remainingStartupModules[taskIndex];
		if($tw.boot.isStartupTaskEligible(task)) {
			// Remove this task from the list
			$tw.boot.remainingStartupModules.splice(taskIndex,1);
			// Assemble log message
			var s = ["Startup task:",task.name];
			if(task.platforms) {
				s.push("platforms:",task.platforms.join(","));
			}
			if(task.after) {
				s.push("after:",task.after.join(","));
			}
			if(task.before) {
				s.push("before:",task.before.join(","));
			}
			$tw.boot.log(s.join(" "));
			// Execute task
			if(!$tw.utils.hop(task,"synchronous") || task.synchronous) {
				task.startup();
				if(task.name) {
					$tw.boot.executedStartupModules[task.name] = true;
				}
				return $tw.boot.executeNextStartupTask(callback);
			} else {
				task.startup(asyncTaskCallback);
				return true;
			}
		}
		taskIndex++;
	}
	if(typeof callback === 'function') {
		callback();
	}
	return false;
};

/*
Returns true if we are running on one of the platforms specified in taskModule's
`platforms` array; or if `platforms` property is not defined.
*/
$tw.boot.doesTaskMatchPlatform = function(taskModule) {
	var platforms = taskModule.platforms;
	if(platforms) {
		for(var t=0; t<platforms.length; t++) {
			switch (platforms[t]) {
				case "browser":
					if ($tw.browser) {
						return true;
					}
					break;
				case "node":
					if ($tw.node) {
						return true;
					}
					break;
				default:
					$tw.utils.error("Module " + taskModule.name + ": '" + platforms[t] + "' in export.platforms invalid");
			}
		}
		return false;
	}
	return true;
};

$tw.boot.isStartupTaskEligible = function(taskModule) {
	var t;
	// Check that the platform is correct
	if(!$tw.boot.doesTaskMatchPlatform(taskModule)) {
		return false;
	}
	var name = taskModule.name,
		remaining = $tw.boot.remainingStartupModules;
	if(name) {
		// Fail if this module is disabled
		if($tw.boot.disabledStartupModules.indexOf(name) !== -1) {
			return false;
		}
		// Check that no other outstanding tasks must be executed before this one
		for(t=0; t<remaining.length; t++) {
			var task = remaining[t];
			if(task.before && task.before.indexOf(name) !== -1) {
				if($tw.boot.doesTaskMatchPlatform(task) || (task.name && $tw.boot.disabledStartupModules.indexOf(name) !== -1)) {
					return false;
				}
			}
		}
	}
	// Check that all of the tasks that we must be performed after has been done
	var after = taskModule.after;
	if(after) {
		for(t=0; t<after.length; t++) {
			if(!$tw.boot.executedStartupModules[after[t]]) {
				return false;
			}
		}
	}
	return true;
};

/*
Global Hooks mechanism which allows plugins to modify default functionality
*/
$tw.hooks = $tw.hooks || { names: {}};

/*
Add hooks to the  hashmap
*/
$tw.hooks.addHook = function(hookName,definition) {
	if($tw.utils.hop($tw.hooks.names,hookName)) {
		$tw.hooks.names[hookName].push(definition);
	}
	else {
		$tw.hooks.names[hookName] = [definition];
	}
};

/*
Invoke the hook by key
*/
$tw.hooks.invokeHook = function(hookName /*, value,... */) {
	var args = Array.prototype.slice.call(arguments,1);
	if($tw.utils.hop($tw.hooks.names,hookName)) {
		for (var i = 0; i < $tw.hooks.names[hookName].length; i++) {
			args[0] = $tw.hooks.names[hookName][i].apply(null,args);
		}
	}
	return args[0];
};

/////////////////////////// Main boot function to decrypt tiddlers and then startup

$tw.boot.boot = function(callback) {
	// Initialise crypto object
	$tw.crypto = new $tw.utils.Crypto();
	// Initialise password prompter
	if($tw.browser && !$tw.node) {
		$tw.passwordPrompt = new $tw.utils.PasswordPrompt();
	}
	// Preload any encrypted tiddlers
	$tw.boot.decryptEncryptedTiddlers(function() {
		// Startup
		$tw.boot.startup({callback: callback});
	});
};

/////////////////////////// Autoboot in the browser

if($tw.browser && !$tw.boot.suppressBoot) {
	$tw.boot.boot();
}

return $tw;

});

if(typeof(exports) !== "undefined") {
	exports.TiddlyWiki = _boot;
} else {
	_boot(window.$tw);
}
//# sourceURL=$:/boot/boot.js
</script>
</div>
<!--~~ Raw markup for the bottom of the body section ~~-->

</body>
</html>
